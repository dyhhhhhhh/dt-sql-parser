// Generated from dt-sql-parser/src/grammar/starrocks/StarRocksSqlParser.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { NotNull } from "antlr4ts/Decorators";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Override } from "antlr4ts/Decorators";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { ParseTreeListener } from "antlr4ts/tree/ParseTreeListener";
import { ParseTreeVisitor } from "antlr4ts/tree/ParseTreeVisitor";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { RuleContext } from "antlr4ts/RuleContext";
//import { RuleVersion } from "antlr4ts/RuleVersion";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";

import { StarRocksSqlParserListener } from "./StarRocksSqlParserListener";
import { StarRocksSqlParserVisitor } from "./StarRocksSqlParserVisitor";


export class StarRocksSqlParser extends Parser {
	public static readonly CONCAT = 1;
	public static readonly ACTIVE = 2;
	public static readonly ACCESS = 3;
	public static readonly ADD = 4;
	public static readonly ADMIN = 5;
	public static readonly AFTER = 6;
	public static readonly AGGREGATE = 7;
	public static readonly ALL = 8;
	public static readonly ALTER = 9;
	public static readonly ANALYZE = 10;
	public static readonly AND = 11;
	public static readonly ANTI = 12;
	public static readonly APPLY = 13;
	public static readonly ARRAY = 14;
	public static readonly ARRAY_AGG = 15;
	public static readonly AS = 16;
	public static readonly ASC = 17;
	public static readonly ASYNC = 18;
	public static readonly AUTHORS = 19;
	public static readonly AUTHENTICATION = 20;
	public static readonly AUTO_INCREMENT = 21;
	public static readonly AVG = 22;
	public static readonly BACKEND = 23;
	public static readonly BACKENDS = 24;
	public static readonly BACKUP = 25;
	public static readonly BASE = 26;
	public static readonly BEGIN = 27;
	public static readonly BETWEEN = 28;
	public static readonly BIGINT = 29;
	public static readonly BINARY = 30;
	public static readonly BITMAP = 31;
	public static readonly BITMAP_UNION = 32;
	public static readonly BLACKLIST = 33;
	public static readonly BODY = 34;
	public static readonly BOOLEAN = 35;
	public static readonly BOTH = 36;
	public static readonly BROKER = 37;
	public static readonly BUCKETS = 38;
	public static readonly BUILTIN = 39;
	public static readonly BY = 40;
	public static readonly CANCEL = 41;
	public static readonly CASE = 42;
	public static readonly CAST = 43;
	public static readonly CATALOG = 44;
	public static readonly CATALOGS = 45;
	public static readonly CEIL = 46;
	public static readonly CHAIN = 47;
	public static readonly CHAR = 48;
	public static readonly CHARACTER = 49;
	public static readonly CHARSET = 50;
	public static readonly CHECK = 51;
	public static readonly CLEAN = 52;
	public static readonly CLUSTER = 53;
	public static readonly CLUSTERS = 54;
	public static readonly COLLATE = 55;
	public static readonly COLLATION = 56;
	public static readonly COLUMN = 57;
	public static readonly COLUMNS = 58;
	public static readonly COMMENT = 59;
	public static readonly COMMIT = 60;
	public static readonly COMMITTED = 61;
	public static readonly COMPACT = 62;
	public static readonly COMPACTION = 63;
	public static readonly COMPUTE = 64;
	public static readonly CONFIG = 65;
	public static readonly CONNECTION = 66;
	public static readonly CONSISTENT = 67;
	public static readonly CONVERT = 68;
	public static readonly COSTS = 69;
	public static readonly COUNT = 70;
	public static readonly CREATE = 71;
	public static readonly CROSS = 72;
	public static readonly CUBE = 73;
	public static readonly CUME_DIST = 74;
	public static readonly CUMULATIVE = 75;
	public static readonly CURRENT = 76;
	public static readonly CURRENT_DATE = 77;
	public static readonly CURRENT_ROLE = 78;
	public static readonly CURRENT_TIME = 79;
	public static readonly CURRENT_TIMESTAMP = 80;
	public static readonly CURRENT_USER = 81;
	public static readonly DATA = 82;
	public static readonly DATABASE = 83;
	public static readonly DATABASES = 84;
	public static readonly DATE = 85;
	public static readonly DATETIME = 86;
	public static readonly DAY = 87;
	public static readonly DECIMAL = 88;
	public static readonly DECIMALV2 = 89;
	public static readonly DECIMAL32 = 90;
	public static readonly DECIMAL64 = 91;
	public static readonly DECIMAL128 = 92;
	public static readonly DECOMMISSION = 93;
	public static readonly DEFAULT = 94;
	public static readonly DELETE = 95;
	public static readonly DENSE_RANK = 96;
	public static readonly DEFERRED = 97;
	public static readonly NTILE = 98;
	public static readonly DESC = 99;
	public static readonly DESCRIBE = 100;
	public static readonly DISTINCT = 101;
	public static readonly DISTRIBUTED = 102;
	public static readonly DISTRIBUTION = 103;
	public static readonly DOUBLE = 104;
	public static readonly DROP = 105;
	public static readonly DUAL = 106;
	public static readonly DUPLICATE = 107;
	public static readonly DYNAMIC = 108;
	public static readonly ELSE = 109;
	public static readonly ENCLOSE = 110;
	public static readonly END = 111;
	public static readonly ENGINE = 112;
	public static readonly ENGINES = 113;
	public static readonly ERRORS = 114;
	public static readonly ESCAPE = 115;
	public static readonly EVENTS = 116;
	public static readonly EXCEPT = 117;
	public static readonly EXECUTE = 118;
	public static readonly EXISTS = 119;
	public static readonly EXPLAIN = 120;
	public static readonly EXPORT = 121;
	public static readonly EXTERNAL = 122;
	public static readonly EXTRACT = 123;
	public static readonly EVERY = 124;
	public static readonly FALSE = 125;
	public static readonly FIELDS = 126;
	public static readonly FILE = 127;
	public static readonly FILES = 128;
	public static readonly FILTER = 129;
	public static readonly FIRST = 130;
	public static readonly FIRST_VALUE = 131;
	public static readonly FLOAT = 132;
	public static readonly FLOOR = 133;
	public static readonly FN = 134;
	public static readonly FOLLOWING = 135;
	public static readonly FOLLOWER = 136;
	public static readonly FOR = 137;
	public static readonly FORCE = 138;
	public static readonly FORMAT = 139;
	public static readonly FREE = 140;
	public static readonly FROM = 141;
	public static readonly FRONTEND = 142;
	public static readonly FRONTENDS = 143;
	public static readonly FULL = 144;
	public static readonly FUNCTION = 145;
	public static readonly FUNCTIONS = 146;
	public static readonly GLOBAL = 147;
	public static readonly GRANT = 148;
	public static readonly GRANTS = 149;
	public static readonly GROUP = 150;
	public static readonly GROUPS = 151;
	public static readonly GROUPING = 152;
	public static readonly GROUPING_ID = 153;
	public static readonly HASH = 154;
	public static readonly HAVING = 155;
	public static readonly HELP = 156;
	public static readonly HISTOGRAM = 157;
	public static readonly HLL = 158;
	public static readonly HLL_UNION = 159;
	public static readonly HOST = 160;
	public static readonly HOUR = 161;
	public static readonly HUB = 162;
	public static readonly IDENTIFIED = 163;
	public static readonly IF = 164;
	public static readonly IMPERSONATE = 165;
	public static readonly IMMEDIATE = 166;
	public static readonly IGNORE = 167;
	public static readonly IMAGE = 168;
	public static readonly IN = 169;
	public static readonly INACTIVE = 170;
	public static readonly INCREMENTAL = 171;
	public static readonly INDEX = 172;
	public static readonly INDEXES = 173;
	public static readonly INFILE = 174;
	public static readonly INNER = 175;
	public static readonly INSTALL = 176;
	public static readonly INSERT = 177;
	public static readonly INT = 178;
	public static readonly INTEGER = 179;
	public static readonly INTEGRATION = 180;
	public static readonly INTEGRATIONS = 181;
	public static readonly INTERMEDIATE = 182;
	public static readonly INTERSECT = 183;
	public static readonly INTERVAL = 184;
	public static readonly INTO = 185;
	public static readonly OVERWRITE = 186;
	public static readonly IS = 187;
	public static readonly ISOLATION = 188;
	public static readonly JOB = 189;
	public static readonly JOIN = 190;
	public static readonly JSON = 191;
	public static readonly KEY = 192;
	public static readonly KEYS = 193;
	public static readonly KILL = 194;
	public static readonly LABEL = 195;
	public static readonly LAG = 196;
	public static readonly LARGEINT = 197;
	public static readonly LAST = 198;
	public static readonly LAST_VALUE = 199;
	public static readonly LATERAL = 200;
	public static readonly LEAD = 201;
	public static readonly LEFT = 202;
	public static readonly LESS = 203;
	public static readonly LEVEL = 204;
	public static readonly LIKE = 205;
	public static readonly LIMIT = 206;
	public static readonly LIST = 207;
	public static readonly LOAD = 208;
	public static readonly LOCAL = 209;
	public static readonly LOCALTIME = 210;
	public static readonly LOCALTIMESTAMP = 211;
	public static readonly LOCATION = 212;
	public static readonly LOCATIONS = 213;
	public static readonly LOGICAL = 214;
	public static readonly MANUAL = 215;
	public static readonly MAP = 216;
	public static readonly MAPPING = 217;
	public static readonly MAPPINGS = 218;
	public static readonly MASKING = 219;
	public static readonly MATERIALIZED = 220;
	public static readonly MAX = 221;
	public static readonly MAXVALUE = 222;
	public static readonly MERGE = 223;
	public static readonly MIN = 224;
	public static readonly MINUTE = 225;
	public static readonly MINUS = 226;
	public static readonly META = 227;
	public static readonly MOD = 228;
	public static readonly MODE = 229;
	public static readonly MODIFY = 230;
	public static readonly MONTH = 231;
	public static readonly NAME = 232;
	public static readonly NAMES = 233;
	public static readonly NEGATIVE = 234;
	public static readonly NO = 235;
	public static readonly NODE = 236;
	public static readonly NODES = 237;
	public static readonly NONE = 238;
	public static readonly NOT = 239;
	public static readonly NULL = 240;
	public static readonly NULLS = 241;
	public static readonly NUMBER = 242;
	public static readonly NUMERIC = 243;
	public static readonly OBSERVER = 244;
	public static readonly OF = 245;
	public static readonly OFFSET = 246;
	public static readonly ON = 247;
	public static readonly ONLY = 248;
	public static readonly OPEN = 249;
	public static readonly OPERATE = 250;
	public static readonly OPTIMIZER = 251;
	public static readonly OPTION = 252;
	public static readonly OR = 253;
	public static readonly ORDER = 254;
	public static readonly OUTER = 255;
	public static readonly OUTFILE = 256;
	public static readonly OVER = 257;
	public static readonly PARTITION = 258;
	public static readonly PARTITIONS = 259;
	public static readonly PASSWORD = 260;
	public static readonly PATH = 261;
	public static readonly PAUSE = 262;
	public static readonly PENDING = 263;
	public static readonly PERCENT_RANK = 264;
	public static readonly PERCENTILE = 265;
	public static readonly PERCENTILE_UNION = 266;
	public static readonly PLUGIN = 267;
	public static readonly PLUGINS = 268;
	public static readonly POLICY = 269;
	public static readonly POLICIES = 270;
	public static readonly PRECEDING = 271;
	public static readonly PRIMARY = 272;
	public static readonly PRIVILEGES = 273;
	public static readonly PROC = 274;
	public static readonly PROCEDURE = 275;
	public static readonly PROCESSLIST = 276;
	public static readonly PROFILE = 277;
	public static readonly PROFILELIST = 278;
	public static readonly PROPERTIES = 279;
	public static readonly PROPERTY = 280;
	public static readonly QUALIFY = 281;
	public static readonly QUARTER = 282;
	public static readonly QUERY = 283;
	public static readonly QUEUE = 284;
	public static readonly QUOTA = 285;
	public static readonly RANDOM = 286;
	public static readonly RANGE = 287;
	public static readonly RANK = 288;
	public static readonly READ = 289;
	public static readonly RECOVER = 290;
	public static readonly REFRESH = 291;
	public static readonly REWRITE = 292;
	public static readonly REGEXP = 293;
	public static readonly RELEASE = 294;
	public static readonly REMOVE = 295;
	public static readonly RENAME = 296;
	public static readonly REPAIR = 297;
	public static readonly REPEATABLE = 298;
	public static readonly REPLACE = 299;
	public static readonly REPLACE_IF_NOT_NULL = 300;
	public static readonly REPLICA = 301;
	public static readonly REPOSITORY = 302;
	public static readonly REPOSITORIES = 303;
	public static readonly RESOURCE = 304;
	public static readonly RESOURCES = 305;
	public static readonly RESTORE = 306;
	public static readonly RESUME = 307;
	public static readonly RETURNS = 308;
	public static readonly REVOKE = 309;
	public static readonly REVERT = 310;
	public static readonly RIGHT = 311;
	public static readonly RLIKE = 312;
	public static readonly ROLE = 313;
	public static readonly ROLES = 314;
	public static readonly ROLLBACK = 315;
	public static readonly ROLLUP = 316;
	public static readonly ROUTINE = 317;
	public static readonly ROW = 318;
	public static readonly ROWS = 319;
	public static readonly ROW_NUMBER = 320;
	public static readonly SAMPLE = 321;
	public static readonly SCHEDULER = 322;
	public static readonly SCHEMA = 323;
	public static readonly SCHEMAS = 324;
	public static readonly SECOND = 325;
	public static readonly SECURITY = 326;
	public static readonly SELECT = 327;
	public static readonly SEMI = 328;
	public static readonly SERIALIZABLE = 329;
	public static readonly SESSION = 330;
	public static readonly SET = 331;
	public static readonly SETS = 332;
	public static readonly SET_VAR = 333;
	public static readonly SIGNED = 334;
	public static readonly SKIP_HEADER = 335;
	public static readonly SHOW = 336;
	public static readonly SMALLINT = 337;
	public static readonly SNAPSHOT = 338;
	public static readonly SQLBLACKLIST = 339;
	public static readonly START = 340;
	public static readonly STATS = 341;
	public static readonly STATUS = 342;
	public static readonly STOP = 343;
	public static readonly STORAGE = 344;
	public static readonly STREAM = 345;
	public static readonly STRING = 346;
	public static readonly TEXT = 347;
	public static readonly SUBMIT = 348;
	public static readonly SUM = 349;
	public static readonly SUSPEND = 350;
	public static readonly SYNC = 351;
	public static readonly SYSTEM = 352;
	public static readonly SYSTEM_TIME = 353;
	public static readonly SWAP = 354;
	public static readonly STRUCT = 355;
	public static readonly TABLE = 356;
	public static readonly TABLES = 357;
	public static readonly TABLET = 358;
	public static readonly TASK = 359;
	public static readonly TEMPORARY = 360;
	public static readonly TERMINATED = 361;
	public static readonly THAN = 362;
	public static readonly THEN = 363;
	public static readonly TIME = 364;
	public static readonly TIMESTAMP = 365;
	public static readonly TIMESTAMPADD = 366;
	public static readonly TIMESTAMPDIFF = 367;
	public static readonly TINYINT = 368;
	public static readonly TRANSACTION = 369;
	public static readonly TO = 370;
	public static readonly TRACE = 371;
	public static readonly TRIGGERS = 372;
	public static readonly TRIM_SPACE = 373;
	public static readonly TRUE = 374;
	public static readonly TRUNCATE = 375;
	public static readonly TYPE = 376;
	public static readonly TYPES = 377;
	public static readonly UNBOUNDED = 378;
	public static readonly UNCOMMITTED = 379;
	public static readonly UNION = 380;
	public static readonly UNIQUE = 381;
	public static readonly UNINSTALL = 382;
	public static readonly UNSET = 383;
	public static readonly UNSIGNED = 384;
	public static readonly UPDATE = 385;
	public static readonly USAGE = 386;
	public static readonly USE = 387;
	public static readonly USER = 388;
	public static readonly USERS = 389;
	public static readonly USING = 390;
	public static readonly VALUE = 391;
	public static readonly VALUES = 392;
	public static readonly VARBINARY = 393;
	public static readonly VARCHAR = 394;
	public static readonly VARIABLES = 395;
	public static readonly VERBOSE = 396;
	public static readonly VIEW = 397;
	public static readonly VIEWS = 398;
	public static readonly VOLUME = 399;
	public static readonly VOLUMES = 400;
	public static readonly WAREHOUSE = 401;
	public static readonly WAREHOUSES = 402;
	public static readonly WARNINGS = 403;
	public static readonly WEEK = 404;
	public static readonly WHEN = 405;
	public static readonly WHERE = 406;
	public static readonly WHITELIST = 407;
	public static readonly WITH = 408;
	public static readonly WORK = 409;
	public static readonly WRITE = 410;
	public static readonly YEAR = 411;
	public static readonly LOCK = 412;
	public static readonly UNLOCK = 413;
	public static readonly LOW_PRIORITY = 414;
	public static readonly EQ = 415;
	public static readonly NEQ = 416;
	public static readonly LT = 417;
	public static readonly LTE = 418;
	public static readonly GT = 419;
	public static readonly GTE = 420;
	public static readonly EQ_FOR_NULL = 421;
	public static readonly PLUS_SYMBOL = 422;
	public static readonly MINUS_SYMBOL = 423;
	public static readonly ASTERISK_SYMBOL = 424;
	public static readonly SLASH_SYMBOL = 425;
	public static readonly PERCENT_SYMBOL = 426;
	public static readonly LOGICAL_OR = 427;
	public static readonly LOGICAL_AND = 428;
	public static readonly LOGICAL_NOT = 429;
	public static readonly INT_DIV = 430;
	public static readonly BITAND = 431;
	public static readonly BITOR = 432;
	public static readonly BITXOR = 433;
	public static readonly BITNOT = 434;
	public static readonly BIT_SHIFT_LEFT = 435;
	public static readonly BIT_SHIFT_RIGHT = 436;
	public static readonly BIT_SHIFT_RIGHT_LOGICAL = 437;
	public static readonly ARROW = 438;
	public static readonly AT = 439;
	public static readonly INTEGER_VALUE = 440;
	public static readonly DECIMAL_VALUE = 441;
	public static readonly DOUBLE_VALUE = 442;
	public static readonly SINGLE_QUOTED_TEXT = 443;
	public static readonly DOUBLE_QUOTED_TEXT = 444;
	public static readonly BINARY_SINGLE_QUOTED_TEXT = 445;
	public static readonly BINARY_DOUBLE_QUOTED_TEXT = 446;
	public static readonly LETTER_IDENTIFIER = 447;
	public static readonly DIGIT_IDENTIFIER = 448;
	public static readonly QUOTED_IDENTIFIER = 449;
	public static readonly BACKQUOTED_IDENTIFIER = 450;
	public static readonly DOT_IDENTIFIER = 451;
	public static readonly SIMPLE_COMMENT = 452;
	public static readonly BRACKETED_COMMENT = 453;
	public static readonly SEMICOLON = 454;
	public static readonly COLON = 455;
	public static readonly LEFT_PAREN = 456;
	public static readonly RIGHT_PAREN = 457;
	public static readonly COMMA = 458;
	public static readonly DOT = 459;
	public static readonly LEFT_BRACKET = 460;
	public static readonly RIGHT_BRACKET = 461;
	public static readonly LEFT_BRACE = 462;
	public static readonly RIGHT_BRACE = 463;
	public static readonly HENT_START = 464;
	public static readonly HENT_END = 465;
	public static readonly DOTDOTDOT = 466;
	public static readonly WS = 467;
	public static readonly LEFT_PARENpropertyRIGHT_PAREN = 468;
	public static readonly RULE_program = 0;
	public static readonly RULE_sqlStatements = 1;
	public static readonly RULE_singleStatement = 2;
	public static readonly RULE_statement = 3;
	public static readonly RULE_useDatabaseStatement = 4;
	public static readonly RULE_useCatalogStatement = 5;
	public static readonly RULE_setCatalogStatement = 6;
	public static readonly RULE_showDatabasesStatement = 7;
	public static readonly RULE_alterDbQuotaStatement = 8;
	public static readonly RULE_createDbStatement = 9;
	public static readonly RULE_dropDbStatement = 10;
	public static readonly RULE_showCreateDbStatement = 11;
	public static readonly RULE_alterDatabaseRenameStatement = 12;
	public static readonly RULE_recoverDbStmt = 13;
	public static readonly RULE_showDataStmt = 14;
	public static readonly RULE_createTableStatement = 15;
	public static readonly RULE_columnDesc = 16;
	public static readonly RULE_charsetName = 17;
	public static readonly RULE_defaultDesc = 18;
	public static readonly RULE_materializedColumnDesc = 19;
	public static readonly RULE_indexDesc = 20;
	public static readonly RULE_engineDesc = 21;
	public static readonly RULE_charsetDesc = 22;
	public static readonly RULE_collateDesc = 23;
	public static readonly RULE_keyDesc = 24;
	public static readonly RULE_orderByDesc = 25;
	public static readonly RULE_aggDesc = 26;
	public static readonly RULE_rollupDesc = 27;
	public static readonly RULE_rollupItem = 28;
	public static readonly RULE_dupKeys = 29;
	public static readonly RULE_fromRollup = 30;
	public static readonly RULE_withMaskingPolicy = 31;
	public static readonly RULE_withRowAccessPolicy = 32;
	public static readonly RULE_createTemporaryTableStatement = 33;
	public static readonly RULE_createTableAsSelectStatement = 34;
	public static readonly RULE_dropTableStatement = 35;
	public static readonly RULE_alterTableStatement = 36;
	public static readonly RULE_createIndexStatement = 37;
	public static readonly RULE_dropIndexStatement = 38;
	public static readonly RULE_indexType = 39;
	public static readonly RULE_showTableStatement = 40;
	public static readonly RULE_showCreateTableStatement = 41;
	public static readonly RULE_showColumnStatement = 42;
	public static readonly RULE_showTableStatusStatement = 43;
	public static readonly RULE_refreshTableStatement = 44;
	public static readonly RULE_showAlterStatement = 45;
	public static readonly RULE_descTableStatement = 46;
	public static readonly RULE_createTableLikeStatement = 47;
	public static readonly RULE_showIndexStatement = 48;
	public static readonly RULE_recoverTableStatement = 49;
	public static readonly RULE_truncateTableStatement = 50;
	public static readonly RULE_cancelAlterTableStatement = 51;
	public static readonly RULE_showPartitionsStatement = 52;
	public static readonly RULE_recoverPartitionStatement = 53;
	public static readonly RULE_createViewStatement = 54;
	public static readonly RULE_alterViewStatement = 55;
	public static readonly RULE_dropViewStatement = 56;
	public static readonly RULE_columnNameWithComment = 57;
	public static readonly RULE_submitTaskStatement = 58;
	public static readonly RULE_taskExecSql = 59;
	public static readonly RULE_dropTaskStatement = 60;
	public static readonly RULE_createMaterializedViewStatement = 61;
	public static readonly RULE_materializedViewDesc = 62;
	public static readonly RULE_showMaterializedViewsStatement = 63;
	public static readonly RULE_dropMaterializedViewStatement = 64;
	public static readonly RULE_alterMaterializedViewStatement = 65;
	public static readonly RULE_refreshMaterializedViewStatement = 66;
	public static readonly RULE_cancelRefreshMaterializedViewStatement = 67;
	public static readonly RULE_adminSetConfigStatement = 68;
	public static readonly RULE_adminSetReplicaStatusStatement = 69;
	public static readonly RULE_adminShowConfigStatement = 70;
	public static readonly RULE_adminShowReplicaDistributionStatement = 71;
	public static readonly RULE_adminShowReplicaStatusStatement = 72;
	public static readonly RULE_adminRepairTableStatement = 73;
	public static readonly RULE_adminCancelRepairTableStatement = 74;
	public static readonly RULE_adminCheckTabletsStatement = 75;
	public static readonly RULE_killStatement = 76;
	public static readonly RULE_syncStatement = 77;
	public static readonly RULE_alterSystemStatement = 78;
	public static readonly RULE_cancelAlterSystemStatement = 79;
	public static readonly RULE_showComputeNodesStatement = 80;
	public static readonly RULE_createExternalCatalogStatement = 81;
	public static readonly RULE_showCreateExternalCatalogStatement = 82;
	public static readonly RULE_dropExternalCatalogStatement = 83;
	public static readonly RULE_showCatalogsStatement = 84;
	public static readonly RULE_createWarehouseStatement = 85;
	public static readonly RULE_showWarehousesStatement = 86;
	public static readonly RULE_dropWarehouseStatement = 87;
	public static readonly RULE_alterWarehouseStatement = 88;
	public static readonly RULE_showClustersStatement = 89;
	public static readonly RULE_suspendWarehouseStatement = 90;
	public static readonly RULE_resumeWarehouseStatement = 91;
	public static readonly RULE_createStorageVolumeStatement = 92;
	public static readonly RULE_typeDesc = 93;
	public static readonly RULE_locationsDesc = 94;
	public static readonly RULE_showStorageVolumesStatement = 95;
	public static readonly RULE_dropStorageVolumeStatement = 96;
	public static readonly RULE_alterStorageVolumeStatement = 97;
	public static readonly RULE_alterStorageVolumeClause = 98;
	public static readonly RULE_modifyStorageVolumePropertiesClause = 99;
	public static readonly RULE_modifyStorageVolumeCommentClause = 100;
	public static readonly RULE_descStorageVolumeStatement = 101;
	public static readonly RULE_setDefaultStorageVolumeStatement = 102;
	public static readonly RULE_alterClause = 103;
	public static readonly RULE_addFrontendClause = 104;
	public static readonly RULE_dropFrontendClause = 105;
	public static readonly RULE_modifyFrontendHostClause = 106;
	public static readonly RULE_addBackendClause = 107;
	public static readonly RULE_dropBackendClause = 108;
	public static readonly RULE_decommissionBackendClause = 109;
	public static readonly RULE_modifyBackendHostClause = 110;
	public static readonly RULE_addComputeNodeClause = 111;
	public static readonly RULE_dropComputeNodeClause = 112;
	public static readonly RULE_modifyBrokerClause = 113;
	public static readonly RULE_alterLoadErrorUrlClause = 114;
	public static readonly RULE_createImageClause = 115;
	public static readonly RULE_cleanTabletSchedQClause = 116;
	public static readonly RULE_createIndexClause = 117;
	public static readonly RULE_dropIndexClause = 118;
	public static readonly RULE_tableRenameClause = 119;
	public static readonly RULE_swapTableClause = 120;
	public static readonly RULE_modifyTablePropertiesClause = 121;
	public static readonly RULE_modifyCommentClause = 122;
	public static readonly RULE_addColumnClause = 123;
	public static readonly RULE_addColumnsClause = 124;
	public static readonly RULE_dropColumnClause = 125;
	public static readonly RULE_modifyColumnClause = 126;
	public static readonly RULE_columnRenameClause = 127;
	public static readonly RULE_reorderColumnsClause = 128;
	public static readonly RULE_rollupRenameClause = 129;
	public static readonly RULE_compactionClause = 130;
	public static readonly RULE_applyMaskingPolicyClause = 131;
	public static readonly RULE_applyRowAccessPolicyClause = 132;
	public static readonly RULE_addPartitionClause = 133;
	public static readonly RULE_dropPartitionClause = 134;
	public static readonly RULE_truncatePartitionClause = 135;
	public static readonly RULE_modifyPartitionClause = 136;
	public static readonly RULE_replacePartitionClause = 137;
	public static readonly RULE_partitionRenameClause = 138;
	public static readonly RULE_insertStatement = 139;
	public static readonly RULE_updateStatement = 140;
	public static readonly RULE_deleteStatement = 141;
	public static readonly RULE_createRoutineLoadStatement = 142;
	public static readonly RULE_alterRoutineLoadStatement = 143;
	public static readonly RULE_dataSource = 144;
	public static readonly RULE_loadPropertiesExpr = 145;
	public static readonly RULE_loadProperties = 146;
	public static readonly RULE_colSeparatorProperty = 147;
	public static readonly RULE_rowDelimiterProperty = 148;
	public static readonly RULE_importColumns = 149;
	public static readonly RULE_columnProperties = 150;
	public static readonly RULE_jobProperties = 151;
	public static readonly RULE_dataSourceProperties = 152;
	public static readonly RULE_stopRoutineLoadStatement = 153;
	public static readonly RULE_resumeRoutineLoadStatement = 154;
	public static readonly RULE_pauseRoutineLoadStatement = 155;
	public static readonly RULE_showRoutineLoadStatement = 156;
	public static readonly RULE_showRoutineLoadTaskStatement = 157;
	public static readonly RULE_showStreamLoadStatement = 158;
	public static readonly RULE_analyzeStatement = 159;
	public static readonly RULE_dropStatsStatement = 160;
	public static readonly RULE_analyzeHistogramStatement = 161;
	public static readonly RULE_dropHistogramStatement = 162;
	public static readonly RULE_createAnalyzeStatement = 163;
	public static readonly RULE_dropAnalyzeJobStatement = 164;
	public static readonly RULE_showAnalyzeStatement = 165;
	public static readonly RULE_showStatsMetaStatement = 166;
	public static readonly RULE_showHistogramMetaStatement = 167;
	public static readonly RULE_killAnalyzeStatement = 168;
	public static readonly RULE_analyzeProfileStatement = 169;
	public static readonly RULE_createResourceGroupStatement = 170;
	public static readonly RULE_dropResourceGroupStatement = 171;
	public static readonly RULE_alterResourceGroupStatement = 172;
	public static readonly RULE_showResourceGroupStatement = 173;
	public static readonly RULE_createResourceStatement = 174;
	public static readonly RULE_alterResourceStatement = 175;
	public static readonly RULE_dropResourceStatement = 176;
	public static readonly RULE_showResourceStatement = 177;
	public static readonly RULE_classifier = 178;
	public static readonly RULE_showFunctionsStatement = 179;
	public static readonly RULE_dropFunctionStatement = 180;
	public static readonly RULE_createFunctionStatement = 181;
	public static readonly RULE_typeList = 182;
	public static readonly RULE_loadStatement = 183;
	public static readonly RULE_labelName = 184;
	public static readonly RULE_dataDescList = 185;
	public static readonly RULE_dataDesc = 186;
	public static readonly RULE_formatProps = 187;
	public static readonly RULE_brokerDesc = 188;
	public static readonly RULE_resourceDesc = 189;
	public static readonly RULE_showLoadStatement = 190;
	public static readonly RULE_showLoadWarningsStatement = 191;
	public static readonly RULE_cancelLoadStatement = 192;
	public static readonly RULE_alterLoadStatement = 193;
	public static readonly RULE_cancelCompactionStatement = 194;
	public static readonly RULE_showAuthorStatement = 195;
	public static readonly RULE_showBackendsStatement = 196;
	public static readonly RULE_showBrokerStatement = 197;
	public static readonly RULE_showCharsetStatement = 198;
	public static readonly RULE_showCollationStatement = 199;
	public static readonly RULE_showDeleteStatement = 200;
	public static readonly RULE_showDynamicPartitionStatement = 201;
	public static readonly RULE_showEventsStatement = 202;
	public static readonly RULE_showEnginesStatement = 203;
	public static readonly RULE_showFrontendsStatement = 204;
	public static readonly RULE_showPluginsStatement = 205;
	public static readonly RULE_showRepositoriesStatement = 206;
	public static readonly RULE_showOpenTableStatement = 207;
	public static readonly RULE_showPrivilegesStatement = 208;
	public static readonly RULE_showProcedureStatement = 209;
	public static readonly RULE_showProcStatement = 210;
	public static readonly RULE_showProcesslistStatement = 211;
	public static readonly RULE_showProfilelistStatement = 212;
	public static readonly RULE_showStatusStatement = 213;
	public static readonly RULE_showTabletStatement = 214;
	public static readonly RULE_showTransactionStatement = 215;
	public static readonly RULE_showTriggersStatement = 216;
	public static readonly RULE_showUserPropertyStatement = 217;
	public static readonly RULE_showVariablesStatement = 218;
	public static readonly RULE_showWarningStatement = 219;
	public static readonly RULE_helpStatement = 220;
	public static readonly RULE_createUserStatement = 221;
	public static readonly RULE_dropUserStatement = 222;
	public static readonly RULE_alterUserStatement = 223;
	public static readonly RULE_showUserStatement = 224;
	public static readonly RULE_showAuthenticationStatement = 225;
	public static readonly RULE_executeAsStatement = 226;
	public static readonly RULE_createRoleStatement = 227;
	public static readonly RULE_alterRoleStatement = 228;
	public static readonly RULE_dropRoleStatement = 229;
	public static readonly RULE_showRolesStatement = 230;
	public static readonly RULE_grantRoleStatement = 231;
	public static readonly RULE_revokeRoleStatement = 232;
	public static readonly RULE_setRoleStatement = 233;
	public static readonly RULE_setDefaultRoleStatement = 234;
	public static readonly RULE_grantRevokeClause = 235;
	public static readonly RULE_grantPrivilegeStatement = 236;
	public static readonly RULE_revokePrivilegeStatement = 237;
	public static readonly RULE_showGrantsStatement = 238;
	public static readonly RULE_createSecurityIntegrationStatement = 239;
	public static readonly RULE_alterSecurityIntegrationStatement = 240;
	public static readonly RULE_dropSecurityIntegrationStatement = 241;
	public static readonly RULE_showSecurityIntegrationStatement = 242;
	public static readonly RULE_showCreateSecurityIntegrationStatement = 243;
	public static readonly RULE_createRoleMappingStatement = 244;
	public static readonly RULE_alterRoleMappingStatement = 245;
	public static readonly RULE_dropRoleMappingStatement = 246;
	public static readonly RULE_showRoleMappingStatement = 247;
	public static readonly RULE_refreshRoleMappingStatement = 248;
	public static readonly RULE_authOption = 249;
	public static readonly RULE_privObjectName = 250;
	public static readonly RULE_privObjectNameList = 251;
	public static readonly RULE_privFunctionObjectNameList = 252;
	public static readonly RULE_privilegeTypeList = 253;
	public static readonly RULE_privilegeType = 254;
	public static readonly RULE_privObjectType = 255;
	public static readonly RULE_privObjectTypePlural = 256;
	public static readonly RULE_createMaskingPolicyStatement = 257;
	public static readonly RULE_dropMaskingPolicyStatement = 258;
	public static readonly RULE_alterMaskingPolicyStatement = 259;
	public static readonly RULE_showMaskingPolicyStatement = 260;
	public static readonly RULE_showCreateMaskingPolicyStatement = 261;
	public static readonly RULE_createRowAccessPolicyStatement = 262;
	public static readonly RULE_dropRowAccessPolicyStatement = 263;
	public static readonly RULE_alterRowAccessPolicyStatement = 264;
	public static readonly RULE_showRowAccessPolicyStatement = 265;
	public static readonly RULE_showCreateRowAccessPolicyStatement = 266;
	public static readonly RULE_policySignature = 267;
	public static readonly RULE_backupStatement = 268;
	public static readonly RULE_cancelBackupStatement = 269;
	public static readonly RULE_showBackupStatement = 270;
	public static readonly RULE_restoreStatement = 271;
	public static readonly RULE_cancelRestoreStatement = 272;
	public static readonly RULE_showRestoreStatement = 273;
	public static readonly RULE_showSnapshotStatement = 274;
	public static readonly RULE_createRepositoryStatement = 275;
	public static readonly RULE_dropRepositoryStatement = 276;
	public static readonly RULE_addSqlBlackListStatement = 277;
	public static readonly RULE_delSqlBlackListStatement = 278;
	public static readonly RULE_showSqlBlackListStatement = 279;
	public static readonly RULE_showWhiteListStatement = 280;
	public static readonly RULE_exportStatement = 281;
	public static readonly RULE_cancelExportStatement = 282;
	public static readonly RULE_showExportStatement = 283;
	public static readonly RULE_installPluginStatement = 284;
	public static readonly RULE_uninstallPluginStatement = 285;
	public static readonly RULE_createFileStatement = 286;
	public static readonly RULE_dropFileStatement = 287;
	public static readonly RULE_showSmallFilesStatement = 288;
	public static readonly RULE_setStatement = 289;
	public static readonly RULE_setVar = 290;
	public static readonly RULE_transaction_characteristics = 291;
	public static readonly RULE_transaction_access_mode = 292;
	public static readonly RULE_isolation_level = 293;
	public static readonly RULE_isolation_types = 294;
	public static readonly RULE_setExprOrDefault = 295;
	public static readonly RULE_setUserPropertyStatement = 296;
	public static readonly RULE_roleList = 297;
	public static readonly RULE_executeScriptStatement = 298;
	public static readonly RULE_unsupportedStatement = 299;
	public static readonly RULE_lock_item = 300;
	public static readonly RULE_lock_type = 301;
	public static readonly RULE_queryStatement = 302;
	public static readonly RULE_queryRelation = 303;
	public static readonly RULE_withClause = 304;
	public static readonly RULE_queryNoWith = 305;
	public static readonly RULE_temporalClause = 306;
	public static readonly RULE_queryPrimary = 307;
	public static readonly RULE_subquery = 308;
	public static readonly RULE_rowConstructor = 309;
	public static readonly RULE_sortItem = 310;
	public static readonly RULE_limitElement = 311;
	public static readonly RULE_querySpecification = 312;
	public static readonly RULE_fromClause = 313;
	public static readonly RULE_groupingElement = 314;
	public static readonly RULE_groupingSet = 315;
	public static readonly RULE_commonTableExpression = 316;
	public static readonly RULE_setQuantifier = 317;
	public static readonly RULE_selectItem = 318;
	public static readonly RULE_relations = 319;
	public static readonly RULE_relation = 320;
	public static readonly RULE_relationPrimary = 321;
	public static readonly RULE_joinRelation = 322;
	public static readonly RULE_crossOrInnerJoinType = 323;
	public static readonly RULE_outerAndSemiJoinType = 324;
	public static readonly RULE_bracketHint = 325;
	public static readonly RULE_setVarHint = 326;
	public static readonly RULE_hintMap = 327;
	public static readonly RULE_joinCriteria = 328;
	public static readonly RULE_columnAliases = 329;
	public static readonly RULE_partitionNames = 330;
	public static readonly RULE_keyPartitions = 331;
	public static readonly RULE_tabletList = 332;
	public static readonly RULE_expressionsWithDefault = 333;
	public static readonly RULE_expressionOrDefault = 334;
	public static readonly RULE_mapExpressionList = 335;
	public static readonly RULE_mapExpression = 336;
	public static readonly RULE_expressionSingleton = 337;
	public static readonly RULE_expression = 338;
	public static readonly RULE_expressionList = 339;
	public static readonly RULE_booleanExpression = 340;
	public static readonly RULE_predicate = 341;
	public static readonly RULE_tupleInSubquery = 342;
	public static readonly RULE_predicateOperations = 343;
	public static readonly RULE_valueExpression = 344;
	public static readonly RULE_primaryExpression = 345;
	public static readonly RULE_literalExpression = 346;
	public static readonly RULE_functionCall = 347;
	public static readonly RULE_aggregationFunction = 348;
	public static readonly RULE_userVariable = 349;
	public static readonly RULE_systemVariable = 350;
	public static readonly RULE_columnReference = 351;
	public static readonly RULE_informationFunctionExpression = 352;
	public static readonly RULE_specialDateTimeExpression = 353;
	public static readonly RULE_specialFunctionExpression = 354;
	public static readonly RULE_windowFunction = 355;
	public static readonly RULE_whenClause = 356;
	public static readonly RULE_over = 357;
	public static readonly RULE_ignoreNulls = 358;
	public static readonly RULE_tableDesc = 359;
	public static readonly RULE_restoreTableDesc = 360;
	public static readonly RULE_explainDesc = 361;
	public static readonly RULE_optimizerTrace = 362;
	public static readonly RULE_partitionDesc = 363;
	public static readonly RULE_listPartitionDesc = 364;
	public static readonly RULE_singleItemListPartitionDesc = 365;
	public static readonly RULE_multiItemListPartitionDesc = 366;
	public static readonly RULE_stringList = 367;
	public static readonly RULE_rangePartitionDesc = 368;
	public static readonly RULE_singleRangePartition = 369;
	public static readonly RULE_multiRangePartition = 370;
	public static readonly RULE_partitionRangeDesc = 371;
	public static readonly RULE_partitionKeyDesc = 372;
	public static readonly RULE_partitionValueList = 373;
	public static readonly RULE_keyPartition = 374;
	public static readonly RULE_partitionValue = 375;
	public static readonly RULE_distributionClause = 376;
	public static readonly RULE_distributionDesc = 377;
	public static readonly RULE_refreshSchemeDesc = 378;
	public static readonly RULE_statusDesc = 379;
	public static readonly RULE_properties = 380;
	public static readonly RULE_extProperties = 381;
	public static readonly RULE_propertyList = 382;
	public static readonly RULE_userPropertyList = 383;
	public static readonly RULE_property = 384;
	public static readonly RULE_varType = 385;
	public static readonly RULE_comment = 386;
	public static readonly RULE_outfile = 387;
	public static readonly RULE_fileFormat = 388;
	public static readonly RULE_string = 389;
	public static readonly RULE_binary = 390;
	public static readonly RULE_comparisonOperator = 391;
	public static readonly RULE_booleanValue = 392;
	public static readonly RULE_interval = 393;
	public static readonly RULE_unitIdentifier = 394;
	public static readonly RULE_unitBoundary = 395;
	public static readonly RULE_type = 396;
	public static readonly RULE_arrayType = 397;
	public static readonly RULE_mapType = 398;
	public static readonly RULE_subfieldDesc = 399;
	public static readonly RULE_subfieldDescs = 400;
	public static readonly RULE_structType = 401;
	public static readonly RULE_typeParameter = 402;
	public static readonly RULE_baseType = 403;
	public static readonly RULE_decimalType = 404;
	public static readonly RULE_qualifiedName = 405;
	public static readonly RULE_identifier = 406;
	public static readonly RULE_identifierList = 407;
	public static readonly RULE_identifierOrString = 408;
	public static readonly RULE_identifierOrStringList = 409;
	public static readonly RULE_identifierOrStringOrStar = 410;
	public static readonly RULE_user = 411;
	public static readonly RULE_assignment = 412;
	public static readonly RULE_assignmentList = 413;
	public static readonly RULE_number = 414;
	public static readonly RULE_nonReserved = 415;
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"program", "sqlStatements", "singleStatement", "statement", "useDatabaseStatement", 
		"useCatalogStatement", "setCatalogStatement", "showDatabasesStatement", 
		"alterDbQuotaStatement", "createDbStatement", "dropDbStatement", "showCreateDbStatement", 
		"alterDatabaseRenameStatement", "recoverDbStmt", "showDataStmt", "createTableStatement", 
		"columnDesc", "charsetName", "defaultDesc", "materializedColumnDesc", 
		"indexDesc", "engineDesc", "charsetDesc", "collateDesc", "keyDesc", "orderByDesc", 
		"aggDesc", "rollupDesc", "rollupItem", "dupKeys", "fromRollup", "withMaskingPolicy", 
		"withRowAccessPolicy", "createTemporaryTableStatement", "createTableAsSelectStatement", 
		"dropTableStatement", "alterTableStatement", "createIndexStatement", "dropIndexStatement", 
		"indexType", "showTableStatement", "showCreateTableStatement", "showColumnStatement", 
		"showTableStatusStatement", "refreshTableStatement", "showAlterStatement", 
		"descTableStatement", "createTableLikeStatement", "showIndexStatement", 
		"recoverTableStatement", "truncateTableStatement", "cancelAlterTableStatement", 
		"showPartitionsStatement", "recoverPartitionStatement", "createViewStatement", 
		"alterViewStatement", "dropViewStatement", "columnNameWithComment", "submitTaskStatement", 
		"taskExecSql", "dropTaskStatement", "createMaterializedViewStatement", 
		"materializedViewDesc", "showMaterializedViewsStatement", "dropMaterializedViewStatement", 
		"alterMaterializedViewStatement", "refreshMaterializedViewStatement", 
		"cancelRefreshMaterializedViewStatement", "adminSetConfigStatement", "adminSetReplicaStatusStatement", 
		"adminShowConfigStatement", "adminShowReplicaDistributionStatement", "adminShowReplicaStatusStatement", 
		"adminRepairTableStatement", "adminCancelRepairTableStatement", "adminCheckTabletsStatement", 
		"killStatement", "syncStatement", "alterSystemStatement", "cancelAlterSystemStatement", 
		"showComputeNodesStatement", "createExternalCatalogStatement", "showCreateExternalCatalogStatement", 
		"dropExternalCatalogStatement", "showCatalogsStatement", "createWarehouseStatement", 
		"showWarehousesStatement", "dropWarehouseStatement", "alterWarehouseStatement", 
		"showClustersStatement", "suspendWarehouseStatement", "resumeWarehouseStatement", 
		"createStorageVolumeStatement", "typeDesc", "locationsDesc", "showStorageVolumesStatement", 
		"dropStorageVolumeStatement", "alterStorageVolumeStatement", "alterStorageVolumeClause", 
		"modifyStorageVolumePropertiesClause", "modifyStorageVolumeCommentClause", 
		"descStorageVolumeStatement", "setDefaultStorageVolumeStatement", "alterClause", 
		"addFrontendClause", "dropFrontendClause", "modifyFrontendHostClause", 
		"addBackendClause", "dropBackendClause", "decommissionBackendClause", 
		"modifyBackendHostClause", "addComputeNodeClause", "dropComputeNodeClause", 
		"modifyBrokerClause", "alterLoadErrorUrlClause", "createImageClause", 
		"cleanTabletSchedQClause", "createIndexClause", "dropIndexClause", "tableRenameClause", 
		"swapTableClause", "modifyTablePropertiesClause", "modifyCommentClause", 
		"addColumnClause", "addColumnsClause", "dropColumnClause", "modifyColumnClause", 
		"columnRenameClause", "reorderColumnsClause", "rollupRenameClause", "compactionClause", 
		"applyMaskingPolicyClause", "applyRowAccessPolicyClause", "addPartitionClause", 
		"dropPartitionClause", "truncatePartitionClause", "modifyPartitionClause", 
		"replacePartitionClause", "partitionRenameClause", "insertStatement", 
		"updateStatement", "deleteStatement", "createRoutineLoadStatement", "alterRoutineLoadStatement", 
		"dataSource", "loadPropertiesExpr", "loadProperties", "colSeparatorProperty", 
		"rowDelimiterProperty", "importColumns", "columnProperties", "jobProperties", 
		"dataSourceProperties", "stopRoutineLoadStatement", "resumeRoutineLoadStatement", 
		"pauseRoutineLoadStatement", "showRoutineLoadStatement", "showRoutineLoadTaskStatement", 
		"showStreamLoadStatement", "analyzeStatement", "dropStatsStatement", "analyzeHistogramStatement", 
		"dropHistogramStatement", "createAnalyzeStatement", "dropAnalyzeJobStatement", 
		"showAnalyzeStatement", "showStatsMetaStatement", "showHistogramMetaStatement", 
		"killAnalyzeStatement", "analyzeProfileStatement", "createResourceGroupStatement", 
		"dropResourceGroupStatement", "alterResourceGroupStatement", "showResourceGroupStatement", 
		"createResourceStatement", "alterResourceStatement", "dropResourceStatement", 
		"showResourceStatement", "classifier", "showFunctionsStatement", "dropFunctionStatement", 
		"createFunctionStatement", "typeList", "loadStatement", "labelName", "dataDescList", 
		"dataDesc", "formatProps", "brokerDesc", "resourceDesc", "showLoadStatement", 
		"showLoadWarningsStatement", "cancelLoadStatement", "alterLoadStatement", 
		"cancelCompactionStatement", "showAuthorStatement", "showBackendsStatement", 
		"showBrokerStatement", "showCharsetStatement", "showCollationStatement", 
		"showDeleteStatement", "showDynamicPartitionStatement", "showEventsStatement", 
		"showEnginesStatement", "showFrontendsStatement", "showPluginsStatement", 
		"showRepositoriesStatement", "showOpenTableStatement", "showPrivilegesStatement", 
		"showProcedureStatement", "showProcStatement", "showProcesslistStatement", 
		"showProfilelistStatement", "showStatusStatement", "showTabletStatement", 
		"showTransactionStatement", "showTriggersStatement", "showUserPropertyStatement", 
		"showVariablesStatement", "showWarningStatement", "helpStatement", "createUserStatement", 
		"dropUserStatement", "alterUserStatement", "showUserStatement", "showAuthenticationStatement", 
		"executeAsStatement", "createRoleStatement", "alterRoleStatement", "dropRoleStatement", 
		"showRolesStatement", "grantRoleStatement", "revokeRoleStatement", "setRoleStatement", 
		"setDefaultRoleStatement", "grantRevokeClause", "grantPrivilegeStatement", 
		"revokePrivilegeStatement", "showGrantsStatement", "createSecurityIntegrationStatement", 
		"alterSecurityIntegrationStatement", "dropSecurityIntegrationStatement", 
		"showSecurityIntegrationStatement", "showCreateSecurityIntegrationStatement", 
		"createRoleMappingStatement", "alterRoleMappingStatement", "dropRoleMappingStatement", 
		"showRoleMappingStatement", "refreshRoleMappingStatement", "authOption", 
		"privObjectName", "privObjectNameList", "privFunctionObjectNameList", 
		"privilegeTypeList", "privilegeType", "privObjectType", "privObjectTypePlural", 
		"createMaskingPolicyStatement", "dropMaskingPolicyStatement", "alterMaskingPolicyStatement", 
		"showMaskingPolicyStatement", "showCreateMaskingPolicyStatement", "createRowAccessPolicyStatement", 
		"dropRowAccessPolicyStatement", "alterRowAccessPolicyStatement", "showRowAccessPolicyStatement", 
		"showCreateRowAccessPolicyStatement", "policySignature", "backupStatement", 
		"cancelBackupStatement", "showBackupStatement", "restoreStatement", "cancelRestoreStatement", 
		"showRestoreStatement", "showSnapshotStatement", "createRepositoryStatement", 
		"dropRepositoryStatement", "addSqlBlackListStatement", "delSqlBlackListStatement", 
		"showSqlBlackListStatement", "showWhiteListStatement", "exportStatement", 
		"cancelExportStatement", "showExportStatement", "installPluginStatement", 
		"uninstallPluginStatement", "createFileStatement", "dropFileStatement", 
		"showSmallFilesStatement", "setStatement", "setVar", "transaction_characteristics", 
		"transaction_access_mode", "isolation_level", "isolation_types", "setExprOrDefault", 
		"setUserPropertyStatement", "roleList", "executeScriptStatement", "unsupportedStatement", 
		"lock_item", "lock_type", "queryStatement", "queryRelation", "withClause", 
		"queryNoWith", "temporalClause", "queryPrimary", "subquery", "rowConstructor", 
		"sortItem", "limitElement", "querySpecification", "fromClause", "groupingElement", 
		"groupingSet", "commonTableExpression", "setQuantifier", "selectItem", 
		"relations", "relation", "relationPrimary", "joinRelation", "crossOrInnerJoinType", 
		"outerAndSemiJoinType", "bracketHint", "setVarHint", "hintMap", "joinCriteria", 
		"columnAliases", "partitionNames", "keyPartitions", "tabletList", "expressionsWithDefault", 
		"expressionOrDefault", "mapExpressionList", "mapExpression", "expressionSingleton", 
		"expression", "expressionList", "booleanExpression", "predicate", "tupleInSubquery", 
		"predicateOperations", "valueExpression", "primaryExpression", "literalExpression", 
		"functionCall", "aggregationFunction", "userVariable", "systemVariable", 
		"columnReference", "informationFunctionExpression", "specialDateTimeExpression", 
		"specialFunctionExpression", "windowFunction", "whenClause", "over", "ignoreNulls", 
		"tableDesc", "restoreTableDesc", "explainDesc", "optimizerTrace", "partitionDesc", 
		"listPartitionDesc", "singleItemListPartitionDesc", "multiItemListPartitionDesc", 
		"stringList", "rangePartitionDesc", "singleRangePartition", "multiRangePartition", 
		"partitionRangeDesc", "partitionKeyDesc", "partitionValueList", "keyPartition", 
		"partitionValue", "distributionClause", "distributionDesc", "refreshSchemeDesc", 
		"statusDesc", "properties", "extProperties", "propertyList", "userPropertyList", 
		"property", "varType", "comment", "outfile", "fileFormat", "string", "binary", 
		"comparisonOperator", "booleanValue", "interval", "unitIdentifier", "unitBoundary", 
		"type", "arrayType", "mapType", "subfieldDesc", "subfieldDescs", "structType", 
		"typeParameter", "baseType", "decimalType", "qualifiedName", "identifier", 
		"identifierList", "identifierOrString", "identifierOrStringList", "identifierOrStringOrStar", 
		"user", "assignment", "assignmentList", "number", "nonReserved",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, "'ACTIVE'", "'ACCESS'", "'ADD'", "'ADMIN'", "'AFTER'", 
		"'AGGREGATE'", "'ALL'", "'ALTER'", "'ANALYZE'", "'AND'", "'ANTI'", "'APPLY'", 
		"'ARRAY'", "'ARRAY_AGG'", "'AS'", "'ASC'", "'ASYNC'", "'AUTHORS'", "'AUTHENTICATION'", 
		"'AUTO_INCREMENT'", "'AVG'", "'BACKEND'", "'BACKENDS'", "'BACKUP'", "'BASE'", 
		"'BEGIN'", "'BETWEEN'", "'BIGINT'", "'BINARY'", "'BITMAP'", "'BITMAP_UNION'", 
		"'BLACKLIST'", "'BODY'", "'BOOLEAN'", "'BOTH'", "'BROKER'", "'BUCKETS'", 
		"'BUILTIN'", "'BY'", "'CANCEL'", "'CASE'", "'CAST'", "'CATALOG'", "'CATALOGS'", 
		"'CEIL'", "'CHAIN'", "'CHAR'", "'CHARACTER'", "'CHARSET'", "'CHECK'", 
		"'CLEAN'", "'CLUSTER'", "'CLUSTERS'", "'COLLATE'", "'COLLATION'", "'COLUMN'", 
		"'COLUMNS'", "'COMMENT'", "'COMMIT'", "'COMMITTED'", "'COMPACT'", "'COMPACTION'", 
		"'COMPUTE'", "'CONFIG'", "'CONNECTION'", "'CONSISTENT'", "'CONVERT'", 
		"'COSTS'", "'COUNT'", "'CREATE'", "'CROSS'", "'CUBE'", "'CUME_DIST'", 
		"'CUMULATIVE'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_ROLE'", "'CURRENT_TIME'", 
		"'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'DATA'", "'DATABASE'", "'DATABASES'", 
		"'DATE'", "'DATETIME'", "'DAY'", "'DECIMAL'", "'DECIMALV2'", "'DECIMAL32'", 
		"'DECIMAL64'", "'DECIMAL128'", "'DECOMMISSION'", "'DEFAULT'", "'DELETE'", 
		"'DENSE_RANK'", "'DEFERRED'", "'NTILE'", "'DESC'", "'DESCRIBE'", "'DISTINCT'", 
		"'DISTRIBUTED'", "'DISTRIBUTION'", "'DOUBLE'", "'DROP'", "'DUAL'", "'DUPLICATE'", 
		"'DYNAMIC'", "'ELSE'", "'ENCLOSE'", "'END'", "'ENGINE'", "'ENGINES'", 
		"'ERRORS'", "'ESCAPE'", "'EVENTS'", "'EXCEPT'", "'EXECUTE'", "'EXISTS'", 
		"'EXPLAIN'", "'EXPORT'", "'EXTERNAL'", "'EXTRACT'", "'EVERY'", "'FALSE'", 
		"'FIELDS'", "'FILE'", "'FILES'", "'FILTER'", "'FIRST'", "'FIRST_VALUE'", 
		"'FLOAT'", "'FLOOR'", "'FN'", "'FOLLOWING'", "'FOLLOWER'", "'FOR'", "'FORCE'", 
		"'FORMAT'", "'FREE'", "'FROM'", "'FRONTEND'", "'FRONTENDS'", "'FULL'", 
		"'FUNCTION'", "'FUNCTIONS'", "'GLOBAL'", "'GRANT'", "'GRANTS'", "'GROUP'", 
		"'GROUPS'", "'GROUPING'", "'GROUPING_ID'", "'HASH'", "'HAVING'", "'HELP'", 
		"'HISTOGRAM'", "'HLL'", "'HLL_UNION'", "'HOST'", "'HOUR'", "'HUB'", "'IDENTIFIED'", 
		"'IF'", "'IMPERSONATE'", "'IMMEDIATE'", "'IGNORE'", "'IMAGE'", "'IN'", 
		"'INACTIVE'", "'INCREMENTAL'", "'INDEX'", "'INDEXES'", "'INFILE'", "'INNER'", 
		"'INSTALL'", "'INSERT'", "'INT'", "'INTEGER'", "'INTEGRATION'", "'INTEGRATIONS'", 
		"'INTERMEDIATE'", "'INTERSECT'", "'INTERVAL'", "'INTO'", "'OVERWRITE'", 
		"'IS'", "'ISOLATION'", "'JOB'", "'JOIN'", "'JSON'", "'KEY'", "'KEYS'", 
		"'KILL'", "'LABEL'", "'LAG'", "'LARGEINT'", "'LAST'", "'LAST_VALUE'", 
		"'LATERAL'", "'LEAD'", "'LEFT'", "'LESS'", "'LEVEL'", "'LIKE'", "'LIMIT'", 
		"'LIST'", "'LOAD'", "'LOCAL'", "'LOCALTIME'", "'LOCALTIMESTAMP'", "'LOCATION'", 
		"'LOCATIONS'", "'LOGICAL'", "'MANUAL'", "'MAP'", "'MAPPING'", "'MAPPINGS'", 
		"'MASKING'", "'MATERIALIZED'", "'MAX'", "'MAXVALUE'", "'MERGE'", "'MIN'", 
		"'MINUTE'", "'MINUS'", "'META'", "'MOD'", "'MODE'", "'MODIFY'", "'MONTH'", 
		"'NAME'", "'NAMES'", "'NEGATIVE'", "'NO'", "'NODE'", "'NODES'", "'NONE'", 
		"'NOT'", "'NULL'", "'NULLS'", "'NUMBER'", "'NUMERIC'", "'OBSERVER'", "'OF'", 
		"'OFFSET'", "'ON'", "'ONLY'", "'OPEN'", "'OPERATE'", "'OPTIMIZER'", "'OPTION'", 
		"'OR'", "'ORDER'", "'OUTER'", "'OUTFILE'", "'OVER'", "'PARTITION'", "'PARTITIONS'", 
		"'PASSWORD'", "'PATH'", "'PAUSE'", "'PENDING'", "'PERCENT_RANK'", "'PERCENTILE'", 
		"'PERCENTILE_UNION'", "'PLUGIN'", "'PLUGINS'", "'POLICY'", "'POLICIES'", 
		"'PRECEDING'", "'PRIMARY'", "'PRIVILEGES'", "'PROC'", "'PROCEDURE'", "'PROCESSLIST'", 
		"'PROFILE'", "'PROFILELIST'", "'PROPERTIES'", "'PROPERTY'", "'QUALIFY'", 
		"'QUARTER'", "'QUERY'", "'QUEUE'", "'QUOTA'", "'RANDOM'", "'RANGE'", "'RANK'", 
		"'READ'", "'RECOVER'", "'REFRESH'", "'REWRITE'", "'REGEXP'", "'RELEASE'", 
		"'REMOVE'", "'RENAME'", "'REPAIR'", "'REPEATABLE'", "'REPLACE'", "'REPLACE_IF_NOT_NULL'", 
		"'REPLICA'", "'REPOSITORY'", "'REPOSITORIES'", "'RESOURCE'", "'RESOURCES'", 
		"'RESTORE'", "'RESUME'", "'RETURNS'", "'REVOKE'", "'REVERT'", "'RIGHT'", 
		"'RLIKE'", "'ROLE'", "'ROLES'", "'ROLLBACK'", "'ROLLUP'", "'ROUTINE'", 
		"'ROW'", "'ROWS'", "'ROW_NUMBER'", "'SAMPLE'", "'SCHEDULER'", "'SCHEMA'", 
		"'SCHEMAS'", "'SECOND'", "'SECURITY'", "'SELECT'", "'SEMI'", "'SERIALIZABLE'", 
		"'SESSION'", "'SET'", "'SETS'", "'SET_VAR'", "'SIGNED'", "'SKIP_HEADER'", 
		"'SHOW'", "'SMALLINT'", "'SNAPSHOT'", "'SQLBLACKLIST'", "'START'", "'STATS'", 
		"'STATUS'", "'STOP'", "'STORAGE'", "'STREAM'", "'STRING'", "'TEXT'", "'SUBMIT'", 
		"'SUM'", "'SUSPEND'", "'SYNC'", "'SYSTEM'", "'SYSTEM_TIME'", "'SWAP'", 
		"'STRUCT'", "'TABLE'", "'TABLES'", "'TABLET'", "'TASK'", "'TEMPORARY'", 
		"'TERMINATED'", "'THAN'", "'THEN'", "'TIME'", "'TIMESTAMP'", "'TIMESTAMPADD'", 
		"'TIMESTAMPDIFF'", "'TINYINT'", "'TRANSACTION'", "'TO'", "'TRACE'", "'TRIGGERS'", 
		"'TRIM_SPACE'", "'TRUE'", "'TRUNCATE'", "'TYPE'", "'TYPES'", "'UNBOUNDED'", 
		"'UNCOMMITTED'", "'UNION'", "'UNIQUE'", "'UNINSTALL'", "'UNSET'", "'UNSIGNED'", 
		"'UPDATE'", "'USAGE'", "'USE'", "'USER'", "'USERS'", "'USING'", "'VALUE'", 
		"'VALUES'", "'VARBINARY'", "'VARCHAR'", "'VARIABLES'", "'VERBOSE'", "'VIEW'", 
		"'VIEWS'", "'VOLUME'", "'VOLUMES'", "'WAREHOUSE'", "'WAREHOUSES'", "'WARNINGS'", 
		"'WEEK'", "'WHEN'", "'WHERE'", "'WHITELIST'", "'WITH'", "'WORK'", "'WRITE'", 
		"'YEAR'", "'LOCK'", "'UNLOCK'", "'LOW_PRIORITY'", "'='", undefined, "'<'", 
		"'<='", "'>'", "'>='", "'<=>'", "'+'", "'-'", "'*'", "'/'", "'%'", "'||'", 
		"'&&'", "'!'", "'DIV'", "'&'", "'|'", "'^'", "'~'", "'BITSHIFTLEFT'", 
		"'BITSHIFTRIGHT'", "'BITSHIFTRIGHTLOGICAL'", "'->'", "'@'", undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, "';'", 
		"':'", "'('", "')'", "','", "'.'", "'['", "']'", "'{'", "'}'", "'/*+'", 
		"'*/'", "'...'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "CONCAT", "ACTIVE", "ACCESS", "ADD", "ADMIN", "AFTER", "AGGREGATE", 
		"ALL", "ALTER", "ANALYZE", "AND", "ANTI", "APPLY", "ARRAY", "ARRAY_AGG", 
		"AS", "ASC", "ASYNC", "AUTHORS", "AUTHENTICATION", "AUTO_INCREMENT", "AVG", 
		"BACKEND", "BACKENDS", "BACKUP", "BASE", "BEGIN", "BETWEEN", "BIGINT", 
		"BINARY", "BITMAP", "BITMAP_UNION", "BLACKLIST", "BODY", "BOOLEAN", "BOTH", 
		"BROKER", "BUCKETS", "BUILTIN", "BY", "CANCEL", "CASE", "CAST", "CATALOG", 
		"CATALOGS", "CEIL", "CHAIN", "CHAR", "CHARACTER", "CHARSET", "CHECK", 
		"CLEAN", "CLUSTER", "CLUSTERS", "COLLATE", "COLLATION", "COLUMN", "COLUMNS", 
		"COMMENT", "COMMIT", "COMMITTED", "COMPACT", "COMPACTION", "COMPUTE", 
		"CONFIG", "CONNECTION", "CONSISTENT", "CONVERT", "COSTS", "COUNT", "CREATE", 
		"CROSS", "CUBE", "CUME_DIST", "CUMULATIVE", "CURRENT", "CURRENT_DATE", 
		"CURRENT_ROLE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "DATA", 
		"DATABASE", "DATABASES", "DATE", "DATETIME", "DAY", "DECIMAL", "DECIMALV2", 
		"DECIMAL32", "DECIMAL64", "DECIMAL128", "DECOMMISSION", "DEFAULT", "DELETE", 
		"DENSE_RANK", "DEFERRED", "NTILE", "DESC", "DESCRIBE", "DISTINCT", "DISTRIBUTED", 
		"DISTRIBUTION", "DOUBLE", "DROP", "DUAL", "DUPLICATE", "DYNAMIC", "ELSE", 
		"ENCLOSE", "END", "ENGINE", "ENGINES", "ERRORS", "ESCAPE", "EVENTS", "EXCEPT", 
		"EXECUTE", "EXISTS", "EXPLAIN", "EXPORT", "EXTERNAL", "EXTRACT", "EVERY", 
		"FALSE", "FIELDS", "FILE", "FILES", "FILTER", "FIRST", "FIRST_VALUE", 
		"FLOAT", "FLOOR", "FN", "FOLLOWING", "FOLLOWER", "FOR", "FORCE", "FORMAT", 
		"FREE", "FROM", "FRONTEND", "FRONTENDS", "FULL", "FUNCTION", "FUNCTIONS", 
		"GLOBAL", "GRANT", "GRANTS", "GROUP", "GROUPS", "GROUPING", "GROUPING_ID", 
		"HASH", "HAVING", "HELP", "HISTOGRAM", "HLL", "HLL_UNION", "HOST", "HOUR", 
		"HUB", "IDENTIFIED", "IF", "IMPERSONATE", "IMMEDIATE", "IGNORE", "IMAGE", 
		"IN", "INACTIVE", "INCREMENTAL", "INDEX", "INDEXES", "INFILE", "INNER", 
		"INSTALL", "INSERT", "INT", "INTEGER", "INTEGRATION", "INTEGRATIONS", 
		"INTERMEDIATE", "INTERSECT", "INTERVAL", "INTO", "OVERWRITE", "IS", "ISOLATION", 
		"JOB", "JOIN", "JSON", "KEY", "KEYS", "KILL", "LABEL", "LAG", "LARGEINT", 
		"LAST", "LAST_VALUE", "LATERAL", "LEAD", "LEFT", "LESS", "LEVEL", "LIKE", 
		"LIMIT", "LIST", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCATION", 
		"LOCATIONS", "LOGICAL", "MANUAL", "MAP", "MAPPING", "MAPPINGS", "MASKING", 
		"MATERIALIZED", "MAX", "MAXVALUE", "MERGE", "MIN", "MINUTE", "MINUS", 
		"META", "MOD", "MODE", "MODIFY", "MONTH", "NAME", "NAMES", "NEGATIVE", 
		"NO", "NODE", "NODES", "NONE", "NOT", "NULL", "NULLS", "NUMBER", "NUMERIC", 
		"OBSERVER", "OF", "OFFSET", "ON", "ONLY", "OPEN", "OPERATE", "OPTIMIZER", 
		"OPTION", "OR", "ORDER", "OUTER", "OUTFILE", "OVER", "PARTITION", "PARTITIONS", 
		"PASSWORD", "PATH", "PAUSE", "PENDING", "PERCENT_RANK", "PERCENTILE", 
		"PERCENTILE_UNION", "PLUGIN", "PLUGINS", "POLICY", "POLICIES", "PRECEDING", 
		"PRIMARY", "PRIVILEGES", "PROC", "PROCEDURE", "PROCESSLIST", "PROFILE", 
		"PROFILELIST", "PROPERTIES", "PROPERTY", "QUALIFY", "QUARTER", "QUERY", 
		"QUEUE", "QUOTA", "RANDOM", "RANGE", "RANK", "READ", "RECOVER", "REFRESH", 
		"REWRITE", "REGEXP", "RELEASE", "REMOVE", "RENAME", "REPAIR", "REPEATABLE", 
		"REPLACE", "REPLACE_IF_NOT_NULL", "REPLICA", "REPOSITORY", "REPOSITORIES", 
		"RESOURCE", "RESOURCES", "RESTORE", "RESUME", "RETURNS", "REVOKE", "REVERT", 
		"RIGHT", "RLIKE", "ROLE", "ROLES", "ROLLBACK", "ROLLUP", "ROUTINE", "ROW", 
		"ROWS", "ROW_NUMBER", "SAMPLE", "SCHEDULER", "SCHEMA", "SCHEMAS", "SECOND", 
		"SECURITY", "SELECT", "SEMI", "SERIALIZABLE", "SESSION", "SET", "SETS", 
		"SET_VAR", "SIGNED", "SKIP_HEADER", "SHOW", "SMALLINT", "SNAPSHOT", "SQLBLACKLIST", 
		"START", "STATS", "STATUS", "STOP", "STORAGE", "STREAM", "STRING", "TEXT", 
		"SUBMIT", "SUM", "SUSPEND", "SYNC", "SYSTEM", "SYSTEM_TIME", "SWAP", "STRUCT", 
		"TABLE", "TABLES", "TABLET", "TASK", "TEMPORARY", "TERMINATED", "THAN", 
		"THEN", "TIME", "TIMESTAMP", "TIMESTAMPADD", "TIMESTAMPDIFF", "TINYINT", 
		"TRANSACTION", "TO", "TRACE", "TRIGGERS", "TRIM_SPACE", "TRUE", "TRUNCATE", 
		"TYPE", "TYPES", "UNBOUNDED", "UNCOMMITTED", "UNION", "UNIQUE", "UNINSTALL", 
		"UNSET", "UNSIGNED", "UPDATE", "USAGE", "USE", "USER", "USERS", "USING", 
		"VALUE", "VALUES", "VARBINARY", "VARCHAR", "VARIABLES", "VERBOSE", "VIEW", 
		"VIEWS", "VOLUME", "VOLUMES", "WAREHOUSE", "WAREHOUSES", "WARNINGS", "WEEK", 
		"WHEN", "WHERE", "WHITELIST", "WITH", "WORK", "WRITE", "YEAR", "LOCK", 
		"UNLOCK", "LOW_PRIORITY", "EQ", "NEQ", "LT", "LTE", "GT", "GTE", "EQ_FOR_NULL", 
		"PLUS_SYMBOL", "MINUS_SYMBOL", "ASTERISK_SYMBOL", "SLASH_SYMBOL", "PERCENT_SYMBOL", 
		"LOGICAL_OR", "LOGICAL_AND", "LOGICAL_NOT", "INT_DIV", "BITAND", "BITOR", 
		"BITXOR", "BITNOT", "BIT_SHIFT_LEFT", "BIT_SHIFT_RIGHT", "BIT_SHIFT_RIGHT_LOGICAL", 
		"ARROW", "AT", "INTEGER_VALUE", "DECIMAL_VALUE", "DOUBLE_VALUE", "SINGLE_QUOTED_TEXT", 
		"DOUBLE_QUOTED_TEXT", "BINARY_SINGLE_QUOTED_TEXT", "BINARY_DOUBLE_QUOTED_TEXT", 
		"LETTER_IDENTIFIER", "DIGIT_IDENTIFIER", "QUOTED_IDENTIFIER", "BACKQUOTED_IDENTIFIER", 
		"DOT_IDENTIFIER", "SIMPLE_COMMENT", "BRACKETED_COMMENT", "SEMICOLON", 
		"COLON", "LEFT_PAREN", "RIGHT_PAREN", "COMMA", "DOT", "LEFT_BRACKET", 
		"RIGHT_BRACKET", "LEFT_BRACE", "RIGHT_BRACE", "HENT_START", "HENT_END", 
		"DOTDOTDOT", "WS", "LEFT_PARENpropertyRIGHT_PAREN",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(StarRocksSqlParser._LITERAL_NAMES, StarRocksSqlParser._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return StarRocksSqlParser.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace

	// @Override
	public get grammarFileName(): string { return "StarRocksSqlParser.g4"; }

	// @Override
	public get ruleNames(): string[] { return StarRocksSqlParser.ruleNames; }

	// @Override
	public get serializedATN(): string { return StarRocksSqlParser._serializedATN; }

	protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException {
		return new FailedPredicateException(this, predicate, message);
	}

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(StarRocksSqlParser._ATN, this);
	}
	// @RuleVersion(0)
	public program(): ProgramContext {
		let _localctx: ProgramContext = new ProgramContext(this._ctx, this.state);
		this.enterRule(_localctx, 0, StarRocksSqlParser.RULE_program);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 833;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 0, this._ctx) ) {
			case 1:
				{
				this.state = 832;
				this.sqlStatements();
				}
				break;
			}
			this.state = 835;
			this.match(StarRocksSqlParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sqlStatements(): SqlStatementsContext {
		let _localctx: SqlStatementsContext = new SqlStatementsContext(this._ctx, this.state);
		this.enterRule(_localctx, 2, StarRocksSqlParser.RULE_sqlStatements);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 840;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << StarRocksSqlParser.ADD) | (1 << StarRocksSqlParser.ADMIN) | (1 << StarRocksSqlParser.ALTER) | (1 << StarRocksSqlParser.ANALYZE) | (1 << StarRocksSqlParser.BACKUP) | (1 << StarRocksSqlParser.BEGIN))) !== 0) || ((((_la - 41)) & ~0x1F) === 0 && ((1 << (_la - 41)) & ((1 << (StarRocksSqlParser.CANCEL - 41)) | (1 << (StarRocksSqlParser.COMMIT - 41)) | (1 << (StarRocksSqlParser.CREATE - 41)))) !== 0) || ((((_la - 95)) & ~0x1F) === 0 && ((1 << (_la - 95)) & ((1 << (StarRocksSqlParser.DELETE - 95)) | (1 << (StarRocksSqlParser.DESC - 95)) | (1 << (StarRocksSqlParser.DESCRIBE - 95)) | (1 << (StarRocksSqlParser.DROP - 95)) | (1 << (StarRocksSqlParser.EXECUTE - 95)) | (1 << (StarRocksSqlParser.EXPLAIN - 95)) | (1 << (StarRocksSqlParser.EXPORT - 95)))) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & ((1 << (StarRocksSqlParser.GRANT - 148)) | (1 << (StarRocksSqlParser.HELP - 148)) | (1 << (StarRocksSqlParser.INSTALL - 148)) | (1 << (StarRocksSqlParser.INSERT - 148)))) !== 0) || _la === StarRocksSqlParser.KILL || _la === StarRocksSqlParser.LOAD || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & ((1 << (StarRocksSqlParser.PAUSE - 262)) | (1 << (StarRocksSqlParser.RECOVER - 262)) | (1 << (StarRocksSqlParser.REFRESH - 262)))) !== 0) || ((((_la - 306)) & ~0x1F) === 0 && ((1 << (_la - 306)) & ((1 << (StarRocksSqlParser.RESTORE - 306)) | (1 << (StarRocksSqlParser.RESUME - 306)) | (1 << (StarRocksSqlParser.REVOKE - 306)) | (1 << (StarRocksSqlParser.ROLLBACK - 306)) | (1 << (StarRocksSqlParser.SELECT - 306)) | (1 << (StarRocksSqlParser.SET - 306)) | (1 << (StarRocksSqlParser.SHOW - 306)))) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & ((1 << (StarRocksSqlParser.START - 340)) | (1 << (StarRocksSqlParser.STOP - 340)) | (1 << (StarRocksSqlParser.SUBMIT - 340)) | (1 << (StarRocksSqlParser.SUSPEND - 340)) | (1 << (StarRocksSqlParser.SYNC - 340)) | (1 << (StarRocksSqlParser.TRACE - 340)))) !== 0) || ((((_la - 375)) & ~0x1F) === 0 && ((1 << (_la - 375)) & ((1 << (StarRocksSqlParser.TRUNCATE - 375)) | (1 << (StarRocksSqlParser.UNINSTALL - 375)) | (1 << (StarRocksSqlParser.UPDATE - 375)) | (1 << (StarRocksSqlParser.USE - 375)))) !== 0) || ((((_la - 408)) & ~0x1F) === 0 && ((1 << (_la - 408)) & ((1 << (StarRocksSqlParser.WITH - 408)) | (1 << (StarRocksSqlParser.LOCK - 408)) | (1 << (StarRocksSqlParser.UNLOCK - 408)))) !== 0) || _la === StarRocksSqlParser.LEFT_PAREN) {
				{
				{
				this.state = 837;
				this.singleStatement();
				}
				}
				this.state = 842;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 843;
			this.match(StarRocksSqlParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public singleStatement(): SingleStatementContext {
		let _localctx: SingleStatementContext = new SingleStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 4, StarRocksSqlParser.RULE_singleStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 845;
			this.statement();
			this.state = 847;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.SEMICOLON) {
				{
				this.state = 846;
				this.match(StarRocksSqlParser.SEMICOLON);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public statement(): StatementContext {
		let _localctx: StatementContext = new StatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 6, StarRocksSqlParser.RULE_statement);
		try {
			this.state = 1050;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 3, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 849;
				this.queryStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 850;
				this.createWarehouseStatement();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 851;
				this.dropWarehouseStatement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 852;
				this.showWarehousesStatement();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 853;
				this.alterWarehouseStatement();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 854;
				this.showClustersStatement();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 855;
				this.suspendWarehouseStatement();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 856;
				this.resumeWarehouseStatement();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 857;
				this.useDatabaseStatement();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 858;
				this.useCatalogStatement();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 859;
				this.setCatalogStatement();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 860;
				this.showDatabasesStatement();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 861;
				this.alterDbQuotaStatement();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 862;
				this.createDbStatement();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 863;
				this.dropDbStatement();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 864;
				this.showCreateDbStatement();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 865;
				this.alterDatabaseRenameStatement();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 866;
				this.recoverDbStmt();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 867;
				this.showDataStmt();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 868;
				this.createTableStatement();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 869;
				this.createTableAsSelectStatement();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 870;
				this.createTemporaryTableStatement();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 871;
				this.createTableLikeStatement();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 872;
				this.showCreateTableStatement();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 873;
				this.dropTableStatement();
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 874;
				this.recoverTableStatement();
				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 875;
				this.truncateTableStatement();
				}
				break;

			case 28:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 876;
				this.showTableStatement();
				}
				break;

			case 29:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 877;
				this.descTableStatement();
				}
				break;

			case 30:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 878;
				this.showTableStatusStatement();
				}
				break;

			case 31:
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 879;
				this.showColumnStatement();
				}
				break;

			case 32:
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 880;
				this.refreshTableStatement();
				}
				break;

			case 33:
				this.enterOuterAlt(_localctx, 33);
				{
				this.state = 881;
				this.alterTableStatement();
				}
				break;

			case 34:
				this.enterOuterAlt(_localctx, 34);
				{
				this.state = 882;
				this.cancelAlterTableStatement();
				}
				break;

			case 35:
				this.enterOuterAlt(_localctx, 35);
				{
				this.state = 883;
				this.showAlterStatement();
				}
				break;

			case 36:
				this.enterOuterAlt(_localctx, 36);
				{
				this.state = 884;
				this.createViewStatement();
				}
				break;

			case 37:
				this.enterOuterAlt(_localctx, 37);
				{
				this.state = 885;
				this.alterViewStatement();
				}
				break;

			case 38:
				this.enterOuterAlt(_localctx, 38);
				{
				this.state = 886;
				this.dropViewStatement();
				}
				break;

			case 39:
				this.enterOuterAlt(_localctx, 39);
				{
				this.state = 887;
				this.showPartitionsStatement();
				}
				break;

			case 40:
				this.enterOuterAlt(_localctx, 40);
				{
				this.state = 888;
				this.recoverPartitionStatement();
				}
				break;

			case 41:
				this.enterOuterAlt(_localctx, 41);
				{
				this.state = 889;
				this.createIndexStatement();
				}
				break;

			case 42:
				this.enterOuterAlt(_localctx, 42);
				{
				this.state = 890;
				this.dropIndexStatement();
				}
				break;

			case 43:
				this.enterOuterAlt(_localctx, 43);
				{
				this.state = 891;
				this.showIndexStatement();
				}
				break;

			case 44:
				this.enterOuterAlt(_localctx, 44);
				{
				this.state = 892;
				this.submitTaskStatement();
				}
				break;

			case 45:
				this.enterOuterAlt(_localctx, 45);
				{
				this.state = 893;
				this.dropTaskStatement();
				}
				break;

			case 46:
				this.enterOuterAlt(_localctx, 46);
				{
				this.state = 894;
				this.createMaterializedViewStatement();
				}
				break;

			case 47:
				this.enterOuterAlt(_localctx, 47);
				{
				this.state = 895;
				this.showMaterializedViewsStatement();
				}
				break;

			case 48:
				this.enterOuterAlt(_localctx, 48);
				{
				this.state = 896;
				this.dropMaterializedViewStatement();
				}
				break;

			case 49:
				this.enterOuterAlt(_localctx, 49);
				{
				this.state = 897;
				this.alterMaterializedViewStatement();
				}
				break;

			case 50:
				this.enterOuterAlt(_localctx, 50);
				{
				this.state = 898;
				this.refreshMaterializedViewStatement();
				}
				break;

			case 51:
				this.enterOuterAlt(_localctx, 51);
				{
				this.state = 899;
				this.cancelRefreshMaterializedViewStatement();
				}
				break;

			case 52:
				this.enterOuterAlt(_localctx, 52);
				{
				this.state = 900;
				this.createExternalCatalogStatement();
				}
				break;

			case 53:
				this.enterOuterAlt(_localctx, 53);
				{
				this.state = 901;
				this.dropExternalCatalogStatement();
				}
				break;

			case 54:
				this.enterOuterAlt(_localctx, 54);
				{
				this.state = 902;
				this.showCatalogsStatement();
				}
				break;

			case 55:
				this.enterOuterAlt(_localctx, 55);
				{
				this.state = 903;
				this.showCreateExternalCatalogStatement();
				}
				break;

			case 56:
				this.enterOuterAlt(_localctx, 56);
				{
				this.state = 904;
				this.insertStatement();
				}
				break;

			case 57:
				this.enterOuterAlt(_localctx, 57);
				{
				this.state = 905;
				this.updateStatement();
				}
				break;

			case 58:
				this.enterOuterAlt(_localctx, 58);
				{
				this.state = 906;
				this.deleteStatement();
				}
				break;

			case 59:
				this.enterOuterAlt(_localctx, 59);
				{
				this.state = 907;
				this.createRoutineLoadStatement();
				}
				break;

			case 60:
				this.enterOuterAlt(_localctx, 60);
				{
				this.state = 908;
				this.alterRoutineLoadStatement();
				}
				break;

			case 61:
				this.enterOuterAlt(_localctx, 61);
				{
				this.state = 909;
				this.stopRoutineLoadStatement();
				}
				break;

			case 62:
				this.enterOuterAlt(_localctx, 62);
				{
				this.state = 910;
				this.resumeRoutineLoadStatement();
				}
				break;

			case 63:
				this.enterOuterAlt(_localctx, 63);
				{
				this.state = 911;
				this.pauseRoutineLoadStatement();
				}
				break;

			case 64:
				this.enterOuterAlt(_localctx, 64);
				{
				this.state = 912;
				this.showRoutineLoadStatement();
				}
				break;

			case 65:
				this.enterOuterAlt(_localctx, 65);
				{
				this.state = 913;
				this.showRoutineLoadTaskStatement();
				}
				break;

			case 66:
				this.enterOuterAlt(_localctx, 66);
				{
				this.state = 914;
				this.showStreamLoadStatement();
				}
				break;

			case 67:
				this.enterOuterAlt(_localctx, 67);
				{
				this.state = 915;
				this.adminSetConfigStatement();
				}
				break;

			case 68:
				this.enterOuterAlt(_localctx, 68);
				{
				this.state = 916;
				this.adminSetReplicaStatusStatement();
				}
				break;

			case 69:
				this.enterOuterAlt(_localctx, 69);
				{
				this.state = 917;
				this.adminShowConfigStatement();
				}
				break;

			case 70:
				this.enterOuterAlt(_localctx, 70);
				{
				this.state = 918;
				this.adminShowReplicaDistributionStatement();
				}
				break;

			case 71:
				this.enterOuterAlt(_localctx, 71);
				{
				this.state = 919;
				this.adminShowReplicaStatusStatement();
				}
				break;

			case 72:
				this.enterOuterAlt(_localctx, 72);
				{
				this.state = 920;
				this.adminRepairTableStatement();
				}
				break;

			case 73:
				this.enterOuterAlt(_localctx, 73);
				{
				this.state = 921;
				this.adminCancelRepairTableStatement();
				}
				break;

			case 74:
				this.enterOuterAlt(_localctx, 74);
				{
				this.state = 922;
				this.adminCheckTabletsStatement();
				}
				break;

			case 75:
				this.enterOuterAlt(_localctx, 75);
				{
				this.state = 923;
				this.killStatement();
				}
				break;

			case 76:
				this.enterOuterAlt(_localctx, 76);
				{
				this.state = 924;
				this.syncStatement();
				}
				break;

			case 77:
				this.enterOuterAlt(_localctx, 77);
				{
				this.state = 925;
				this.executeScriptStatement();
				}
				break;

			case 78:
				this.enterOuterAlt(_localctx, 78);
				{
				this.state = 926;
				this.alterSystemStatement();
				}
				break;

			case 79:
				this.enterOuterAlt(_localctx, 79);
				{
				this.state = 927;
				this.cancelAlterSystemStatement();
				}
				break;

			case 80:
				this.enterOuterAlt(_localctx, 80);
				{
				this.state = 928;
				this.showComputeNodesStatement();
				}
				break;

			case 81:
				this.enterOuterAlt(_localctx, 81);
				{
				this.state = 929;
				this.analyzeStatement();
				}
				break;

			case 82:
				this.enterOuterAlt(_localctx, 82);
				{
				this.state = 930;
				this.dropStatsStatement();
				}
				break;

			case 83:
				this.enterOuterAlt(_localctx, 83);
				{
				this.state = 931;
				this.createAnalyzeStatement();
				}
				break;

			case 84:
				this.enterOuterAlt(_localctx, 84);
				{
				this.state = 932;
				this.dropAnalyzeJobStatement();
				}
				break;

			case 85:
				this.enterOuterAlt(_localctx, 85);
				{
				this.state = 933;
				this.analyzeHistogramStatement();
				}
				break;

			case 86:
				this.enterOuterAlt(_localctx, 86);
				{
				this.state = 934;
				this.dropHistogramStatement();
				}
				break;

			case 87:
				this.enterOuterAlt(_localctx, 87);
				{
				this.state = 935;
				this.showAnalyzeStatement();
				}
				break;

			case 88:
				this.enterOuterAlt(_localctx, 88);
				{
				this.state = 936;
				this.showStatsMetaStatement();
				}
				break;

			case 89:
				this.enterOuterAlt(_localctx, 89);
				{
				this.state = 937;
				this.showHistogramMetaStatement();
				}
				break;

			case 90:
				this.enterOuterAlt(_localctx, 90);
				{
				this.state = 938;
				this.killAnalyzeStatement();
				}
				break;

			case 91:
				this.enterOuterAlt(_localctx, 91);
				{
				this.state = 939;
				this.analyzeProfileStatement();
				}
				break;

			case 92:
				this.enterOuterAlt(_localctx, 92);
				{
				this.state = 940;
				this.createResourceGroupStatement();
				}
				break;

			case 93:
				this.enterOuterAlt(_localctx, 93);
				{
				this.state = 941;
				this.dropResourceGroupStatement();
				}
				break;

			case 94:
				this.enterOuterAlt(_localctx, 94);
				{
				this.state = 942;
				this.alterResourceGroupStatement();
				}
				break;

			case 95:
				this.enterOuterAlt(_localctx, 95);
				{
				this.state = 943;
				this.showResourceGroupStatement();
				}
				break;

			case 96:
				this.enterOuterAlt(_localctx, 96);
				{
				this.state = 944;
				this.createResourceStatement();
				}
				break;

			case 97:
				this.enterOuterAlt(_localctx, 97);
				{
				this.state = 945;
				this.alterResourceStatement();
				}
				break;

			case 98:
				this.enterOuterAlt(_localctx, 98);
				{
				this.state = 946;
				this.dropResourceStatement();
				}
				break;

			case 99:
				this.enterOuterAlt(_localctx, 99);
				{
				this.state = 947;
				this.showResourceStatement();
				}
				break;

			case 100:
				this.enterOuterAlt(_localctx, 100);
				{
				this.state = 948;
				this.showFunctionsStatement();
				}
				break;

			case 101:
				this.enterOuterAlt(_localctx, 101);
				{
				this.state = 949;
				this.dropFunctionStatement();
				}
				break;

			case 102:
				this.enterOuterAlt(_localctx, 102);
				{
				this.state = 950;
				this.createFunctionStatement();
				}
				break;

			case 103:
				this.enterOuterAlt(_localctx, 103);
				{
				this.state = 951;
				this.loadStatement();
				}
				break;

			case 104:
				this.enterOuterAlt(_localctx, 104);
				{
				this.state = 952;
				this.showLoadStatement();
				}
				break;

			case 105:
				this.enterOuterAlt(_localctx, 105);
				{
				this.state = 953;
				this.showLoadWarningsStatement();
				}
				break;

			case 106:
				this.enterOuterAlt(_localctx, 106);
				{
				this.state = 954;
				this.cancelLoadStatement();
				}
				break;

			case 107:
				this.enterOuterAlt(_localctx, 107);
				{
				this.state = 955;
				this.alterLoadStatement();
				}
				break;

			case 108:
				this.enterOuterAlt(_localctx, 108);
				{
				this.state = 956;
				this.showAuthorStatement();
				}
				break;

			case 109:
				this.enterOuterAlt(_localctx, 109);
				{
				this.state = 957;
				this.showBackendsStatement();
				}
				break;

			case 110:
				this.enterOuterAlt(_localctx, 110);
				{
				this.state = 958;
				this.showBrokerStatement();
				}
				break;

			case 111:
				this.enterOuterAlt(_localctx, 111);
				{
				this.state = 959;
				this.showCharsetStatement();
				}
				break;

			case 112:
				this.enterOuterAlt(_localctx, 112);
				{
				this.state = 960;
				this.showCollationStatement();
				}
				break;

			case 113:
				this.enterOuterAlt(_localctx, 113);
				{
				this.state = 961;
				this.showDeleteStatement();
				}
				break;

			case 114:
				this.enterOuterAlt(_localctx, 114);
				{
				this.state = 962;
				this.showDynamicPartitionStatement();
				}
				break;

			case 115:
				this.enterOuterAlt(_localctx, 115);
				{
				this.state = 963;
				this.showEventsStatement();
				}
				break;

			case 116:
				this.enterOuterAlt(_localctx, 116);
				{
				this.state = 964;
				this.showEnginesStatement();
				}
				break;

			case 117:
				this.enterOuterAlt(_localctx, 117);
				{
				this.state = 965;
				this.showFrontendsStatement();
				}
				break;

			case 118:
				this.enterOuterAlt(_localctx, 118);
				{
				this.state = 966;
				this.showPluginsStatement();
				}
				break;

			case 119:
				this.enterOuterAlt(_localctx, 119);
				{
				this.state = 967;
				this.showRepositoriesStatement();
				}
				break;

			case 120:
				this.enterOuterAlt(_localctx, 120);
				{
				this.state = 968;
				this.showOpenTableStatement();
				}
				break;

			case 121:
				this.enterOuterAlt(_localctx, 121);
				{
				this.state = 969;
				this.showPrivilegesStatement();
				}
				break;

			case 122:
				this.enterOuterAlt(_localctx, 122);
				{
				this.state = 970;
				this.showProcedureStatement();
				}
				break;

			case 123:
				this.enterOuterAlt(_localctx, 123);
				{
				this.state = 971;
				this.showProcStatement();
				}
				break;

			case 124:
				this.enterOuterAlt(_localctx, 124);
				{
				this.state = 972;
				this.showProcesslistStatement();
				}
				break;

			case 125:
				this.enterOuterAlt(_localctx, 125);
				{
				this.state = 973;
				this.showProfilelistStatement();
				}
				break;

			case 126:
				this.enterOuterAlt(_localctx, 126);
				{
				this.state = 974;
				this.showStatusStatement();
				}
				break;

			case 127:
				this.enterOuterAlt(_localctx, 127);
				{
				this.state = 975;
				this.showTabletStatement();
				}
				break;

			case 128:
				this.enterOuterAlt(_localctx, 128);
				{
				this.state = 976;
				this.showTransactionStatement();
				}
				break;

			case 129:
				this.enterOuterAlt(_localctx, 129);
				{
				this.state = 977;
				this.showTriggersStatement();
				}
				break;

			case 130:
				this.enterOuterAlt(_localctx, 130);
				{
				this.state = 978;
				this.showUserPropertyStatement();
				}
				break;

			case 131:
				this.enterOuterAlt(_localctx, 131);
				{
				this.state = 979;
				this.showVariablesStatement();
				}
				break;

			case 132:
				this.enterOuterAlt(_localctx, 132);
				{
				this.state = 980;
				this.showWarningStatement();
				}
				break;

			case 133:
				this.enterOuterAlt(_localctx, 133);
				{
				this.state = 981;
				this.helpStatement();
				}
				break;

			case 134:
				this.enterOuterAlt(_localctx, 134);
				{
				this.state = 982;
				this.createUserStatement();
				}
				break;

			case 135:
				this.enterOuterAlt(_localctx, 135);
				{
				this.state = 983;
				this.dropUserStatement();
				}
				break;

			case 136:
				this.enterOuterAlt(_localctx, 136);
				{
				this.state = 984;
				this.alterUserStatement();
				}
				break;

			case 137:
				this.enterOuterAlt(_localctx, 137);
				{
				this.state = 985;
				this.showUserStatement();
				}
				break;

			case 138:
				this.enterOuterAlt(_localctx, 138);
				{
				this.state = 986;
				this.showAuthenticationStatement();
				}
				break;

			case 139:
				this.enterOuterAlt(_localctx, 139);
				{
				this.state = 987;
				this.executeAsStatement();
				}
				break;

			case 140:
				this.enterOuterAlt(_localctx, 140);
				{
				this.state = 988;
				this.createRoleStatement();
				}
				break;

			case 141:
				this.enterOuterAlt(_localctx, 141);
				{
				this.state = 989;
				this.alterRoleStatement();
				}
				break;

			case 142:
				this.enterOuterAlt(_localctx, 142);
				{
				this.state = 990;
				this.dropRoleStatement();
				}
				break;

			case 143:
				this.enterOuterAlt(_localctx, 143);
				{
				this.state = 991;
				this.showRolesStatement();
				}
				break;

			case 144:
				this.enterOuterAlt(_localctx, 144);
				{
				this.state = 992;
				this.grantRoleStatement();
				}
				break;

			case 145:
				this.enterOuterAlt(_localctx, 145);
				{
				this.state = 993;
				this.revokeRoleStatement();
				}
				break;

			case 146:
				this.enterOuterAlt(_localctx, 146);
				{
				this.state = 994;
				this.setRoleStatement();
				}
				break;

			case 147:
				this.enterOuterAlt(_localctx, 147);
				{
				this.state = 995;
				this.setDefaultRoleStatement();
				}
				break;

			case 148:
				this.enterOuterAlt(_localctx, 148);
				{
				this.state = 996;
				this.grantPrivilegeStatement();
				}
				break;

			case 149:
				this.enterOuterAlt(_localctx, 149);
				{
				this.state = 997;
				this.revokePrivilegeStatement();
				}
				break;

			case 150:
				this.enterOuterAlt(_localctx, 150);
				{
				this.state = 998;
				this.showGrantsStatement();
				}
				break;

			case 151:
				this.enterOuterAlt(_localctx, 151);
				{
				this.state = 999;
				this.createSecurityIntegrationStatement();
				}
				break;

			case 152:
				this.enterOuterAlt(_localctx, 152);
				{
				this.state = 1000;
				this.alterSecurityIntegrationStatement();
				}
				break;

			case 153:
				this.enterOuterAlt(_localctx, 153);
				{
				this.state = 1001;
				this.dropSecurityIntegrationStatement();
				}
				break;

			case 154:
				this.enterOuterAlt(_localctx, 154);
				{
				this.state = 1002;
				this.showSecurityIntegrationStatement();
				}
				break;

			case 155:
				this.enterOuterAlt(_localctx, 155);
				{
				this.state = 1003;
				this.showCreateSecurityIntegrationStatement();
				}
				break;

			case 156:
				this.enterOuterAlt(_localctx, 156);
				{
				this.state = 1004;
				this.createRoleMappingStatement();
				}
				break;

			case 157:
				this.enterOuterAlt(_localctx, 157);
				{
				this.state = 1005;
				this.alterRoleMappingStatement();
				}
				break;

			case 158:
				this.enterOuterAlt(_localctx, 158);
				{
				this.state = 1006;
				this.dropRoleMappingStatement();
				}
				break;

			case 159:
				this.enterOuterAlt(_localctx, 159);
				{
				this.state = 1007;
				this.showRoleMappingStatement();
				}
				break;

			case 160:
				this.enterOuterAlt(_localctx, 160);
				{
				this.state = 1008;
				this.refreshRoleMappingStatement();
				}
				break;

			case 161:
				this.enterOuterAlt(_localctx, 161);
				{
				this.state = 1009;
				this.createMaskingPolicyStatement();
				}
				break;

			case 162:
				this.enterOuterAlt(_localctx, 162);
				{
				this.state = 1010;
				this.dropMaskingPolicyStatement();
				}
				break;

			case 163:
				this.enterOuterAlt(_localctx, 163);
				{
				this.state = 1011;
				this.alterMaskingPolicyStatement();
				}
				break;

			case 164:
				this.enterOuterAlt(_localctx, 164);
				{
				this.state = 1012;
				this.showMaskingPolicyStatement();
				}
				break;

			case 165:
				this.enterOuterAlt(_localctx, 165);
				{
				this.state = 1013;
				this.showCreateMaskingPolicyStatement();
				}
				break;

			case 166:
				this.enterOuterAlt(_localctx, 166);
				{
				this.state = 1014;
				this.createRowAccessPolicyStatement();
				}
				break;

			case 167:
				this.enterOuterAlt(_localctx, 167);
				{
				this.state = 1015;
				this.dropRowAccessPolicyStatement();
				}
				break;

			case 168:
				this.enterOuterAlt(_localctx, 168);
				{
				this.state = 1016;
				this.alterRowAccessPolicyStatement();
				}
				break;

			case 169:
				this.enterOuterAlt(_localctx, 169);
				{
				this.state = 1017;
				this.showRowAccessPolicyStatement();
				}
				break;

			case 170:
				this.enterOuterAlt(_localctx, 170);
				{
				this.state = 1018;
				this.showCreateRowAccessPolicyStatement();
				}
				break;

			case 171:
				this.enterOuterAlt(_localctx, 171);
				{
				this.state = 1019;
				this.backupStatement();
				}
				break;

			case 172:
				this.enterOuterAlt(_localctx, 172);
				{
				this.state = 1020;
				this.cancelBackupStatement();
				}
				break;

			case 173:
				this.enterOuterAlt(_localctx, 173);
				{
				this.state = 1021;
				this.showBackupStatement();
				}
				break;

			case 174:
				this.enterOuterAlt(_localctx, 174);
				{
				this.state = 1022;
				this.restoreStatement();
				}
				break;

			case 175:
				this.enterOuterAlt(_localctx, 175);
				{
				this.state = 1023;
				this.cancelRestoreStatement();
				}
				break;

			case 176:
				this.enterOuterAlt(_localctx, 176);
				{
				this.state = 1024;
				this.showRestoreStatement();
				}
				break;

			case 177:
				this.enterOuterAlt(_localctx, 177);
				{
				this.state = 1025;
				this.showSnapshotStatement();
				}
				break;

			case 178:
				this.enterOuterAlt(_localctx, 178);
				{
				this.state = 1026;
				this.createRepositoryStatement();
				}
				break;

			case 179:
				this.enterOuterAlt(_localctx, 179);
				{
				this.state = 1027;
				this.dropRepositoryStatement();
				}
				break;

			case 180:
				this.enterOuterAlt(_localctx, 180);
				{
				this.state = 1028;
				this.addSqlBlackListStatement();
				}
				break;

			case 181:
				this.enterOuterAlt(_localctx, 181);
				{
				this.state = 1029;
				this.delSqlBlackListStatement();
				}
				break;

			case 182:
				this.enterOuterAlt(_localctx, 182);
				{
				this.state = 1030;
				this.showSqlBlackListStatement();
				}
				break;

			case 183:
				this.enterOuterAlt(_localctx, 183);
				{
				this.state = 1031;
				this.showWhiteListStatement();
				}
				break;

			case 184:
				this.enterOuterAlt(_localctx, 184);
				{
				this.state = 1032;
				this.exportStatement();
				}
				break;

			case 185:
				this.enterOuterAlt(_localctx, 185);
				{
				this.state = 1033;
				this.cancelExportStatement();
				}
				break;

			case 186:
				this.enterOuterAlt(_localctx, 186);
				{
				this.state = 1034;
				this.showExportStatement();
				}
				break;

			case 187:
				this.enterOuterAlt(_localctx, 187);
				{
				this.state = 1035;
				this.installPluginStatement();
				}
				break;

			case 188:
				this.enterOuterAlt(_localctx, 188);
				{
				this.state = 1036;
				this.uninstallPluginStatement();
				}
				break;

			case 189:
				this.enterOuterAlt(_localctx, 189);
				{
				this.state = 1037;
				this.createFileStatement();
				}
				break;

			case 190:
				this.enterOuterAlt(_localctx, 190);
				{
				this.state = 1038;
				this.dropFileStatement();
				}
				break;

			case 191:
				this.enterOuterAlt(_localctx, 191);
				{
				this.state = 1039;
				this.showSmallFilesStatement();
				}
				break;

			case 192:
				this.enterOuterAlt(_localctx, 192);
				{
				this.state = 1040;
				this.setStatement();
				}
				break;

			case 193:
				this.enterOuterAlt(_localctx, 193);
				{
				this.state = 1041;
				this.setUserPropertyStatement();
				}
				break;

			case 194:
				this.enterOuterAlt(_localctx, 194);
				{
				this.state = 1042;
				this.createStorageVolumeStatement();
				}
				break;

			case 195:
				this.enterOuterAlt(_localctx, 195);
				{
				this.state = 1043;
				this.alterStorageVolumeStatement();
				}
				break;

			case 196:
				this.enterOuterAlt(_localctx, 196);
				{
				this.state = 1044;
				this.dropStorageVolumeStatement();
				}
				break;

			case 197:
				this.enterOuterAlt(_localctx, 197);
				{
				this.state = 1045;
				this.showStorageVolumesStatement();
				}
				break;

			case 198:
				this.enterOuterAlt(_localctx, 198);
				{
				this.state = 1046;
				this.descStorageVolumeStatement();
				}
				break;

			case 199:
				this.enterOuterAlt(_localctx, 199);
				{
				this.state = 1047;
				this.setDefaultStorageVolumeStatement();
				}
				break;

			case 200:
				this.enterOuterAlt(_localctx, 200);
				{
				this.state = 1048;
				this.cancelCompactionStatement();
				}
				break;

			case 201:
				this.enterOuterAlt(_localctx, 201);
				{
				this.state = 1049;
				this.unsupportedStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public useDatabaseStatement(): UseDatabaseStatementContext {
		let _localctx: UseDatabaseStatementContext = new UseDatabaseStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 8, StarRocksSqlParser.RULE_useDatabaseStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1052;
			this.match(StarRocksSqlParser.USE);
			this.state = 1053;
			this.qualifiedName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public useCatalogStatement(): UseCatalogStatementContext {
		let _localctx: UseCatalogStatementContext = new UseCatalogStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 10, StarRocksSqlParser.RULE_useCatalogStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1055;
			this.match(StarRocksSqlParser.USE);
			this.state = 1056;
			this.string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setCatalogStatement(): SetCatalogStatementContext {
		let _localctx: SetCatalogStatementContext = new SetCatalogStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 12, StarRocksSqlParser.RULE_setCatalogStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1058;
			this.match(StarRocksSqlParser.SET);
			this.state = 1059;
			this.match(StarRocksSqlParser.CATALOG);
			this.state = 1060;
			this.identifierOrString();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showDatabasesStatement(): ShowDatabasesStatementContext {
		let _localctx: ShowDatabasesStatementContext = new ShowDatabasesStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 14, StarRocksSqlParser.RULE_showDatabasesStatement);
		let _la: number;
		try {
			this.state = 1082;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 7, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1062;
				this.match(StarRocksSqlParser.SHOW);
				this.state = 1063;
				this.match(StarRocksSqlParser.DATABASES);
				this.state = 1066;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN) {
					{
					this.state = 1064;
					_la = this._input.LA(1);
					if (!(_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1065;
					_localctx._catalog = this.qualifiedName();
					}
				}

				this.state = 1072;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case StarRocksSqlParser.LIKE:
					{
					{
					this.state = 1068;
					this.match(StarRocksSqlParser.LIKE);
					this.state = 1069;
					_localctx._pattern = this.string();
					}
					}
					break;
				case StarRocksSqlParser.WHERE:
					{
					{
					this.state = 1070;
					this.match(StarRocksSqlParser.WHERE);
					this.state = 1071;
					this.expression(0);
					}
					}
					break;
				case StarRocksSqlParser.EOF:
				case StarRocksSqlParser.ADD:
				case StarRocksSqlParser.ADMIN:
				case StarRocksSqlParser.ALTER:
				case StarRocksSqlParser.ANALYZE:
				case StarRocksSqlParser.BACKUP:
				case StarRocksSqlParser.BEGIN:
				case StarRocksSqlParser.CANCEL:
				case StarRocksSqlParser.COMMIT:
				case StarRocksSqlParser.CREATE:
				case StarRocksSqlParser.DELETE:
				case StarRocksSqlParser.DESC:
				case StarRocksSqlParser.DESCRIBE:
				case StarRocksSqlParser.DROP:
				case StarRocksSqlParser.EXECUTE:
				case StarRocksSqlParser.EXPLAIN:
				case StarRocksSqlParser.EXPORT:
				case StarRocksSqlParser.GRANT:
				case StarRocksSqlParser.HELP:
				case StarRocksSqlParser.INSTALL:
				case StarRocksSqlParser.INSERT:
				case StarRocksSqlParser.KILL:
				case StarRocksSqlParser.LOAD:
				case StarRocksSqlParser.PAUSE:
				case StarRocksSqlParser.RECOVER:
				case StarRocksSqlParser.REFRESH:
				case StarRocksSqlParser.RESTORE:
				case StarRocksSqlParser.RESUME:
				case StarRocksSqlParser.REVOKE:
				case StarRocksSqlParser.ROLLBACK:
				case StarRocksSqlParser.SELECT:
				case StarRocksSqlParser.SET:
				case StarRocksSqlParser.SHOW:
				case StarRocksSqlParser.START:
				case StarRocksSqlParser.STOP:
				case StarRocksSqlParser.SUBMIT:
				case StarRocksSqlParser.SUSPEND:
				case StarRocksSqlParser.SYNC:
				case StarRocksSqlParser.TRACE:
				case StarRocksSqlParser.TRUNCATE:
				case StarRocksSqlParser.UNINSTALL:
				case StarRocksSqlParser.UPDATE:
				case StarRocksSqlParser.USE:
				case StarRocksSqlParser.WITH:
				case StarRocksSqlParser.LOCK:
				case StarRocksSqlParser.UNLOCK:
				case StarRocksSqlParser.SEMICOLON:
				case StarRocksSqlParser.LEFT_PAREN:
					break;
				default:
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1074;
				this.match(StarRocksSqlParser.SHOW);
				this.state = 1075;
				this.match(StarRocksSqlParser.SCHEMAS);
				this.state = 1080;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case StarRocksSqlParser.LIKE:
					{
					{
					this.state = 1076;
					this.match(StarRocksSqlParser.LIKE);
					this.state = 1077;
					_localctx._pattern = this.string();
					}
					}
					break;
				case StarRocksSqlParser.WHERE:
					{
					{
					this.state = 1078;
					this.match(StarRocksSqlParser.WHERE);
					this.state = 1079;
					this.expression(0);
					}
					}
					break;
				case StarRocksSqlParser.EOF:
				case StarRocksSqlParser.ADD:
				case StarRocksSqlParser.ADMIN:
				case StarRocksSqlParser.ALTER:
				case StarRocksSqlParser.ANALYZE:
				case StarRocksSqlParser.BACKUP:
				case StarRocksSqlParser.BEGIN:
				case StarRocksSqlParser.CANCEL:
				case StarRocksSqlParser.COMMIT:
				case StarRocksSqlParser.CREATE:
				case StarRocksSqlParser.DELETE:
				case StarRocksSqlParser.DESC:
				case StarRocksSqlParser.DESCRIBE:
				case StarRocksSqlParser.DROP:
				case StarRocksSqlParser.EXECUTE:
				case StarRocksSqlParser.EXPLAIN:
				case StarRocksSqlParser.EXPORT:
				case StarRocksSqlParser.GRANT:
				case StarRocksSqlParser.HELP:
				case StarRocksSqlParser.INSTALL:
				case StarRocksSqlParser.INSERT:
				case StarRocksSqlParser.KILL:
				case StarRocksSqlParser.LOAD:
				case StarRocksSqlParser.PAUSE:
				case StarRocksSqlParser.RECOVER:
				case StarRocksSqlParser.REFRESH:
				case StarRocksSqlParser.RESTORE:
				case StarRocksSqlParser.RESUME:
				case StarRocksSqlParser.REVOKE:
				case StarRocksSqlParser.ROLLBACK:
				case StarRocksSqlParser.SELECT:
				case StarRocksSqlParser.SET:
				case StarRocksSqlParser.SHOW:
				case StarRocksSqlParser.START:
				case StarRocksSqlParser.STOP:
				case StarRocksSqlParser.SUBMIT:
				case StarRocksSqlParser.SUSPEND:
				case StarRocksSqlParser.SYNC:
				case StarRocksSqlParser.TRACE:
				case StarRocksSqlParser.TRUNCATE:
				case StarRocksSqlParser.UNINSTALL:
				case StarRocksSqlParser.UPDATE:
				case StarRocksSqlParser.USE:
				case StarRocksSqlParser.WITH:
				case StarRocksSqlParser.LOCK:
				case StarRocksSqlParser.UNLOCK:
				case StarRocksSqlParser.SEMICOLON:
				case StarRocksSqlParser.LEFT_PAREN:
					break;
				default:
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterDbQuotaStatement(): AlterDbQuotaStatementContext {
		let _localctx: AlterDbQuotaStatementContext = new AlterDbQuotaStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 16, StarRocksSqlParser.RULE_alterDbQuotaStatement);
		try {
			this.state = 1100;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 8, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1084;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 1085;
				this.match(StarRocksSqlParser.DATABASE);
				this.state = 1086;
				this.identifier();
				this.state = 1087;
				this.match(StarRocksSqlParser.SET);
				this.state = 1088;
				this.match(StarRocksSqlParser.DATA);
				this.state = 1089;
				this.match(StarRocksSqlParser.QUOTA);
				this.state = 1090;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1092;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 1093;
				this.match(StarRocksSqlParser.DATABASE);
				this.state = 1094;
				this.identifier();
				this.state = 1095;
				this.match(StarRocksSqlParser.SET);
				this.state = 1096;
				this.match(StarRocksSqlParser.REPLICA);
				this.state = 1097;
				this.match(StarRocksSqlParser.QUOTA);
				this.state = 1098;
				this.match(StarRocksSqlParser.INTEGER_VALUE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createDbStatement(): CreateDbStatementContext {
		let _localctx: CreateDbStatementContext = new CreateDbStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 18, StarRocksSqlParser.RULE_createDbStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1102;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 1103;
			_la = this._input.LA(1);
			if (!(_la === StarRocksSqlParser.DATABASE || _la === StarRocksSqlParser.SCHEMA)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1107;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 1104;
				this.match(StarRocksSqlParser.IF);
				this.state = 1105;
				this.match(StarRocksSqlParser.NOT);
				this.state = 1106;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 1112;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 10, this._ctx) ) {
			case 1:
				{
				this.state = 1109;
				_localctx._catalog = this.identifier();
				this.state = 1110;
				this.match(StarRocksSqlParser.DOT);
				}
				break;
			}
			this.state = 1114;
			_localctx._database = this.identifier();
			this.state = 1116;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 11, this._ctx) ) {
			case 1:
				{
				this.state = 1115;
				this.charsetDesc();
				}
				break;
			}
			this.state = 1119;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.COLLATE || _la === StarRocksSqlParser.DEFAULT) {
				{
				this.state = 1118;
				this.collateDesc();
				}
			}

			this.state = 1122;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PROPERTIES) {
				{
				this.state = 1121;
				this.properties();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropDbStatement(): DropDbStatementContext {
		let _localctx: DropDbStatementContext = new DropDbStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 20, StarRocksSqlParser.RULE_dropDbStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1124;
			this.match(StarRocksSqlParser.DROP);
			this.state = 1125;
			_la = this._input.LA(1);
			if (!(_la === StarRocksSqlParser.DATABASE || _la === StarRocksSqlParser.SCHEMA)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1128;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 1126;
				this.match(StarRocksSqlParser.IF);
				this.state = 1127;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 1133;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 15, this._ctx) ) {
			case 1:
				{
				this.state = 1130;
				_localctx._catalog = this.identifier();
				this.state = 1131;
				this.match(StarRocksSqlParser.DOT);
				}
				break;
			}
			this.state = 1135;
			_localctx._database = this.identifier();
			this.state = 1137;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FORCE) {
				{
				this.state = 1136;
				this.match(StarRocksSqlParser.FORCE);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showCreateDbStatement(): ShowCreateDbStatementContext {
		let _localctx: ShowCreateDbStatementContext = new ShowCreateDbStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 22, StarRocksSqlParser.RULE_showCreateDbStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1139;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 1140;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 1141;
			_la = this._input.LA(1);
			if (!(_la === StarRocksSqlParser.DATABASE || _la === StarRocksSqlParser.SCHEMA)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1142;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterDatabaseRenameStatement(): AlterDatabaseRenameStatementContext {
		let _localctx: AlterDatabaseRenameStatementContext = new AlterDatabaseRenameStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 24, StarRocksSqlParser.RULE_alterDatabaseRenameStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1144;
			this.match(StarRocksSqlParser.ALTER);
			this.state = 1145;
			this.match(StarRocksSqlParser.DATABASE);
			this.state = 1146;
			this.identifier();
			this.state = 1147;
			this.match(StarRocksSqlParser.RENAME);
			this.state = 1148;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public recoverDbStmt(): RecoverDbStmtContext {
		let _localctx: RecoverDbStmtContext = new RecoverDbStmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 26, StarRocksSqlParser.RULE_recoverDbStmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1150;
			this.match(StarRocksSqlParser.RECOVER);
			this.state = 1151;
			_la = this._input.LA(1);
			if (!(_la === StarRocksSqlParser.DATABASE || _la === StarRocksSqlParser.SCHEMA)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1152;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showDataStmt(): ShowDataStmtContext {
		let _localctx: ShowDataStmtContext = new ShowDataStmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 28, StarRocksSqlParser.RULE_showDataStmt);
		try {
			this.state = 1160;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 17, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1154;
				this.match(StarRocksSqlParser.SHOW);
				this.state = 1155;
				this.match(StarRocksSqlParser.DATA);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1156;
				this.match(StarRocksSqlParser.SHOW);
				this.state = 1157;
				this.match(StarRocksSqlParser.DATA);
				this.state = 1158;
				this.match(StarRocksSqlParser.FROM);
				this.state = 1159;
				this.qualifiedName();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createTableStatement(): CreateTableStatementContext {
		let _localctx: CreateTableStatementContext = new CreateTableStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 30, StarRocksSqlParser.RULE_createTableStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1162;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 1164;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.EXTERNAL) {
				{
				this.state = 1163;
				this.match(StarRocksSqlParser.EXTERNAL);
				}
			}

			this.state = 1166;
			this.match(StarRocksSqlParser.TABLE);
			this.state = 1170;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 1167;
				this.match(StarRocksSqlParser.IF);
				this.state = 1168;
				this.match(StarRocksSqlParser.NOT);
				this.state = 1169;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 1172;
			this.qualifiedName();
			this.state = 1173;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 1174;
			this.columnDesc();
			this.state = 1179;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 20, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1175;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 1176;
					this.columnDesc();
					}
					}
				}
				this.state = 1181;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 20, this._ctx);
			}
			this.state = 1186;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 1182;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 1183;
				this.indexDesc();
				}
				}
				this.state = 1188;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1189;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			this.state = 1191;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.ENGINE) {
				{
				this.state = 1190;
				this.engineDesc();
				}
			}

			this.state = 1194;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 48)) & ~0x1F) === 0 && ((1 << (_la - 48)) & ((1 << (StarRocksSqlParser.CHAR - 48)) | (1 << (StarRocksSqlParser.CHARACTER - 48)) | (1 << (StarRocksSqlParser.CHARSET - 48)))) !== 0) || _la === StarRocksSqlParser.DEFAULT) {
				{
				this.state = 1193;
				this.charsetDesc();
				}
			}

			this.state = 1197;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.AGGREGATE || _la === StarRocksSqlParser.DUPLICATE || _la === StarRocksSqlParser.PRIMARY || _la === StarRocksSqlParser.UNIQUE) {
				{
				this.state = 1196;
				this.keyDesc();
				}
			}

			this.state = 1202;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 25, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1199;
					this.withRowAccessPolicy();
					}
					}
				}
				this.state = 1204;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 25, this._ctx);
			}
			this.state = 1206;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.COMMENT) {
				{
				this.state = 1205;
				this.comment();
				}
			}

			this.state = 1209;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PARTITION) {
				{
				this.state = 1208;
				this.partitionDesc();
				}
			}

			this.state = 1212;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.DISTRIBUTED) {
				{
				this.state = 1211;
				this.distributionDesc();
				}
			}

			this.state = 1215;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.ORDER) {
				{
				this.state = 1214;
				this.orderByDesc();
				}
			}

			this.state = 1218;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.ROLLUP) {
				{
				this.state = 1217;
				this.rollupDesc();
				}
			}

			this.state = 1221;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PROPERTIES) {
				{
				this.state = 1220;
				this.properties();
				}
			}

			this.state = 1224;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.BROKER) {
				{
				this.state = 1223;
				this.extProperties();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnDesc(): ColumnDescContext {
		let _localctx: ColumnDescContext = new ColumnDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 32, StarRocksSqlParser.RULE_columnDesc);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1226;
			this.identifier();
			this.state = 1227;
			this.type();
			this.state = 1229;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 48)) & ~0x1F) === 0 && ((1 << (_la - 48)) & ((1 << (StarRocksSqlParser.CHAR - 48)) | (1 << (StarRocksSqlParser.CHARACTER - 48)) | (1 << (StarRocksSqlParser.CHARSET - 48)))) !== 0)) {
				{
				this.state = 1228;
				this.charsetName();
				}
			}

			this.state = 1232;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.KEY) {
				{
				this.state = 1231;
				this.match(StarRocksSqlParser.KEY);
				}
			}

			this.state = 1235;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.BITMAP_UNION || _la === StarRocksSqlParser.HLL_UNION || _la === StarRocksSqlParser.MAX || _la === StarRocksSqlParser.MIN || _la === StarRocksSqlParser.PERCENTILE_UNION || _la === StarRocksSqlParser.REPLACE || _la === StarRocksSqlParser.REPLACE_IF_NOT_NULL || _la === StarRocksSqlParser.SUM) {
				{
				this.state = 1234;
				this.aggDesc();
				}
			}

			this.state = 1240;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.NULL:
				{
				this.state = 1237;
				this.match(StarRocksSqlParser.NULL);
				}
				break;
			case StarRocksSqlParser.NOT:
				{
				this.state = 1238;
				this.match(StarRocksSqlParser.NOT);
				this.state = 1239;
				this.match(StarRocksSqlParser.NULL);
				}
				break;
			case StarRocksSqlParser.EOF:
			case StarRocksSqlParser.ADD:
			case StarRocksSqlParser.ADMIN:
			case StarRocksSqlParser.AFTER:
			case StarRocksSqlParser.ALTER:
			case StarRocksSqlParser.ANALYZE:
			case StarRocksSqlParser.AS:
			case StarRocksSqlParser.AUTO_INCREMENT:
			case StarRocksSqlParser.BACKUP:
			case StarRocksSqlParser.BEGIN:
			case StarRocksSqlParser.CANCEL:
			case StarRocksSqlParser.COMMENT:
			case StarRocksSqlParser.COMMIT:
			case StarRocksSqlParser.CREATE:
			case StarRocksSqlParser.DEFAULT:
			case StarRocksSqlParser.DELETE:
			case StarRocksSqlParser.DESC:
			case StarRocksSqlParser.DESCRIBE:
			case StarRocksSqlParser.DROP:
			case StarRocksSqlParser.EXECUTE:
			case StarRocksSqlParser.EXPLAIN:
			case StarRocksSqlParser.EXPORT:
			case StarRocksSqlParser.FIRST:
			case StarRocksSqlParser.FROM:
			case StarRocksSqlParser.GRANT:
			case StarRocksSqlParser.HELP:
			case StarRocksSqlParser.IN:
			case StarRocksSqlParser.INSTALL:
			case StarRocksSqlParser.INSERT:
			case StarRocksSqlParser.KILL:
			case StarRocksSqlParser.LOAD:
			case StarRocksSqlParser.PAUSE:
			case StarRocksSqlParser.PROPERTIES:
			case StarRocksSqlParser.RECOVER:
			case StarRocksSqlParser.REFRESH:
			case StarRocksSqlParser.RESTORE:
			case StarRocksSqlParser.RESUME:
			case StarRocksSqlParser.REVOKE:
			case StarRocksSqlParser.ROLLBACK:
			case StarRocksSqlParser.SELECT:
			case StarRocksSqlParser.SET:
			case StarRocksSqlParser.SHOW:
			case StarRocksSqlParser.START:
			case StarRocksSqlParser.STOP:
			case StarRocksSqlParser.SUBMIT:
			case StarRocksSqlParser.SUSPEND:
			case StarRocksSqlParser.SYNC:
			case StarRocksSqlParser.TO:
			case StarRocksSqlParser.TRACE:
			case StarRocksSqlParser.TRUNCATE:
			case StarRocksSqlParser.UNINSTALL:
			case StarRocksSqlParser.UPDATE:
			case StarRocksSqlParser.USE:
			case StarRocksSqlParser.WITH:
			case StarRocksSqlParser.LOCK:
			case StarRocksSqlParser.UNLOCK:
			case StarRocksSqlParser.SEMICOLON:
			case StarRocksSqlParser.LEFT_PAREN:
			case StarRocksSqlParser.RIGHT_PAREN:
			case StarRocksSqlParser.COMMA:
				break;
			default:
				break;
			}
			this.state = 1245;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.DEFAULT:
				{
				this.state = 1242;
				this.defaultDesc();
				}
				break;
			case StarRocksSqlParser.AUTO_INCREMENT:
				{
				this.state = 1243;
				this.match(StarRocksSqlParser.AUTO_INCREMENT);
				}
				break;
			case StarRocksSqlParser.AS:
				{
				this.state = 1244;
				this.materializedColumnDesc();
				}
				break;
			case StarRocksSqlParser.EOF:
			case StarRocksSqlParser.ADD:
			case StarRocksSqlParser.ADMIN:
			case StarRocksSqlParser.AFTER:
			case StarRocksSqlParser.ALTER:
			case StarRocksSqlParser.ANALYZE:
			case StarRocksSqlParser.BACKUP:
			case StarRocksSqlParser.BEGIN:
			case StarRocksSqlParser.CANCEL:
			case StarRocksSqlParser.COMMENT:
			case StarRocksSqlParser.COMMIT:
			case StarRocksSqlParser.CREATE:
			case StarRocksSqlParser.DELETE:
			case StarRocksSqlParser.DESC:
			case StarRocksSqlParser.DESCRIBE:
			case StarRocksSqlParser.DROP:
			case StarRocksSqlParser.EXECUTE:
			case StarRocksSqlParser.EXPLAIN:
			case StarRocksSqlParser.EXPORT:
			case StarRocksSqlParser.FIRST:
			case StarRocksSqlParser.FROM:
			case StarRocksSqlParser.GRANT:
			case StarRocksSqlParser.HELP:
			case StarRocksSqlParser.IN:
			case StarRocksSqlParser.INSTALL:
			case StarRocksSqlParser.INSERT:
			case StarRocksSqlParser.KILL:
			case StarRocksSqlParser.LOAD:
			case StarRocksSqlParser.PAUSE:
			case StarRocksSqlParser.PROPERTIES:
			case StarRocksSqlParser.RECOVER:
			case StarRocksSqlParser.REFRESH:
			case StarRocksSqlParser.RESTORE:
			case StarRocksSqlParser.RESUME:
			case StarRocksSqlParser.REVOKE:
			case StarRocksSqlParser.ROLLBACK:
			case StarRocksSqlParser.SELECT:
			case StarRocksSqlParser.SET:
			case StarRocksSqlParser.SHOW:
			case StarRocksSqlParser.START:
			case StarRocksSqlParser.STOP:
			case StarRocksSqlParser.SUBMIT:
			case StarRocksSqlParser.SUSPEND:
			case StarRocksSqlParser.SYNC:
			case StarRocksSqlParser.TO:
			case StarRocksSqlParser.TRACE:
			case StarRocksSqlParser.TRUNCATE:
			case StarRocksSqlParser.UNINSTALL:
			case StarRocksSqlParser.UPDATE:
			case StarRocksSqlParser.USE:
			case StarRocksSqlParser.WITH:
			case StarRocksSqlParser.LOCK:
			case StarRocksSqlParser.UNLOCK:
			case StarRocksSqlParser.SEMICOLON:
			case StarRocksSqlParser.LEFT_PAREN:
			case StarRocksSqlParser.RIGHT_PAREN:
			case StarRocksSqlParser.COMMA:
				break;
			default:
				break;
			}
			this.state = 1248;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 38, this._ctx) ) {
			case 1:
				{
				this.state = 1247;
				this.withMaskingPolicy();
				}
				break;
			}
			this.state = 1251;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.COMMENT) {
				{
				this.state = 1250;
				this.comment();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public charsetName(): CharsetNameContext {
		let _localctx: CharsetNameContext = new CharsetNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 34, StarRocksSqlParser.RULE_charsetName);
		try {
			this.state = 1261;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.CHAR:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1253;
				this.match(StarRocksSqlParser.CHAR);
				this.state = 1254;
				this.match(StarRocksSqlParser.SET);
				this.state = 1255;
				this.identifier();
				}
				break;
			case StarRocksSqlParser.CHARSET:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1256;
				this.match(StarRocksSqlParser.CHARSET);
				this.state = 1257;
				this.identifier();
				}
				break;
			case StarRocksSqlParser.CHARACTER:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1258;
				this.match(StarRocksSqlParser.CHARACTER);
				this.state = 1259;
				this.match(StarRocksSqlParser.SET);
				this.state = 1260;
				this.identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public defaultDesc(): DefaultDescContext {
		let _localctx: DefaultDescContext = new DefaultDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 36, StarRocksSqlParser.RULE_defaultDesc);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1263;
			this.match(StarRocksSqlParser.DEFAULT);
			this.state = 1273;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.SINGLE_QUOTED_TEXT:
			case StarRocksSqlParser.DOUBLE_QUOTED_TEXT:
				{
				this.state = 1264;
				this.string();
				}
				break;
			case StarRocksSqlParser.NULL:
				{
				this.state = 1265;
				this.match(StarRocksSqlParser.NULL);
				}
				break;
			case StarRocksSqlParser.CURRENT_TIMESTAMP:
				{
				this.state = 1266;
				this.match(StarRocksSqlParser.CURRENT_TIMESTAMP);
				}
				break;
			case StarRocksSqlParser.LEFT_PAREN:
				{
				this.state = 1267;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 1268;
				this.qualifiedName();
				this.state = 1269;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 1270;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				this.state = 1271;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public materializedColumnDesc(): MaterializedColumnDescContext {
		let _localctx: MaterializedColumnDescContext = new MaterializedColumnDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 38, StarRocksSqlParser.RULE_materializedColumnDesc);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1275;
			this.match(StarRocksSqlParser.AS);
			this.state = 1276;
			this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexDesc(): IndexDescContext {
		let _localctx: IndexDescContext = new IndexDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 40, StarRocksSqlParser.RULE_indexDesc);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1278;
			this.match(StarRocksSqlParser.INDEX);
			this.state = 1279;
			_localctx._indexName = this.identifier();
			this.state = 1280;
			this.identifierList();
			this.state = 1282;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.USING) {
				{
				this.state = 1281;
				this.indexType();
				}
			}

			this.state = 1285;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.COMMENT) {
				{
				this.state = 1284;
				this.comment();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public engineDesc(): EngineDescContext {
		let _localctx: EngineDescContext = new EngineDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 42, StarRocksSqlParser.RULE_engineDesc);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1287;
			this.match(StarRocksSqlParser.ENGINE);
			this.state = 1288;
			this.match(StarRocksSqlParser.EQ);
			this.state = 1289;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public charsetDesc(): CharsetDescContext {
		let _localctx: CharsetDescContext = new CharsetDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 44, StarRocksSqlParser.RULE_charsetDesc);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1292;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.DEFAULT) {
				{
				this.state = 1291;
				this.match(StarRocksSqlParser.DEFAULT);
				}
			}

			this.state = 1299;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.CHAR:
				{
				this.state = 1294;
				this.match(StarRocksSqlParser.CHAR);
				this.state = 1295;
				this.match(StarRocksSqlParser.SET);
				}
				break;
			case StarRocksSqlParser.CHARSET:
				{
				this.state = 1296;
				this.match(StarRocksSqlParser.CHARSET);
				}
				break;
			case StarRocksSqlParser.CHARACTER:
				{
				this.state = 1297;
				this.match(StarRocksSqlParser.CHARACTER);
				this.state = 1298;
				this.match(StarRocksSqlParser.SET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1302;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.EQ) {
				{
				this.state = 1301;
				this.match(StarRocksSqlParser.EQ);
				}
			}

			this.state = 1304;
			this.identifierOrString();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public collateDesc(): CollateDescContext {
		let _localctx: CollateDescContext = new CollateDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 46, StarRocksSqlParser.RULE_collateDesc);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1307;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.DEFAULT) {
				{
				this.state = 1306;
				this.match(StarRocksSqlParser.DEFAULT);
				}
			}

			this.state = 1309;
			this.match(StarRocksSqlParser.COLLATE);
			this.state = 1311;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.EQ) {
				{
				this.state = 1310;
				this.match(StarRocksSqlParser.EQ);
				}
			}

			this.state = 1313;
			this.identifierOrString();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public keyDesc(): KeyDescContext {
		let _localctx: KeyDescContext = new KeyDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 48, StarRocksSqlParser.RULE_keyDesc);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1315;
			_la = this._input.LA(1);
			if (!(_la === StarRocksSqlParser.AGGREGATE || _la === StarRocksSqlParser.DUPLICATE || _la === StarRocksSqlParser.PRIMARY || _la === StarRocksSqlParser.UNIQUE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1316;
			this.match(StarRocksSqlParser.KEY);
			this.state = 1317;
			this.identifierList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public orderByDesc(): OrderByDescContext {
		let _localctx: OrderByDescContext = new OrderByDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 50, StarRocksSqlParser.RULE_orderByDesc);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1319;
			this.match(StarRocksSqlParser.ORDER);
			this.state = 1320;
			this.match(StarRocksSqlParser.BY);
			this.state = 1321;
			this.identifierList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public aggDesc(): AggDescContext {
		let _localctx: AggDescContext = new AggDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 52, StarRocksSqlParser.RULE_aggDesc);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1323;
			_la = this._input.LA(1);
			if (!(_la === StarRocksSqlParser.BITMAP_UNION || _la === StarRocksSqlParser.HLL_UNION || _la === StarRocksSqlParser.MAX || _la === StarRocksSqlParser.MIN || _la === StarRocksSqlParser.PERCENTILE_UNION || _la === StarRocksSqlParser.REPLACE || _la === StarRocksSqlParser.REPLACE_IF_NOT_NULL || _la === StarRocksSqlParser.SUM)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rollupDesc(): RollupDescContext {
		let _localctx: RollupDescContext = new RollupDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 54, StarRocksSqlParser.RULE_rollupDesc);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1325;
			this.match(StarRocksSqlParser.ROLLUP);
			this.state = 1326;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 1327;
			this.rollupItem();
			this.state = 1332;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 1328;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 1329;
				this.rollupItem();
				}
				}
				this.state = 1334;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1335;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rollupItem(): RollupItemContext {
		let _localctx: RollupItemContext = new RollupItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 56, StarRocksSqlParser.RULE_rollupItem);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1337;
			_localctx._rollupName = this.identifier();
			this.state = 1338;
			this.identifierList();
			this.state = 1340;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.DUPLICATE) {
				{
				this.state = 1339;
				this.dupKeys();
				}
			}

			this.state = 1343;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM) {
				{
				this.state = 1342;
				this.fromRollup();
				}
			}

			this.state = 1346;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PROPERTIES) {
				{
				this.state = 1345;
				this.properties();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dupKeys(): DupKeysContext {
		let _localctx: DupKeysContext = new DupKeysContext(this._ctx, this.state);
		this.enterRule(_localctx, 58, StarRocksSqlParser.RULE_dupKeys);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1348;
			this.match(StarRocksSqlParser.DUPLICATE);
			this.state = 1349;
			this.match(StarRocksSqlParser.KEY);
			this.state = 1350;
			this.identifierList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fromRollup(): FromRollupContext {
		let _localctx: FromRollupContext = new FromRollupContext(this._ctx, this.state);
		this.enterRule(_localctx, 60, StarRocksSqlParser.RULE_fromRollup);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1352;
			this.match(StarRocksSqlParser.FROM);
			this.state = 1353;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public withMaskingPolicy(): WithMaskingPolicyContext {
		let _localctx: WithMaskingPolicyContext = new WithMaskingPolicyContext(this._ctx, this.state);
		this.enterRule(_localctx, 62, StarRocksSqlParser.RULE_withMaskingPolicy);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1355;
			this.match(StarRocksSqlParser.WITH);
			this.state = 1356;
			this.match(StarRocksSqlParser.MASKING);
			this.state = 1357;
			this.match(StarRocksSqlParser.POLICY);
			this.state = 1358;
			_localctx._policyName = this.qualifiedName();
			this.state = 1361;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.USING) {
				{
				this.state = 1359;
				this.match(StarRocksSqlParser.USING);
				this.state = 1360;
				this.identifierList();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public withRowAccessPolicy(): WithRowAccessPolicyContext {
		let _localctx: WithRowAccessPolicyContext = new WithRowAccessPolicyContext(this._ctx, this.state);
		this.enterRule(_localctx, 64, StarRocksSqlParser.RULE_withRowAccessPolicy);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1363;
			this.match(StarRocksSqlParser.WITH);
			this.state = 1364;
			this.match(StarRocksSqlParser.ROW);
			this.state = 1365;
			this.match(StarRocksSqlParser.ACCESS);
			this.state = 1366;
			this.match(StarRocksSqlParser.POLICY);
			this.state = 1367;
			_localctx._policyName = this.qualifiedName();
			this.state = 1370;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.ON) {
				{
				this.state = 1368;
				this.match(StarRocksSqlParser.ON);
				this.state = 1369;
				this.identifierList();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createTemporaryTableStatement(): CreateTemporaryTableStatementContext {
		let _localctx: CreateTemporaryTableStatementContext = new CreateTemporaryTableStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 66, StarRocksSqlParser.RULE_createTemporaryTableStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1372;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 1373;
			this.match(StarRocksSqlParser.TEMPORARY);
			this.state = 1374;
			this.match(StarRocksSqlParser.TABLE);
			this.state = 1375;
			this.qualifiedName();
			this.state = 1376;
			this.queryStatement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createTableAsSelectStatement(): CreateTableAsSelectStatementContext {
		let _localctx: CreateTableAsSelectStatementContext = new CreateTableAsSelectStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 68, StarRocksSqlParser.RULE_createTableAsSelectStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1378;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 1379;
			this.match(StarRocksSqlParser.TABLE);
			this.state = 1383;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 1380;
				this.match(StarRocksSqlParser.IF);
				this.state = 1381;
				this.match(StarRocksSqlParser.NOT);
				this.state = 1382;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 1385;
			this.qualifiedName();
			this.state = 1397;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.LEFT_PAREN) {
				{
				this.state = 1386;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 1387;
				this.identifier();
				this.state = 1392;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 1388;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 1389;
					this.identifier();
					}
					}
					this.state = 1394;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1395;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
			}

			this.state = 1400;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.AGGREGATE || _la === StarRocksSqlParser.DUPLICATE || _la === StarRocksSqlParser.PRIMARY || _la === StarRocksSqlParser.UNIQUE) {
				{
				this.state = 1399;
				this.keyDesc();
				}
			}

			this.state = 1403;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.COMMENT) {
				{
				this.state = 1402;
				this.comment();
				}
			}

			this.state = 1406;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PARTITION) {
				{
				this.state = 1405;
				this.partitionDesc();
				}
			}

			this.state = 1409;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.DISTRIBUTED) {
				{
				this.state = 1408;
				this.distributionDesc();
				}
			}

			this.state = 1412;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PROPERTIES) {
				{
				this.state = 1411;
				this.properties();
				}
			}

			this.state = 1414;
			this.match(StarRocksSqlParser.AS);
			this.state = 1415;
			this.queryStatement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropTableStatement(): DropTableStatementContext {
		let _localctx: DropTableStatementContext = new DropTableStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 70, StarRocksSqlParser.RULE_dropTableStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1417;
			this.match(StarRocksSqlParser.DROP);
			this.state = 1419;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.TEMPORARY) {
				{
				this.state = 1418;
				this.match(StarRocksSqlParser.TEMPORARY);
				}
			}

			this.state = 1421;
			this.match(StarRocksSqlParser.TABLE);
			this.state = 1424;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 1422;
				this.match(StarRocksSqlParser.IF);
				this.state = 1423;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 1426;
			this.qualifiedName();
			this.state = 1428;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FORCE) {
				{
				this.state = 1427;
				this.match(StarRocksSqlParser.FORCE);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterTableStatement(): AlterTableStatementContext {
		let _localctx: AlterTableStatementContext = new AlterTableStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 72, StarRocksSqlParser.RULE_alterTableStatement);
		let _la: number;
		try {
			this.state = 1467;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 69, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1430;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 1431;
				this.match(StarRocksSqlParser.TABLE);
				this.state = 1432;
				this.qualifiedName();
				this.state = 1433;
				this.alterClause();
				this.state = 1438;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 1434;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 1435;
					this.alterClause();
					}
					}
					this.state = 1440;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1441;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 1442;
				this.match(StarRocksSqlParser.TABLE);
				this.state = 1443;
				this.qualifiedName();
				this.state = 1444;
				this.match(StarRocksSqlParser.ADD);
				this.state = 1445;
				this.match(StarRocksSqlParser.ROLLUP);
				this.state = 1446;
				this.rollupItem();
				this.state = 1451;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 1447;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 1448;
					this.rollupItem();
					}
					}
					this.state = 1453;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1454;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 1455;
				this.match(StarRocksSqlParser.TABLE);
				this.state = 1456;
				this.qualifiedName();
				this.state = 1457;
				this.match(StarRocksSqlParser.DROP);
				this.state = 1458;
				this.match(StarRocksSqlParser.ROLLUP);
				this.state = 1459;
				this.identifier();
				this.state = 1464;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 1460;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 1461;
					this.identifier();
					}
					}
					this.state = 1466;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createIndexStatement(): CreateIndexStatementContext {
		let _localctx: CreateIndexStatementContext = new CreateIndexStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 74, StarRocksSqlParser.RULE_createIndexStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1469;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 1470;
			this.match(StarRocksSqlParser.INDEX);
			this.state = 1471;
			_localctx._indexName = this.identifier();
			this.state = 1472;
			this.match(StarRocksSqlParser.ON);
			this.state = 1473;
			this.qualifiedName();
			this.state = 1474;
			this.identifierList();
			this.state = 1476;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.USING) {
				{
				this.state = 1475;
				this.indexType();
				}
			}

			this.state = 1479;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.COMMENT) {
				{
				this.state = 1478;
				this.comment();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropIndexStatement(): DropIndexStatementContext {
		let _localctx: DropIndexStatementContext = new DropIndexStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 76, StarRocksSqlParser.RULE_dropIndexStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1481;
			this.match(StarRocksSqlParser.DROP);
			this.state = 1482;
			this.match(StarRocksSqlParser.INDEX);
			this.state = 1483;
			_localctx._indexName = this.identifier();
			this.state = 1484;
			this.match(StarRocksSqlParser.ON);
			this.state = 1485;
			this.qualifiedName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexType(): IndexTypeContext {
		let _localctx: IndexTypeContext = new IndexTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 78, StarRocksSqlParser.RULE_indexType);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1487;
			this.match(StarRocksSqlParser.USING);
			this.state = 1488;
			this.match(StarRocksSqlParser.BITMAP);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showTableStatement(): ShowTableStatementContext {
		let _localctx: ShowTableStatementContext = new ShowTableStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 80, StarRocksSqlParser.RULE_showTableStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1490;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 1492;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FULL) {
				{
				this.state = 1491;
				this.match(StarRocksSqlParser.FULL);
				}
			}

			this.state = 1494;
			this.match(StarRocksSqlParser.TABLES);
			this.state = 1497;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN) {
				{
				this.state = 1495;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1496;
				_localctx._db = this.qualifiedName();
				}
			}

			this.state = 1503;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.LIKE:
				{
				{
				this.state = 1499;
				this.match(StarRocksSqlParser.LIKE);
				this.state = 1500;
				_localctx._pattern = this.string();
				}
				}
				break;
			case StarRocksSqlParser.WHERE:
				{
				{
				this.state = 1501;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 1502;
				this.expression(0);
				}
				}
				break;
			case StarRocksSqlParser.EOF:
			case StarRocksSqlParser.ADD:
			case StarRocksSqlParser.ADMIN:
			case StarRocksSqlParser.ALTER:
			case StarRocksSqlParser.ANALYZE:
			case StarRocksSqlParser.BACKUP:
			case StarRocksSqlParser.BEGIN:
			case StarRocksSqlParser.CANCEL:
			case StarRocksSqlParser.COMMIT:
			case StarRocksSqlParser.CREATE:
			case StarRocksSqlParser.DELETE:
			case StarRocksSqlParser.DESC:
			case StarRocksSqlParser.DESCRIBE:
			case StarRocksSqlParser.DROP:
			case StarRocksSqlParser.EXECUTE:
			case StarRocksSqlParser.EXPLAIN:
			case StarRocksSqlParser.EXPORT:
			case StarRocksSqlParser.GRANT:
			case StarRocksSqlParser.HELP:
			case StarRocksSqlParser.INSTALL:
			case StarRocksSqlParser.INSERT:
			case StarRocksSqlParser.KILL:
			case StarRocksSqlParser.LOAD:
			case StarRocksSqlParser.PAUSE:
			case StarRocksSqlParser.RECOVER:
			case StarRocksSqlParser.REFRESH:
			case StarRocksSqlParser.RESTORE:
			case StarRocksSqlParser.RESUME:
			case StarRocksSqlParser.REVOKE:
			case StarRocksSqlParser.ROLLBACK:
			case StarRocksSqlParser.SELECT:
			case StarRocksSqlParser.SET:
			case StarRocksSqlParser.SHOW:
			case StarRocksSqlParser.START:
			case StarRocksSqlParser.STOP:
			case StarRocksSqlParser.SUBMIT:
			case StarRocksSqlParser.SUSPEND:
			case StarRocksSqlParser.SYNC:
			case StarRocksSqlParser.TRACE:
			case StarRocksSqlParser.TRUNCATE:
			case StarRocksSqlParser.UNINSTALL:
			case StarRocksSqlParser.UPDATE:
			case StarRocksSqlParser.USE:
			case StarRocksSqlParser.WITH:
			case StarRocksSqlParser.LOCK:
			case StarRocksSqlParser.UNLOCK:
			case StarRocksSqlParser.SEMICOLON:
			case StarRocksSqlParser.LEFT_PAREN:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showCreateTableStatement(): ShowCreateTableStatementContext {
		let _localctx: ShowCreateTableStatementContext = new ShowCreateTableStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 82, StarRocksSqlParser.RULE_showCreateTableStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1505;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 1506;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 1511;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.TABLE:
				{
				this.state = 1507;
				this.match(StarRocksSqlParser.TABLE);
				}
				break;
			case StarRocksSqlParser.VIEW:
				{
				this.state = 1508;
				this.match(StarRocksSqlParser.VIEW);
				}
				break;
			case StarRocksSqlParser.MATERIALIZED:
				{
				this.state = 1509;
				this.match(StarRocksSqlParser.MATERIALIZED);
				this.state = 1510;
				this.match(StarRocksSqlParser.VIEW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1513;
			_localctx._table = this.qualifiedName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showColumnStatement(): ShowColumnStatementContext {
		let _localctx: ShowColumnStatementContext = new ShowColumnStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 84, StarRocksSqlParser.RULE_showColumnStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1515;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 1517;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FULL) {
				{
				this.state = 1516;
				this.match(StarRocksSqlParser.FULL);
				}
			}

			this.state = 1519;
			_la = this._input.LA(1);
			if (!(_la === StarRocksSqlParser.COLUMNS || _la === StarRocksSqlParser.FIELDS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			{
			this.state = 1520;
			_la = this._input.LA(1);
			if (!(_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1521;
			_localctx._table = this.qualifiedName();
			}
			this.state = 1525;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN) {
				{
				this.state = 1523;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1524;
				_localctx._db = this.qualifiedName();
				}
			}

			this.state = 1531;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.LIKE:
				{
				{
				this.state = 1527;
				this.match(StarRocksSqlParser.LIKE);
				this.state = 1528;
				_localctx._pattern = this.string();
				}
				}
				break;
			case StarRocksSqlParser.WHERE:
				{
				{
				this.state = 1529;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 1530;
				this.expression(0);
				}
				}
				break;
			case StarRocksSqlParser.EOF:
			case StarRocksSqlParser.ADD:
			case StarRocksSqlParser.ADMIN:
			case StarRocksSqlParser.ALTER:
			case StarRocksSqlParser.ANALYZE:
			case StarRocksSqlParser.BACKUP:
			case StarRocksSqlParser.BEGIN:
			case StarRocksSqlParser.CANCEL:
			case StarRocksSqlParser.COMMIT:
			case StarRocksSqlParser.CREATE:
			case StarRocksSqlParser.DELETE:
			case StarRocksSqlParser.DESC:
			case StarRocksSqlParser.DESCRIBE:
			case StarRocksSqlParser.DROP:
			case StarRocksSqlParser.EXECUTE:
			case StarRocksSqlParser.EXPLAIN:
			case StarRocksSqlParser.EXPORT:
			case StarRocksSqlParser.GRANT:
			case StarRocksSqlParser.HELP:
			case StarRocksSqlParser.INSTALL:
			case StarRocksSqlParser.INSERT:
			case StarRocksSqlParser.KILL:
			case StarRocksSqlParser.LOAD:
			case StarRocksSqlParser.PAUSE:
			case StarRocksSqlParser.RECOVER:
			case StarRocksSqlParser.REFRESH:
			case StarRocksSqlParser.RESTORE:
			case StarRocksSqlParser.RESUME:
			case StarRocksSqlParser.REVOKE:
			case StarRocksSqlParser.ROLLBACK:
			case StarRocksSqlParser.SELECT:
			case StarRocksSqlParser.SET:
			case StarRocksSqlParser.SHOW:
			case StarRocksSqlParser.START:
			case StarRocksSqlParser.STOP:
			case StarRocksSqlParser.SUBMIT:
			case StarRocksSqlParser.SUSPEND:
			case StarRocksSqlParser.SYNC:
			case StarRocksSqlParser.TRACE:
			case StarRocksSqlParser.TRUNCATE:
			case StarRocksSqlParser.UNINSTALL:
			case StarRocksSqlParser.UPDATE:
			case StarRocksSqlParser.USE:
			case StarRocksSqlParser.WITH:
			case StarRocksSqlParser.LOCK:
			case StarRocksSqlParser.UNLOCK:
			case StarRocksSqlParser.SEMICOLON:
			case StarRocksSqlParser.LEFT_PAREN:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showTableStatusStatement(): ShowTableStatusStatementContext {
		let _localctx: ShowTableStatusStatementContext = new ShowTableStatusStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 86, StarRocksSqlParser.RULE_showTableStatusStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1533;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 1534;
			this.match(StarRocksSqlParser.TABLE);
			this.state = 1535;
			this.match(StarRocksSqlParser.STATUS);
			this.state = 1538;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN) {
				{
				this.state = 1536;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1537;
				_localctx._db = this.qualifiedName();
				}
			}

			this.state = 1544;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.LIKE:
				{
				{
				this.state = 1540;
				this.match(StarRocksSqlParser.LIKE);
				this.state = 1541;
				_localctx._pattern = this.string();
				}
				}
				break;
			case StarRocksSqlParser.WHERE:
				{
				{
				this.state = 1542;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 1543;
				this.expression(0);
				}
				}
				break;
			case StarRocksSqlParser.EOF:
			case StarRocksSqlParser.ADD:
			case StarRocksSqlParser.ADMIN:
			case StarRocksSqlParser.ALTER:
			case StarRocksSqlParser.ANALYZE:
			case StarRocksSqlParser.BACKUP:
			case StarRocksSqlParser.BEGIN:
			case StarRocksSqlParser.CANCEL:
			case StarRocksSqlParser.COMMIT:
			case StarRocksSqlParser.CREATE:
			case StarRocksSqlParser.DELETE:
			case StarRocksSqlParser.DESC:
			case StarRocksSqlParser.DESCRIBE:
			case StarRocksSqlParser.DROP:
			case StarRocksSqlParser.EXECUTE:
			case StarRocksSqlParser.EXPLAIN:
			case StarRocksSqlParser.EXPORT:
			case StarRocksSqlParser.GRANT:
			case StarRocksSqlParser.HELP:
			case StarRocksSqlParser.INSTALL:
			case StarRocksSqlParser.INSERT:
			case StarRocksSqlParser.KILL:
			case StarRocksSqlParser.LOAD:
			case StarRocksSqlParser.PAUSE:
			case StarRocksSqlParser.RECOVER:
			case StarRocksSqlParser.REFRESH:
			case StarRocksSqlParser.RESTORE:
			case StarRocksSqlParser.RESUME:
			case StarRocksSqlParser.REVOKE:
			case StarRocksSqlParser.ROLLBACK:
			case StarRocksSqlParser.SELECT:
			case StarRocksSqlParser.SET:
			case StarRocksSqlParser.SHOW:
			case StarRocksSqlParser.START:
			case StarRocksSqlParser.STOP:
			case StarRocksSqlParser.SUBMIT:
			case StarRocksSqlParser.SUSPEND:
			case StarRocksSqlParser.SYNC:
			case StarRocksSqlParser.TRACE:
			case StarRocksSqlParser.TRUNCATE:
			case StarRocksSqlParser.UNINSTALL:
			case StarRocksSqlParser.UPDATE:
			case StarRocksSqlParser.USE:
			case StarRocksSqlParser.WITH:
			case StarRocksSqlParser.LOCK:
			case StarRocksSqlParser.UNLOCK:
			case StarRocksSqlParser.SEMICOLON:
			case StarRocksSqlParser.LEFT_PAREN:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public refreshTableStatement(): RefreshTableStatementContext {
		let _localctx: RefreshTableStatementContext = new RefreshTableStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 88, StarRocksSqlParser.RULE_refreshTableStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1546;
			this.match(StarRocksSqlParser.REFRESH);
			this.state = 1547;
			this.match(StarRocksSqlParser.EXTERNAL);
			this.state = 1548;
			this.match(StarRocksSqlParser.TABLE);
			this.state = 1549;
			this.qualifiedName();
			this.state = 1562;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PARTITION) {
				{
				this.state = 1550;
				this.match(StarRocksSqlParser.PARTITION);
				this.state = 1551;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 1552;
				this.string();
				this.state = 1557;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 1553;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 1554;
					this.string();
					}
					}
					this.state = 1559;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1560;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showAlterStatement(): ShowAlterStatementContext {
		let _localctx: ShowAlterStatementContext = new ShowAlterStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 90, StarRocksSqlParser.RULE_showAlterStatement);
		let _la: number;
		try {
			this.state = 1618;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 93, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1564;
				this.match(StarRocksSqlParser.SHOW);
				this.state = 1565;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 1566;
				this.match(StarRocksSqlParser.TABLE);
				this.state = 1567;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.COLUMN || _la === StarRocksSqlParser.ROLLUP)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1570;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN) {
					{
					this.state = 1568;
					_la = this._input.LA(1);
					if (!(_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1569;
					_localctx._db = this.qualifiedName();
					}
				}

				this.state = 1574;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.WHERE) {
					{
					this.state = 1572;
					this.match(StarRocksSqlParser.WHERE);
					this.state = 1573;
					this.expression(0);
					}
				}

				this.state = 1586;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.ORDER) {
					{
					this.state = 1576;
					this.match(StarRocksSqlParser.ORDER);
					this.state = 1577;
					this.match(StarRocksSqlParser.BY);
					this.state = 1578;
					this.sortItem();
					this.state = 1583;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === StarRocksSqlParser.COMMA) {
						{
						{
						this.state = 1579;
						this.match(StarRocksSqlParser.COMMA);
						this.state = 1580;
						this.sortItem();
						}
						}
						this.state = 1585;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 1589;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.LIMIT) {
					{
					this.state = 1588;
					this.limitElement();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1591;
				this.match(StarRocksSqlParser.SHOW);
				this.state = 1592;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 1593;
				this.match(StarRocksSqlParser.MATERIALIZED);
				this.state = 1594;
				this.match(StarRocksSqlParser.VIEW);
				this.state = 1597;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN) {
					{
					this.state = 1595;
					_la = this._input.LA(1);
					if (!(_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1596;
					_localctx._db = this.qualifiedName();
					}
				}

				this.state = 1601;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.WHERE) {
					{
					this.state = 1599;
					this.match(StarRocksSqlParser.WHERE);
					this.state = 1600;
					this.expression(0);
					}
				}

				this.state = 1613;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.ORDER) {
					{
					this.state = 1603;
					this.match(StarRocksSqlParser.ORDER);
					this.state = 1604;
					this.match(StarRocksSqlParser.BY);
					this.state = 1605;
					this.sortItem();
					this.state = 1610;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === StarRocksSqlParser.COMMA) {
						{
						{
						this.state = 1606;
						this.match(StarRocksSqlParser.COMMA);
						this.state = 1607;
						this.sortItem();
						}
						}
						this.state = 1612;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 1616;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.LIMIT) {
					{
					this.state = 1615;
					this.limitElement();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public descTableStatement(): DescTableStatementContext {
		let _localctx: DescTableStatementContext = new DescTableStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 92, StarRocksSqlParser.RULE_descTableStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1620;
			_la = this._input.LA(1);
			if (!(_la === StarRocksSqlParser.DESC || _la === StarRocksSqlParser.DESCRIBE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1621;
			_localctx._table = this.qualifiedName();
			this.state = 1623;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.ALL) {
				{
				this.state = 1622;
				this.match(StarRocksSqlParser.ALL);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createTableLikeStatement(): CreateTableLikeStatementContext {
		let _localctx: CreateTableLikeStatementContext = new CreateTableLikeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 94, StarRocksSqlParser.RULE_createTableLikeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1625;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 1627;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.EXTERNAL) {
				{
				this.state = 1626;
				this.match(StarRocksSqlParser.EXTERNAL);
				}
			}

			this.state = 1629;
			this.match(StarRocksSqlParser.TABLE);
			this.state = 1633;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 1630;
				this.match(StarRocksSqlParser.IF);
				this.state = 1631;
				this.match(StarRocksSqlParser.NOT);
				this.state = 1632;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 1635;
			this.qualifiedName();
			this.state = 1636;
			this.match(StarRocksSqlParser.LIKE);
			this.state = 1637;
			this.qualifiedName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showIndexStatement(): ShowIndexStatementContext {
		let _localctx: ShowIndexStatementContext = new ShowIndexStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 96, StarRocksSqlParser.RULE_showIndexStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1639;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 1640;
			_la = this._input.LA(1);
			if (!(((((_la - 172)) & ~0x1F) === 0 && ((1 << (_la - 172)) & ((1 << (StarRocksSqlParser.INDEX - 172)) | (1 << (StarRocksSqlParser.INDEXES - 172)) | (1 << (StarRocksSqlParser.KEY - 172)) | (1 << (StarRocksSqlParser.KEYS - 172)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			{
			this.state = 1641;
			_la = this._input.LA(1);
			if (!(_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1642;
			_localctx._table = this.qualifiedName();
			}
			this.state = 1646;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN) {
				{
				this.state = 1644;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1645;
				_localctx._db = this.qualifiedName();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public recoverTableStatement(): RecoverTableStatementContext {
		let _localctx: RecoverTableStatementContext = new RecoverTableStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 98, StarRocksSqlParser.RULE_recoverTableStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1648;
			this.match(StarRocksSqlParser.RECOVER);
			this.state = 1649;
			this.match(StarRocksSqlParser.TABLE);
			this.state = 1650;
			this.qualifiedName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public truncateTableStatement(): TruncateTableStatementContext {
		let _localctx: TruncateTableStatementContext = new TruncateTableStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 100, StarRocksSqlParser.RULE_truncateTableStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1652;
			this.match(StarRocksSqlParser.TRUNCATE);
			this.state = 1653;
			this.match(StarRocksSqlParser.TABLE);
			this.state = 1654;
			this.qualifiedName();
			this.state = 1656;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PARTITION || _la === StarRocksSqlParser.PARTITIONS || _la === StarRocksSqlParser.TEMPORARY) {
				{
				this.state = 1655;
				this.partitionNames();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cancelAlterTableStatement(): CancelAlterTableStatementContext {
		let _localctx: CancelAlterTableStatementContext = new CancelAlterTableStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 102, StarRocksSqlParser.RULE_cancelAlterTableStatement);
		let _la: number;
		try {
			this.state = 1684;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 102, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1658;
				this.match(StarRocksSqlParser.CANCEL);
				this.state = 1659;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 1660;
				this.match(StarRocksSqlParser.TABLE);
				this.state = 1662;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.COLUMN || _la === StarRocksSqlParser.ROLLUP) {
					{
					this.state = 1661;
					_la = this._input.LA(1);
					if (!(_la === StarRocksSqlParser.COLUMN || _la === StarRocksSqlParser.ROLLUP)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 1664;
				this.match(StarRocksSqlParser.FROM);
				this.state = 1665;
				this.qualifiedName();
				this.state = 1676;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 101, this._ctx) ) {
				case 1:
					{
					this.state = 1666;
					this.match(StarRocksSqlParser.LEFT_PAREN);
					this.state = 1667;
					this.match(StarRocksSqlParser.INTEGER_VALUE);
					this.state = 1672;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === StarRocksSqlParser.COMMA) {
						{
						{
						this.state = 1668;
						this.match(StarRocksSqlParser.COMMA);
						this.state = 1669;
						this.match(StarRocksSqlParser.INTEGER_VALUE);
						}
						}
						this.state = 1674;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 1675;
					this.match(StarRocksSqlParser.RIGHT_PAREN);
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1678;
				this.match(StarRocksSqlParser.CANCEL);
				this.state = 1679;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 1680;
				this.match(StarRocksSqlParser.MATERIALIZED);
				this.state = 1681;
				this.match(StarRocksSqlParser.VIEW);
				this.state = 1682;
				this.match(StarRocksSqlParser.FROM);
				this.state = 1683;
				this.qualifiedName();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showPartitionsStatement(): ShowPartitionsStatementContext {
		let _localctx: ShowPartitionsStatementContext = new ShowPartitionsStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 104, StarRocksSqlParser.RULE_showPartitionsStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1686;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 1688;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.TEMPORARY) {
				{
				this.state = 1687;
				this.match(StarRocksSqlParser.TEMPORARY);
				}
			}

			this.state = 1690;
			this.match(StarRocksSqlParser.PARTITIONS);
			this.state = 1691;
			this.match(StarRocksSqlParser.FROM);
			this.state = 1692;
			_localctx._table = this.qualifiedName();
			this.state = 1695;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.WHERE) {
				{
				this.state = 1693;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 1694;
				this.expression(0);
				}
			}

			this.state = 1707;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.ORDER) {
				{
				this.state = 1697;
				this.match(StarRocksSqlParser.ORDER);
				this.state = 1698;
				this.match(StarRocksSqlParser.BY);
				this.state = 1699;
				this.sortItem();
				this.state = 1704;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 1700;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 1701;
					this.sortItem();
					}
					}
					this.state = 1706;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 1710;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.LIMIT) {
				{
				this.state = 1709;
				this.limitElement();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public recoverPartitionStatement(): RecoverPartitionStatementContext {
		let _localctx: RecoverPartitionStatementContext = new RecoverPartitionStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 106, StarRocksSqlParser.RULE_recoverPartitionStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1712;
			this.match(StarRocksSqlParser.RECOVER);
			this.state = 1713;
			this.match(StarRocksSqlParser.PARTITION);
			this.state = 1714;
			this.identifier();
			this.state = 1715;
			this.match(StarRocksSqlParser.FROM);
			this.state = 1716;
			_localctx._table = this.qualifiedName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createViewStatement(): CreateViewStatementContext {
		let _localctx: CreateViewStatementContext = new CreateViewStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 108, StarRocksSqlParser.RULE_createViewStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1718;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 1721;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.OR) {
				{
				this.state = 1719;
				this.match(StarRocksSqlParser.OR);
				this.state = 1720;
				this.match(StarRocksSqlParser.REPLACE);
				}
			}

			this.state = 1723;
			this.match(StarRocksSqlParser.VIEW);
			this.state = 1727;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 1724;
				this.match(StarRocksSqlParser.IF);
				this.state = 1725;
				this.match(StarRocksSqlParser.NOT);
				this.state = 1726;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 1729;
			this.qualifiedName();
			this.state = 1741;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.LEFT_PAREN) {
				{
				this.state = 1730;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 1731;
				this.columnNameWithComment();
				this.state = 1736;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 1732;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 1733;
					this.columnNameWithComment();
					}
					}
					this.state = 1738;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1739;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
			}

			this.state = 1746;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.WITH) {
				{
				{
				this.state = 1743;
				this.withRowAccessPolicy();
				}
				}
				this.state = 1748;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1750;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.COMMENT) {
				{
				this.state = 1749;
				this.comment();
				}
			}

			this.state = 1752;
			this.match(StarRocksSqlParser.AS);
			this.state = 1753;
			this.queryStatement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterViewStatement(): AlterViewStatementContext {
		let _localctx: AlterViewStatementContext = new AlterViewStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 110, StarRocksSqlParser.RULE_alterViewStatement);
		let _la: number;
		try {
			this.state = 1784;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 116, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1755;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 1756;
				this.match(StarRocksSqlParser.VIEW);
				this.state = 1757;
				this.qualifiedName();
				this.state = 1769;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.LEFT_PAREN) {
					{
					this.state = 1758;
					this.match(StarRocksSqlParser.LEFT_PAREN);
					this.state = 1759;
					this.columnNameWithComment();
					this.state = 1764;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === StarRocksSqlParser.COMMA) {
						{
						{
						this.state = 1760;
						this.match(StarRocksSqlParser.COMMA);
						this.state = 1761;
						this.columnNameWithComment();
						}
						}
						this.state = 1766;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 1767;
					this.match(StarRocksSqlParser.RIGHT_PAREN);
					}
				}

				this.state = 1771;
				this.match(StarRocksSqlParser.AS);
				this.state = 1772;
				this.queryStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1774;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 1775;
				this.match(StarRocksSqlParser.VIEW);
				this.state = 1776;
				this.qualifiedName();
				this.state = 1777;
				this.applyMaskingPolicyClause();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1779;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 1780;
				this.match(StarRocksSqlParser.VIEW);
				this.state = 1781;
				this.qualifiedName();
				this.state = 1782;
				this.applyRowAccessPolicyClause();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropViewStatement(): DropViewStatementContext {
		let _localctx: DropViewStatementContext = new DropViewStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 112, StarRocksSqlParser.RULE_dropViewStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1786;
			this.match(StarRocksSqlParser.DROP);
			this.state = 1787;
			this.match(StarRocksSqlParser.VIEW);
			this.state = 1790;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 1788;
				this.match(StarRocksSqlParser.IF);
				this.state = 1789;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 1792;
			this.qualifiedName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnNameWithComment(): ColumnNameWithCommentContext {
		let _localctx: ColumnNameWithCommentContext = new ColumnNameWithCommentContext(this._ctx, this.state);
		this.enterRule(_localctx, 114, StarRocksSqlParser.RULE_columnNameWithComment);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1794;
			_localctx._columnName = this.identifier();
			this.state = 1796;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.WITH) {
				{
				this.state = 1795;
				this.withMaskingPolicy();
				}
			}

			this.state = 1799;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.COMMENT) {
				{
				this.state = 1798;
				this.comment();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public submitTaskStatement(): SubmitTaskStatementContext {
		let _localctx: SubmitTaskStatementContext = new SubmitTaskStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 116, StarRocksSqlParser.RULE_submitTaskStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1801;
			this.match(StarRocksSqlParser.SUBMIT);
			this.state = 1805;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.HENT_START) {
				{
				{
				this.state = 1802;
				this.setVarHint();
				}
				}
				this.state = 1807;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1808;
			this.match(StarRocksSqlParser.TASK);
			this.state = 1810;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << StarRocksSqlParser.ACTIVE) | (1 << StarRocksSqlParser.ADMIN) | (1 << StarRocksSqlParser.AFTER) | (1 << StarRocksSqlParser.AGGREGATE) | (1 << StarRocksSqlParser.ANTI) | (1 << StarRocksSqlParser.ASYNC) | (1 << StarRocksSqlParser.AUTHORS) | (1 << StarRocksSqlParser.AUTHENTICATION) | (1 << StarRocksSqlParser.AUTO_INCREMENT) | (1 << StarRocksSqlParser.AVG) | (1 << StarRocksSqlParser.BACKEND) | (1 << StarRocksSqlParser.BACKENDS) | (1 << StarRocksSqlParser.BACKUP) | (1 << StarRocksSqlParser.BEGIN))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (StarRocksSqlParser.BITMAP_UNION - 32)) | (1 << (StarRocksSqlParser.BLACKLIST - 32)) | (1 << (StarRocksSqlParser.BOOLEAN - 32)) | (1 << (StarRocksSqlParser.BROKER - 32)) | (1 << (StarRocksSqlParser.BUCKETS - 32)) | (1 << (StarRocksSqlParser.BUILTIN - 32)) | (1 << (StarRocksSqlParser.CANCEL - 32)) | (1 << (StarRocksSqlParser.CAST - 32)) | (1 << (StarRocksSqlParser.CATALOG - 32)) | (1 << (StarRocksSqlParser.CATALOGS - 32)) | (1 << (StarRocksSqlParser.CEIL - 32)) | (1 << (StarRocksSqlParser.CHAIN - 32)) | (1 << (StarRocksSqlParser.CHARSET - 32)) | (1 << (StarRocksSqlParser.CLEAN - 32)) | (1 << (StarRocksSqlParser.CLUSTER - 32)) | (1 << (StarRocksSqlParser.CLUSTERS - 32)) | (1 << (StarRocksSqlParser.COLLATION - 32)) | (1 << (StarRocksSqlParser.COLUMNS - 32)) | (1 << (StarRocksSqlParser.COMMENT - 32)) | (1 << (StarRocksSqlParser.COMMIT - 32)) | (1 << (StarRocksSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (StarRocksSqlParser.COMPUTE - 64)) | (1 << (StarRocksSqlParser.CONFIG - 64)) | (1 << (StarRocksSqlParser.CONNECTION - 64)) | (1 << (StarRocksSqlParser.CONSISTENT - 64)) | (1 << (StarRocksSqlParser.COSTS - 64)) | (1 << (StarRocksSqlParser.COUNT - 64)) | (1 << (StarRocksSqlParser.CUME_DIST - 64)) | (1 << (StarRocksSqlParser.CURRENT - 64)) | (1 << (StarRocksSqlParser.DATA - 64)) | (1 << (StarRocksSqlParser.DATE - 64)) | (1 << (StarRocksSqlParser.DATETIME - 64)) | (1 << (StarRocksSqlParser.DAY - 64)) | (1 << (StarRocksSqlParser.DECOMMISSION - 64)))) !== 0) || ((((_la - 102)) & ~0x1F) === 0 && ((1 << (_la - 102)) & ((1 << (StarRocksSqlParser.DISTRIBUTED - 102)) | (1 << (StarRocksSqlParser.DISTRIBUTION - 102)) | (1 << (StarRocksSqlParser.DUPLICATE - 102)) | (1 << (StarRocksSqlParser.DYNAMIC - 102)) | (1 << (StarRocksSqlParser.ENCLOSE - 102)) | (1 << (StarRocksSqlParser.END - 102)) | (1 << (StarRocksSqlParser.ENGINE - 102)) | (1 << (StarRocksSqlParser.ENGINES - 102)) | (1 << (StarRocksSqlParser.ERRORS - 102)) | (1 << (StarRocksSqlParser.ESCAPE - 102)) | (1 << (StarRocksSqlParser.EVENTS - 102)) | (1 << (StarRocksSqlParser.EXECUTE - 102)) | (1 << (StarRocksSqlParser.EXPORT - 102)) | (1 << (StarRocksSqlParser.EXTERNAL - 102)) | (1 << (StarRocksSqlParser.EXTRACT - 102)) | (1 << (StarRocksSqlParser.EVERY - 102)) | (1 << (StarRocksSqlParser.FIELDS - 102)) | (1 << (StarRocksSqlParser.FILE - 102)) | (1 << (StarRocksSqlParser.FILTER - 102)) | (1 << (StarRocksSqlParser.FIRST - 102)) | (1 << (StarRocksSqlParser.FLOOR - 102)))) !== 0) || ((((_la - 134)) & ~0x1F) === 0 && ((1 << (_la - 134)) & ((1 << (StarRocksSqlParser.FN - 134)) | (1 << (StarRocksSqlParser.FOLLOWING - 134)) | (1 << (StarRocksSqlParser.FOLLOWER - 134)) | (1 << (StarRocksSqlParser.FORMAT - 134)) | (1 << (StarRocksSqlParser.FREE - 134)) | (1 << (StarRocksSqlParser.FRONTEND - 134)) | (1 << (StarRocksSqlParser.FRONTENDS - 134)) | (1 << (StarRocksSqlParser.FUNCTIONS - 134)) | (1 << (StarRocksSqlParser.GLOBAL - 134)) | (1 << (StarRocksSqlParser.GRANTS - 134)) | (1 << (StarRocksSqlParser.HASH - 134)) | (1 << (StarRocksSqlParser.HELP - 134)) | (1 << (StarRocksSqlParser.HISTOGRAM - 134)) | (1 << (StarRocksSqlParser.HLL_UNION - 134)) | (1 << (StarRocksSqlParser.HOST - 134)) | (1 << (StarRocksSqlParser.HOUR - 134)) | (1 << (StarRocksSqlParser.HUB - 134)) | (1 << (StarRocksSqlParser.IDENTIFIED - 134)) | (1 << (StarRocksSqlParser.IMPERSONATE - 134)))) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & ((1 << (StarRocksSqlParser.IMAGE - 168)) | (1 << (StarRocksSqlParser.INACTIVE - 168)) | (1 << (StarRocksSqlParser.INCREMENTAL - 168)) | (1 << (StarRocksSqlParser.INDEXES - 168)) | (1 << (StarRocksSqlParser.INSTALL - 168)) | (1 << (StarRocksSqlParser.INTERMEDIATE - 168)) | (1 << (StarRocksSqlParser.INTERVAL - 168)) | (1 << (StarRocksSqlParser.OVERWRITE - 168)) | (1 << (StarRocksSqlParser.ISOLATION - 168)) | (1 << (StarRocksSqlParser.JOB - 168)) | (1 << (StarRocksSqlParser.LABEL - 168)) | (1 << (StarRocksSqlParser.LAST - 168)))) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & ((1 << (StarRocksSqlParser.LESS - 203)) | (1 << (StarRocksSqlParser.LEVEL - 203)) | (1 << (StarRocksSqlParser.LIST - 203)) | (1 << (StarRocksSqlParser.LOCAL - 203)) | (1 << (StarRocksSqlParser.LOCATION - 203)) | (1 << (StarRocksSqlParser.LOGICAL - 203)) | (1 << (StarRocksSqlParser.MANUAL - 203)) | (1 << (StarRocksSqlParser.MAP - 203)) | (1 << (StarRocksSqlParser.MATERIALIZED - 203)) | (1 << (StarRocksSqlParser.MAX - 203)) | (1 << (StarRocksSqlParser.MERGE - 203)) | (1 << (StarRocksSqlParser.MIN - 203)) | (1 << (StarRocksSqlParser.MINUTE - 203)) | (1 << (StarRocksSqlParser.MINUS - 203)) | (1 << (StarRocksSqlParser.META - 203)) | (1 << (StarRocksSqlParser.MODE - 203)) | (1 << (StarRocksSqlParser.MODIFY - 203)) | (1 << (StarRocksSqlParser.MONTH - 203)) | (1 << (StarRocksSqlParser.NAME - 203)) | (1 << (StarRocksSqlParser.NAMES - 203)) | (1 << (StarRocksSqlParser.NEGATIVE - 203)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (StarRocksSqlParser.NO - 235)) | (1 << (StarRocksSqlParser.NODE - 235)) | (1 << (StarRocksSqlParser.NODES - 235)) | (1 << (StarRocksSqlParser.NONE - 235)) | (1 << (StarRocksSqlParser.NULLS - 235)) | (1 << (StarRocksSqlParser.NUMBER - 235)) | (1 << (StarRocksSqlParser.NUMERIC - 235)) | (1 << (StarRocksSqlParser.OBSERVER - 235)) | (1 << (StarRocksSqlParser.OF - 235)) | (1 << (StarRocksSqlParser.OFFSET - 235)) | (1 << (StarRocksSqlParser.ONLY - 235)) | (1 << (StarRocksSqlParser.OPEN - 235)) | (1 << (StarRocksSqlParser.OPERATE - 235)) | (1 << (StarRocksSqlParser.OPTIMIZER - 235)) | (1 << (StarRocksSqlParser.OPTION - 235)) | (1 << (StarRocksSqlParser.PARTITIONS - 235)) | (1 << (StarRocksSqlParser.PASSWORD - 235)) | (1 << (StarRocksSqlParser.PATH - 235)) | (1 << (StarRocksSqlParser.PAUSE - 235)) | (1 << (StarRocksSqlParser.PENDING - 235)) | (1 << (StarRocksSqlParser.PERCENT_RANK - 235)) | (1 << (StarRocksSqlParser.PERCENTILE_UNION - 235)))) !== 0) || ((((_la - 267)) & ~0x1F) === 0 && ((1 << (_la - 267)) & ((1 << (StarRocksSqlParser.PLUGIN - 267)) | (1 << (StarRocksSqlParser.PLUGINS - 267)) | (1 << (StarRocksSqlParser.PRECEDING - 267)) | (1 << (StarRocksSqlParser.PRIVILEGES - 267)) | (1 << (StarRocksSqlParser.PROC - 267)) | (1 << (StarRocksSqlParser.PROCESSLIST - 267)) | (1 << (StarRocksSqlParser.PROFILE - 267)) | (1 << (StarRocksSqlParser.PROFILELIST - 267)) | (1 << (StarRocksSqlParser.PROPERTIES - 267)) | (1 << (StarRocksSqlParser.PROPERTY - 267)) | (1 << (StarRocksSqlParser.QUALIFY - 267)) | (1 << (StarRocksSqlParser.QUARTER - 267)) | (1 << (StarRocksSqlParser.QUERY - 267)) | (1 << (StarRocksSqlParser.QUEUE - 267)) | (1 << (StarRocksSqlParser.QUOTA - 267)) | (1 << (StarRocksSqlParser.RANDOM - 267)) | (1 << (StarRocksSqlParser.RANK - 267)) | (1 << (StarRocksSqlParser.RECOVER - 267)) | (1 << (StarRocksSqlParser.REFRESH - 267)) | (1 << (StarRocksSqlParser.REWRITE - 267)) | (1 << (StarRocksSqlParser.REMOVE - 267)) | (1 << (StarRocksSqlParser.REPAIR - 267)) | (1 << (StarRocksSqlParser.REPEATABLE - 267)))) !== 0) || ((((_la - 300)) & ~0x1F) === 0 && ((1 << (_la - 300)) & ((1 << (StarRocksSqlParser.REPLACE_IF_NOT_NULL - 300)) | (1 << (StarRocksSqlParser.REPLICA - 300)) | (1 << (StarRocksSqlParser.REPOSITORY - 300)) | (1 << (StarRocksSqlParser.REPOSITORIES - 300)) | (1 << (StarRocksSqlParser.RESOURCE - 300)) | (1 << (StarRocksSqlParser.RESOURCES - 300)) | (1 << (StarRocksSqlParser.RESTORE - 300)) | (1 << (StarRocksSqlParser.RESUME - 300)) | (1 << (StarRocksSqlParser.RETURNS - 300)) | (1 << (StarRocksSqlParser.REVERT - 300)) | (1 << (StarRocksSqlParser.ROLE - 300)) | (1 << (StarRocksSqlParser.ROLES - 300)) | (1 << (StarRocksSqlParser.ROLLBACK - 300)) | (1 << (StarRocksSqlParser.ROLLUP - 300)) | (1 << (StarRocksSqlParser.ROUTINE - 300)) | (1 << (StarRocksSqlParser.ROW - 300)) | (1 << (StarRocksSqlParser.SAMPLE - 300)) | (1 << (StarRocksSqlParser.SCHEDULER - 300)) | (1 << (StarRocksSqlParser.SECOND - 300)) | (1 << (StarRocksSqlParser.SEMI - 300)) | (1 << (StarRocksSqlParser.SERIALIZABLE - 300)) | (1 << (StarRocksSqlParser.SESSION - 300)))) !== 0) || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & ((1 << (StarRocksSqlParser.SETS - 332)) | (1 << (StarRocksSqlParser.SIGNED - 332)) | (1 << (StarRocksSqlParser.SKIP_HEADER - 332)) | (1 << (StarRocksSqlParser.SNAPSHOT - 332)) | (1 << (StarRocksSqlParser.SQLBLACKLIST - 332)) | (1 << (StarRocksSqlParser.START - 332)) | (1 << (StarRocksSqlParser.STATS - 332)) | (1 << (StarRocksSqlParser.STATUS - 332)) | (1 << (StarRocksSqlParser.STOP - 332)) | (1 << (StarRocksSqlParser.STORAGE - 332)) | (1 << (StarRocksSqlParser.STREAM - 332)) | (1 << (StarRocksSqlParser.STRING - 332)) | (1 << (StarRocksSqlParser.SUBMIT - 332)) | (1 << (StarRocksSqlParser.SUM - 332)) | (1 << (StarRocksSqlParser.SUSPEND - 332)) | (1 << (StarRocksSqlParser.SYNC - 332)) | (1 << (StarRocksSqlParser.SYSTEM_TIME - 332)) | (1 << (StarRocksSqlParser.SWAP - 332)) | (1 << (StarRocksSqlParser.STRUCT - 332)) | (1 << (StarRocksSqlParser.TABLES - 332)) | (1 << (StarRocksSqlParser.TABLET - 332)) | (1 << (StarRocksSqlParser.TASK - 332)) | (1 << (StarRocksSqlParser.TEMPORARY - 332)) | (1 << (StarRocksSqlParser.THAN - 332)))) !== 0) || ((((_la - 364)) & ~0x1F) === 0 && ((1 << (_la - 364)) & ((1 << (StarRocksSqlParser.TIME - 364)) | (1 << (StarRocksSqlParser.TIMESTAMP - 364)) | (1 << (StarRocksSqlParser.TIMESTAMPADD - 364)) | (1 << (StarRocksSqlParser.TIMESTAMPDIFF - 364)) | (1 << (StarRocksSqlParser.TRANSACTION - 364)) | (1 << (StarRocksSqlParser.TRACE - 364)) | (1 << (StarRocksSqlParser.TRIGGERS - 364)) | (1 << (StarRocksSqlParser.TRIM_SPACE - 364)) | (1 << (StarRocksSqlParser.TRUNCATE - 364)) | (1 << (StarRocksSqlParser.TYPE - 364)) | (1 << (StarRocksSqlParser.TYPES - 364)) | (1 << (StarRocksSqlParser.UNBOUNDED - 364)) | (1 << (StarRocksSqlParser.UNCOMMITTED - 364)) | (1 << (StarRocksSqlParser.UNINSTALL - 364)) | (1 << (StarRocksSqlParser.USAGE - 364)) | (1 << (StarRocksSqlParser.USER - 364)) | (1 << (StarRocksSqlParser.USERS - 364)) | (1 << (StarRocksSqlParser.VALUE - 364)) | (1 << (StarRocksSqlParser.VARIABLES - 364)))) !== 0) || ((((_la - 396)) & ~0x1F) === 0 && ((1 << (_la - 396)) & ((1 << (StarRocksSqlParser.VERBOSE - 396)) | (1 << (StarRocksSqlParser.VIEW - 396)) | (1 << (StarRocksSqlParser.VIEWS - 396)) | (1 << (StarRocksSqlParser.WAREHOUSE - 396)) | (1 << (StarRocksSqlParser.WAREHOUSES - 396)) | (1 << (StarRocksSqlParser.WARNINGS - 396)) | (1 << (StarRocksSqlParser.WEEK - 396)) | (1 << (StarRocksSqlParser.WHITELIST - 396)) | (1 << (StarRocksSqlParser.WORK - 396)) | (1 << (StarRocksSqlParser.WRITE - 396)) | (1 << (StarRocksSqlParser.YEAR - 396)) | (1 << (StarRocksSqlParser.LOCK - 396)) | (1 << (StarRocksSqlParser.UNLOCK - 396)) | (1 << (StarRocksSqlParser.LOW_PRIORITY - 396)))) !== 0) || ((((_la - 447)) & ~0x1F) === 0 && ((1 << (_la - 447)) & ((1 << (StarRocksSqlParser.LETTER_IDENTIFIER - 447)) | (1 << (StarRocksSqlParser.DIGIT_IDENTIFIER - 447)) | (1 << (StarRocksSqlParser.BACKQUOTED_IDENTIFIER - 447)) | (1 << (StarRocksSqlParser.DOTDOTDOT - 447)))) !== 0)) {
				{
				this.state = 1809;
				this.qualifiedName();
				}
			}

			this.state = 1812;
			this.match(StarRocksSqlParser.AS);
			this.state = 1813;
			this.taskExecSql();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public taskExecSql(): TaskExecSqlContext {
		let _localctx: TaskExecSqlContext = new TaskExecSqlContext(this._ctx, this.state);
		this.enterRule(_localctx, 118, StarRocksSqlParser.RULE_taskExecSql);
		try {
			this.state = 1817;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.CREATE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1815;
				this.createTableAsSelectStatement();
				}
				break;
			case StarRocksSqlParser.DESC:
			case StarRocksSqlParser.DESCRIBE:
			case StarRocksSqlParser.EXPLAIN:
			case StarRocksSqlParser.INSERT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1816;
				this.insertStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropTaskStatement(): DropTaskStatementContext {
		let _localctx: DropTaskStatementContext = new DropTaskStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 120, StarRocksSqlParser.RULE_dropTaskStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1819;
			this.match(StarRocksSqlParser.DROP);
			this.state = 1820;
			this.match(StarRocksSqlParser.TASK);
			this.state = 1821;
			this.qualifiedName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createMaterializedViewStatement(): CreateMaterializedViewStatementContext {
		let _localctx: CreateMaterializedViewStatementContext = new CreateMaterializedViewStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 122, StarRocksSqlParser.RULE_createMaterializedViewStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1823;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 1824;
			this.match(StarRocksSqlParser.MATERIALIZED);
			this.state = 1825;
			this.match(StarRocksSqlParser.VIEW);
			this.state = 1829;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 1826;
				this.match(StarRocksSqlParser.IF);
				this.state = 1827;
				this.match(StarRocksSqlParser.NOT);
				this.state = 1828;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 1831;
			_localctx._mvName = this.qualifiedName();
			this.state = 1843;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.LEFT_PAREN) {
				{
				this.state = 1832;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 1833;
				this.columnNameWithComment();
				this.state = 1838;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 1834;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 1835;
					this.columnNameWithComment();
					}
					}
					this.state = 1840;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1841;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
			}

			this.state = 1848;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.WITH) {
				{
				{
				this.state = 1845;
				this.withRowAccessPolicy();
				}
				}
				this.state = 1850;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1852;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.COMMENT) {
				{
				this.state = 1851;
				this.comment();
				}
			}

			this.state = 1857;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.DISTRIBUTED || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (StarRocksSqlParser.ORDER - 254)) | (1 << (StarRocksSqlParser.PARTITION - 254)) | (1 << (StarRocksSqlParser.PROPERTIES - 254)))) !== 0) || _la === StarRocksSqlParser.REFRESH) {
				{
				{
				this.state = 1854;
				this.materializedViewDesc();
				}
				}
				this.state = 1859;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1860;
			this.match(StarRocksSqlParser.AS);
			this.state = 1861;
			this.queryStatement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public materializedViewDesc(): MaterializedViewDescContext {
		let _localctx: MaterializedViewDescContext = new MaterializedViewDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 124, StarRocksSqlParser.RULE_materializedViewDesc);
		try {
			this.state = 1870;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.PARTITION:
				this.enterOuterAlt(_localctx, 1);
				{
				{
				this.state = 1863;
				this.match(StarRocksSqlParser.PARTITION);
				this.state = 1864;
				this.match(StarRocksSqlParser.BY);
				this.state = 1865;
				this.primaryExpression(0);
				}
				}
				break;
			case StarRocksSqlParser.DISTRIBUTED:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1866;
				this.distributionDesc();
				}
				break;
			case StarRocksSqlParser.ORDER:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1867;
				this.orderByDesc();
				}
				break;
			case StarRocksSqlParser.REFRESH:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1868;
				this.refreshSchemeDesc();
				}
				break;
			case StarRocksSqlParser.PROPERTIES:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1869;
				this.properties();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showMaterializedViewsStatement(): ShowMaterializedViewsStatementContext {
		let _localctx: ShowMaterializedViewsStatementContext = new ShowMaterializedViewsStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 126, StarRocksSqlParser.RULE_showMaterializedViewsStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1872;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 1873;
			this.match(StarRocksSqlParser.MATERIALIZED);
			this.state = 1874;
			this.match(StarRocksSqlParser.VIEWS);
			this.state = 1877;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN) {
				{
				this.state = 1875;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1876;
				_localctx._db = this.qualifiedName();
				}
			}

			this.state = 1883;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.LIKE:
				{
				{
				this.state = 1879;
				this.match(StarRocksSqlParser.LIKE);
				this.state = 1880;
				_localctx._pattern = this.string();
				}
				}
				break;
			case StarRocksSqlParser.WHERE:
				{
				{
				this.state = 1881;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 1882;
				this.expression(0);
				}
				}
				break;
			case StarRocksSqlParser.EOF:
			case StarRocksSqlParser.ADD:
			case StarRocksSqlParser.ADMIN:
			case StarRocksSqlParser.ALTER:
			case StarRocksSqlParser.ANALYZE:
			case StarRocksSqlParser.BACKUP:
			case StarRocksSqlParser.BEGIN:
			case StarRocksSqlParser.CANCEL:
			case StarRocksSqlParser.COMMIT:
			case StarRocksSqlParser.CREATE:
			case StarRocksSqlParser.DELETE:
			case StarRocksSqlParser.DESC:
			case StarRocksSqlParser.DESCRIBE:
			case StarRocksSqlParser.DROP:
			case StarRocksSqlParser.EXECUTE:
			case StarRocksSqlParser.EXPLAIN:
			case StarRocksSqlParser.EXPORT:
			case StarRocksSqlParser.GRANT:
			case StarRocksSqlParser.HELP:
			case StarRocksSqlParser.INSTALL:
			case StarRocksSqlParser.INSERT:
			case StarRocksSqlParser.KILL:
			case StarRocksSqlParser.LOAD:
			case StarRocksSqlParser.PAUSE:
			case StarRocksSqlParser.RECOVER:
			case StarRocksSqlParser.REFRESH:
			case StarRocksSqlParser.RESTORE:
			case StarRocksSqlParser.RESUME:
			case StarRocksSqlParser.REVOKE:
			case StarRocksSqlParser.ROLLBACK:
			case StarRocksSqlParser.SELECT:
			case StarRocksSqlParser.SET:
			case StarRocksSqlParser.SHOW:
			case StarRocksSqlParser.START:
			case StarRocksSqlParser.STOP:
			case StarRocksSqlParser.SUBMIT:
			case StarRocksSqlParser.SUSPEND:
			case StarRocksSqlParser.SYNC:
			case StarRocksSqlParser.TRACE:
			case StarRocksSqlParser.TRUNCATE:
			case StarRocksSqlParser.UNINSTALL:
			case StarRocksSqlParser.UPDATE:
			case StarRocksSqlParser.USE:
			case StarRocksSqlParser.WITH:
			case StarRocksSqlParser.LOCK:
			case StarRocksSqlParser.UNLOCK:
			case StarRocksSqlParser.SEMICOLON:
			case StarRocksSqlParser.LEFT_PAREN:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropMaterializedViewStatement(): DropMaterializedViewStatementContext {
		let _localctx: DropMaterializedViewStatementContext = new DropMaterializedViewStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 128, StarRocksSqlParser.RULE_dropMaterializedViewStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1885;
			this.match(StarRocksSqlParser.DROP);
			this.state = 1886;
			this.match(StarRocksSqlParser.MATERIALIZED);
			this.state = 1887;
			this.match(StarRocksSqlParser.VIEW);
			this.state = 1890;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 1888;
				this.match(StarRocksSqlParser.IF);
				this.state = 1889;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 1892;
			_localctx._mvName = this.qualifiedName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterMaterializedViewStatement(): AlterMaterializedViewStatementContext {
		let _localctx: AlterMaterializedViewStatementContext = new AlterMaterializedViewStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 130, StarRocksSqlParser.RULE_alterMaterializedViewStatement);
		try {
			this.state = 1922;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 134, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1894;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 1895;
				this.match(StarRocksSqlParser.MATERIALIZED);
				this.state = 1896;
				this.match(StarRocksSqlParser.VIEW);
				this.state = 1897;
				_localctx._mvName = this.qualifiedName();
				this.state = 1902;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case StarRocksSqlParser.REFRESH:
					{
					this.state = 1898;
					this.refreshSchemeDesc();
					}
					break;
				case StarRocksSqlParser.RENAME:
					{
					this.state = 1899;
					this.tableRenameClause();
					}
					break;
				case StarRocksSqlParser.SET:
					{
					this.state = 1900;
					this.modifyTablePropertiesClause();
					}
					break;
				case StarRocksSqlParser.SWAP:
					{
					this.state = 1901;
					this.swapTableClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1904;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 1905;
				this.match(StarRocksSqlParser.MATERIALIZED);
				this.state = 1906;
				this.match(StarRocksSqlParser.VIEW);
				this.state = 1907;
				_localctx._mvName = this.qualifiedName();
				this.state = 1908;
				this.statusDesc();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1910;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 1911;
				this.match(StarRocksSqlParser.MATERIALIZED);
				this.state = 1912;
				this.match(StarRocksSqlParser.VIEW);
				this.state = 1913;
				this.qualifiedName();
				this.state = 1914;
				this.applyMaskingPolicyClause();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1916;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 1917;
				this.match(StarRocksSqlParser.MATERIALIZED);
				this.state = 1918;
				this.match(StarRocksSqlParser.VIEW);
				this.state = 1919;
				this.qualifiedName();
				this.state = 1920;
				this.applyRowAccessPolicyClause();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public refreshMaterializedViewStatement(): RefreshMaterializedViewStatementContext {
		let _localctx: RefreshMaterializedViewStatementContext = new RefreshMaterializedViewStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 132, StarRocksSqlParser.RULE_refreshMaterializedViewStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1924;
			this.match(StarRocksSqlParser.REFRESH);
			this.state = 1925;
			this.match(StarRocksSqlParser.MATERIALIZED);
			this.state = 1926;
			this.match(StarRocksSqlParser.VIEW);
			this.state = 1927;
			_localctx._mvName = this.qualifiedName();
			this.state = 1930;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PARTITION) {
				{
				this.state = 1928;
				this.match(StarRocksSqlParser.PARTITION);
				this.state = 1929;
				this.partitionRangeDesc();
				}
			}

			this.state = 1933;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FORCE) {
				{
				this.state = 1932;
				this.match(StarRocksSqlParser.FORCE);
				}
			}

			this.state = 1938;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 137, this._ctx) ) {
			case 1:
				{
				this.state = 1935;
				this.match(StarRocksSqlParser.WITH);
				this.state = 1936;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.ASYNC || _la === StarRocksSqlParser.SYNC)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1937;
				this.match(StarRocksSqlParser.MODE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cancelRefreshMaterializedViewStatement(): CancelRefreshMaterializedViewStatementContext {
		let _localctx: CancelRefreshMaterializedViewStatementContext = new CancelRefreshMaterializedViewStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 134, StarRocksSqlParser.RULE_cancelRefreshMaterializedViewStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1940;
			this.match(StarRocksSqlParser.CANCEL);
			this.state = 1941;
			this.match(StarRocksSqlParser.REFRESH);
			this.state = 1942;
			this.match(StarRocksSqlParser.MATERIALIZED);
			this.state = 1943;
			this.match(StarRocksSqlParser.VIEW);
			this.state = 1944;
			_localctx._mvName = this.qualifiedName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public adminSetConfigStatement(): AdminSetConfigStatementContext {
		let _localctx: AdminSetConfigStatementContext = new AdminSetConfigStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 136, StarRocksSqlParser.RULE_adminSetConfigStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1946;
			this.match(StarRocksSqlParser.ADMIN);
			this.state = 1947;
			this.match(StarRocksSqlParser.SET);
			this.state = 1948;
			this.match(StarRocksSqlParser.FRONTEND);
			this.state = 1949;
			this.match(StarRocksSqlParser.CONFIG);
			this.state = 1950;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 1951;
			this.property();
			this.state = 1952;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public adminSetReplicaStatusStatement(): AdminSetReplicaStatusStatementContext {
		let _localctx: AdminSetReplicaStatusStatementContext = new AdminSetReplicaStatusStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 138, StarRocksSqlParser.RULE_adminSetReplicaStatusStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1954;
			this.match(StarRocksSqlParser.ADMIN);
			this.state = 1955;
			this.match(StarRocksSqlParser.SET);
			this.state = 1956;
			this.match(StarRocksSqlParser.REPLICA);
			this.state = 1957;
			this.match(StarRocksSqlParser.STATUS);
			this.state = 1958;
			this.properties();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public adminShowConfigStatement(): AdminShowConfigStatementContext {
		let _localctx: AdminShowConfigStatementContext = new AdminShowConfigStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 140, StarRocksSqlParser.RULE_adminShowConfigStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1960;
			this.match(StarRocksSqlParser.ADMIN);
			this.state = 1961;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 1962;
			this.match(StarRocksSqlParser.FRONTEND);
			this.state = 1963;
			this.match(StarRocksSqlParser.CONFIG);
			this.state = 1966;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.LIKE) {
				{
				this.state = 1964;
				this.match(StarRocksSqlParser.LIKE);
				this.state = 1965;
				_localctx._pattern = this.string();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public adminShowReplicaDistributionStatement(): AdminShowReplicaDistributionStatementContext {
		let _localctx: AdminShowReplicaDistributionStatementContext = new AdminShowReplicaDistributionStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 142, StarRocksSqlParser.RULE_adminShowReplicaDistributionStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1968;
			this.match(StarRocksSqlParser.ADMIN);
			this.state = 1969;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 1970;
			this.match(StarRocksSqlParser.REPLICA);
			this.state = 1971;
			this.match(StarRocksSqlParser.DISTRIBUTION);
			this.state = 1972;
			this.match(StarRocksSqlParser.FROM);
			this.state = 1973;
			this.qualifiedName();
			this.state = 1975;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PARTITION || _la === StarRocksSqlParser.PARTITIONS || _la === StarRocksSqlParser.TEMPORARY) {
				{
				this.state = 1974;
				this.partitionNames();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public adminShowReplicaStatusStatement(): AdminShowReplicaStatusStatementContext {
		let _localctx: AdminShowReplicaStatusStatementContext = new AdminShowReplicaStatusStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 144, StarRocksSqlParser.RULE_adminShowReplicaStatusStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1977;
			this.match(StarRocksSqlParser.ADMIN);
			this.state = 1978;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 1979;
			this.match(StarRocksSqlParser.REPLICA);
			this.state = 1980;
			this.match(StarRocksSqlParser.STATUS);
			this.state = 1981;
			this.match(StarRocksSqlParser.FROM);
			this.state = 1982;
			this.qualifiedName();
			this.state = 1984;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PARTITION || _la === StarRocksSqlParser.PARTITIONS || _la === StarRocksSqlParser.TEMPORARY) {
				{
				this.state = 1983;
				this.partitionNames();
				}
			}

			this.state = 1988;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.WHERE) {
				{
				this.state = 1986;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 1987;
				_localctx._where = this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public adminRepairTableStatement(): AdminRepairTableStatementContext {
		let _localctx: AdminRepairTableStatementContext = new AdminRepairTableStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 146, StarRocksSqlParser.RULE_adminRepairTableStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1990;
			this.match(StarRocksSqlParser.ADMIN);
			this.state = 1991;
			this.match(StarRocksSqlParser.REPAIR);
			this.state = 1992;
			this.match(StarRocksSqlParser.TABLE);
			this.state = 1993;
			this.qualifiedName();
			this.state = 1995;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PARTITION || _la === StarRocksSqlParser.PARTITIONS || _la === StarRocksSqlParser.TEMPORARY) {
				{
				this.state = 1994;
				this.partitionNames();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public adminCancelRepairTableStatement(): AdminCancelRepairTableStatementContext {
		let _localctx: AdminCancelRepairTableStatementContext = new AdminCancelRepairTableStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 148, StarRocksSqlParser.RULE_adminCancelRepairTableStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1997;
			this.match(StarRocksSqlParser.ADMIN);
			this.state = 1998;
			this.match(StarRocksSqlParser.CANCEL);
			this.state = 1999;
			this.match(StarRocksSqlParser.REPAIR);
			this.state = 2000;
			this.match(StarRocksSqlParser.TABLE);
			this.state = 2001;
			this.qualifiedName();
			this.state = 2003;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PARTITION || _la === StarRocksSqlParser.PARTITIONS || _la === StarRocksSqlParser.TEMPORARY) {
				{
				this.state = 2002;
				this.partitionNames();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public adminCheckTabletsStatement(): AdminCheckTabletsStatementContext {
		let _localctx: AdminCheckTabletsStatementContext = new AdminCheckTabletsStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 150, StarRocksSqlParser.RULE_adminCheckTabletsStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2005;
			this.match(StarRocksSqlParser.ADMIN);
			this.state = 2006;
			this.match(StarRocksSqlParser.CHECK);
			this.state = 2007;
			this.tabletList();
			this.state = 2008;
			this.match(StarRocksSqlParser.PROPERTIES);
			this.state = 2009;
			this.match(StarRocksSqlParser.LEFT_PARENpropertyRIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public killStatement(): KillStatementContext {
		let _localctx: KillStatementContext = new KillStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 152, StarRocksSqlParser.RULE_killStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2011;
			this.match(StarRocksSqlParser.KILL);
			this.state = 2016;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.CONNECTION:
			case StarRocksSqlParser.INTEGER_VALUE:
				{
				this.state = 2013;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.CONNECTION) {
					{
					this.state = 2012;
					this.match(StarRocksSqlParser.CONNECTION);
					}
				}

				}
				break;
			case StarRocksSqlParser.QUERY:
				{
				this.state = 2015;
				this.match(StarRocksSqlParser.QUERY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2018;
			this.match(StarRocksSqlParser.INTEGER_VALUE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public syncStatement(): SyncStatementContext {
		let _localctx: SyncStatementContext = new SyncStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 154, StarRocksSqlParser.RULE_syncStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2020;
			this.match(StarRocksSqlParser.SYNC);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterSystemStatement(): AlterSystemStatementContext {
		let _localctx: AlterSystemStatementContext = new AlterSystemStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 156, StarRocksSqlParser.RULE_alterSystemStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2022;
			this.match(StarRocksSqlParser.ALTER);
			this.state = 2023;
			this.match(StarRocksSqlParser.SYSTEM);
			this.state = 2024;
			this.alterClause();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cancelAlterSystemStatement(): CancelAlterSystemStatementContext {
		let _localctx: CancelAlterSystemStatementContext = new CancelAlterSystemStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 158, StarRocksSqlParser.RULE_cancelAlterSystemStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2026;
			this.match(StarRocksSqlParser.CANCEL);
			this.state = 2027;
			this.match(StarRocksSqlParser.DECOMMISSION);
			this.state = 2028;
			this.match(StarRocksSqlParser.BACKEND);
			this.state = 2029;
			this.string();
			this.state = 2034;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 2030;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 2031;
				this.string();
				}
				}
				this.state = 2036;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showComputeNodesStatement(): ShowComputeNodesStatementContext {
		let _localctx: ShowComputeNodesStatementContext = new ShowComputeNodesStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 160, StarRocksSqlParser.RULE_showComputeNodesStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2037;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 2038;
			this.match(StarRocksSqlParser.COMPUTE);
			this.state = 2039;
			this.match(StarRocksSqlParser.NODES);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createExternalCatalogStatement(): CreateExternalCatalogStatementContext {
		let _localctx: CreateExternalCatalogStatementContext = new CreateExternalCatalogStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 162, StarRocksSqlParser.RULE_createExternalCatalogStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2041;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 2042;
			this.match(StarRocksSqlParser.EXTERNAL);
			this.state = 2043;
			this.match(StarRocksSqlParser.CATALOG);
			this.state = 2044;
			_localctx._catalogName = this.identifierOrString();
			this.state = 2046;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.COMMENT) {
				{
				this.state = 2045;
				this.comment();
				}
			}

			this.state = 2048;
			this.properties();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showCreateExternalCatalogStatement(): ShowCreateExternalCatalogStatementContext {
		let _localctx: ShowCreateExternalCatalogStatementContext = new ShowCreateExternalCatalogStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 164, StarRocksSqlParser.RULE_showCreateExternalCatalogStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2050;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 2051;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 2052;
			this.match(StarRocksSqlParser.CATALOG);
			this.state = 2053;
			_localctx._catalogName = this.identifierOrString();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropExternalCatalogStatement(): DropExternalCatalogStatementContext {
		let _localctx: DropExternalCatalogStatementContext = new DropExternalCatalogStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 166, StarRocksSqlParser.RULE_dropExternalCatalogStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2055;
			this.match(StarRocksSqlParser.DROP);
			this.state = 2056;
			this.match(StarRocksSqlParser.CATALOG);
			this.state = 2057;
			_localctx._catalogName = this.identifierOrString();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showCatalogsStatement(): ShowCatalogsStatementContext {
		let _localctx: ShowCatalogsStatementContext = new ShowCatalogsStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 168, StarRocksSqlParser.RULE_showCatalogsStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2059;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 2060;
			this.match(StarRocksSqlParser.CATALOGS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createWarehouseStatement(): CreateWarehouseStatementContext {
		let _localctx: CreateWarehouseStatementContext = new CreateWarehouseStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 170, StarRocksSqlParser.RULE_createWarehouseStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2062;
			this.match(StarRocksSqlParser.CREATE);
			{
			this.state = 2063;
			this.match(StarRocksSqlParser.WAREHOUSE);
			}
			this.state = 2067;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 2064;
				this.match(StarRocksSqlParser.IF);
				this.state = 2065;
				this.match(StarRocksSqlParser.NOT);
				this.state = 2066;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 2069;
			_localctx._warehouseName = this.identifierOrString();
			this.state = 2071;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PROPERTIES) {
				{
				this.state = 2070;
				this.properties();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showWarehousesStatement(): ShowWarehousesStatementContext {
		let _localctx: ShowWarehousesStatementContext = new ShowWarehousesStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 172, StarRocksSqlParser.RULE_showWarehousesStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2073;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 2074;
			this.match(StarRocksSqlParser.WAREHOUSES);
			this.state = 2079;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.LIKE:
				{
				{
				this.state = 2075;
				this.match(StarRocksSqlParser.LIKE);
				this.state = 2076;
				_localctx._pattern = this.string();
				}
				}
				break;
			case StarRocksSqlParser.WHERE:
				{
				{
				this.state = 2077;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 2078;
				this.expression(0);
				}
				}
				break;
			case StarRocksSqlParser.EOF:
			case StarRocksSqlParser.ADD:
			case StarRocksSqlParser.ADMIN:
			case StarRocksSqlParser.ALTER:
			case StarRocksSqlParser.ANALYZE:
			case StarRocksSqlParser.BACKUP:
			case StarRocksSqlParser.BEGIN:
			case StarRocksSqlParser.CANCEL:
			case StarRocksSqlParser.COMMIT:
			case StarRocksSqlParser.CREATE:
			case StarRocksSqlParser.DELETE:
			case StarRocksSqlParser.DESC:
			case StarRocksSqlParser.DESCRIBE:
			case StarRocksSqlParser.DROP:
			case StarRocksSqlParser.EXECUTE:
			case StarRocksSqlParser.EXPLAIN:
			case StarRocksSqlParser.EXPORT:
			case StarRocksSqlParser.GRANT:
			case StarRocksSqlParser.HELP:
			case StarRocksSqlParser.INSTALL:
			case StarRocksSqlParser.INSERT:
			case StarRocksSqlParser.KILL:
			case StarRocksSqlParser.LOAD:
			case StarRocksSqlParser.PAUSE:
			case StarRocksSqlParser.RECOVER:
			case StarRocksSqlParser.REFRESH:
			case StarRocksSqlParser.RESTORE:
			case StarRocksSqlParser.RESUME:
			case StarRocksSqlParser.REVOKE:
			case StarRocksSqlParser.ROLLBACK:
			case StarRocksSqlParser.SELECT:
			case StarRocksSqlParser.SET:
			case StarRocksSqlParser.SHOW:
			case StarRocksSqlParser.START:
			case StarRocksSqlParser.STOP:
			case StarRocksSqlParser.SUBMIT:
			case StarRocksSqlParser.SUSPEND:
			case StarRocksSqlParser.SYNC:
			case StarRocksSqlParser.TRACE:
			case StarRocksSqlParser.TRUNCATE:
			case StarRocksSqlParser.UNINSTALL:
			case StarRocksSqlParser.UPDATE:
			case StarRocksSqlParser.USE:
			case StarRocksSqlParser.WITH:
			case StarRocksSqlParser.LOCK:
			case StarRocksSqlParser.UNLOCK:
			case StarRocksSqlParser.SEMICOLON:
			case StarRocksSqlParser.LEFT_PAREN:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropWarehouseStatement(): DropWarehouseStatementContext {
		let _localctx: DropWarehouseStatementContext = new DropWarehouseStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 174, StarRocksSqlParser.RULE_dropWarehouseStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2081;
			this.match(StarRocksSqlParser.DROP);
			this.state = 2082;
			this.match(StarRocksSqlParser.WAREHOUSE);
			this.state = 2085;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 2083;
				this.match(StarRocksSqlParser.IF);
				this.state = 2084;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 2087;
			_localctx._warehouseName = this.identifierOrString();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterWarehouseStatement(): AlterWarehouseStatementContext {
		let _localctx: AlterWarehouseStatementContext = new AlterWarehouseStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 176, StarRocksSqlParser.RULE_alterWarehouseStatement);
		try {
			this.state = 2107;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 152, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2089;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 2090;
				this.match(StarRocksSqlParser.WAREHOUSE);
				this.state = 2091;
				this.identifier();
				this.state = 2092;
				this.match(StarRocksSqlParser.ADD);
				this.state = 2093;
				this.match(StarRocksSqlParser.CLUSTER);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2095;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 2096;
				this.match(StarRocksSqlParser.WAREHOUSE);
				this.state = 2097;
				this.identifier();
				this.state = 2098;
				this.match(StarRocksSqlParser.REMOVE);
				this.state = 2099;
				this.match(StarRocksSqlParser.CLUSTER);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2101;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 2102;
				this.match(StarRocksSqlParser.WAREHOUSE);
				this.state = 2103;
				this.identifier();
				this.state = 2104;
				this.match(StarRocksSqlParser.SET);
				this.state = 2105;
				this.propertyList();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showClustersStatement(): ShowClustersStatementContext {
		let _localctx: ShowClustersStatementContext = new ShowClustersStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 178, StarRocksSqlParser.RULE_showClustersStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2109;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 2110;
			this.match(StarRocksSqlParser.CLUSTERS);
			this.state = 2111;
			this.match(StarRocksSqlParser.FROM);
			this.state = 2112;
			this.match(StarRocksSqlParser.WAREHOUSE);
			this.state = 2113;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public suspendWarehouseStatement(): SuspendWarehouseStatementContext {
		let _localctx: SuspendWarehouseStatementContext = new SuspendWarehouseStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 180, StarRocksSqlParser.RULE_suspendWarehouseStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2115;
			this.match(StarRocksSqlParser.SUSPEND);
			this.state = 2116;
			this.match(StarRocksSqlParser.WAREHOUSE);
			this.state = 2119;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 2117;
				this.match(StarRocksSqlParser.IF);
				this.state = 2118;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 2121;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resumeWarehouseStatement(): ResumeWarehouseStatementContext {
		let _localctx: ResumeWarehouseStatementContext = new ResumeWarehouseStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 182, StarRocksSqlParser.RULE_resumeWarehouseStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2123;
			this.match(StarRocksSqlParser.RESUME);
			this.state = 2124;
			this.match(StarRocksSqlParser.WAREHOUSE);
			this.state = 2127;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 2125;
				this.match(StarRocksSqlParser.IF);
				this.state = 2126;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 2129;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createStorageVolumeStatement(): CreateStorageVolumeStatementContext {
		let _localctx: CreateStorageVolumeStatementContext = new CreateStorageVolumeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 184, StarRocksSqlParser.RULE_createStorageVolumeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2131;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 2132;
			this.match(StarRocksSqlParser.STORAGE);
			this.state = 2133;
			this.match(StarRocksSqlParser.VOLUME);
			this.state = 2137;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 2134;
				this.match(StarRocksSqlParser.IF);
				this.state = 2135;
				this.match(StarRocksSqlParser.NOT);
				this.state = 2136;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 2139;
			_localctx._storageVolumeName = this.identifierOrString();
			this.state = 2140;
			this.typeDesc();
			this.state = 2141;
			this.locationsDesc();
			this.state = 2143;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.COMMENT) {
				{
				this.state = 2142;
				this.comment();
				}
			}

			this.state = 2145;
			this.properties();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public typeDesc(): TypeDescContext {
		let _localctx: TypeDescContext = new TypeDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 186, StarRocksSqlParser.RULE_typeDesc);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2147;
			this.match(StarRocksSqlParser.TYPE);
			this.state = 2148;
			this.match(StarRocksSqlParser.EQ);
			this.state = 2149;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public locationsDesc(): LocationsDescContext {
		let _localctx: LocationsDescContext = new LocationsDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 188, StarRocksSqlParser.RULE_locationsDesc);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2151;
			this.match(StarRocksSqlParser.LOCATIONS);
			this.state = 2152;
			this.match(StarRocksSqlParser.EQ);
			this.state = 2153;
			this.stringList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showStorageVolumesStatement(): ShowStorageVolumesStatementContext {
		let _localctx: ShowStorageVolumesStatementContext = new ShowStorageVolumesStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 190, StarRocksSqlParser.RULE_showStorageVolumesStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2155;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 2156;
			this.match(StarRocksSqlParser.STORAGE);
			this.state = 2157;
			this.match(StarRocksSqlParser.VOLUMES);
			this.state = 2160;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.LIKE) {
				{
				this.state = 2158;
				this.match(StarRocksSqlParser.LIKE);
				this.state = 2159;
				_localctx._pattern = this.string();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropStorageVolumeStatement(): DropStorageVolumeStatementContext {
		let _localctx: DropStorageVolumeStatementContext = new DropStorageVolumeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 192, StarRocksSqlParser.RULE_dropStorageVolumeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2162;
			this.match(StarRocksSqlParser.DROP);
			this.state = 2163;
			this.match(StarRocksSqlParser.STORAGE);
			this.state = 2164;
			this.match(StarRocksSqlParser.VOLUME);
			this.state = 2167;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 2165;
				this.match(StarRocksSqlParser.IF);
				this.state = 2166;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 2169;
			_localctx._storageVolumeName = this.identifierOrString();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStorageVolumeStatement(): AlterStorageVolumeStatementContext {
		let _localctx: AlterStorageVolumeStatementContext = new AlterStorageVolumeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 194, StarRocksSqlParser.RULE_alterStorageVolumeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2171;
			this.match(StarRocksSqlParser.ALTER);
			this.state = 2172;
			this.match(StarRocksSqlParser.STORAGE);
			this.state = 2173;
			this.match(StarRocksSqlParser.VOLUME);
			this.state = 2174;
			this.identifierOrString();
			this.state = 2175;
			this.alterStorageVolumeClause();
			this.state = 2180;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 2176;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 2177;
				this.alterStorageVolumeClause();
				}
				}
				this.state = 2182;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStorageVolumeClause(): AlterStorageVolumeClauseContext {
		let _localctx: AlterStorageVolumeClauseContext = new AlterStorageVolumeClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 196, StarRocksSqlParser.RULE_alterStorageVolumeClause);
		try {
			this.state = 2185;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.COMMENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2183;
				this.modifyStorageVolumeCommentClause();
				}
				break;
			case StarRocksSqlParser.SET:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2184;
				this.modifyStorageVolumePropertiesClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public modifyStorageVolumePropertiesClause(): ModifyStorageVolumePropertiesClauseContext {
		let _localctx: ModifyStorageVolumePropertiesClauseContext = new ModifyStorageVolumePropertiesClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 198, StarRocksSqlParser.RULE_modifyStorageVolumePropertiesClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2187;
			this.match(StarRocksSqlParser.SET);
			this.state = 2188;
			this.propertyList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public modifyStorageVolumeCommentClause(): ModifyStorageVolumeCommentClauseContext {
		let _localctx: ModifyStorageVolumeCommentClauseContext = new ModifyStorageVolumeCommentClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 200, StarRocksSqlParser.RULE_modifyStorageVolumeCommentClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2190;
			this.match(StarRocksSqlParser.COMMENT);
			this.state = 2191;
			this.match(StarRocksSqlParser.EQ);
			this.state = 2192;
			this.string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public descStorageVolumeStatement(): DescStorageVolumeStatementContext {
		let _localctx: DescStorageVolumeStatementContext = new DescStorageVolumeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 202, StarRocksSqlParser.RULE_descStorageVolumeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2194;
			_la = this._input.LA(1);
			if (!(_la === StarRocksSqlParser.DESC || _la === StarRocksSqlParser.DESCRIBE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2195;
			this.match(StarRocksSqlParser.STORAGE);
			this.state = 2196;
			this.match(StarRocksSqlParser.VOLUME);
			this.state = 2197;
			this.identifierOrString();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setDefaultStorageVolumeStatement(): SetDefaultStorageVolumeStatementContext {
		let _localctx: SetDefaultStorageVolumeStatementContext = new SetDefaultStorageVolumeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 204, StarRocksSqlParser.RULE_setDefaultStorageVolumeStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2199;
			this.match(StarRocksSqlParser.SET);
			this.state = 2200;
			this.identifierOrString();
			this.state = 2201;
			this.match(StarRocksSqlParser.AS);
			this.state = 2202;
			this.match(StarRocksSqlParser.DEFAULT);
			this.state = 2203;
			this.match(StarRocksSqlParser.STORAGE);
			this.state = 2204;
			this.match(StarRocksSqlParser.VOLUME);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterClause(): AlterClauseContext {
		let _localctx: AlterClauseContext = new AlterClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 206, StarRocksSqlParser.RULE_alterClause);
		try {
			this.state = 2242;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 161, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2206;
				this.addFrontendClause();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2207;
				this.dropFrontendClause();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2208;
				this.modifyFrontendHostClause();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2209;
				this.addBackendClause();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2210;
				this.dropBackendClause();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2211;
				this.decommissionBackendClause();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2212;
				this.modifyBackendHostClause();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2213;
				this.addComputeNodeClause();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 2214;
				this.dropComputeNodeClause();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 2215;
				this.modifyBrokerClause();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 2216;
				this.alterLoadErrorUrlClause();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 2217;
				this.createImageClause();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 2218;
				this.cleanTabletSchedQClause();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 2219;
				this.createIndexClause();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 2220;
				this.dropIndexClause();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 2221;
				this.tableRenameClause();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 2222;
				this.swapTableClause();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 2223;
				this.modifyTablePropertiesClause();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 2224;
				this.addColumnClause();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 2225;
				this.addColumnsClause();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 2226;
				this.dropColumnClause();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 2227;
				this.modifyColumnClause();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 2228;
				this.columnRenameClause();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 2229;
				this.reorderColumnsClause();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 2230;
				this.rollupRenameClause();
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 2231;
				this.compactionClause();
				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 2232;
				this.modifyCommentClause();
				}
				break;

			case 28:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 2233;
				this.applyMaskingPolicyClause();
				}
				break;

			case 29:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 2234;
				this.applyRowAccessPolicyClause();
				}
				break;

			case 30:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 2235;
				this.addPartitionClause();
				}
				break;

			case 31:
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 2236;
				this.dropPartitionClause();
				}
				break;

			case 32:
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 2237;
				this.distributionClause();
				}
				break;

			case 33:
				this.enterOuterAlt(_localctx, 33);
				{
				this.state = 2238;
				this.truncatePartitionClause();
				}
				break;

			case 34:
				this.enterOuterAlt(_localctx, 34);
				{
				this.state = 2239;
				this.modifyPartitionClause();
				}
				break;

			case 35:
				this.enterOuterAlt(_localctx, 35);
				{
				this.state = 2240;
				this.replacePartitionClause();
				}
				break;

			case 36:
				this.enterOuterAlt(_localctx, 36);
				{
				this.state = 2241;
				this.partitionRenameClause();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public addFrontendClause(): AddFrontendClauseContext {
		let _localctx: AddFrontendClauseContext = new AddFrontendClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 208, StarRocksSqlParser.RULE_addFrontendClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2244;
			this.match(StarRocksSqlParser.ADD);
			this.state = 2245;
			_la = this._input.LA(1);
			if (!(_la === StarRocksSqlParser.FOLLOWER || _la === StarRocksSqlParser.OBSERVER)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2246;
			this.string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropFrontendClause(): DropFrontendClauseContext {
		let _localctx: DropFrontendClauseContext = new DropFrontendClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 210, StarRocksSqlParser.RULE_dropFrontendClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2248;
			this.match(StarRocksSqlParser.DROP);
			this.state = 2249;
			_la = this._input.LA(1);
			if (!(_la === StarRocksSqlParser.FOLLOWER || _la === StarRocksSqlParser.OBSERVER)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2250;
			this.string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public modifyFrontendHostClause(): ModifyFrontendHostClauseContext {
		let _localctx: ModifyFrontendHostClauseContext = new ModifyFrontendHostClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 212, StarRocksSqlParser.RULE_modifyFrontendHostClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2252;
			this.match(StarRocksSqlParser.MODIFY);
			this.state = 2253;
			this.match(StarRocksSqlParser.FRONTEND);
			this.state = 2254;
			this.match(StarRocksSqlParser.HOST);
			this.state = 2255;
			this.string();
			this.state = 2256;
			this.match(StarRocksSqlParser.TO);
			this.state = 2257;
			this.string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public addBackendClause(): AddBackendClauseContext {
		let _localctx: AddBackendClauseContext = new AddBackendClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 214, StarRocksSqlParser.RULE_addBackendClause);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2259;
			this.match(StarRocksSqlParser.ADD);
			this.state = 2260;
			this.match(StarRocksSqlParser.BACKEND);
			this.state = 2261;
			this.string();
			this.state = 2266;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 162, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2262;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 2263;
					this.string();
					}
					}
				}
				this.state = 2268;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 162, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropBackendClause(): DropBackendClauseContext {
		let _localctx: DropBackendClauseContext = new DropBackendClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 216, StarRocksSqlParser.RULE_dropBackendClause);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2269;
			this.match(StarRocksSqlParser.DROP);
			this.state = 2270;
			this.match(StarRocksSqlParser.BACKEND);
			this.state = 2271;
			this.string();
			this.state = 2276;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 163, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2272;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 2273;
					this.string();
					}
					}
				}
				this.state = 2278;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 163, this._ctx);
			}
			this.state = 2280;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FORCE) {
				{
				this.state = 2279;
				this.match(StarRocksSqlParser.FORCE);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decommissionBackendClause(): DecommissionBackendClauseContext {
		let _localctx: DecommissionBackendClauseContext = new DecommissionBackendClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 218, StarRocksSqlParser.RULE_decommissionBackendClause);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2282;
			this.match(StarRocksSqlParser.DECOMMISSION);
			this.state = 2283;
			this.match(StarRocksSqlParser.BACKEND);
			this.state = 2284;
			this.string();
			this.state = 2289;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 165, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2285;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 2286;
					this.string();
					}
					}
				}
				this.state = 2291;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 165, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public modifyBackendHostClause(): ModifyBackendHostClauseContext {
		let _localctx: ModifyBackendHostClauseContext = new ModifyBackendHostClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 220, StarRocksSqlParser.RULE_modifyBackendHostClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2292;
			this.match(StarRocksSqlParser.MODIFY);
			this.state = 2293;
			this.match(StarRocksSqlParser.BACKEND);
			this.state = 2294;
			this.match(StarRocksSqlParser.HOST);
			this.state = 2295;
			this.string();
			this.state = 2296;
			this.match(StarRocksSqlParser.TO);
			this.state = 2297;
			this.string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public addComputeNodeClause(): AddComputeNodeClauseContext {
		let _localctx: AddComputeNodeClauseContext = new AddComputeNodeClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 222, StarRocksSqlParser.RULE_addComputeNodeClause);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2299;
			this.match(StarRocksSqlParser.ADD);
			this.state = 2300;
			this.match(StarRocksSqlParser.COMPUTE);
			this.state = 2301;
			this.match(StarRocksSqlParser.NODE);
			this.state = 2302;
			this.string();
			this.state = 2307;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 166, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2303;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 2304;
					this.string();
					}
					}
				}
				this.state = 2309;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 166, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropComputeNodeClause(): DropComputeNodeClauseContext {
		let _localctx: DropComputeNodeClauseContext = new DropComputeNodeClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 224, StarRocksSqlParser.RULE_dropComputeNodeClause);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2310;
			this.match(StarRocksSqlParser.DROP);
			this.state = 2311;
			this.match(StarRocksSqlParser.COMPUTE);
			this.state = 2312;
			this.match(StarRocksSqlParser.NODE);
			this.state = 2313;
			this.string();
			this.state = 2318;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 167, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2314;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 2315;
					this.string();
					}
					}
				}
				this.state = 2320;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 167, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public modifyBrokerClause(): ModifyBrokerClauseContext {
		let _localctx: ModifyBrokerClauseContext = new ModifyBrokerClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 226, StarRocksSqlParser.RULE_modifyBrokerClause);
		try {
			let _alt: number;
			this.state = 2347;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 170, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2321;
				this.match(StarRocksSqlParser.ADD);
				this.state = 2322;
				this.match(StarRocksSqlParser.BROKER);
				this.state = 2323;
				this.identifierOrString();
				this.state = 2324;
				this.string();
				this.state = 2329;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 168, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2325;
						this.match(StarRocksSqlParser.COMMA);
						this.state = 2326;
						this.string();
						}
						}
					}
					this.state = 2331;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 168, this._ctx);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2332;
				this.match(StarRocksSqlParser.DROP);
				this.state = 2333;
				this.match(StarRocksSqlParser.BROKER);
				this.state = 2334;
				this.identifierOrString();
				this.state = 2335;
				this.string();
				this.state = 2340;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 169, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2336;
						this.match(StarRocksSqlParser.COMMA);
						this.state = 2337;
						this.string();
						}
						}
					}
					this.state = 2342;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 169, this._ctx);
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2343;
				this.match(StarRocksSqlParser.DROP);
				this.state = 2344;
				this.match(StarRocksSqlParser.ALL);
				this.state = 2345;
				this.match(StarRocksSqlParser.BROKER);
				this.state = 2346;
				this.identifierOrString();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterLoadErrorUrlClause(): AlterLoadErrorUrlClauseContext {
		let _localctx: AlterLoadErrorUrlClauseContext = new AlterLoadErrorUrlClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 228, StarRocksSqlParser.RULE_alterLoadErrorUrlClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2349;
			this.match(StarRocksSqlParser.SET);
			this.state = 2350;
			this.match(StarRocksSqlParser.LOAD);
			this.state = 2351;
			this.match(StarRocksSqlParser.ERRORS);
			this.state = 2352;
			this.match(StarRocksSqlParser.HUB);
			this.state = 2354;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PROPERTIES) {
				{
				this.state = 2353;
				this.properties();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createImageClause(): CreateImageClauseContext {
		let _localctx: CreateImageClauseContext = new CreateImageClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 230, StarRocksSqlParser.RULE_createImageClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2356;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 2357;
			this.match(StarRocksSqlParser.IMAGE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cleanTabletSchedQClause(): CleanTabletSchedQClauseContext {
		let _localctx: CleanTabletSchedQClauseContext = new CleanTabletSchedQClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 232, StarRocksSqlParser.RULE_cleanTabletSchedQClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2359;
			this.match(StarRocksSqlParser.CLEAN);
			this.state = 2360;
			this.match(StarRocksSqlParser.TABLET);
			this.state = 2361;
			this.match(StarRocksSqlParser.SCHEDULER);
			this.state = 2362;
			this.match(StarRocksSqlParser.QUEUE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createIndexClause(): CreateIndexClauseContext {
		let _localctx: CreateIndexClauseContext = new CreateIndexClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 234, StarRocksSqlParser.RULE_createIndexClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2364;
			this.match(StarRocksSqlParser.ADD);
			this.state = 2365;
			this.match(StarRocksSqlParser.INDEX);
			this.state = 2366;
			_localctx._indexName = this.identifier();
			this.state = 2367;
			this.identifierList();
			this.state = 2369;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.USING) {
				{
				this.state = 2368;
				this.indexType();
				}
			}

			this.state = 2372;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.COMMENT) {
				{
				this.state = 2371;
				this.comment();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropIndexClause(): DropIndexClauseContext {
		let _localctx: DropIndexClauseContext = new DropIndexClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 236, StarRocksSqlParser.RULE_dropIndexClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2374;
			this.match(StarRocksSqlParser.DROP);
			this.state = 2375;
			this.match(StarRocksSqlParser.INDEX);
			this.state = 2376;
			_localctx._indexName = this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableRenameClause(): TableRenameClauseContext {
		let _localctx: TableRenameClauseContext = new TableRenameClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 238, StarRocksSqlParser.RULE_tableRenameClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2378;
			this.match(StarRocksSqlParser.RENAME);
			this.state = 2379;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public swapTableClause(): SwapTableClauseContext {
		let _localctx: SwapTableClauseContext = new SwapTableClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 240, StarRocksSqlParser.RULE_swapTableClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2381;
			this.match(StarRocksSqlParser.SWAP);
			this.state = 2382;
			this.match(StarRocksSqlParser.WITH);
			this.state = 2383;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public modifyTablePropertiesClause(): ModifyTablePropertiesClauseContext {
		let _localctx: ModifyTablePropertiesClauseContext = new ModifyTablePropertiesClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 242, StarRocksSqlParser.RULE_modifyTablePropertiesClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2385;
			this.match(StarRocksSqlParser.SET);
			this.state = 2386;
			this.propertyList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public modifyCommentClause(): ModifyCommentClauseContext {
		let _localctx: ModifyCommentClauseContext = new ModifyCommentClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 244, StarRocksSqlParser.RULE_modifyCommentClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2388;
			this.match(StarRocksSqlParser.COMMENT);
			this.state = 2389;
			this.match(StarRocksSqlParser.EQ);
			this.state = 2390;
			this.string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public addColumnClause(): AddColumnClauseContext {
		let _localctx: AddColumnClauseContext = new AddColumnClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 246, StarRocksSqlParser.RULE_addColumnClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2392;
			this.match(StarRocksSqlParser.ADD);
			this.state = 2393;
			this.match(StarRocksSqlParser.COLUMN);
			this.state = 2394;
			this.columnDesc();
			this.state = 2398;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.FIRST:
				{
				this.state = 2395;
				this.match(StarRocksSqlParser.FIRST);
				}
				break;
			case StarRocksSqlParser.AFTER:
				{
				this.state = 2396;
				this.match(StarRocksSqlParser.AFTER);
				this.state = 2397;
				this.identifier();
				}
				break;
			case StarRocksSqlParser.EOF:
			case StarRocksSqlParser.ADD:
			case StarRocksSqlParser.ADMIN:
			case StarRocksSqlParser.ALTER:
			case StarRocksSqlParser.ANALYZE:
			case StarRocksSqlParser.BACKUP:
			case StarRocksSqlParser.BEGIN:
			case StarRocksSqlParser.CANCEL:
			case StarRocksSqlParser.COMMIT:
			case StarRocksSqlParser.CREATE:
			case StarRocksSqlParser.DELETE:
			case StarRocksSqlParser.DESC:
			case StarRocksSqlParser.DESCRIBE:
			case StarRocksSqlParser.DROP:
			case StarRocksSqlParser.EXECUTE:
			case StarRocksSqlParser.EXPLAIN:
			case StarRocksSqlParser.EXPORT:
			case StarRocksSqlParser.GRANT:
			case StarRocksSqlParser.HELP:
			case StarRocksSqlParser.IN:
			case StarRocksSqlParser.INSTALL:
			case StarRocksSqlParser.INSERT:
			case StarRocksSqlParser.KILL:
			case StarRocksSqlParser.LOAD:
			case StarRocksSqlParser.PAUSE:
			case StarRocksSqlParser.PROPERTIES:
			case StarRocksSqlParser.RECOVER:
			case StarRocksSqlParser.REFRESH:
			case StarRocksSqlParser.RESTORE:
			case StarRocksSqlParser.RESUME:
			case StarRocksSqlParser.REVOKE:
			case StarRocksSqlParser.ROLLBACK:
			case StarRocksSqlParser.SELECT:
			case StarRocksSqlParser.SET:
			case StarRocksSqlParser.SHOW:
			case StarRocksSqlParser.START:
			case StarRocksSqlParser.STOP:
			case StarRocksSqlParser.SUBMIT:
			case StarRocksSqlParser.SUSPEND:
			case StarRocksSqlParser.SYNC:
			case StarRocksSqlParser.TO:
			case StarRocksSqlParser.TRACE:
			case StarRocksSqlParser.TRUNCATE:
			case StarRocksSqlParser.UNINSTALL:
			case StarRocksSqlParser.UPDATE:
			case StarRocksSqlParser.USE:
			case StarRocksSqlParser.WITH:
			case StarRocksSqlParser.LOCK:
			case StarRocksSqlParser.UNLOCK:
			case StarRocksSqlParser.SEMICOLON:
			case StarRocksSqlParser.LEFT_PAREN:
			case StarRocksSqlParser.COMMA:
				break;
			default:
				break;
			}
			this.state = 2402;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IN || _la === StarRocksSqlParser.TO) {
				{
				this.state = 2400;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.IN || _la === StarRocksSqlParser.TO)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2401;
				_localctx._rollupName = this.identifier();
				}
			}

			this.state = 2405;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PROPERTIES) {
				{
				this.state = 2404;
				this.properties();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public addColumnsClause(): AddColumnsClauseContext {
		let _localctx: AddColumnsClauseContext = new AddColumnsClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 248, StarRocksSqlParser.RULE_addColumnsClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2407;
			this.match(StarRocksSqlParser.ADD);
			this.state = 2408;
			this.match(StarRocksSqlParser.COLUMN);
			this.state = 2409;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 2410;
			this.columnDesc();
			this.state = 2415;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 2411;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 2412;
				this.columnDesc();
				}
				}
				this.state = 2417;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2418;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			this.state = 2421;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IN || _la === StarRocksSqlParser.TO) {
				{
				this.state = 2419;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.IN || _la === StarRocksSqlParser.TO)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2420;
				_localctx._rollupName = this.identifier();
				}
			}

			this.state = 2424;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PROPERTIES) {
				{
				this.state = 2423;
				this.properties();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropColumnClause(): DropColumnClauseContext {
		let _localctx: DropColumnClauseContext = new DropColumnClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 250, StarRocksSqlParser.RULE_dropColumnClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2426;
			this.match(StarRocksSqlParser.DROP);
			this.state = 2427;
			this.match(StarRocksSqlParser.COLUMN);
			this.state = 2428;
			this.identifier();
			this.state = 2431;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM) {
				{
				this.state = 2429;
				this.match(StarRocksSqlParser.FROM);
				this.state = 2430;
				_localctx._rollupName = this.identifier();
				}
			}

			this.state = 2434;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PROPERTIES) {
				{
				this.state = 2433;
				this.properties();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public modifyColumnClause(): ModifyColumnClauseContext {
		let _localctx: ModifyColumnClauseContext = new ModifyColumnClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 252, StarRocksSqlParser.RULE_modifyColumnClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2436;
			this.match(StarRocksSqlParser.MODIFY);
			this.state = 2437;
			this.match(StarRocksSqlParser.COLUMN);
			this.state = 2438;
			this.columnDesc();
			this.state = 2442;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.FIRST:
				{
				this.state = 2439;
				this.match(StarRocksSqlParser.FIRST);
				}
				break;
			case StarRocksSqlParser.AFTER:
				{
				this.state = 2440;
				this.match(StarRocksSqlParser.AFTER);
				this.state = 2441;
				this.identifier();
				}
				break;
			case StarRocksSqlParser.EOF:
			case StarRocksSqlParser.ADD:
			case StarRocksSqlParser.ADMIN:
			case StarRocksSqlParser.ALTER:
			case StarRocksSqlParser.ANALYZE:
			case StarRocksSqlParser.BACKUP:
			case StarRocksSqlParser.BEGIN:
			case StarRocksSqlParser.CANCEL:
			case StarRocksSqlParser.COMMIT:
			case StarRocksSqlParser.CREATE:
			case StarRocksSqlParser.DELETE:
			case StarRocksSqlParser.DESC:
			case StarRocksSqlParser.DESCRIBE:
			case StarRocksSqlParser.DROP:
			case StarRocksSqlParser.EXECUTE:
			case StarRocksSqlParser.EXPLAIN:
			case StarRocksSqlParser.EXPORT:
			case StarRocksSqlParser.FROM:
			case StarRocksSqlParser.GRANT:
			case StarRocksSqlParser.HELP:
			case StarRocksSqlParser.INSTALL:
			case StarRocksSqlParser.INSERT:
			case StarRocksSqlParser.KILL:
			case StarRocksSqlParser.LOAD:
			case StarRocksSqlParser.PAUSE:
			case StarRocksSqlParser.PROPERTIES:
			case StarRocksSqlParser.RECOVER:
			case StarRocksSqlParser.REFRESH:
			case StarRocksSqlParser.RESTORE:
			case StarRocksSqlParser.RESUME:
			case StarRocksSqlParser.REVOKE:
			case StarRocksSqlParser.ROLLBACK:
			case StarRocksSqlParser.SELECT:
			case StarRocksSqlParser.SET:
			case StarRocksSqlParser.SHOW:
			case StarRocksSqlParser.START:
			case StarRocksSqlParser.STOP:
			case StarRocksSqlParser.SUBMIT:
			case StarRocksSqlParser.SUSPEND:
			case StarRocksSqlParser.SYNC:
			case StarRocksSqlParser.TRACE:
			case StarRocksSqlParser.TRUNCATE:
			case StarRocksSqlParser.UNINSTALL:
			case StarRocksSqlParser.UPDATE:
			case StarRocksSqlParser.USE:
			case StarRocksSqlParser.WITH:
			case StarRocksSqlParser.LOCK:
			case StarRocksSqlParser.UNLOCK:
			case StarRocksSqlParser.SEMICOLON:
			case StarRocksSqlParser.LEFT_PAREN:
			case StarRocksSqlParser.COMMA:
				break;
			default:
				break;
			}
			this.state = 2446;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM) {
				{
				this.state = 2444;
				this.match(StarRocksSqlParser.FROM);
				this.state = 2445;
				_localctx._rollupName = this.identifier();
				}
			}

			this.state = 2449;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PROPERTIES) {
				{
				this.state = 2448;
				this.properties();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnRenameClause(): ColumnRenameClauseContext {
		let _localctx: ColumnRenameClauseContext = new ColumnRenameClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 254, StarRocksSqlParser.RULE_columnRenameClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2451;
			this.match(StarRocksSqlParser.RENAME);
			this.state = 2452;
			this.match(StarRocksSqlParser.COLUMN);
			this.state = 2453;
			_localctx._oldColumn = this.identifier();
			this.state = 2454;
			_localctx._newColumn = this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reorderColumnsClause(): ReorderColumnsClauseContext {
		let _localctx: ReorderColumnsClauseContext = new ReorderColumnsClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 256, StarRocksSqlParser.RULE_reorderColumnsClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2456;
			this.match(StarRocksSqlParser.ORDER);
			this.state = 2457;
			this.match(StarRocksSqlParser.BY);
			this.state = 2458;
			this.identifierList();
			this.state = 2461;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM) {
				{
				this.state = 2459;
				this.match(StarRocksSqlParser.FROM);
				this.state = 2460;
				_localctx._rollupName = this.identifier();
				}
			}

			this.state = 2464;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PROPERTIES) {
				{
				this.state = 2463;
				this.properties();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rollupRenameClause(): RollupRenameClauseContext {
		let _localctx: RollupRenameClauseContext = new RollupRenameClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 258, StarRocksSqlParser.RULE_rollupRenameClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2466;
			this.match(StarRocksSqlParser.RENAME);
			this.state = 2467;
			this.match(StarRocksSqlParser.ROLLUP);
			this.state = 2468;
			_localctx._rollupName = this.identifier();
			this.state = 2469;
			_localctx._newRollupName = this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public compactionClause(): CompactionClauseContext {
		let _localctx: CompactionClauseContext = new CompactionClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 260, StarRocksSqlParser.RULE_compactionClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2472;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.BASE || _la === StarRocksSqlParser.CUMULATIVE) {
				{
				this.state = 2471;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.BASE || _la === StarRocksSqlParser.CUMULATIVE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2474;
			this.match(StarRocksSqlParser.COMPACT);
			this.state = 2477;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 188, this._ctx) ) {
			case 1:
				{
				this.state = 2475;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 2476;
				this.identifierList();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public applyMaskingPolicyClause(): ApplyMaskingPolicyClauseContext {
		let _localctx: ApplyMaskingPolicyClauseContext = new ApplyMaskingPolicyClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 262, StarRocksSqlParser.RULE_applyMaskingPolicyClause);
		let _la: number;
		try {
			this.state = 2497;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 190, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2479;
				this.match(StarRocksSqlParser.MODIFY);
				this.state = 2480;
				this.match(StarRocksSqlParser.COLUMN);
				this.state = 2481;
				_localctx._columnName = this.identifier();
				this.state = 2482;
				this.match(StarRocksSqlParser.SET);
				this.state = 2483;
				this.match(StarRocksSqlParser.MASKING);
				this.state = 2484;
				this.match(StarRocksSqlParser.POLICY);
				this.state = 2485;
				_localctx._policyName = this.qualifiedName();
				this.state = 2488;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.USING) {
					{
					this.state = 2486;
					this.match(StarRocksSqlParser.USING);
					this.state = 2487;
					this.identifierList();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2490;
				this.match(StarRocksSqlParser.MODIFY);
				this.state = 2491;
				this.match(StarRocksSqlParser.COLUMN);
				this.state = 2492;
				_localctx._columnName = this.identifier();
				this.state = 2493;
				this.match(StarRocksSqlParser.UNSET);
				this.state = 2494;
				this.match(StarRocksSqlParser.MASKING);
				this.state = 2495;
				this.match(StarRocksSqlParser.POLICY);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public applyRowAccessPolicyClause(): ApplyRowAccessPolicyClauseContext {
		let _localctx: ApplyRowAccessPolicyClauseContext = new ApplyRowAccessPolicyClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 264, StarRocksSqlParser.RULE_applyRowAccessPolicyClause);
		let _la: number;
		try {
			this.state = 2518;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 192, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2499;
				this.match(StarRocksSqlParser.ADD);
				this.state = 2500;
				this.match(StarRocksSqlParser.ROW);
				this.state = 2501;
				this.match(StarRocksSqlParser.ACCESS);
				this.state = 2502;
				this.match(StarRocksSqlParser.POLICY);
				this.state = 2503;
				_localctx._policyName = this.qualifiedName();
				this.state = 2506;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.ON) {
					{
					this.state = 2504;
					this.match(StarRocksSqlParser.ON);
					this.state = 2505;
					this.identifierList();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2508;
				this.match(StarRocksSqlParser.DROP);
				this.state = 2509;
				this.match(StarRocksSqlParser.ROW);
				this.state = 2510;
				this.match(StarRocksSqlParser.ACCESS);
				this.state = 2511;
				this.match(StarRocksSqlParser.POLICY);
				this.state = 2512;
				_localctx._policyName = this.qualifiedName();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2513;
				this.match(StarRocksSqlParser.DROP);
				this.state = 2514;
				this.match(StarRocksSqlParser.ALL);
				this.state = 2515;
				this.match(StarRocksSqlParser.ROW);
				this.state = 2516;
				this.match(StarRocksSqlParser.ACCESS);
				this.state = 2517;
				this.match(StarRocksSqlParser.POLICIES);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public addPartitionClause(): AddPartitionClauseContext {
		let _localctx: AddPartitionClauseContext = new AddPartitionClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 266, StarRocksSqlParser.RULE_addPartitionClause);
		let _la: number;
		try {
			this.state = 2549;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 201, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2520;
				this.match(StarRocksSqlParser.ADD);
				this.state = 2522;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.TEMPORARY) {
					{
					this.state = 2521;
					this.match(StarRocksSqlParser.TEMPORARY);
					}
				}

				this.state = 2527;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case StarRocksSqlParser.PARTITION:
					{
					this.state = 2524;
					this.singleRangePartition();
					}
					break;
				case StarRocksSqlParser.PARTITIONS:
					{
					this.state = 2525;
					this.match(StarRocksSqlParser.PARTITIONS);
					this.state = 2526;
					this.multiRangePartition();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2530;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.DISTRIBUTED) {
					{
					this.state = 2529;
					this.distributionDesc();
					}
				}

				this.state = 2533;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.PROPERTIES) {
					{
					this.state = 2532;
					this.properties();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2535;
				this.match(StarRocksSqlParser.ADD);
				this.state = 2537;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.TEMPORARY) {
					{
					this.state = 2536;
					this.match(StarRocksSqlParser.TEMPORARY);
					}
				}

				this.state = 2541;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 198, this._ctx) ) {
				case 1:
					{
					this.state = 2539;
					this.singleItemListPartitionDesc();
					}
					break;

				case 2:
					{
					this.state = 2540;
					this.multiItemListPartitionDesc();
					}
					break;
				}
				this.state = 2544;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.DISTRIBUTED) {
					{
					this.state = 2543;
					this.distributionDesc();
					}
				}

				this.state = 2547;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.PROPERTIES) {
					{
					this.state = 2546;
					this.properties();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropPartitionClause(): DropPartitionClauseContext {
		let _localctx: DropPartitionClauseContext = new DropPartitionClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 268, StarRocksSqlParser.RULE_dropPartitionClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2551;
			this.match(StarRocksSqlParser.DROP);
			this.state = 2553;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.TEMPORARY) {
				{
				this.state = 2552;
				this.match(StarRocksSqlParser.TEMPORARY);
				}
			}

			this.state = 2555;
			this.match(StarRocksSqlParser.PARTITION);
			this.state = 2558;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 2556;
				this.match(StarRocksSqlParser.IF);
				this.state = 2557;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 2560;
			this.identifier();
			this.state = 2562;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FORCE) {
				{
				this.state = 2561;
				this.match(StarRocksSqlParser.FORCE);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public truncatePartitionClause(): TruncatePartitionClauseContext {
		let _localctx: TruncatePartitionClauseContext = new TruncatePartitionClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 270, StarRocksSqlParser.RULE_truncatePartitionClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2564;
			this.match(StarRocksSqlParser.TRUNCATE);
			this.state = 2565;
			this.partitionNames();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public modifyPartitionClause(): ModifyPartitionClauseContext {
		let _localctx: ModifyPartitionClauseContext = new ModifyPartitionClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 272, StarRocksSqlParser.RULE_modifyPartitionClause);
		try {
			this.state = 2581;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 206, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2567;
				this.match(StarRocksSqlParser.MODIFY);
				this.state = 2568;
				this.match(StarRocksSqlParser.PARTITION);
				this.state = 2574;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 205, this._ctx) ) {
				case 1:
					{
					this.state = 2569;
					this.identifier();
					}
					break;

				case 2:
					{
					this.state = 2570;
					this.identifierList();
					}
					break;

				case 3:
					{
					this.state = 2571;
					this.match(StarRocksSqlParser.LEFT_PAREN);
					this.state = 2572;
					this.match(StarRocksSqlParser.ASTERISK_SYMBOL);
					this.state = 2573;
					this.match(StarRocksSqlParser.RIGHT_PAREN);
					}
					break;
				}
				this.state = 2576;
				this.match(StarRocksSqlParser.SET);
				this.state = 2577;
				this.propertyList();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2578;
				this.match(StarRocksSqlParser.MODIFY);
				this.state = 2579;
				this.match(StarRocksSqlParser.PARTITION);
				this.state = 2580;
				this.distributionDesc();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public replacePartitionClause(): ReplacePartitionClauseContext {
		let _localctx: ReplacePartitionClauseContext = new ReplacePartitionClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 274, StarRocksSqlParser.RULE_replacePartitionClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2583;
			this.match(StarRocksSqlParser.REPLACE);
			this.state = 2584;
			_localctx._parName = this.partitionNames();
			this.state = 2585;
			this.match(StarRocksSqlParser.WITH);
			this.state = 2586;
			_localctx._tempParName = this.partitionNames();
			this.state = 2588;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PROPERTIES) {
				{
				this.state = 2587;
				this.properties();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionRenameClause(): PartitionRenameClauseContext {
		let _localctx: PartitionRenameClauseContext = new PartitionRenameClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 276, StarRocksSqlParser.RULE_partitionRenameClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2590;
			this.match(StarRocksSqlParser.RENAME);
			this.state = 2591;
			this.match(StarRocksSqlParser.PARTITION);
			this.state = 2592;
			_localctx._parName = this.identifier();
			this.state = 2593;
			_localctx._newParName = this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insertStatement(): InsertStatementContext {
		let _localctx: InsertStatementContext = new InsertStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 278, StarRocksSqlParser.RULE_insertStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2596;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & ((1 << (StarRocksSqlParser.DESC - 99)) | (1 << (StarRocksSqlParser.DESCRIBE - 99)) | (1 << (StarRocksSqlParser.EXPLAIN - 99)))) !== 0)) {
				{
				this.state = 2595;
				this.explainDesc();
				}
			}

			this.state = 2598;
			this.match(StarRocksSqlParser.INSERT);
			this.state = 2599;
			_la = this._input.LA(1);
			if (!(_la === StarRocksSqlParser.INTO || _la === StarRocksSqlParser.OVERWRITE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2600;
			this.qualifiedName();
			this.state = 2602;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PARTITION || _la === StarRocksSqlParser.PARTITIONS || _la === StarRocksSqlParser.TEMPORARY) {
				{
				this.state = 2601;
				this.partitionNames();
				}
			}

			this.state = 2607;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 210, this._ctx) ) {
			case 1:
				{
				this.state = 2604;
				this.match(StarRocksSqlParser.WITH);
				this.state = 2605;
				this.match(StarRocksSqlParser.LABEL);
				this.state = 2606;
				_localctx._label = this.identifier();
				}
				break;
			}
			this.state = 2610;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 211, this._ctx) ) {
			case 1:
				{
				this.state = 2609;
				this.columnAliases();
				}
				break;
			}
			this.state = 2622;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.DESC:
			case StarRocksSqlParser.DESCRIBE:
			case StarRocksSqlParser.EXPLAIN:
			case StarRocksSqlParser.SELECT:
			case StarRocksSqlParser.TRACE:
			case StarRocksSqlParser.WITH:
			case StarRocksSqlParser.LEFT_PAREN:
				{
				this.state = 2612;
				this.queryStatement();
				}
				break;
			case StarRocksSqlParser.VALUES:
				{
				{
				this.state = 2613;
				this.match(StarRocksSqlParser.VALUES);
				this.state = 2614;
				this.expressionsWithDefault();
				this.state = 2619;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 2615;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 2616;
					this.expressionsWithDefault();
					}
					}
					this.state = 2621;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public updateStatement(): UpdateStatementContext {
		let _localctx: UpdateStatementContext = new UpdateStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 280, StarRocksSqlParser.RULE_updateStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2625;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & ((1 << (StarRocksSqlParser.DESC - 99)) | (1 << (StarRocksSqlParser.DESCRIBE - 99)) | (1 << (StarRocksSqlParser.EXPLAIN - 99)))) !== 0)) {
				{
				this.state = 2624;
				this.explainDesc();
				}
			}

			this.state = 2628;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.WITH) {
				{
				this.state = 2627;
				this.withClause();
				}
			}

			this.state = 2630;
			this.match(StarRocksSqlParser.UPDATE);
			this.state = 2631;
			this.qualifiedName();
			this.state = 2632;
			this.match(StarRocksSqlParser.SET);
			this.state = 2633;
			this.assignmentList();
			this.state = 2634;
			this.fromClause();
			this.state = 2637;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.WHERE) {
				{
				this.state = 2635;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 2636;
				_localctx._where = this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public deleteStatement(): DeleteStatementContext {
		let _localctx: DeleteStatementContext = new DeleteStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 282, StarRocksSqlParser.RULE_deleteStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2640;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & ((1 << (StarRocksSqlParser.DESC - 99)) | (1 << (StarRocksSqlParser.DESCRIBE - 99)) | (1 << (StarRocksSqlParser.EXPLAIN - 99)))) !== 0)) {
				{
				this.state = 2639;
				this.explainDesc();
				}
			}

			this.state = 2643;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.WITH) {
				{
				this.state = 2642;
				this.withClause();
				}
			}

			this.state = 2645;
			this.match(StarRocksSqlParser.DELETE);
			this.state = 2646;
			this.match(StarRocksSqlParser.FROM);
			this.state = 2647;
			this.qualifiedName();
			this.state = 2649;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PARTITION || _la === StarRocksSqlParser.PARTITIONS || _la === StarRocksSqlParser.TEMPORARY) {
				{
				this.state = 2648;
				this.partitionNames();
				}
			}

			this.state = 2653;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.USING) {
				{
				this.state = 2651;
				this.match(StarRocksSqlParser.USING);
				this.state = 2652;
				_localctx._using = this.relations();
				}
			}

			this.state = 2657;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.WHERE) {
				{
				this.state = 2655;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 2656;
				_localctx._where = this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createRoutineLoadStatement(): CreateRoutineLoadStatementContext {
		let _localctx: CreateRoutineLoadStatementContext = new CreateRoutineLoadStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 284, StarRocksSqlParser.RULE_createRoutineLoadStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2659;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 2660;
			this.match(StarRocksSqlParser.ROUTINE);
			this.state = 2661;
			this.match(StarRocksSqlParser.LOAD);
			this.state = 2665;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 222, this._ctx) ) {
			case 1:
				{
				this.state = 2662;
				_localctx._db = this.qualifiedName();
				this.state = 2663;
				this.match(StarRocksSqlParser.DOT);
				}
				break;
			}
			this.state = 2667;
			_localctx._name = this.identifier();
			this.state = 2668;
			this.match(StarRocksSqlParser.ON);
			this.state = 2669;
			_localctx._table = this.qualifiedName();
			this.state = 2670;
			this.loadPropertiesExpr();
			this.state = 2672;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PROPERTIES) {
				{
				this.state = 2671;
				this.jobProperties();
				}
			}

			this.state = 2674;
			this.match(StarRocksSqlParser.FROM);
			this.state = 2675;
			_localctx._source = this.identifier();
			this.state = 2677;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 224, this._ctx) ) {
			case 1:
				{
				this.state = 2676;
				this.dataSourceProperties();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterRoutineLoadStatement(): AlterRoutineLoadStatementContext {
		let _localctx: AlterRoutineLoadStatementContext = new AlterRoutineLoadStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 286, StarRocksSqlParser.RULE_alterRoutineLoadStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2679;
			this.match(StarRocksSqlParser.ALTER);
			this.state = 2680;
			this.match(StarRocksSqlParser.ROUTINE);
			this.state = 2681;
			this.match(StarRocksSqlParser.LOAD);
			this.state = 2682;
			this.match(StarRocksSqlParser.FOR);
			this.state = 2686;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 225, this._ctx) ) {
			case 1:
				{
				this.state = 2683;
				_localctx._db = this.qualifiedName();
				this.state = 2684;
				this.match(StarRocksSqlParser.DOT);
				}
				break;
			}
			this.state = 2688;
			_localctx._name = this.identifier();
			this.state = 2689;
			this.loadPropertiesExpr();
			this.state = 2691;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PROPERTIES) {
				{
				this.state = 2690;
				this.jobProperties();
				}
			}

			this.state = 2694;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM) {
				{
				this.state = 2693;
				this.dataSource();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataSource(): DataSourceContext {
		let _localctx: DataSourceContext = new DataSourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 288, StarRocksSqlParser.RULE_dataSource);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2696;
			this.match(StarRocksSqlParser.FROM);
			this.state = 2697;
			_localctx._source = this.identifier();
			this.state = 2698;
			this.dataSourceProperties();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loadPropertiesExpr(): LoadPropertiesExprContext {
		let _localctx: LoadPropertiesExprContext = new LoadPropertiesExprContext(this._ctx, this.state);
		this.enterRule(_localctx, 290, StarRocksSqlParser.RULE_loadPropertiesExpr);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2708;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.COLUMNS || _la === StarRocksSqlParser.PARTITION || _la === StarRocksSqlParser.PARTITIONS || _la === StarRocksSqlParser.ROWS || _la === StarRocksSqlParser.TEMPORARY || _la === StarRocksSqlParser.WHERE) {
				{
				this.state = 2700;
				this.loadProperties();
				this.state = 2705;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 2701;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 2702;
					this.loadProperties();
					}
					}
					this.state = 2707;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loadProperties(): LoadPropertiesContext {
		let _localctx: LoadPropertiesContext = new LoadPropertiesContext(this._ctx, this.state);
		this.enterRule(_localctx, 292, StarRocksSqlParser.RULE_loadProperties);
		try {
			this.state = 2716;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 230, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2710;
				this.colSeparatorProperty();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2711;
				this.rowDelimiterProperty();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2712;
				this.importColumns();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2713;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 2714;
				this.expression(0);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2715;
				this.partitionNames();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public colSeparatorProperty(): ColSeparatorPropertyContext {
		let _localctx: ColSeparatorPropertyContext = new ColSeparatorPropertyContext(this._ctx, this.state);
		this.enterRule(_localctx, 294, StarRocksSqlParser.RULE_colSeparatorProperty);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2718;
			this.match(StarRocksSqlParser.COLUMNS);
			this.state = 2719;
			this.match(StarRocksSqlParser.TERMINATED);
			this.state = 2720;
			this.match(StarRocksSqlParser.BY);
			this.state = 2721;
			this.string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rowDelimiterProperty(): RowDelimiterPropertyContext {
		let _localctx: RowDelimiterPropertyContext = new RowDelimiterPropertyContext(this._ctx, this.state);
		this.enterRule(_localctx, 296, StarRocksSqlParser.RULE_rowDelimiterProperty);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2723;
			this.match(StarRocksSqlParser.ROWS);
			this.state = 2724;
			this.match(StarRocksSqlParser.TERMINATED);
			this.state = 2725;
			this.match(StarRocksSqlParser.BY);
			this.state = 2726;
			this.string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public importColumns(): ImportColumnsContext {
		let _localctx: ImportColumnsContext = new ImportColumnsContext(this._ctx, this.state);
		this.enterRule(_localctx, 298, StarRocksSqlParser.RULE_importColumns);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2728;
			this.match(StarRocksSqlParser.COLUMNS);
			this.state = 2729;
			this.columnProperties();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnProperties(): ColumnPropertiesContext {
		let _localctx: ColumnPropertiesContext = new ColumnPropertiesContext(this._ctx, this.state);
		this.enterRule(_localctx, 300, StarRocksSqlParser.RULE_columnProperties);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2731;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 2734;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 231, this._ctx) ) {
			case 1:
				{
				this.state = 2732;
				this.qualifiedName();
				}
				break;

			case 2:
				{
				this.state = 2733;
				this.assignment();
				}
				break;
			}
			this.state = 2743;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 2736;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 2739;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 232, this._ctx) ) {
				case 1:
					{
					this.state = 2737;
					this.qualifiedName();
					}
					break;

				case 2:
					{
					this.state = 2738;
					this.assignment();
					}
					break;
				}
				}
				}
				this.state = 2745;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2746;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jobProperties(): JobPropertiesContext {
		let _localctx: JobPropertiesContext = new JobPropertiesContext(this._ctx, this.state);
		this.enterRule(_localctx, 302, StarRocksSqlParser.RULE_jobProperties);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2748;
			this.properties();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataSourceProperties(): DataSourcePropertiesContext {
		let _localctx: DataSourcePropertiesContext = new DataSourcePropertiesContext(this._ctx, this.state);
		this.enterRule(_localctx, 304, StarRocksSqlParser.RULE_dataSourceProperties);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2750;
			this.propertyList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stopRoutineLoadStatement(): StopRoutineLoadStatementContext {
		let _localctx: StopRoutineLoadStatementContext = new StopRoutineLoadStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 306, StarRocksSqlParser.RULE_stopRoutineLoadStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2752;
			this.match(StarRocksSqlParser.STOP);
			this.state = 2753;
			this.match(StarRocksSqlParser.ROUTINE);
			this.state = 2754;
			this.match(StarRocksSqlParser.LOAD);
			this.state = 2755;
			this.match(StarRocksSqlParser.FOR);
			this.state = 2759;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 234, this._ctx) ) {
			case 1:
				{
				this.state = 2756;
				_localctx._db = this.qualifiedName();
				this.state = 2757;
				this.match(StarRocksSqlParser.DOT);
				}
				break;
			}
			this.state = 2761;
			_localctx._name = this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resumeRoutineLoadStatement(): ResumeRoutineLoadStatementContext {
		let _localctx: ResumeRoutineLoadStatementContext = new ResumeRoutineLoadStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 308, StarRocksSqlParser.RULE_resumeRoutineLoadStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2763;
			this.match(StarRocksSqlParser.RESUME);
			this.state = 2764;
			this.match(StarRocksSqlParser.ROUTINE);
			this.state = 2765;
			this.match(StarRocksSqlParser.LOAD);
			this.state = 2766;
			this.match(StarRocksSqlParser.FOR);
			this.state = 2770;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 235, this._ctx) ) {
			case 1:
				{
				this.state = 2767;
				_localctx._db = this.qualifiedName();
				this.state = 2768;
				this.match(StarRocksSqlParser.DOT);
				}
				break;
			}
			this.state = 2772;
			_localctx._name = this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pauseRoutineLoadStatement(): PauseRoutineLoadStatementContext {
		let _localctx: PauseRoutineLoadStatementContext = new PauseRoutineLoadStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 310, StarRocksSqlParser.RULE_pauseRoutineLoadStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2774;
			this.match(StarRocksSqlParser.PAUSE);
			this.state = 2775;
			this.match(StarRocksSqlParser.ROUTINE);
			this.state = 2776;
			this.match(StarRocksSqlParser.LOAD);
			this.state = 2777;
			this.match(StarRocksSqlParser.FOR);
			this.state = 2781;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 236, this._ctx) ) {
			case 1:
				{
				this.state = 2778;
				_localctx._db = this.qualifiedName();
				this.state = 2779;
				this.match(StarRocksSqlParser.DOT);
				}
				break;
			}
			this.state = 2783;
			_localctx._name = this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showRoutineLoadStatement(): ShowRoutineLoadStatementContext {
		let _localctx: ShowRoutineLoadStatementContext = new ShowRoutineLoadStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 312, StarRocksSqlParser.RULE_showRoutineLoadStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2785;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 2787;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.ALL) {
				{
				this.state = 2786;
				this.match(StarRocksSqlParser.ALL);
				}
			}

			this.state = 2789;
			this.match(StarRocksSqlParser.ROUTINE);
			this.state = 2790;
			this.match(StarRocksSqlParser.LOAD);
			this.state = 2798;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FOR) {
				{
				this.state = 2791;
				this.match(StarRocksSqlParser.FOR);
				this.state = 2795;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 238, this._ctx) ) {
				case 1:
					{
					this.state = 2792;
					_localctx._db = this.qualifiedName();
					this.state = 2793;
					this.match(StarRocksSqlParser.DOT);
					}
					break;
				}
				this.state = 2797;
				_localctx._name = this.identifier();
				}
			}

			this.state = 2802;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM) {
				{
				this.state = 2800;
				this.match(StarRocksSqlParser.FROM);
				this.state = 2801;
				_localctx._db = this.qualifiedName();
				}
			}

			this.state = 2806;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.WHERE) {
				{
				this.state = 2804;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 2805;
				this.expression(0);
				}
			}

			this.state = 2818;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.ORDER) {
				{
				this.state = 2808;
				this.match(StarRocksSqlParser.ORDER);
				this.state = 2809;
				this.match(StarRocksSqlParser.BY);
				this.state = 2810;
				this.sortItem();
				this.state = 2815;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 2811;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 2812;
					this.sortItem();
					}
					}
					this.state = 2817;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 2821;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.LIMIT) {
				{
				this.state = 2820;
				this.limitElement();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showRoutineLoadTaskStatement(): ShowRoutineLoadTaskStatementContext {
		let _localctx: ShowRoutineLoadTaskStatementContext = new ShowRoutineLoadTaskStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 314, StarRocksSqlParser.RULE_showRoutineLoadTaskStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2823;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 2824;
			this.match(StarRocksSqlParser.ROUTINE);
			this.state = 2825;
			this.match(StarRocksSqlParser.LOAD);
			this.state = 2826;
			this.match(StarRocksSqlParser.TASK);
			this.state = 2829;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM) {
				{
				this.state = 2827;
				this.match(StarRocksSqlParser.FROM);
				this.state = 2828;
				_localctx._db = this.qualifiedName();
				}
			}

			this.state = 2831;
			this.match(StarRocksSqlParser.WHERE);
			this.state = 2832;
			this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showStreamLoadStatement(): ShowStreamLoadStatementContext {
		let _localctx: ShowStreamLoadStatementContext = new ShowStreamLoadStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 316, StarRocksSqlParser.RULE_showStreamLoadStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2834;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 2836;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.ALL) {
				{
				this.state = 2835;
				this.match(StarRocksSqlParser.ALL);
				}
			}

			this.state = 2838;
			this.match(StarRocksSqlParser.STREAM);
			this.state = 2839;
			this.match(StarRocksSqlParser.LOAD);
			this.state = 2847;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FOR) {
				{
				this.state = 2840;
				this.match(StarRocksSqlParser.FOR);
				this.state = 2844;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 247, this._ctx) ) {
				case 1:
					{
					this.state = 2841;
					_localctx._db = this.qualifiedName();
					this.state = 2842;
					this.match(StarRocksSqlParser.DOT);
					}
					break;
				}
				this.state = 2846;
				_localctx._name = this.identifier();
				}
			}

			this.state = 2851;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM) {
				{
				this.state = 2849;
				this.match(StarRocksSqlParser.FROM);
				this.state = 2850;
				_localctx._db = this.qualifiedName();
				}
			}

			this.state = 2855;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.WHERE) {
				{
				this.state = 2853;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 2854;
				this.expression(0);
				}
			}

			this.state = 2867;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.ORDER) {
				{
				this.state = 2857;
				this.match(StarRocksSqlParser.ORDER);
				this.state = 2858;
				this.match(StarRocksSqlParser.BY);
				this.state = 2859;
				this.sortItem();
				this.state = 2864;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 2860;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 2861;
					this.sortItem();
					}
					}
					this.state = 2866;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 2870;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.LIMIT) {
				{
				this.state = 2869;
				this.limitElement();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public analyzeStatement(): AnalyzeStatementContext {
		let _localctx: AnalyzeStatementContext = new AnalyzeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 318, StarRocksSqlParser.RULE_analyzeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2872;
			this.match(StarRocksSqlParser.ANALYZE);
			this.state = 2874;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FULL || _la === StarRocksSqlParser.SAMPLE) {
				{
				this.state = 2873;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.FULL || _la === StarRocksSqlParser.SAMPLE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2876;
			this.match(StarRocksSqlParser.TABLE);
			this.state = 2877;
			this.qualifiedName();
			this.state = 2889;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 256, this._ctx) ) {
			case 1:
				{
				this.state = 2878;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 2879;
				this.identifier();
				this.state = 2884;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 2880;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 2881;
					this.identifier();
					}
					}
					this.state = 2886;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2887;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			}
			this.state = 2894;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 257, this._ctx) ) {
			case 1:
				{
				this.state = 2891;
				this.match(StarRocksSqlParser.WITH);
				this.state = 2892;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.ASYNC || _la === StarRocksSqlParser.SYNC)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2893;
				this.match(StarRocksSqlParser.MODE);
				}
				break;
			}
			this.state = 2897;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PROPERTIES) {
				{
				this.state = 2896;
				this.properties();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropStatsStatement(): DropStatsStatementContext {
		let _localctx: DropStatsStatementContext = new DropStatsStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 320, StarRocksSqlParser.RULE_dropStatsStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2899;
			this.match(StarRocksSqlParser.DROP);
			this.state = 2900;
			this.match(StarRocksSqlParser.STATS);
			this.state = 2901;
			this.qualifiedName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public analyzeHistogramStatement(): AnalyzeHistogramStatementContext {
		let _localctx: AnalyzeHistogramStatementContext = new AnalyzeHistogramStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 322, StarRocksSqlParser.RULE_analyzeHistogramStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2903;
			this.match(StarRocksSqlParser.ANALYZE);
			this.state = 2904;
			this.match(StarRocksSqlParser.TABLE);
			this.state = 2905;
			this.qualifiedName();
			this.state = 2906;
			this.match(StarRocksSqlParser.UPDATE);
			this.state = 2907;
			this.match(StarRocksSqlParser.HISTOGRAM);
			this.state = 2908;
			this.match(StarRocksSqlParser.ON);
			this.state = 2909;
			this.identifier();
			this.state = 2914;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 2910;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 2911;
				this.identifier();
				}
				}
				this.state = 2916;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2920;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 260, this._ctx) ) {
			case 1:
				{
				this.state = 2917;
				this.match(StarRocksSqlParser.WITH);
				this.state = 2918;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.ASYNC || _la === StarRocksSqlParser.SYNC)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2919;
				this.match(StarRocksSqlParser.MODE);
				}
				break;
			}
			this.state = 2925;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 261, this._ctx) ) {
			case 1:
				{
				this.state = 2922;
				this.match(StarRocksSqlParser.WITH);
				this.state = 2923;
				_localctx._bucket = this.match(StarRocksSqlParser.INTEGER_VALUE);
				this.state = 2924;
				this.match(StarRocksSqlParser.BUCKETS);
				}
				break;
			}
			this.state = 2928;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PROPERTIES) {
				{
				this.state = 2927;
				this.properties();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropHistogramStatement(): DropHistogramStatementContext {
		let _localctx: DropHistogramStatementContext = new DropHistogramStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 324, StarRocksSqlParser.RULE_dropHistogramStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2930;
			this.match(StarRocksSqlParser.ANALYZE);
			this.state = 2931;
			this.match(StarRocksSqlParser.TABLE);
			this.state = 2932;
			this.qualifiedName();
			this.state = 2933;
			this.match(StarRocksSqlParser.DROP);
			this.state = 2934;
			this.match(StarRocksSqlParser.HISTOGRAM);
			this.state = 2935;
			this.match(StarRocksSqlParser.ON);
			this.state = 2936;
			this.identifier();
			this.state = 2941;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 2937;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 2938;
				this.identifier();
				}
				}
				this.state = 2943;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createAnalyzeStatement(): CreateAnalyzeStatementContext {
		let _localctx: CreateAnalyzeStatementContext = new CreateAnalyzeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 326, StarRocksSqlParser.RULE_createAnalyzeStatement);
		let _la: number;
		try {
			this.state = 2986;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 272, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2944;
				this.match(StarRocksSqlParser.CREATE);
				this.state = 2945;
				this.match(StarRocksSqlParser.ANALYZE);
				this.state = 2947;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.FULL || _la === StarRocksSqlParser.SAMPLE) {
					{
					this.state = 2946;
					_la = this._input.LA(1);
					if (!(_la === StarRocksSqlParser.FULL || _la === StarRocksSqlParser.SAMPLE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 2949;
				this.match(StarRocksSqlParser.ALL);
				this.state = 2951;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.PROPERTIES) {
					{
					this.state = 2950;
					this.properties();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2953;
				this.match(StarRocksSqlParser.CREATE);
				this.state = 2954;
				this.match(StarRocksSqlParser.ANALYZE);
				this.state = 2956;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.FULL || _la === StarRocksSqlParser.SAMPLE) {
					{
					this.state = 2955;
					_la = this._input.LA(1);
					if (!(_la === StarRocksSqlParser.FULL || _la === StarRocksSqlParser.SAMPLE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 2958;
				this.match(StarRocksSqlParser.DATABASE);
				this.state = 2959;
				_localctx._db = this.identifier();
				this.state = 2961;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.PROPERTIES) {
					{
					this.state = 2960;
					this.properties();
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2963;
				this.match(StarRocksSqlParser.CREATE);
				this.state = 2964;
				this.match(StarRocksSqlParser.ANALYZE);
				this.state = 2966;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.FULL || _la === StarRocksSqlParser.SAMPLE) {
					{
					this.state = 2965;
					_la = this._input.LA(1);
					if (!(_la === StarRocksSqlParser.FULL || _la === StarRocksSqlParser.SAMPLE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 2968;
				this.match(StarRocksSqlParser.TABLE);
				this.state = 2969;
				this.qualifiedName();
				this.state = 2981;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 270, this._ctx) ) {
				case 1:
					{
					this.state = 2970;
					this.match(StarRocksSqlParser.LEFT_PAREN);
					this.state = 2971;
					this.identifier();
					this.state = 2976;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === StarRocksSqlParser.COMMA) {
						{
						{
						this.state = 2972;
						this.match(StarRocksSqlParser.COMMA);
						this.state = 2973;
						this.identifier();
						}
						}
						this.state = 2978;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 2979;
					this.match(StarRocksSqlParser.RIGHT_PAREN);
					}
					break;
				}
				this.state = 2984;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.PROPERTIES) {
					{
					this.state = 2983;
					this.properties();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropAnalyzeJobStatement(): DropAnalyzeJobStatementContext {
		let _localctx: DropAnalyzeJobStatementContext = new DropAnalyzeJobStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 328, StarRocksSqlParser.RULE_dropAnalyzeJobStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2988;
			this.match(StarRocksSqlParser.DROP);
			this.state = 2989;
			this.match(StarRocksSqlParser.ANALYZE);
			this.state = 2990;
			this.match(StarRocksSqlParser.INTEGER_VALUE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showAnalyzeStatement(): ShowAnalyzeStatementContext {
		let _localctx: ShowAnalyzeStatementContext = new ShowAnalyzeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 330, StarRocksSqlParser.RULE_showAnalyzeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2992;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 2993;
			this.match(StarRocksSqlParser.ANALYZE);
			this.state = 2995;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.JOB || _la === StarRocksSqlParser.STATUS) {
				{
				this.state = 2994;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.JOB || _la === StarRocksSqlParser.STATUS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2999;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.WHERE) {
				{
				this.state = 2997;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 2998;
				this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showStatsMetaStatement(): ShowStatsMetaStatementContext {
		let _localctx: ShowStatsMetaStatementContext = new ShowStatsMetaStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 332, StarRocksSqlParser.RULE_showStatsMetaStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3001;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3002;
			this.match(StarRocksSqlParser.STATS);
			this.state = 3003;
			this.match(StarRocksSqlParser.META);
			this.state = 3006;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.WHERE) {
				{
				this.state = 3004;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 3005;
				this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showHistogramMetaStatement(): ShowHistogramMetaStatementContext {
		let _localctx: ShowHistogramMetaStatementContext = new ShowHistogramMetaStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 334, StarRocksSqlParser.RULE_showHistogramMetaStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3008;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3009;
			this.match(StarRocksSqlParser.HISTOGRAM);
			this.state = 3010;
			this.match(StarRocksSqlParser.META);
			this.state = 3013;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.WHERE) {
				{
				this.state = 3011;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 3012;
				this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public killAnalyzeStatement(): KillAnalyzeStatementContext {
		let _localctx: KillAnalyzeStatementContext = new KillAnalyzeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 336, StarRocksSqlParser.RULE_killAnalyzeStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3015;
			this.match(StarRocksSqlParser.KILL);
			this.state = 3016;
			this.match(StarRocksSqlParser.ANALYZE);
			this.state = 3017;
			this.match(StarRocksSqlParser.INTEGER_VALUE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public analyzeProfileStatement(): AnalyzeProfileStatementContext {
		let _localctx: AnalyzeProfileStatementContext = new AnalyzeProfileStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 338, StarRocksSqlParser.RULE_analyzeProfileStatement);
		let _la: number;
		try {
			this.state = 3036;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 278, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3019;
				this.match(StarRocksSqlParser.ANALYZE);
				this.state = 3020;
				this.match(StarRocksSqlParser.PROFILE);
				this.state = 3021;
				this.match(StarRocksSqlParser.FROM);
				this.state = 3022;
				this.string();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3023;
				this.match(StarRocksSqlParser.ANALYZE);
				this.state = 3024;
				this.match(StarRocksSqlParser.PROFILE);
				this.state = 3025;
				this.match(StarRocksSqlParser.FROM);
				this.state = 3026;
				this.string();
				this.state = 3027;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 3028;
				this.match(StarRocksSqlParser.INTEGER_VALUE);
				this.state = 3033;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 3029;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 3030;
					this.match(StarRocksSqlParser.INTEGER_VALUE);
					}
					}
					this.state = 3035;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createResourceGroupStatement(): CreateResourceGroupStatementContext {
		let _localctx: CreateResourceGroupStatementContext = new CreateResourceGroupStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 340, StarRocksSqlParser.RULE_createResourceGroupStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3038;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 3039;
			this.match(StarRocksSqlParser.RESOURCE);
			this.state = 3040;
			this.match(StarRocksSqlParser.GROUP);
			this.state = 3044;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 3041;
				this.match(StarRocksSqlParser.IF);
				this.state = 3042;
				this.match(StarRocksSqlParser.NOT);
				this.state = 3043;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 3048;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.OR) {
				{
				this.state = 3046;
				this.match(StarRocksSqlParser.OR);
				this.state = 3047;
				this.match(StarRocksSqlParser.REPLACE);
				}
			}

			this.state = 3050;
			this.identifier();
			this.state = 3060;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.TO) {
				{
				this.state = 3051;
				this.match(StarRocksSqlParser.TO);
				this.state = 3052;
				this.classifier();
				this.state = 3057;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 3053;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 3054;
					this.classifier();
					}
					}
					this.state = 3059;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 3062;
			this.match(StarRocksSqlParser.WITH);
			this.state = 3063;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 3064;
			this.property();
			this.state = 3069;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 3065;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 3066;
				this.property();
				}
				}
				this.state = 3071;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3072;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropResourceGroupStatement(): DropResourceGroupStatementContext {
		let _localctx: DropResourceGroupStatementContext = new DropResourceGroupStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 342, StarRocksSqlParser.RULE_dropResourceGroupStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3074;
			this.match(StarRocksSqlParser.DROP);
			this.state = 3075;
			this.match(StarRocksSqlParser.RESOURCE);
			this.state = 3076;
			this.match(StarRocksSqlParser.GROUP);
			this.state = 3077;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterResourceGroupStatement(): AlterResourceGroupStatementContext {
		let _localctx: AlterResourceGroupStatementContext = new AlterResourceGroupStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 344, StarRocksSqlParser.RULE_alterResourceGroupStatement);
		let _la: number;
		try {
			this.state = 3131;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 287, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3079;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 3080;
				this.match(StarRocksSqlParser.RESOURCE);
				this.state = 3081;
				this.match(StarRocksSqlParser.GROUP);
				this.state = 3082;
				this.identifier();
				this.state = 3083;
				this.match(StarRocksSqlParser.ADD);
				this.state = 3084;
				this.classifier();
				this.state = 3089;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 3085;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 3086;
					this.classifier();
					}
					}
					this.state = 3091;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3092;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 3093;
				this.match(StarRocksSqlParser.RESOURCE);
				this.state = 3094;
				this.match(StarRocksSqlParser.GROUP);
				this.state = 3095;
				this.identifier();
				this.state = 3096;
				this.match(StarRocksSqlParser.DROP);
				this.state = 3097;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 3098;
				this.match(StarRocksSqlParser.INTEGER_VALUE);
				this.state = 3103;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 3099;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 3100;
					this.match(StarRocksSqlParser.INTEGER_VALUE);
					}
					}
					this.state = 3105;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3106;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3108;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 3109;
				this.match(StarRocksSqlParser.RESOURCE);
				this.state = 3110;
				this.match(StarRocksSqlParser.GROUP);
				this.state = 3111;
				this.identifier();
				this.state = 3112;
				this.match(StarRocksSqlParser.DROP);
				this.state = 3113;
				this.match(StarRocksSqlParser.ALL);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3115;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 3116;
				this.match(StarRocksSqlParser.RESOURCE);
				this.state = 3117;
				this.match(StarRocksSqlParser.GROUP);
				this.state = 3118;
				this.identifier();
				this.state = 3119;
				this.match(StarRocksSqlParser.WITH);
				this.state = 3120;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 3121;
				this.property();
				this.state = 3126;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 3122;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 3123;
					this.property();
					}
					}
					this.state = 3128;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3129;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showResourceGroupStatement(): ShowResourceGroupStatementContext {
		let _localctx: ShowResourceGroupStatementContext = new ShowResourceGroupStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 346, StarRocksSqlParser.RULE_showResourceGroupStatement);
		let _la: number;
		try {
			this.state = 3143;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 289, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3133;
				this.match(StarRocksSqlParser.SHOW);
				this.state = 3134;
				this.match(StarRocksSqlParser.RESOURCE);
				this.state = 3135;
				this.match(StarRocksSqlParser.GROUP);
				this.state = 3136;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3137;
				this.match(StarRocksSqlParser.SHOW);
				this.state = 3138;
				this.match(StarRocksSqlParser.RESOURCE);
				this.state = 3139;
				this.match(StarRocksSqlParser.GROUPS);
				this.state = 3141;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.ALL) {
					{
					this.state = 3140;
					this.match(StarRocksSqlParser.ALL);
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createResourceStatement(): CreateResourceStatementContext {
		let _localctx: CreateResourceStatementContext = new CreateResourceStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 348, StarRocksSqlParser.RULE_createResourceStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3145;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 3147;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.EXTERNAL) {
				{
				this.state = 3146;
				this.match(StarRocksSqlParser.EXTERNAL);
				}
			}

			this.state = 3149;
			this.match(StarRocksSqlParser.RESOURCE);
			this.state = 3150;
			_localctx._resourceName = this.identifierOrString();
			this.state = 3152;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PROPERTIES) {
				{
				this.state = 3151;
				this.properties();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterResourceStatement(): AlterResourceStatementContext {
		let _localctx: AlterResourceStatementContext = new AlterResourceStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 350, StarRocksSqlParser.RULE_alterResourceStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3154;
			this.match(StarRocksSqlParser.ALTER);
			this.state = 3155;
			this.match(StarRocksSqlParser.RESOURCE);
			this.state = 3156;
			_localctx._resourceName = this.identifierOrString();
			this.state = 3157;
			this.match(StarRocksSqlParser.SET);
			this.state = 3158;
			this.properties();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropResourceStatement(): DropResourceStatementContext {
		let _localctx: DropResourceStatementContext = new DropResourceStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 352, StarRocksSqlParser.RULE_dropResourceStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3160;
			this.match(StarRocksSqlParser.DROP);
			this.state = 3161;
			this.match(StarRocksSqlParser.RESOURCE);
			this.state = 3162;
			_localctx._resourceName = this.identifierOrString();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showResourceStatement(): ShowResourceStatementContext {
		let _localctx: ShowResourceStatementContext = new ShowResourceStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 354, StarRocksSqlParser.RULE_showResourceStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3164;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3165;
			this.match(StarRocksSqlParser.RESOURCES);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public classifier(): ClassifierContext {
		let _localctx: ClassifierContext = new ClassifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 356, StarRocksSqlParser.RULE_classifier);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3167;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 3168;
			this.expressionList();
			this.state = 3169;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showFunctionsStatement(): ShowFunctionsStatementContext {
		let _localctx: ShowFunctionsStatementContext = new ShowFunctionsStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 358, StarRocksSqlParser.RULE_showFunctionsStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3171;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3173;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FULL) {
				{
				this.state = 3172;
				this.match(StarRocksSqlParser.FULL);
				}
			}

			this.state = 3176;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.BUILTIN || _la === StarRocksSqlParser.GLOBAL) {
				{
				this.state = 3175;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.BUILTIN || _la === StarRocksSqlParser.GLOBAL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 3178;
			this.match(StarRocksSqlParser.FUNCTIONS);
			this.state = 3181;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN) {
				{
				this.state = 3179;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3180;
				_localctx._db = this.qualifiedName();
				}
			}

			this.state = 3187;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.LIKE:
				{
				{
				this.state = 3183;
				this.match(StarRocksSqlParser.LIKE);
				this.state = 3184;
				_localctx._pattern = this.string();
				}
				}
				break;
			case StarRocksSqlParser.WHERE:
				{
				{
				this.state = 3185;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 3186;
				this.expression(0);
				}
				}
				break;
			case StarRocksSqlParser.EOF:
			case StarRocksSqlParser.ADD:
			case StarRocksSqlParser.ADMIN:
			case StarRocksSqlParser.ALTER:
			case StarRocksSqlParser.ANALYZE:
			case StarRocksSqlParser.BACKUP:
			case StarRocksSqlParser.BEGIN:
			case StarRocksSqlParser.CANCEL:
			case StarRocksSqlParser.COMMIT:
			case StarRocksSqlParser.CREATE:
			case StarRocksSqlParser.DELETE:
			case StarRocksSqlParser.DESC:
			case StarRocksSqlParser.DESCRIBE:
			case StarRocksSqlParser.DROP:
			case StarRocksSqlParser.EXECUTE:
			case StarRocksSqlParser.EXPLAIN:
			case StarRocksSqlParser.EXPORT:
			case StarRocksSqlParser.GRANT:
			case StarRocksSqlParser.HELP:
			case StarRocksSqlParser.INSTALL:
			case StarRocksSqlParser.INSERT:
			case StarRocksSqlParser.KILL:
			case StarRocksSqlParser.LOAD:
			case StarRocksSqlParser.PAUSE:
			case StarRocksSqlParser.RECOVER:
			case StarRocksSqlParser.REFRESH:
			case StarRocksSqlParser.RESTORE:
			case StarRocksSqlParser.RESUME:
			case StarRocksSqlParser.REVOKE:
			case StarRocksSqlParser.ROLLBACK:
			case StarRocksSqlParser.SELECT:
			case StarRocksSqlParser.SET:
			case StarRocksSqlParser.SHOW:
			case StarRocksSqlParser.START:
			case StarRocksSqlParser.STOP:
			case StarRocksSqlParser.SUBMIT:
			case StarRocksSqlParser.SUSPEND:
			case StarRocksSqlParser.SYNC:
			case StarRocksSqlParser.TRACE:
			case StarRocksSqlParser.TRUNCATE:
			case StarRocksSqlParser.UNINSTALL:
			case StarRocksSqlParser.UPDATE:
			case StarRocksSqlParser.USE:
			case StarRocksSqlParser.WITH:
			case StarRocksSqlParser.LOCK:
			case StarRocksSqlParser.UNLOCK:
			case StarRocksSqlParser.SEMICOLON:
			case StarRocksSqlParser.LEFT_PAREN:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropFunctionStatement(): DropFunctionStatementContext {
		let _localctx: DropFunctionStatementContext = new DropFunctionStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 360, StarRocksSqlParser.RULE_dropFunctionStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3189;
			this.match(StarRocksSqlParser.DROP);
			this.state = 3191;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.GLOBAL) {
				{
				this.state = 3190;
				this.match(StarRocksSqlParser.GLOBAL);
				}
			}

			this.state = 3193;
			this.match(StarRocksSqlParser.FUNCTION);
			this.state = 3194;
			this.qualifiedName();
			this.state = 3195;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 3196;
			this.typeList();
			this.state = 3197;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createFunctionStatement(): CreateFunctionStatementContext {
		let _localctx: CreateFunctionStatementContext = new CreateFunctionStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 362, StarRocksSqlParser.RULE_createFunctionStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3199;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 3201;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.GLOBAL) {
				{
				this.state = 3200;
				this.match(StarRocksSqlParser.GLOBAL);
				}
			}

			this.state = 3204;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.AGGREGATE || _la === StarRocksSqlParser.TABLE) {
				{
				this.state = 3203;
				_localctx._functionType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.AGGREGATE || _la === StarRocksSqlParser.TABLE)) {
					_localctx._functionType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 3206;
			this.match(StarRocksSqlParser.FUNCTION);
			this.state = 3207;
			this.qualifiedName();
			this.state = 3208;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 3209;
			this.typeList();
			this.state = 3210;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			this.state = 3211;
			this.match(StarRocksSqlParser.RETURNS);
			this.state = 3212;
			_localctx._returnType = this.type();
			this.state = 3215;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.INTERMEDIATE) {
				{
				this.state = 3213;
				this.match(StarRocksSqlParser.INTERMEDIATE);
				this.state = 3214;
				_localctx._intermediateType = this.type();
				}
			}

			this.state = 3218;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PROPERTIES) {
				{
				this.state = 3217;
				this.properties();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public typeList(): TypeListContext {
		let _localctx: TypeListContext = new TypeListContext(this._ctx, this.state);
		this.enterRule(_localctx, 364, StarRocksSqlParser.RULE_typeList);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3221;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << StarRocksSqlParser.ARRAY) | (1 << StarRocksSqlParser.BIGINT) | (1 << StarRocksSqlParser.BINARY) | (1 << StarRocksSqlParser.BITMAP))) !== 0) || _la === StarRocksSqlParser.BOOLEAN || _la === StarRocksSqlParser.CHAR || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & ((1 << (StarRocksSqlParser.DATE - 85)) | (1 << (StarRocksSqlParser.DATETIME - 85)) | (1 << (StarRocksSqlParser.DECIMAL - 85)) | (1 << (StarRocksSqlParser.DECIMALV2 - 85)) | (1 << (StarRocksSqlParser.DECIMAL32 - 85)) | (1 << (StarRocksSqlParser.DECIMAL64 - 85)) | (1 << (StarRocksSqlParser.DECIMAL128 - 85)) | (1 << (StarRocksSqlParser.DOUBLE - 85)))) !== 0) || _la === StarRocksSqlParser.FLOAT || _la === StarRocksSqlParser.HLL || ((((_la - 178)) & ~0x1F) === 0 && ((1 << (_la - 178)) & ((1 << (StarRocksSqlParser.INT - 178)) | (1 << (StarRocksSqlParser.INTEGER - 178)) | (1 << (StarRocksSqlParser.JSON - 178)) | (1 << (StarRocksSqlParser.LARGEINT - 178)))) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & ((1 << (StarRocksSqlParser.MAP - 216)) | (1 << (StarRocksSqlParser.NUMBER - 216)) | (1 << (StarRocksSqlParser.NUMERIC - 216)))) !== 0) || _la === StarRocksSqlParser.PERCENTILE || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & ((1 << (StarRocksSqlParser.SIGNED - 334)) | (1 << (StarRocksSqlParser.SMALLINT - 334)) | (1 << (StarRocksSqlParser.STRING - 334)) | (1 << (StarRocksSqlParser.TEXT - 334)) | (1 << (StarRocksSqlParser.STRUCT - 334)) | (1 << (StarRocksSqlParser.TIME - 334)))) !== 0) || ((((_la - 368)) & ~0x1F) === 0 && ((1 << (_la - 368)) & ((1 << (StarRocksSqlParser.TINYINT - 368)) | (1 << (StarRocksSqlParser.UNSIGNED - 368)) | (1 << (StarRocksSqlParser.VARBINARY - 368)) | (1 << (StarRocksSqlParser.VARCHAR - 368)))) !== 0)) {
				{
				this.state = 3220;
				this.type();
				}
			}

			this.state = 3227;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 302, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3223;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 3224;
					this.type();
					}
					}
				}
				this.state = 3229;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 302, this._ctx);
			}
			this.state = 3232;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.COMMA) {
				{
				this.state = 3230;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 3231;
				this.match(StarRocksSqlParser.DOTDOTDOT);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loadStatement(): LoadStatementContext {
		let _localctx: LoadStatementContext = new LoadStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 366, StarRocksSqlParser.RULE_loadStatement);
		let _la: number;
		try {
			this.state = 3262;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 310, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3234;
				this.match(StarRocksSqlParser.LOAD);
				this.state = 3235;
				this.match(StarRocksSqlParser.LABEL);
				this.state = 3236;
				_localctx._label = this.labelName();
				this.state = 3238;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 304, this._ctx) ) {
				case 1:
					{
					this.state = 3237;
					_localctx._data = this.dataDescList();
					}
					break;
				}
				this.state = 3241;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 305, this._ctx) ) {
				case 1:
					{
					this.state = 3240;
					_localctx._broker = this.brokerDesc();
					}
					break;
				}
				this.state = 3245;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.BY) {
					{
					this.state = 3243;
					this.match(StarRocksSqlParser.BY);
					this.state = 3244;
					_localctx._system = this.identifierOrString();
					}
				}

				this.state = 3249;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.PROPERTIES) {
					{
					this.state = 3247;
					this.match(StarRocksSqlParser.PROPERTIES);
					this.state = 3248;
					_localctx._props = this.propertyList();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3251;
				this.match(StarRocksSqlParser.LOAD);
				this.state = 3252;
				this.match(StarRocksSqlParser.LABEL);
				this.state = 3253;
				_localctx._label = this.labelName();
				this.state = 3255;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.LEFT_PAREN) {
					{
					this.state = 3254;
					_localctx._data = this.dataDescList();
					}
				}

				this.state = 3257;
				_localctx._resource = this.resourceDesc();
				this.state = 3260;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.PROPERTIES) {
					{
					this.state = 3258;
					this.match(StarRocksSqlParser.PROPERTIES);
					this.state = 3259;
					_localctx._props = this.propertyList();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public labelName(): LabelNameContext {
		let _localctx: LabelNameContext = new LabelNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 368, StarRocksSqlParser.RULE_labelName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3267;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 311, this._ctx) ) {
			case 1:
				{
				this.state = 3264;
				_localctx._db = this.identifier();
				this.state = 3265;
				this.match(StarRocksSqlParser.DOT);
				}
				break;
			}
			this.state = 3269;
			_localctx._label = this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataDescList(): DataDescListContext {
		let _localctx: DataDescListContext = new DataDescListContext(this._ctx, this.state);
		this.enterRule(_localctx, 370, StarRocksSqlParser.RULE_dataDescList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3271;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 3272;
			this.dataDesc();
			this.state = 3277;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 3273;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 3274;
				this.dataDesc();
				}
				}
				this.state = 3279;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3280;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataDesc(): DataDescContext {
		let _localctx: DataDescContext = new DataDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 372, StarRocksSqlParser.RULE_dataDesc);
		let _la: number;
		try {
			this.state = 3351;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 327, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3282;
				this.match(StarRocksSqlParser.DATA);
				this.state = 3283;
				this.match(StarRocksSqlParser.INFILE);
				this.state = 3284;
				_localctx._srcFiles = this.stringList();
				this.state = 3286;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.NEGATIVE) {
					{
					this.state = 3285;
					this.match(StarRocksSqlParser.NEGATIVE);
					}
				}

				this.state = 3288;
				this.match(StarRocksSqlParser.INTO);
				this.state = 3289;
				this.match(StarRocksSqlParser.TABLE);
				this.state = 3290;
				_localctx._dstTableName = this.identifier();
				this.state = 3292;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.PARTITION || _la === StarRocksSqlParser.PARTITIONS || _la === StarRocksSqlParser.TEMPORARY) {
					{
					this.state = 3291;
					_localctx._partitions = this.partitionNames();
					}
				}

				this.state = 3298;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 315, this._ctx) ) {
				case 1:
					{
					this.state = 3294;
					this.match(StarRocksSqlParser.COLUMNS);
					this.state = 3295;
					this.match(StarRocksSqlParser.TERMINATED);
					this.state = 3296;
					this.match(StarRocksSqlParser.BY);
					this.state = 3297;
					_localctx._colSep = this.string();
					}
					break;
				}
				this.state = 3304;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.ROWS) {
					{
					this.state = 3300;
					this.match(StarRocksSqlParser.ROWS);
					this.state = 3301;
					this.match(StarRocksSqlParser.TERMINATED);
					this.state = 3302;
					this.match(StarRocksSqlParser.BY);
					this.state = 3303;
					_localctx._rowSep = this.string();
					}
				}

				this.state = 3307;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.FORMAT) {
					{
					this.state = 3306;
					_localctx._format = this.fileFormat();
					}
				}

				this.state = 3310;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 318, this._ctx) ) {
				case 1:
					{
					this.state = 3309;
					_localctx._formatPropsField = this.formatProps();
					}
					break;
				}
				this.state = 3313;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.LEFT_PAREN) {
					{
					this.state = 3312;
					_localctx._colList = this.columnAliases();
					}
				}

				this.state = 3320;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.COLUMNS) {
					{
					this.state = 3315;
					this.match(StarRocksSqlParser.COLUMNS);
					this.state = 3316;
					this.match(StarRocksSqlParser.FROM);
					this.state = 3317;
					this.match(StarRocksSqlParser.PATH);
					this.state = 3318;
					this.match(StarRocksSqlParser.AS);
					this.state = 3319;
					_localctx._colFromPath = this.identifierList();
					}
				}

				this.state = 3324;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.SET) {
					{
					this.state = 3322;
					this.match(StarRocksSqlParser.SET);
					this.state = 3323;
					_localctx._colMappingList = this.classifier();
					}
				}

				this.state = 3328;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.WHERE) {
					{
					this.state = 3326;
					this.match(StarRocksSqlParser.WHERE);
					this.state = 3327;
					_localctx._where = this.expression(0);
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3330;
				this.match(StarRocksSqlParser.DATA);
				this.state = 3331;
				this.match(StarRocksSqlParser.FROM);
				this.state = 3332;
				this.match(StarRocksSqlParser.TABLE);
				this.state = 3333;
				_localctx._srcTableName = this.identifier();
				this.state = 3335;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.NEGATIVE) {
					{
					this.state = 3334;
					this.match(StarRocksSqlParser.NEGATIVE);
					}
				}

				this.state = 3337;
				this.match(StarRocksSqlParser.INTO);
				this.state = 3338;
				this.match(StarRocksSqlParser.TABLE);
				this.state = 3339;
				_localctx._dstTableName = this.identifier();
				this.state = 3341;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.PARTITION || _la === StarRocksSqlParser.PARTITIONS || _la === StarRocksSqlParser.TEMPORARY) {
					{
					this.state = 3340;
					_localctx._partitions = this.partitionNames();
					}
				}

				this.state = 3345;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.SET) {
					{
					this.state = 3343;
					this.match(StarRocksSqlParser.SET);
					this.state = 3344;
					_localctx._colMappingList = this.classifier();
					}
				}

				this.state = 3349;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.WHERE) {
					{
					this.state = 3347;
					this.match(StarRocksSqlParser.WHERE);
					this.state = 3348;
					_localctx._where = this.expression(0);
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public formatProps(): FormatPropsContext {
		let _localctx: FormatPropsContext = new FormatPropsContext(this._ctx, this.state);
		this.enterRule(_localctx, 374, StarRocksSqlParser.RULE_formatProps);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3353;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 3357;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.SKIP_HEADER) {
				{
				this.state = 3354;
				this.match(StarRocksSqlParser.SKIP_HEADER);
				this.state = 3355;
				this.match(StarRocksSqlParser.EQ);
				this.state = 3356;
				this.match(StarRocksSqlParser.INTEGER_VALUE);
				}
			}

			this.state = 3362;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.TRIM_SPACE) {
				{
				this.state = 3359;
				this.match(StarRocksSqlParser.TRIM_SPACE);
				this.state = 3360;
				this.match(StarRocksSqlParser.EQ);
				this.state = 3361;
				this.booleanValue();
				}
			}

			this.state = 3367;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.ENCLOSE) {
				{
				this.state = 3364;
				this.match(StarRocksSqlParser.ENCLOSE);
				this.state = 3365;
				this.match(StarRocksSqlParser.EQ);
				this.state = 3366;
				_localctx._encloseCharacter = this.string();
				}
			}

			this.state = 3372;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.ESCAPE) {
				{
				this.state = 3369;
				this.match(StarRocksSqlParser.ESCAPE);
				this.state = 3370;
				this.match(StarRocksSqlParser.EQ);
				this.state = 3371;
				_localctx._escapeCharacter = this.string();
				}
			}

			this.state = 3374;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public brokerDesc(): BrokerDescContext {
		let _localctx: BrokerDescContext = new BrokerDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 376, StarRocksSqlParser.RULE_brokerDesc);
		try {
			this.state = 3387;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 334, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3376;
				this.match(StarRocksSqlParser.WITH);
				this.state = 3377;
				this.match(StarRocksSqlParser.BROKER);
				this.state = 3379;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 332, this._ctx) ) {
				case 1:
					{
					this.state = 3378;
					_localctx._props = this.propertyList();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3381;
				this.match(StarRocksSqlParser.WITH);
				this.state = 3382;
				this.match(StarRocksSqlParser.BROKER);
				this.state = 3383;
				_localctx._name = this.identifierOrString();
				this.state = 3385;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 333, this._ctx) ) {
				case 1:
					{
					this.state = 3384;
					_localctx._props = this.propertyList();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resourceDesc(): ResourceDescContext {
		let _localctx: ResourceDescContext = new ResourceDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 378, StarRocksSqlParser.RULE_resourceDesc);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3389;
			this.match(StarRocksSqlParser.WITH);
			this.state = 3390;
			this.match(StarRocksSqlParser.RESOURCE);
			this.state = 3391;
			_localctx._name = this.identifierOrString();
			this.state = 3393;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 335, this._ctx) ) {
			case 1:
				{
				this.state = 3392;
				_localctx._props = this.propertyList();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showLoadStatement(): ShowLoadStatementContext {
		let _localctx: ShowLoadStatementContext = new ShowLoadStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 380, StarRocksSqlParser.RULE_showLoadStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3395;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3396;
			this.match(StarRocksSqlParser.LOAD);
			this.state = 3398;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.ALL) {
				{
				this.state = 3397;
				this.match(StarRocksSqlParser.ALL);
				}
			}

			this.state = 3402;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM) {
				{
				this.state = 3400;
				this.match(StarRocksSqlParser.FROM);
				this.state = 3401;
				this.identifier();
				}
			}

			this.state = 3406;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.WHERE) {
				{
				this.state = 3404;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 3405;
				this.expression(0);
				}
			}

			this.state = 3418;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.ORDER) {
				{
				this.state = 3408;
				this.match(StarRocksSqlParser.ORDER);
				this.state = 3409;
				this.match(StarRocksSqlParser.BY);
				this.state = 3410;
				this.sortItem();
				this.state = 3415;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 3411;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 3412;
					this.sortItem();
					}
					}
					this.state = 3417;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 3421;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.LIMIT) {
				{
				this.state = 3420;
				this.limitElement();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showLoadWarningsStatement(): ShowLoadWarningsStatementContext {
		let _localctx: ShowLoadWarningsStatementContext = new ShowLoadWarningsStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 382, StarRocksSqlParser.RULE_showLoadWarningsStatement);
		let _la: number;
		try {
			this.state = 3442;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 345, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3423;
				this.match(StarRocksSqlParser.SHOW);
				this.state = 3424;
				this.match(StarRocksSqlParser.LOAD);
				this.state = 3425;
				this.match(StarRocksSqlParser.WARNINGS);
				this.state = 3428;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.FROM) {
					{
					this.state = 3426;
					this.match(StarRocksSqlParser.FROM);
					this.state = 3427;
					this.identifier();
					}
				}

				this.state = 3432;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.WHERE) {
					{
					this.state = 3430;
					this.match(StarRocksSqlParser.WHERE);
					this.state = 3431;
					this.expression(0);
					}
				}

				this.state = 3435;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.LIMIT) {
					{
					this.state = 3434;
					this.limitElement();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3437;
				this.match(StarRocksSqlParser.SHOW);
				this.state = 3438;
				this.match(StarRocksSqlParser.LOAD);
				this.state = 3439;
				this.match(StarRocksSqlParser.WARNINGS);
				this.state = 3440;
				this.match(StarRocksSqlParser.ON);
				this.state = 3441;
				this.string();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cancelLoadStatement(): CancelLoadStatementContext {
		let _localctx: CancelLoadStatementContext = new CancelLoadStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 384, StarRocksSqlParser.RULE_cancelLoadStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3444;
			this.match(StarRocksSqlParser.CANCEL);
			this.state = 3445;
			this.match(StarRocksSqlParser.LOAD);
			this.state = 3448;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM) {
				{
				this.state = 3446;
				this.match(StarRocksSqlParser.FROM);
				this.state = 3447;
				this.identifier();
				}
			}

			this.state = 3452;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.WHERE) {
				{
				this.state = 3450;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 3451;
				this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterLoadStatement(): AlterLoadStatementContext {
		let _localctx: AlterLoadStatementContext = new AlterLoadStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 386, StarRocksSqlParser.RULE_alterLoadStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3454;
			this.match(StarRocksSqlParser.ALTER);
			this.state = 3455;
			this.match(StarRocksSqlParser.LOAD);
			this.state = 3456;
			this.match(StarRocksSqlParser.FOR);
			this.state = 3460;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 348, this._ctx) ) {
			case 1:
				{
				this.state = 3457;
				_localctx._db = this.qualifiedName();
				this.state = 3458;
				this.match(StarRocksSqlParser.DOT);
				}
				break;
			}
			this.state = 3462;
			_localctx._name = this.identifier();
			this.state = 3464;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PROPERTIES) {
				{
				this.state = 3463;
				this.jobProperties();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cancelCompactionStatement(): CancelCompactionStatementContext {
		let _localctx: CancelCompactionStatementContext = new CancelCompactionStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 388, StarRocksSqlParser.RULE_cancelCompactionStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3466;
			this.match(StarRocksSqlParser.CANCEL);
			this.state = 3467;
			this.match(StarRocksSqlParser.COMPACTION);
			this.state = 3468;
			this.match(StarRocksSqlParser.WHERE);
			this.state = 3469;
			this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showAuthorStatement(): ShowAuthorStatementContext {
		let _localctx: ShowAuthorStatementContext = new ShowAuthorStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 390, StarRocksSqlParser.RULE_showAuthorStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3471;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3472;
			this.match(StarRocksSqlParser.AUTHORS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showBackendsStatement(): ShowBackendsStatementContext {
		let _localctx: ShowBackendsStatementContext = new ShowBackendsStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 392, StarRocksSqlParser.RULE_showBackendsStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3474;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3475;
			this.match(StarRocksSqlParser.BACKENDS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showBrokerStatement(): ShowBrokerStatementContext {
		let _localctx: ShowBrokerStatementContext = new ShowBrokerStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 394, StarRocksSqlParser.RULE_showBrokerStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3477;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3478;
			this.match(StarRocksSqlParser.BROKER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showCharsetStatement(): ShowCharsetStatementContext {
		let _localctx: ShowCharsetStatementContext = new ShowCharsetStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 396, StarRocksSqlParser.RULE_showCharsetStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3480;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3486;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.CHAR:
				{
				this.state = 3481;
				this.match(StarRocksSqlParser.CHAR);
				this.state = 3482;
				this.match(StarRocksSqlParser.SET);
				}
				break;
			case StarRocksSqlParser.CHARSET:
				{
				this.state = 3483;
				this.match(StarRocksSqlParser.CHARSET);
				}
				break;
			case StarRocksSqlParser.CHARACTER:
				{
				this.state = 3484;
				this.match(StarRocksSqlParser.CHARACTER);
				this.state = 3485;
				this.match(StarRocksSqlParser.SET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3492;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.LIKE:
				{
				{
				this.state = 3488;
				this.match(StarRocksSqlParser.LIKE);
				this.state = 3489;
				_localctx._pattern = this.string();
				}
				}
				break;
			case StarRocksSqlParser.WHERE:
				{
				{
				this.state = 3490;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 3491;
				this.expression(0);
				}
				}
				break;
			case StarRocksSqlParser.EOF:
			case StarRocksSqlParser.ADD:
			case StarRocksSqlParser.ADMIN:
			case StarRocksSqlParser.ALTER:
			case StarRocksSqlParser.ANALYZE:
			case StarRocksSqlParser.BACKUP:
			case StarRocksSqlParser.BEGIN:
			case StarRocksSqlParser.CANCEL:
			case StarRocksSqlParser.COMMIT:
			case StarRocksSqlParser.CREATE:
			case StarRocksSqlParser.DELETE:
			case StarRocksSqlParser.DESC:
			case StarRocksSqlParser.DESCRIBE:
			case StarRocksSqlParser.DROP:
			case StarRocksSqlParser.EXECUTE:
			case StarRocksSqlParser.EXPLAIN:
			case StarRocksSqlParser.EXPORT:
			case StarRocksSqlParser.GRANT:
			case StarRocksSqlParser.HELP:
			case StarRocksSqlParser.INSTALL:
			case StarRocksSqlParser.INSERT:
			case StarRocksSqlParser.KILL:
			case StarRocksSqlParser.LOAD:
			case StarRocksSqlParser.PAUSE:
			case StarRocksSqlParser.RECOVER:
			case StarRocksSqlParser.REFRESH:
			case StarRocksSqlParser.RESTORE:
			case StarRocksSqlParser.RESUME:
			case StarRocksSqlParser.REVOKE:
			case StarRocksSqlParser.ROLLBACK:
			case StarRocksSqlParser.SELECT:
			case StarRocksSqlParser.SET:
			case StarRocksSqlParser.SHOW:
			case StarRocksSqlParser.START:
			case StarRocksSqlParser.STOP:
			case StarRocksSqlParser.SUBMIT:
			case StarRocksSqlParser.SUSPEND:
			case StarRocksSqlParser.SYNC:
			case StarRocksSqlParser.TRACE:
			case StarRocksSqlParser.TRUNCATE:
			case StarRocksSqlParser.UNINSTALL:
			case StarRocksSqlParser.UPDATE:
			case StarRocksSqlParser.USE:
			case StarRocksSqlParser.WITH:
			case StarRocksSqlParser.LOCK:
			case StarRocksSqlParser.UNLOCK:
			case StarRocksSqlParser.SEMICOLON:
			case StarRocksSqlParser.LEFT_PAREN:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showCollationStatement(): ShowCollationStatementContext {
		let _localctx: ShowCollationStatementContext = new ShowCollationStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 398, StarRocksSqlParser.RULE_showCollationStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3494;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3495;
			this.match(StarRocksSqlParser.COLLATION);
			this.state = 3500;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.LIKE:
				{
				{
				this.state = 3496;
				this.match(StarRocksSqlParser.LIKE);
				this.state = 3497;
				_localctx._pattern = this.string();
				}
				}
				break;
			case StarRocksSqlParser.WHERE:
				{
				{
				this.state = 3498;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 3499;
				this.expression(0);
				}
				}
				break;
			case StarRocksSqlParser.EOF:
			case StarRocksSqlParser.ADD:
			case StarRocksSqlParser.ADMIN:
			case StarRocksSqlParser.ALTER:
			case StarRocksSqlParser.ANALYZE:
			case StarRocksSqlParser.BACKUP:
			case StarRocksSqlParser.BEGIN:
			case StarRocksSqlParser.CANCEL:
			case StarRocksSqlParser.COMMIT:
			case StarRocksSqlParser.CREATE:
			case StarRocksSqlParser.DELETE:
			case StarRocksSqlParser.DESC:
			case StarRocksSqlParser.DESCRIBE:
			case StarRocksSqlParser.DROP:
			case StarRocksSqlParser.EXECUTE:
			case StarRocksSqlParser.EXPLAIN:
			case StarRocksSqlParser.EXPORT:
			case StarRocksSqlParser.GRANT:
			case StarRocksSqlParser.HELP:
			case StarRocksSqlParser.INSTALL:
			case StarRocksSqlParser.INSERT:
			case StarRocksSqlParser.KILL:
			case StarRocksSqlParser.LOAD:
			case StarRocksSqlParser.PAUSE:
			case StarRocksSqlParser.RECOVER:
			case StarRocksSqlParser.REFRESH:
			case StarRocksSqlParser.RESTORE:
			case StarRocksSqlParser.RESUME:
			case StarRocksSqlParser.REVOKE:
			case StarRocksSqlParser.ROLLBACK:
			case StarRocksSqlParser.SELECT:
			case StarRocksSqlParser.SET:
			case StarRocksSqlParser.SHOW:
			case StarRocksSqlParser.START:
			case StarRocksSqlParser.STOP:
			case StarRocksSqlParser.SUBMIT:
			case StarRocksSqlParser.SUSPEND:
			case StarRocksSqlParser.SYNC:
			case StarRocksSqlParser.TRACE:
			case StarRocksSqlParser.TRUNCATE:
			case StarRocksSqlParser.UNINSTALL:
			case StarRocksSqlParser.UPDATE:
			case StarRocksSqlParser.USE:
			case StarRocksSqlParser.WITH:
			case StarRocksSqlParser.LOCK:
			case StarRocksSqlParser.UNLOCK:
			case StarRocksSqlParser.SEMICOLON:
			case StarRocksSqlParser.LEFT_PAREN:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showDeleteStatement(): ShowDeleteStatementContext {
		let _localctx: ShowDeleteStatementContext = new ShowDeleteStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 400, StarRocksSqlParser.RULE_showDeleteStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3502;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3503;
			this.match(StarRocksSqlParser.DELETE);
			this.state = 3506;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN) {
				{
				this.state = 3504;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3505;
				_localctx._db = this.qualifiedName();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showDynamicPartitionStatement(): ShowDynamicPartitionStatementContext {
		let _localctx: ShowDynamicPartitionStatementContext = new ShowDynamicPartitionStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 402, StarRocksSqlParser.RULE_showDynamicPartitionStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3508;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3509;
			this.match(StarRocksSqlParser.DYNAMIC);
			this.state = 3510;
			this.match(StarRocksSqlParser.PARTITION);
			this.state = 3511;
			this.match(StarRocksSqlParser.TABLES);
			this.state = 3514;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN) {
				{
				this.state = 3512;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3513;
				_localctx._db = this.qualifiedName();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showEventsStatement(): ShowEventsStatementContext {
		let _localctx: ShowEventsStatementContext = new ShowEventsStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 404, StarRocksSqlParser.RULE_showEventsStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3516;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3517;
			this.match(StarRocksSqlParser.EVENTS);
			this.state = 3520;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN) {
				{
				this.state = 3518;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3519;
				_localctx._catalog = this.qualifiedName();
				}
			}

			this.state = 3526;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.LIKE:
				{
				{
				this.state = 3522;
				this.match(StarRocksSqlParser.LIKE);
				this.state = 3523;
				_localctx._pattern = this.string();
				}
				}
				break;
			case StarRocksSqlParser.WHERE:
				{
				{
				this.state = 3524;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 3525;
				this.expression(0);
				}
				}
				break;
			case StarRocksSqlParser.EOF:
			case StarRocksSqlParser.ADD:
			case StarRocksSqlParser.ADMIN:
			case StarRocksSqlParser.ALTER:
			case StarRocksSqlParser.ANALYZE:
			case StarRocksSqlParser.BACKUP:
			case StarRocksSqlParser.BEGIN:
			case StarRocksSqlParser.CANCEL:
			case StarRocksSqlParser.COMMIT:
			case StarRocksSqlParser.CREATE:
			case StarRocksSqlParser.DELETE:
			case StarRocksSqlParser.DESC:
			case StarRocksSqlParser.DESCRIBE:
			case StarRocksSqlParser.DROP:
			case StarRocksSqlParser.EXECUTE:
			case StarRocksSqlParser.EXPLAIN:
			case StarRocksSqlParser.EXPORT:
			case StarRocksSqlParser.GRANT:
			case StarRocksSqlParser.HELP:
			case StarRocksSqlParser.INSTALL:
			case StarRocksSqlParser.INSERT:
			case StarRocksSqlParser.KILL:
			case StarRocksSqlParser.LOAD:
			case StarRocksSqlParser.PAUSE:
			case StarRocksSqlParser.RECOVER:
			case StarRocksSqlParser.REFRESH:
			case StarRocksSqlParser.RESTORE:
			case StarRocksSqlParser.RESUME:
			case StarRocksSqlParser.REVOKE:
			case StarRocksSqlParser.ROLLBACK:
			case StarRocksSqlParser.SELECT:
			case StarRocksSqlParser.SET:
			case StarRocksSqlParser.SHOW:
			case StarRocksSqlParser.START:
			case StarRocksSqlParser.STOP:
			case StarRocksSqlParser.SUBMIT:
			case StarRocksSqlParser.SUSPEND:
			case StarRocksSqlParser.SYNC:
			case StarRocksSqlParser.TRACE:
			case StarRocksSqlParser.TRUNCATE:
			case StarRocksSqlParser.UNINSTALL:
			case StarRocksSqlParser.UPDATE:
			case StarRocksSqlParser.USE:
			case StarRocksSqlParser.WITH:
			case StarRocksSqlParser.LOCK:
			case StarRocksSqlParser.UNLOCK:
			case StarRocksSqlParser.SEMICOLON:
			case StarRocksSqlParser.LEFT_PAREN:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showEnginesStatement(): ShowEnginesStatementContext {
		let _localctx: ShowEnginesStatementContext = new ShowEnginesStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 406, StarRocksSqlParser.RULE_showEnginesStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3528;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3529;
			this.match(StarRocksSqlParser.ENGINES);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showFrontendsStatement(): ShowFrontendsStatementContext {
		let _localctx: ShowFrontendsStatementContext = new ShowFrontendsStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 408, StarRocksSqlParser.RULE_showFrontendsStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3531;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3532;
			this.match(StarRocksSqlParser.FRONTENDS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showPluginsStatement(): ShowPluginsStatementContext {
		let _localctx: ShowPluginsStatementContext = new ShowPluginsStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 410, StarRocksSqlParser.RULE_showPluginsStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3534;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3535;
			this.match(StarRocksSqlParser.PLUGINS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showRepositoriesStatement(): ShowRepositoriesStatementContext {
		let _localctx: ShowRepositoriesStatementContext = new ShowRepositoriesStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 412, StarRocksSqlParser.RULE_showRepositoriesStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3537;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3538;
			this.match(StarRocksSqlParser.REPOSITORIES);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showOpenTableStatement(): ShowOpenTableStatementContext {
		let _localctx: ShowOpenTableStatementContext = new ShowOpenTableStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 414, StarRocksSqlParser.RULE_showOpenTableStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3540;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3541;
			this.match(StarRocksSqlParser.OPEN);
			this.state = 3542;
			this.match(StarRocksSqlParser.TABLES);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showPrivilegesStatement(): ShowPrivilegesStatementContext {
		let _localctx: ShowPrivilegesStatementContext = new ShowPrivilegesStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 416, StarRocksSqlParser.RULE_showPrivilegesStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3544;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3545;
			this.match(StarRocksSqlParser.PRIVILEGES);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showProcedureStatement(): ShowProcedureStatementContext {
		let _localctx: ShowProcedureStatementContext = new ShowProcedureStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 418, StarRocksSqlParser.RULE_showProcedureStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3547;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3548;
			_la = this._input.LA(1);
			if (!(_la === StarRocksSqlParser.FUNCTION || _la === StarRocksSqlParser.PROCEDURE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3549;
			this.match(StarRocksSqlParser.STATUS);
			this.state = 3554;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.LIKE:
				{
				{
				this.state = 3550;
				this.match(StarRocksSqlParser.LIKE);
				this.state = 3551;
				_localctx._pattern = this.string();
				}
				}
				break;
			case StarRocksSqlParser.WHERE:
				{
				{
				this.state = 3552;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 3553;
				_localctx._where = this.expression(0);
				}
				}
				break;
			case StarRocksSqlParser.EOF:
			case StarRocksSqlParser.ADD:
			case StarRocksSqlParser.ADMIN:
			case StarRocksSqlParser.ALTER:
			case StarRocksSqlParser.ANALYZE:
			case StarRocksSqlParser.BACKUP:
			case StarRocksSqlParser.BEGIN:
			case StarRocksSqlParser.CANCEL:
			case StarRocksSqlParser.COMMIT:
			case StarRocksSqlParser.CREATE:
			case StarRocksSqlParser.DELETE:
			case StarRocksSqlParser.DESC:
			case StarRocksSqlParser.DESCRIBE:
			case StarRocksSqlParser.DROP:
			case StarRocksSqlParser.EXECUTE:
			case StarRocksSqlParser.EXPLAIN:
			case StarRocksSqlParser.EXPORT:
			case StarRocksSqlParser.GRANT:
			case StarRocksSqlParser.HELP:
			case StarRocksSqlParser.INSTALL:
			case StarRocksSqlParser.INSERT:
			case StarRocksSqlParser.KILL:
			case StarRocksSqlParser.LOAD:
			case StarRocksSqlParser.PAUSE:
			case StarRocksSqlParser.RECOVER:
			case StarRocksSqlParser.REFRESH:
			case StarRocksSqlParser.RESTORE:
			case StarRocksSqlParser.RESUME:
			case StarRocksSqlParser.REVOKE:
			case StarRocksSqlParser.ROLLBACK:
			case StarRocksSqlParser.SELECT:
			case StarRocksSqlParser.SET:
			case StarRocksSqlParser.SHOW:
			case StarRocksSqlParser.START:
			case StarRocksSqlParser.STOP:
			case StarRocksSqlParser.SUBMIT:
			case StarRocksSqlParser.SUSPEND:
			case StarRocksSqlParser.SYNC:
			case StarRocksSqlParser.TRACE:
			case StarRocksSqlParser.TRUNCATE:
			case StarRocksSqlParser.UNINSTALL:
			case StarRocksSqlParser.UPDATE:
			case StarRocksSqlParser.USE:
			case StarRocksSqlParser.WITH:
			case StarRocksSqlParser.LOCK:
			case StarRocksSqlParser.UNLOCK:
			case StarRocksSqlParser.SEMICOLON:
			case StarRocksSqlParser.LEFT_PAREN:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showProcStatement(): ShowProcStatementContext {
		let _localctx: ShowProcStatementContext = new ShowProcStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 420, StarRocksSqlParser.RULE_showProcStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3556;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3557;
			this.match(StarRocksSqlParser.PROC);
			this.state = 3558;
			_localctx._path = this.string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showProcesslistStatement(): ShowProcesslistStatementContext {
		let _localctx: ShowProcesslistStatementContext = new ShowProcesslistStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 422, StarRocksSqlParser.RULE_showProcesslistStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3560;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3562;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FULL) {
				{
				this.state = 3561;
				this.match(StarRocksSqlParser.FULL);
				}
			}

			this.state = 3564;
			this.match(StarRocksSqlParser.PROCESSLIST);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showProfilelistStatement(): ShowProfilelistStatementContext {
		let _localctx: ShowProfilelistStatementContext = new ShowProfilelistStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 424, StarRocksSqlParser.RULE_showProfilelistStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3566;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3567;
			this.match(StarRocksSqlParser.PROFILELIST);
			this.state = 3570;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.LIMIT) {
				{
				this.state = 3568;
				this.match(StarRocksSqlParser.LIMIT);
				this.state = 3569;
				_localctx._limit = this.match(StarRocksSqlParser.INTEGER_VALUE);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showStatusStatement(): ShowStatusStatementContext {
		let _localctx: ShowStatusStatementContext = new ShowStatusStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 426, StarRocksSqlParser.RULE_showStatusStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3572;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3574;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.GLOBAL || _la === StarRocksSqlParser.LOCAL || _la === StarRocksSqlParser.SESSION || _la === StarRocksSqlParser.VERBOSE) {
				{
				this.state = 3573;
				this.varType();
				}
			}

			this.state = 3576;
			this.match(StarRocksSqlParser.STATUS);
			this.state = 3581;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.LIKE:
				{
				{
				this.state = 3577;
				this.match(StarRocksSqlParser.LIKE);
				this.state = 3578;
				_localctx._pattern = this.string();
				}
				}
				break;
			case StarRocksSqlParser.WHERE:
				{
				{
				this.state = 3579;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 3580;
				this.expression(0);
				}
				}
				break;
			case StarRocksSqlParser.EOF:
			case StarRocksSqlParser.ADD:
			case StarRocksSqlParser.ADMIN:
			case StarRocksSqlParser.ALTER:
			case StarRocksSqlParser.ANALYZE:
			case StarRocksSqlParser.BACKUP:
			case StarRocksSqlParser.BEGIN:
			case StarRocksSqlParser.CANCEL:
			case StarRocksSqlParser.COMMIT:
			case StarRocksSqlParser.CREATE:
			case StarRocksSqlParser.DELETE:
			case StarRocksSqlParser.DESC:
			case StarRocksSqlParser.DESCRIBE:
			case StarRocksSqlParser.DROP:
			case StarRocksSqlParser.EXECUTE:
			case StarRocksSqlParser.EXPLAIN:
			case StarRocksSqlParser.EXPORT:
			case StarRocksSqlParser.GRANT:
			case StarRocksSqlParser.HELP:
			case StarRocksSqlParser.INSTALL:
			case StarRocksSqlParser.INSERT:
			case StarRocksSqlParser.KILL:
			case StarRocksSqlParser.LOAD:
			case StarRocksSqlParser.PAUSE:
			case StarRocksSqlParser.RECOVER:
			case StarRocksSqlParser.REFRESH:
			case StarRocksSqlParser.RESTORE:
			case StarRocksSqlParser.RESUME:
			case StarRocksSqlParser.REVOKE:
			case StarRocksSqlParser.ROLLBACK:
			case StarRocksSqlParser.SELECT:
			case StarRocksSqlParser.SET:
			case StarRocksSqlParser.SHOW:
			case StarRocksSqlParser.START:
			case StarRocksSqlParser.STOP:
			case StarRocksSqlParser.SUBMIT:
			case StarRocksSqlParser.SUSPEND:
			case StarRocksSqlParser.SYNC:
			case StarRocksSqlParser.TRACE:
			case StarRocksSqlParser.TRUNCATE:
			case StarRocksSqlParser.UNINSTALL:
			case StarRocksSqlParser.UPDATE:
			case StarRocksSqlParser.USE:
			case StarRocksSqlParser.WITH:
			case StarRocksSqlParser.LOCK:
			case StarRocksSqlParser.UNLOCK:
			case StarRocksSqlParser.SEMICOLON:
			case StarRocksSqlParser.LEFT_PAREN:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showTabletStatement(): ShowTabletStatementContext {
		let _localctx: ShowTabletStatementContext = new ShowTabletStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 428, StarRocksSqlParser.RULE_showTabletStatement);
		let _la: number;
		try {
			this.state = 3612;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 367, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3583;
				this.match(StarRocksSqlParser.SHOW);
				this.state = 3584;
				this.match(StarRocksSqlParser.TABLET);
				this.state = 3585;
				this.match(StarRocksSqlParser.INTEGER_VALUE);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3586;
				this.match(StarRocksSqlParser.SHOW);
				this.state = 3587;
				this.match(StarRocksSqlParser.TABLET);
				this.state = 3588;
				this.match(StarRocksSqlParser.FROM);
				this.state = 3589;
				this.qualifiedName();
				this.state = 3591;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.PARTITION || _la === StarRocksSqlParser.PARTITIONS || _la === StarRocksSqlParser.TEMPORARY) {
					{
					this.state = 3590;
					this.partitionNames();
					}
				}

				this.state = 3595;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.WHERE) {
					{
					this.state = 3593;
					this.match(StarRocksSqlParser.WHERE);
					this.state = 3594;
					this.expression(0);
					}
				}

				this.state = 3607;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.ORDER) {
					{
					this.state = 3597;
					this.match(StarRocksSqlParser.ORDER);
					this.state = 3598;
					this.match(StarRocksSqlParser.BY);
					this.state = 3599;
					this.sortItem();
					this.state = 3604;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === StarRocksSqlParser.COMMA) {
						{
						{
						this.state = 3600;
						this.match(StarRocksSqlParser.COMMA);
						this.state = 3601;
						this.sortItem();
						}
						}
						this.state = 3606;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 3610;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.LIMIT) {
					{
					this.state = 3609;
					this.limitElement();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showTransactionStatement(): ShowTransactionStatementContext {
		let _localctx: ShowTransactionStatementContext = new ShowTransactionStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 430, StarRocksSqlParser.RULE_showTransactionStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3614;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3615;
			this.match(StarRocksSqlParser.TRANSACTION);
			this.state = 3618;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN) {
				{
				this.state = 3616;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3617;
				_localctx._db = this.qualifiedName();
				}
			}

			this.state = 3622;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.WHERE) {
				{
				this.state = 3620;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 3621;
				this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showTriggersStatement(): ShowTriggersStatementContext {
		let _localctx: ShowTriggersStatementContext = new ShowTriggersStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 432, StarRocksSqlParser.RULE_showTriggersStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3624;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3626;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FULL) {
				{
				this.state = 3625;
				this.match(StarRocksSqlParser.FULL);
				}
			}

			this.state = 3628;
			this.match(StarRocksSqlParser.TRIGGERS);
			this.state = 3631;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN) {
				{
				this.state = 3629;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3630;
				_localctx._catalog = this.qualifiedName();
				}
			}

			this.state = 3637;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.LIKE:
				{
				{
				this.state = 3633;
				this.match(StarRocksSqlParser.LIKE);
				this.state = 3634;
				_localctx._pattern = this.string();
				}
				}
				break;
			case StarRocksSqlParser.WHERE:
				{
				{
				this.state = 3635;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 3636;
				this.expression(0);
				}
				}
				break;
			case StarRocksSqlParser.EOF:
			case StarRocksSqlParser.ADD:
			case StarRocksSqlParser.ADMIN:
			case StarRocksSqlParser.ALTER:
			case StarRocksSqlParser.ANALYZE:
			case StarRocksSqlParser.BACKUP:
			case StarRocksSqlParser.BEGIN:
			case StarRocksSqlParser.CANCEL:
			case StarRocksSqlParser.COMMIT:
			case StarRocksSqlParser.CREATE:
			case StarRocksSqlParser.DELETE:
			case StarRocksSqlParser.DESC:
			case StarRocksSqlParser.DESCRIBE:
			case StarRocksSqlParser.DROP:
			case StarRocksSqlParser.EXECUTE:
			case StarRocksSqlParser.EXPLAIN:
			case StarRocksSqlParser.EXPORT:
			case StarRocksSqlParser.GRANT:
			case StarRocksSqlParser.HELP:
			case StarRocksSqlParser.INSTALL:
			case StarRocksSqlParser.INSERT:
			case StarRocksSqlParser.KILL:
			case StarRocksSqlParser.LOAD:
			case StarRocksSqlParser.PAUSE:
			case StarRocksSqlParser.RECOVER:
			case StarRocksSqlParser.REFRESH:
			case StarRocksSqlParser.RESTORE:
			case StarRocksSqlParser.RESUME:
			case StarRocksSqlParser.REVOKE:
			case StarRocksSqlParser.ROLLBACK:
			case StarRocksSqlParser.SELECT:
			case StarRocksSqlParser.SET:
			case StarRocksSqlParser.SHOW:
			case StarRocksSqlParser.START:
			case StarRocksSqlParser.STOP:
			case StarRocksSqlParser.SUBMIT:
			case StarRocksSqlParser.SUSPEND:
			case StarRocksSqlParser.SYNC:
			case StarRocksSqlParser.TRACE:
			case StarRocksSqlParser.TRUNCATE:
			case StarRocksSqlParser.UNINSTALL:
			case StarRocksSqlParser.UPDATE:
			case StarRocksSqlParser.USE:
			case StarRocksSqlParser.WITH:
			case StarRocksSqlParser.LOCK:
			case StarRocksSqlParser.UNLOCK:
			case StarRocksSqlParser.SEMICOLON:
			case StarRocksSqlParser.LEFT_PAREN:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showUserPropertyStatement(): ShowUserPropertyStatementContext {
		let _localctx: ShowUserPropertyStatementContext = new ShowUserPropertyStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 434, StarRocksSqlParser.RULE_showUserPropertyStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3639;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3640;
			this.match(StarRocksSqlParser.PROPERTY);
			this.state = 3643;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FOR) {
				{
				this.state = 3641;
				this.match(StarRocksSqlParser.FOR);
				this.state = 3642;
				this.string();
				}
			}

			this.state = 3647;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.LIKE) {
				{
				this.state = 3645;
				this.match(StarRocksSqlParser.LIKE);
				this.state = 3646;
				this.string();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showVariablesStatement(): ShowVariablesStatementContext {
		let _localctx: ShowVariablesStatementContext = new ShowVariablesStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 436, StarRocksSqlParser.RULE_showVariablesStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3649;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3651;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.GLOBAL || _la === StarRocksSqlParser.LOCAL || _la === StarRocksSqlParser.SESSION || _la === StarRocksSqlParser.VERBOSE) {
				{
				this.state = 3650;
				this.varType();
				}
			}

			this.state = 3653;
			this.match(StarRocksSqlParser.VARIABLES);
			this.state = 3658;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.LIKE:
				{
				{
				this.state = 3654;
				this.match(StarRocksSqlParser.LIKE);
				this.state = 3655;
				_localctx._pattern = this.string();
				}
				}
				break;
			case StarRocksSqlParser.WHERE:
				{
				{
				this.state = 3656;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 3657;
				this.expression(0);
				}
				}
				break;
			case StarRocksSqlParser.EOF:
			case StarRocksSqlParser.ADD:
			case StarRocksSqlParser.ADMIN:
			case StarRocksSqlParser.ALTER:
			case StarRocksSqlParser.ANALYZE:
			case StarRocksSqlParser.BACKUP:
			case StarRocksSqlParser.BEGIN:
			case StarRocksSqlParser.CANCEL:
			case StarRocksSqlParser.COMMIT:
			case StarRocksSqlParser.CREATE:
			case StarRocksSqlParser.DELETE:
			case StarRocksSqlParser.DESC:
			case StarRocksSqlParser.DESCRIBE:
			case StarRocksSqlParser.DROP:
			case StarRocksSqlParser.EXECUTE:
			case StarRocksSqlParser.EXPLAIN:
			case StarRocksSqlParser.EXPORT:
			case StarRocksSqlParser.GRANT:
			case StarRocksSqlParser.HELP:
			case StarRocksSqlParser.INSTALL:
			case StarRocksSqlParser.INSERT:
			case StarRocksSqlParser.KILL:
			case StarRocksSqlParser.LOAD:
			case StarRocksSqlParser.PAUSE:
			case StarRocksSqlParser.RECOVER:
			case StarRocksSqlParser.REFRESH:
			case StarRocksSqlParser.RESTORE:
			case StarRocksSqlParser.RESUME:
			case StarRocksSqlParser.REVOKE:
			case StarRocksSqlParser.ROLLBACK:
			case StarRocksSqlParser.SELECT:
			case StarRocksSqlParser.SET:
			case StarRocksSqlParser.SHOW:
			case StarRocksSqlParser.START:
			case StarRocksSqlParser.STOP:
			case StarRocksSqlParser.SUBMIT:
			case StarRocksSqlParser.SUSPEND:
			case StarRocksSqlParser.SYNC:
			case StarRocksSqlParser.TRACE:
			case StarRocksSqlParser.TRUNCATE:
			case StarRocksSqlParser.UNINSTALL:
			case StarRocksSqlParser.UPDATE:
			case StarRocksSqlParser.USE:
			case StarRocksSqlParser.WITH:
			case StarRocksSqlParser.LOCK:
			case StarRocksSqlParser.UNLOCK:
			case StarRocksSqlParser.SEMICOLON:
			case StarRocksSqlParser.LEFT_PAREN:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showWarningStatement(): ShowWarningStatementContext {
		let _localctx: ShowWarningStatementContext = new ShowWarningStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 438, StarRocksSqlParser.RULE_showWarningStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3660;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3661;
			_la = this._input.LA(1);
			if (!(_la === StarRocksSqlParser.ERRORS || _la === StarRocksSqlParser.WARNINGS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3663;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.LIMIT) {
				{
				this.state = 3662;
				this.limitElement();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public helpStatement(): HelpStatementContext {
		let _localctx: HelpStatementContext = new HelpStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 440, StarRocksSqlParser.RULE_helpStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3665;
			this.match(StarRocksSqlParser.HELP);
			this.state = 3666;
			this.identifierOrString();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createUserStatement(): CreateUserStatementContext {
		let _localctx: CreateUserStatementContext = new CreateUserStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 442, StarRocksSqlParser.RULE_createUserStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3668;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 3669;
			this.match(StarRocksSqlParser.USER);
			this.state = 3673;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 3670;
				this.match(StarRocksSqlParser.IF);
				this.state = 3671;
				this.match(StarRocksSqlParser.NOT);
				this.state = 3672;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 3675;
			this.user();
			this.state = 3677;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IDENTIFIED) {
				{
				this.state = 3676;
				this.authOption();
				}
			}

			this.state = 3682;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.DEFAULT) {
				{
				this.state = 3679;
				this.match(StarRocksSqlParser.DEFAULT);
				this.state = 3680;
				this.match(StarRocksSqlParser.ROLE);
				this.state = 3681;
				this.roleList();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropUserStatement(): DropUserStatementContext {
		let _localctx: DropUserStatementContext = new DropUserStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 444, StarRocksSqlParser.RULE_dropUserStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3684;
			this.match(StarRocksSqlParser.DROP);
			this.state = 3685;
			this.match(StarRocksSqlParser.USER);
			this.state = 3688;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 3686;
				this.match(StarRocksSqlParser.IF);
				this.state = 3687;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 3690;
			this.user();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterUserStatement(): AlterUserStatementContext {
		let _localctx: AlterUserStatementContext = new AlterUserStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 446, StarRocksSqlParser.RULE_alterUserStatement);
		let _la: number;
		try {
			this.state = 3715;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 385, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3692;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 3693;
				this.match(StarRocksSqlParser.USER);
				this.state = 3696;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.IF) {
					{
					this.state = 3694;
					this.match(StarRocksSqlParser.IF);
					this.state = 3695;
					this.match(StarRocksSqlParser.EXISTS);
					}
				}

				this.state = 3698;
				this.user();
				this.state = 3699;
				this.authOption();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3701;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 3702;
				this.match(StarRocksSqlParser.USER);
				this.state = 3705;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.IF) {
					{
					this.state = 3703;
					this.match(StarRocksSqlParser.IF);
					this.state = 3704;
					this.match(StarRocksSqlParser.EXISTS);
					}
				}

				this.state = 3707;
				this.user();
				this.state = 3708;
				this.match(StarRocksSqlParser.DEFAULT);
				this.state = 3709;
				this.match(StarRocksSqlParser.ROLE);
				this.state = 3713;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 384, this._ctx) ) {
				case 1:
					{
					this.state = 3710;
					this.match(StarRocksSqlParser.NONE);
					}
					break;

				case 2:
					{
					this.state = 3711;
					this.match(StarRocksSqlParser.ALL);
					}
					break;

				case 3:
					{
					this.state = 3712;
					this.roleList();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showUserStatement(): ShowUserStatementContext {
		let _localctx: ShowUserStatementContext = new ShowUserStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 448, StarRocksSqlParser.RULE_showUserStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3717;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3718;
			_la = this._input.LA(1);
			if (!(_la === StarRocksSqlParser.USER || _la === StarRocksSqlParser.USERS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showAuthenticationStatement(): ShowAuthenticationStatementContext {
		let _localctx: ShowAuthenticationStatementContext = new ShowAuthenticationStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 450, StarRocksSqlParser.RULE_showAuthenticationStatement);
		let _la: number;
		try {
			this.state = 3729;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 387, this._ctx) ) {
			case 1:
				_localctx = new ShowAllAuthenticationContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3720;
				this.match(StarRocksSqlParser.SHOW);
				this.state = 3721;
				this.match(StarRocksSqlParser.ALL);
				this.state = 3722;
				this.match(StarRocksSqlParser.AUTHENTICATION);
				}
				break;

			case 2:
				_localctx = new ShowAuthenticationForUserContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3723;
				this.match(StarRocksSqlParser.SHOW);
				this.state = 3724;
				this.match(StarRocksSqlParser.AUTHENTICATION);
				this.state = 3727;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.FOR) {
					{
					this.state = 3725;
					this.match(StarRocksSqlParser.FOR);
					this.state = 3726;
					this.user();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public executeAsStatement(): ExecuteAsStatementContext {
		let _localctx: ExecuteAsStatementContext = new ExecuteAsStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 452, StarRocksSqlParser.RULE_executeAsStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3731;
			this.match(StarRocksSqlParser.EXECUTE);
			this.state = 3732;
			this.match(StarRocksSqlParser.AS);
			this.state = 3733;
			this.user();
			this.state = 3737;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 388, this._ctx) ) {
			case 1:
				{
				this.state = 3734;
				this.match(StarRocksSqlParser.WITH);
				this.state = 3735;
				this.match(StarRocksSqlParser.NO);
				this.state = 3736;
				this.match(StarRocksSqlParser.REVERT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createRoleStatement(): CreateRoleStatementContext {
		let _localctx: CreateRoleStatementContext = new CreateRoleStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 454, StarRocksSqlParser.RULE_createRoleStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3739;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 3740;
			this.match(StarRocksSqlParser.ROLE);
			this.state = 3744;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 3741;
				this.match(StarRocksSqlParser.IF);
				this.state = 3742;
				this.match(StarRocksSqlParser.NOT);
				this.state = 3743;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 3746;
			this.roleList();
			this.state = 3748;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.COMMENT) {
				{
				this.state = 3747;
				this.comment();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterRoleStatement(): AlterRoleStatementContext {
		let _localctx: AlterRoleStatementContext = new AlterRoleStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 456, StarRocksSqlParser.RULE_alterRoleStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3750;
			this.match(StarRocksSqlParser.ALTER);
			this.state = 3751;
			this.match(StarRocksSqlParser.ROLE);
			this.state = 3754;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 3752;
				this.match(StarRocksSqlParser.IF);
				this.state = 3753;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 3756;
			this.roleList();
			this.state = 3757;
			this.match(StarRocksSqlParser.SET);
			this.state = 3758;
			this.match(StarRocksSqlParser.COMMENT);
			this.state = 3759;
			this.match(StarRocksSqlParser.EQ);
			this.state = 3760;
			this.string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropRoleStatement(): DropRoleStatementContext {
		let _localctx: DropRoleStatementContext = new DropRoleStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 458, StarRocksSqlParser.RULE_dropRoleStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3762;
			this.match(StarRocksSqlParser.DROP);
			this.state = 3763;
			this.match(StarRocksSqlParser.ROLE);
			this.state = 3766;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 3764;
				this.match(StarRocksSqlParser.IF);
				this.state = 3765;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 3768;
			this.roleList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showRolesStatement(): ShowRolesStatementContext {
		let _localctx: ShowRolesStatementContext = new ShowRolesStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 460, StarRocksSqlParser.RULE_showRolesStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3770;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 3771;
			this.match(StarRocksSqlParser.ROLES);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grantRoleStatement(): GrantRoleStatementContext {
		let _localctx: GrantRoleStatementContext = new GrantRoleStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 462, StarRocksSqlParser.RULE_grantRoleStatement);
		try {
			this.state = 3787;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 394, this._ctx) ) {
			case 1:
				_localctx = new GrantRoleToUserContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3773;
				this.match(StarRocksSqlParser.GRANT);
				this.state = 3774;
				this.identifierOrStringList();
				this.state = 3775;
				this.match(StarRocksSqlParser.TO);
				this.state = 3777;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 393, this._ctx) ) {
				case 1:
					{
					this.state = 3776;
					this.match(StarRocksSqlParser.USER);
					}
					break;
				}
				this.state = 3779;
				this.user();
				}
				break;

			case 2:
				_localctx = new GrantRoleToRoleContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3781;
				this.match(StarRocksSqlParser.GRANT);
				this.state = 3782;
				this.identifierOrStringList();
				this.state = 3783;
				this.match(StarRocksSqlParser.TO);
				this.state = 3784;
				this.match(StarRocksSqlParser.ROLE);
				this.state = 3785;
				this.identifierOrString();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public revokeRoleStatement(): RevokeRoleStatementContext {
		let _localctx: RevokeRoleStatementContext = new RevokeRoleStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 464, StarRocksSqlParser.RULE_revokeRoleStatement);
		try {
			this.state = 3803;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 396, this._ctx) ) {
			case 1:
				_localctx = new RevokeRoleFromUserContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3789;
				this.match(StarRocksSqlParser.REVOKE);
				this.state = 3790;
				this.identifierOrStringList();
				this.state = 3791;
				this.match(StarRocksSqlParser.FROM);
				this.state = 3793;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 395, this._ctx) ) {
				case 1:
					{
					this.state = 3792;
					this.match(StarRocksSqlParser.USER);
					}
					break;
				}
				this.state = 3795;
				this.user();
				}
				break;

			case 2:
				_localctx = new RevokeRoleFromRoleContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3797;
				this.match(StarRocksSqlParser.REVOKE);
				this.state = 3798;
				this.identifierOrStringList();
				this.state = 3799;
				this.match(StarRocksSqlParser.FROM);
				this.state = 3800;
				this.match(StarRocksSqlParser.ROLE);
				this.state = 3801;
				this.identifierOrString();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setRoleStatement(): SetRoleStatementContext {
		let _localctx: SetRoleStatementContext = new SetRoleStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 466, StarRocksSqlParser.RULE_setRoleStatement);
		let _la: number;
		try {
			this.state = 3821;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 398, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3805;
				this.match(StarRocksSqlParser.SET);
				this.state = 3806;
				this.match(StarRocksSqlParser.ROLE);
				this.state = 3807;
				this.match(StarRocksSqlParser.DEFAULT);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3808;
				this.match(StarRocksSqlParser.SET);
				this.state = 3809;
				this.match(StarRocksSqlParser.ROLE);
				this.state = 3810;
				this.match(StarRocksSqlParser.NONE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3811;
				this.match(StarRocksSqlParser.SET);
				this.state = 3812;
				this.match(StarRocksSqlParser.ROLE);
				this.state = 3813;
				this.match(StarRocksSqlParser.ALL);
				this.state = 3816;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.EXCEPT) {
					{
					this.state = 3814;
					this.match(StarRocksSqlParser.EXCEPT);
					this.state = 3815;
					this.roleList();
					}
				}

				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3818;
				this.match(StarRocksSqlParser.SET);
				this.state = 3819;
				this.match(StarRocksSqlParser.ROLE);
				this.state = 3820;
				this.roleList();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setDefaultRoleStatement(): SetDefaultRoleStatementContext {
		let _localctx: SetDefaultRoleStatementContext = new SetDefaultRoleStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 468, StarRocksSqlParser.RULE_setDefaultRoleStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3823;
			this.match(StarRocksSqlParser.SET);
			this.state = 3824;
			this.match(StarRocksSqlParser.DEFAULT);
			this.state = 3825;
			this.match(StarRocksSqlParser.ROLE);
			this.state = 3829;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 399, this._ctx) ) {
			case 1:
				{
				this.state = 3826;
				this.match(StarRocksSqlParser.NONE);
				}
				break;

			case 2:
				{
				this.state = 3827;
				this.match(StarRocksSqlParser.ALL);
				}
				break;

			case 3:
				{
				this.state = 3828;
				this.roleList();
				}
				break;
			}
			this.state = 3831;
			this.match(StarRocksSqlParser.TO);
			this.state = 3832;
			this.user();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grantRevokeClause(): GrantRevokeClauseContext {
		let _localctx: GrantRevokeClauseContext = new GrantRevokeClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 470, StarRocksSqlParser.RULE_grantRevokeClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3840;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 401, this._ctx) ) {
			case 1:
				{
				this.state = 3835;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 400, this._ctx) ) {
				case 1:
					{
					this.state = 3834;
					this.match(StarRocksSqlParser.USER);
					}
					break;
				}
				this.state = 3837;
				this.user();
				}
				break;

			case 2:
				{
				this.state = 3838;
				this.match(StarRocksSqlParser.ROLE);
				this.state = 3839;
				this.identifierOrString();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grantPrivilegeStatement(): GrantPrivilegeStatementContext {
		let _localctx: GrantPrivilegeStatementContext = new GrantPrivilegeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 472, StarRocksSqlParser.RULE_grantPrivilegeStatement);
		let _la: number;
		try {
			this.state = 3930;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 411, this._ctx) ) {
			case 1:
				_localctx = new GrantOnUserContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3842;
				this.match(StarRocksSqlParser.GRANT);
				this.state = 3843;
				this.match(StarRocksSqlParser.IMPERSONATE);
				this.state = 3844;
				this.match(StarRocksSqlParser.ON);
				this.state = 3845;
				this.match(StarRocksSqlParser.USER);
				this.state = 3846;
				this.user();
				this.state = 3851;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 3847;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 3848;
					this.user();
					}
					}
					this.state = 3853;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3854;
				this.match(StarRocksSqlParser.TO);
				this.state = 3855;
				this.grantRevokeClause();
				this.state = 3859;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 403, this._ctx) ) {
				case 1:
					{
					this.state = 3856;
					this.match(StarRocksSqlParser.WITH);
					this.state = 3857;
					this.match(StarRocksSqlParser.GRANT);
					this.state = 3858;
					this.match(StarRocksSqlParser.OPTION);
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new GrantOnTableBriefContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3861;
				this.match(StarRocksSqlParser.GRANT);
				this.state = 3862;
				this.privilegeTypeList();
				this.state = 3863;
				this.match(StarRocksSqlParser.ON);
				this.state = 3864;
				this.privObjectNameList();
				this.state = 3865;
				this.match(StarRocksSqlParser.TO);
				this.state = 3866;
				this.grantRevokeClause();
				this.state = 3870;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 404, this._ctx) ) {
				case 1:
					{
					this.state = 3867;
					this.match(StarRocksSqlParser.WITH);
					this.state = 3868;
					this.match(StarRocksSqlParser.GRANT);
					this.state = 3869;
					this.match(StarRocksSqlParser.OPTION);
					}
					break;
				}
				}
				break;

			case 3:
				_localctx = new GrantOnFuncContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3872;
				this.match(StarRocksSqlParser.GRANT);
				this.state = 3873;
				this.privilegeTypeList();
				this.state = 3874;
				this.match(StarRocksSqlParser.ON);
				this.state = 3876;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.GLOBAL) {
					{
					this.state = 3875;
					this.match(StarRocksSqlParser.GLOBAL);
					}
				}

				this.state = 3878;
				this.match(StarRocksSqlParser.FUNCTION);
				this.state = 3879;
				this.privFunctionObjectNameList();
				this.state = 3880;
				this.match(StarRocksSqlParser.TO);
				this.state = 3881;
				this.grantRevokeClause();
				this.state = 3885;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 406, this._ctx) ) {
				case 1:
					{
					this.state = 3882;
					this.match(StarRocksSqlParser.WITH);
					this.state = 3883;
					this.match(StarRocksSqlParser.GRANT);
					this.state = 3884;
					this.match(StarRocksSqlParser.OPTION);
					}
					break;
				}
				}
				break;

			case 4:
				_localctx = new GrantOnSystemContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3887;
				this.match(StarRocksSqlParser.GRANT);
				this.state = 3888;
				this.privilegeTypeList();
				this.state = 3889;
				this.match(StarRocksSqlParser.ON);
				this.state = 3890;
				this.match(StarRocksSqlParser.SYSTEM);
				this.state = 3891;
				this.match(StarRocksSqlParser.TO);
				this.state = 3892;
				this.grantRevokeClause();
				this.state = 3896;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 407, this._ctx) ) {
				case 1:
					{
					this.state = 3893;
					this.match(StarRocksSqlParser.WITH);
					this.state = 3894;
					this.match(StarRocksSqlParser.GRANT);
					this.state = 3895;
					this.match(StarRocksSqlParser.OPTION);
					}
					break;
				}
				}
				break;

			case 5:
				_localctx = new GrantOnPrimaryObjContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3898;
				this.match(StarRocksSqlParser.GRANT);
				this.state = 3899;
				this.privilegeTypeList();
				this.state = 3900;
				this.match(StarRocksSqlParser.ON);
				this.state = 3901;
				this.privObjectType();
				this.state = 3902;
				this.privObjectNameList();
				this.state = 3903;
				this.match(StarRocksSqlParser.TO);
				this.state = 3904;
				this.grantRevokeClause();
				this.state = 3908;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 408, this._ctx) ) {
				case 1:
					{
					this.state = 3905;
					this.match(StarRocksSqlParser.WITH);
					this.state = 3906;
					this.match(StarRocksSqlParser.GRANT);
					this.state = 3907;
					this.match(StarRocksSqlParser.OPTION);
					}
					break;
				}
				}
				break;

			case 6:
				_localctx = new GrantOnAllContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3910;
				this.match(StarRocksSqlParser.GRANT);
				this.state = 3911;
				this.privilegeTypeList();
				this.state = 3912;
				this.match(StarRocksSqlParser.ON);
				this.state = 3913;
				this.match(StarRocksSqlParser.ALL);
				this.state = 3914;
				this.privObjectTypePlural();
				this.state = 3921;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 409, this._ctx) ) {
				case 1:
					{
					this.state = 3915;
					this.match(StarRocksSqlParser.IN);
					this.state = 3916;
					(_localctx as GrantOnAllContext)._isAll = this.match(StarRocksSqlParser.ALL);
					this.state = 3917;
					this.match(StarRocksSqlParser.DATABASES);
					}
					break;

				case 2:
					{
					this.state = 3918;
					this.match(StarRocksSqlParser.IN);
					this.state = 3919;
					this.match(StarRocksSqlParser.DATABASE);
					this.state = 3920;
					this.identifierOrString();
					}
					break;
				}
				this.state = 3923;
				this.match(StarRocksSqlParser.TO);
				this.state = 3924;
				this.grantRevokeClause();
				this.state = 3928;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 410, this._ctx) ) {
				case 1:
					{
					this.state = 3925;
					this.match(StarRocksSqlParser.WITH);
					this.state = 3926;
					this.match(StarRocksSqlParser.GRANT);
					this.state = 3927;
					this.match(StarRocksSqlParser.OPTION);
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public revokePrivilegeStatement(): RevokePrivilegeStatementContext {
		let _localctx: RevokePrivilegeStatementContext = new RevokePrivilegeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 474, StarRocksSqlParser.RULE_revokePrivilegeStatement);
		let _la: number;
		try {
			this.state = 3996;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 415, this._ctx) ) {
			case 1:
				_localctx = new RevokeOnUserContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3932;
				this.match(StarRocksSqlParser.REVOKE);
				this.state = 3933;
				this.match(StarRocksSqlParser.IMPERSONATE);
				this.state = 3934;
				this.match(StarRocksSqlParser.ON);
				this.state = 3935;
				this.match(StarRocksSqlParser.USER);
				this.state = 3936;
				this.user();
				this.state = 3941;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 3937;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 3938;
					this.user();
					}
					}
					this.state = 3943;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3944;
				this.match(StarRocksSqlParser.FROM);
				this.state = 3945;
				this.grantRevokeClause();
				}
				break;

			case 2:
				_localctx = new RevokeOnTableBriefContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3947;
				this.match(StarRocksSqlParser.REVOKE);
				this.state = 3948;
				this.privilegeTypeList();
				this.state = 3949;
				this.match(StarRocksSqlParser.ON);
				this.state = 3950;
				this.privObjectNameList();
				this.state = 3951;
				this.match(StarRocksSqlParser.FROM);
				this.state = 3952;
				this.grantRevokeClause();
				}
				break;

			case 3:
				_localctx = new RevokeOnFuncContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3954;
				this.match(StarRocksSqlParser.REVOKE);
				this.state = 3955;
				this.privilegeTypeList();
				this.state = 3956;
				this.match(StarRocksSqlParser.ON);
				this.state = 3958;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.GLOBAL) {
					{
					this.state = 3957;
					this.match(StarRocksSqlParser.GLOBAL);
					}
				}

				this.state = 3960;
				this.match(StarRocksSqlParser.FUNCTION);
				this.state = 3961;
				this.privFunctionObjectNameList();
				this.state = 3962;
				this.match(StarRocksSqlParser.FROM);
				this.state = 3963;
				this.grantRevokeClause();
				}
				break;

			case 4:
				_localctx = new RevokeOnSystemContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3965;
				this.match(StarRocksSqlParser.REVOKE);
				this.state = 3966;
				this.privilegeTypeList();
				this.state = 3967;
				this.match(StarRocksSqlParser.ON);
				this.state = 3968;
				this.match(StarRocksSqlParser.SYSTEM);
				this.state = 3969;
				this.match(StarRocksSqlParser.FROM);
				this.state = 3970;
				this.grantRevokeClause();
				}
				break;

			case 5:
				_localctx = new RevokeOnPrimaryObjContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3972;
				this.match(StarRocksSqlParser.REVOKE);
				this.state = 3973;
				this.privilegeTypeList();
				this.state = 3974;
				this.match(StarRocksSqlParser.ON);
				this.state = 3975;
				this.privObjectType();
				this.state = 3976;
				this.privObjectNameList();
				this.state = 3977;
				this.match(StarRocksSqlParser.FROM);
				this.state = 3978;
				this.grantRevokeClause();
				}
				break;

			case 6:
				_localctx = new RevokeOnAllContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3980;
				this.match(StarRocksSqlParser.REVOKE);
				this.state = 3981;
				this.privilegeTypeList();
				this.state = 3982;
				this.match(StarRocksSqlParser.ON);
				this.state = 3983;
				this.match(StarRocksSqlParser.ALL);
				this.state = 3984;
				this.privObjectTypePlural();
				this.state = 3991;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 414, this._ctx) ) {
				case 1:
					{
					this.state = 3985;
					this.match(StarRocksSqlParser.IN);
					this.state = 3986;
					(_localctx as RevokeOnAllContext)._isAll = this.match(StarRocksSqlParser.ALL);
					this.state = 3987;
					this.match(StarRocksSqlParser.DATABASES);
					}
					break;

				case 2:
					{
					this.state = 3988;
					this.match(StarRocksSqlParser.IN);
					this.state = 3989;
					this.match(StarRocksSqlParser.DATABASE);
					this.state = 3990;
					this.identifierOrString();
					}
					break;
				}
				this.state = 3993;
				this.match(StarRocksSqlParser.FROM);
				this.state = 3994;
				this.grantRevokeClause();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showGrantsStatement(): ShowGrantsStatementContext {
		let _localctx: ShowGrantsStatementContext = new ShowGrantsStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 476, StarRocksSqlParser.RULE_showGrantsStatement);
		try {
			this.state = 4012;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 417, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3998;
				this.match(StarRocksSqlParser.SHOW);
				this.state = 3999;
				this.match(StarRocksSqlParser.GRANTS);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4000;
				this.match(StarRocksSqlParser.SHOW);
				this.state = 4001;
				this.match(StarRocksSqlParser.GRANTS);
				this.state = 4002;
				this.match(StarRocksSqlParser.FOR);
				this.state = 4004;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 416, this._ctx) ) {
				case 1:
					{
					this.state = 4003;
					this.match(StarRocksSqlParser.USER);
					}
					break;
				}
				this.state = 4006;
				this.user();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4007;
				this.match(StarRocksSqlParser.SHOW);
				this.state = 4008;
				this.match(StarRocksSqlParser.GRANTS);
				this.state = 4009;
				this.match(StarRocksSqlParser.FOR);
				this.state = 4010;
				this.match(StarRocksSqlParser.ROLE);
				this.state = 4011;
				this.identifierOrString();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createSecurityIntegrationStatement(): CreateSecurityIntegrationStatementContext {
		let _localctx: CreateSecurityIntegrationStatementContext = new CreateSecurityIntegrationStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 478, StarRocksSqlParser.RULE_createSecurityIntegrationStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4014;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 4015;
			this.match(StarRocksSqlParser.SECURITY);
			this.state = 4016;
			this.match(StarRocksSqlParser.INTEGRATION);
			this.state = 4017;
			this.identifier();
			this.state = 4018;
			this.properties();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterSecurityIntegrationStatement(): AlterSecurityIntegrationStatementContext {
		let _localctx: AlterSecurityIntegrationStatementContext = new AlterSecurityIntegrationStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 480, StarRocksSqlParser.RULE_alterSecurityIntegrationStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4020;
			this.match(StarRocksSqlParser.ALTER);
			this.state = 4021;
			this.match(StarRocksSqlParser.SECURITY);
			this.state = 4022;
			this.match(StarRocksSqlParser.INTEGRATION);
			this.state = 4023;
			this.identifier();
			this.state = 4024;
			this.match(StarRocksSqlParser.SET);
			this.state = 4025;
			this.propertyList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropSecurityIntegrationStatement(): DropSecurityIntegrationStatementContext {
		let _localctx: DropSecurityIntegrationStatementContext = new DropSecurityIntegrationStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 482, StarRocksSqlParser.RULE_dropSecurityIntegrationStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4027;
			this.match(StarRocksSqlParser.DROP);
			this.state = 4028;
			this.match(StarRocksSqlParser.SECURITY);
			this.state = 4029;
			this.match(StarRocksSqlParser.INTEGRATION);
			this.state = 4030;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showSecurityIntegrationStatement(): ShowSecurityIntegrationStatementContext {
		let _localctx: ShowSecurityIntegrationStatementContext = new ShowSecurityIntegrationStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 484, StarRocksSqlParser.RULE_showSecurityIntegrationStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4032;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 4033;
			this.match(StarRocksSqlParser.SECURITY);
			this.state = 4034;
			this.match(StarRocksSqlParser.INTEGRATIONS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showCreateSecurityIntegrationStatement(): ShowCreateSecurityIntegrationStatementContext {
		let _localctx: ShowCreateSecurityIntegrationStatementContext = new ShowCreateSecurityIntegrationStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 486, StarRocksSqlParser.RULE_showCreateSecurityIntegrationStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4036;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 4037;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 4038;
			this.match(StarRocksSqlParser.SECURITY);
			this.state = 4039;
			this.match(StarRocksSqlParser.INTEGRATION);
			this.state = 4040;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createRoleMappingStatement(): CreateRoleMappingStatementContext {
		let _localctx: CreateRoleMappingStatementContext = new CreateRoleMappingStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 488, StarRocksSqlParser.RULE_createRoleMappingStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4042;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 4043;
			this.match(StarRocksSqlParser.ROLE);
			this.state = 4044;
			this.match(StarRocksSqlParser.MAPPING);
			this.state = 4045;
			this.identifier();
			this.state = 4046;
			this.properties();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterRoleMappingStatement(): AlterRoleMappingStatementContext {
		let _localctx: AlterRoleMappingStatementContext = new AlterRoleMappingStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 490, StarRocksSqlParser.RULE_alterRoleMappingStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4048;
			this.match(StarRocksSqlParser.ALTER);
			this.state = 4049;
			this.match(StarRocksSqlParser.ROLE);
			this.state = 4050;
			this.match(StarRocksSqlParser.MAPPING);
			this.state = 4051;
			this.identifier();
			this.state = 4052;
			this.match(StarRocksSqlParser.SET);
			this.state = 4053;
			this.propertyList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropRoleMappingStatement(): DropRoleMappingStatementContext {
		let _localctx: DropRoleMappingStatementContext = new DropRoleMappingStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 492, StarRocksSqlParser.RULE_dropRoleMappingStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4055;
			this.match(StarRocksSqlParser.DROP);
			this.state = 4056;
			this.match(StarRocksSqlParser.ROLE);
			this.state = 4057;
			this.match(StarRocksSqlParser.MAPPING);
			this.state = 4058;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showRoleMappingStatement(): ShowRoleMappingStatementContext {
		let _localctx: ShowRoleMappingStatementContext = new ShowRoleMappingStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 494, StarRocksSqlParser.RULE_showRoleMappingStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4060;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 4061;
			this.match(StarRocksSqlParser.ROLE);
			this.state = 4062;
			this.match(StarRocksSqlParser.MAPPINGS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public refreshRoleMappingStatement(): RefreshRoleMappingStatementContext {
		let _localctx: RefreshRoleMappingStatementContext = new RefreshRoleMappingStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 496, StarRocksSqlParser.RULE_refreshRoleMappingStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4064;
			this.match(StarRocksSqlParser.REFRESH);
			this.state = 4065;
			this.match(StarRocksSqlParser.ALL);
			this.state = 4066;
			this.match(StarRocksSqlParser.ROLE);
			this.state = 4067;
			this.match(StarRocksSqlParser.MAPPINGS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public authOption(): AuthOptionContext {
		let _localctx: AuthOptionContext = new AuthOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 498, StarRocksSqlParser.RULE_authOption);
		let _la: number;
		try {
			this.state = 4082;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 420, this._ctx) ) {
			case 1:
				_localctx = new AuthWithoutPluginContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4069;
				this.match(StarRocksSqlParser.IDENTIFIED);
				this.state = 4070;
				this.match(StarRocksSqlParser.BY);
				this.state = 4072;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.PASSWORD) {
					{
					this.state = 4071;
					this.match(StarRocksSqlParser.PASSWORD);
					}
				}

				this.state = 4074;
				this.string();
				}
				break;

			case 2:
				_localctx = new AuthWithPluginContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4075;
				this.match(StarRocksSqlParser.IDENTIFIED);
				this.state = 4076;
				this.match(StarRocksSqlParser.WITH);
				this.state = 4077;
				this.identifierOrString();
				this.state = 4080;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.AS || _la === StarRocksSqlParser.BY) {
					{
					this.state = 4078;
					_la = this._input.LA(1);
					if (!(_la === StarRocksSqlParser.AS || _la === StarRocksSqlParser.BY)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 4079;
					this.string();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privObjectName(): PrivObjectNameContext {
		let _localctx: PrivObjectNameContext = new PrivObjectNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 500, StarRocksSqlParser.RULE_privObjectName);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4084;
			this.identifierOrStringOrStar();
			this.state = 4087;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.DOT) {
				{
				this.state = 4085;
				this.match(StarRocksSqlParser.DOT);
				this.state = 4086;
				this.identifierOrStringOrStar();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privObjectNameList(): PrivObjectNameListContext {
		let _localctx: PrivObjectNameListContext = new PrivObjectNameListContext(this._ctx, this.state);
		this.enterRule(_localctx, 502, StarRocksSqlParser.RULE_privObjectNameList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4089;
			this.privObjectName();
			this.state = 4094;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 4090;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 4091;
				this.privObjectName();
				}
				}
				this.state = 4096;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privFunctionObjectNameList(): PrivFunctionObjectNameListContext {
		let _localctx: PrivFunctionObjectNameListContext = new PrivFunctionObjectNameListContext(this._ctx, this.state);
		this.enterRule(_localctx, 504, StarRocksSqlParser.RULE_privFunctionObjectNameList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4097;
			this.qualifiedName();
			this.state = 4098;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 4099;
			this.typeList();
			this.state = 4100;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			this.state = 4109;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 4101;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 4102;
				this.qualifiedName();
				this.state = 4103;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 4104;
				this.typeList();
				this.state = 4105;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				}
				this.state = 4111;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privilegeTypeList(): PrivilegeTypeListContext {
		let _localctx: PrivilegeTypeListContext = new PrivilegeTypeListContext(this._ctx, this.state);
		this.enterRule(_localctx, 506, StarRocksSqlParser.RULE_privilegeTypeList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4112;
			this.privilegeType();
			this.state = 4117;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 4113;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 4114;
				this.privilegeType();
				}
				}
				this.state = 4119;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privilegeType(): PrivilegeTypeContext {
		let _localctx: PrivilegeTypeContext = new PrivilegeTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 508, StarRocksSqlParser.RULE_privilegeType);
		let _la: number;
		try {
			this.state = 4161;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.ALL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4120;
				this.match(StarRocksSqlParser.ALL);
				this.state = 4122;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.PRIVILEGES) {
					{
					this.state = 4121;
					this.match(StarRocksSqlParser.PRIVILEGES);
					}
				}

				}
				break;
			case StarRocksSqlParser.ALTER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4124;
				this.match(StarRocksSqlParser.ALTER);
				}
				break;
			case StarRocksSqlParser.APPLY:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4125;
				this.match(StarRocksSqlParser.APPLY);
				}
				break;
			case StarRocksSqlParser.BLACKLIST:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4126;
				this.match(StarRocksSqlParser.BLACKLIST);
				}
				break;
			case StarRocksSqlParser.CREATE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4127;
				this.match(StarRocksSqlParser.CREATE);
				this.state = 4144;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 426, this._ctx) ) {
				case 1:
					{
					this.state = 4128;
					this.match(StarRocksSqlParser.DATABASE);
					}
					break;

				case 2:
					{
					this.state = 4129;
					this.match(StarRocksSqlParser.TABLE);
					}
					break;

				case 3:
					{
					this.state = 4130;
					this.match(StarRocksSqlParser.VIEW);
					}
					break;

				case 4:
					{
					this.state = 4131;
					this.match(StarRocksSqlParser.FUNCTION);
					}
					break;

				case 5:
					{
					this.state = 4132;
					this.match(StarRocksSqlParser.GLOBAL);
					this.state = 4133;
					this.match(StarRocksSqlParser.FUNCTION);
					}
					break;

				case 6:
					{
					this.state = 4134;
					this.match(StarRocksSqlParser.MATERIALIZED);
					this.state = 4135;
					this.match(StarRocksSqlParser.VIEW);
					}
					break;

				case 7:
					{
					this.state = 4136;
					this.match(StarRocksSqlParser.RESOURCE);
					}
					break;

				case 8:
					{
					this.state = 4137;
					this.match(StarRocksSqlParser.RESOURCE);
					this.state = 4138;
					this.match(StarRocksSqlParser.GROUP);
					}
					break;

				case 9:
					{
					this.state = 4139;
					this.match(StarRocksSqlParser.EXTERNAL);
					this.state = 4140;
					this.match(StarRocksSqlParser.CATALOG);
					}
					break;

				case 10:
					{
					this.state = 4141;
					this.match(StarRocksSqlParser.POLICY);
					}
					break;

				case 11:
					{
					this.state = 4142;
					this.match(StarRocksSqlParser.STORAGE);
					this.state = 4143;
					this.match(StarRocksSqlParser.VOLUME);
					}
					break;
				}
				}
				break;
			case StarRocksSqlParser.DELETE:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4146;
				this.match(StarRocksSqlParser.DELETE);
				}
				break;
			case StarRocksSqlParser.DROP:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4147;
				this.match(StarRocksSqlParser.DROP);
				}
				break;
			case StarRocksSqlParser.EXPORT:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4148;
				this.match(StarRocksSqlParser.EXPORT);
				}
				break;
			case StarRocksSqlParser.FILE:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 4149;
				this.match(StarRocksSqlParser.FILE);
				}
				break;
			case StarRocksSqlParser.IMPERSONATE:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 4150;
				this.match(StarRocksSqlParser.IMPERSONATE);
				}
				break;
			case StarRocksSqlParser.INSERT:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 4151;
				this.match(StarRocksSqlParser.INSERT);
				}
				break;
			case StarRocksSqlParser.GRANT:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 4152;
				this.match(StarRocksSqlParser.GRANT);
				}
				break;
			case StarRocksSqlParser.NODE:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 4153;
				this.match(StarRocksSqlParser.NODE);
				}
				break;
			case StarRocksSqlParser.OPERATE:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 4154;
				this.match(StarRocksSqlParser.OPERATE);
				}
				break;
			case StarRocksSqlParser.PLUGIN:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 4155;
				this.match(StarRocksSqlParser.PLUGIN);
				}
				break;
			case StarRocksSqlParser.REPOSITORY:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 4156;
				this.match(StarRocksSqlParser.REPOSITORY);
				}
				break;
			case StarRocksSqlParser.REFRESH:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 4157;
				this.match(StarRocksSqlParser.REFRESH);
				}
				break;
			case StarRocksSqlParser.SELECT:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 4158;
				this.match(StarRocksSqlParser.SELECT);
				}
				break;
			case StarRocksSqlParser.UPDATE:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 4159;
				this.match(StarRocksSqlParser.UPDATE);
				}
				break;
			case StarRocksSqlParser.USAGE:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 4160;
				this.match(StarRocksSqlParser.USAGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privObjectType(): PrivObjectTypeContext {
		let _localctx: PrivObjectTypeContext = new PrivObjectTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 510, StarRocksSqlParser.RULE_privObjectType);
		try {
			this.state = 4176;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 428, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4163;
				this.match(StarRocksSqlParser.CATALOG);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4164;
				this.match(StarRocksSqlParser.DATABASE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4165;
				this.match(StarRocksSqlParser.MATERIALIZED);
				this.state = 4166;
				this.match(StarRocksSqlParser.VIEW);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4167;
				this.match(StarRocksSqlParser.POLICY);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4168;
				this.match(StarRocksSqlParser.RESOURCE);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4169;
				this.match(StarRocksSqlParser.RESOURCE);
				this.state = 4170;
				this.match(StarRocksSqlParser.GROUP);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4171;
				this.match(StarRocksSqlParser.STORAGE);
				this.state = 4172;
				this.match(StarRocksSqlParser.VOLUME);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4173;
				this.match(StarRocksSqlParser.SYSTEM);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 4174;
				this.match(StarRocksSqlParser.TABLE);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 4175;
				this.match(StarRocksSqlParser.VIEW);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privObjectTypePlural(): PrivObjectTypePluralContext {
		let _localctx: PrivObjectTypePluralContext = new PrivObjectTypePluralContext(this._ctx, this.state);
		this.enterRule(_localctx, 512, StarRocksSqlParser.RULE_privObjectTypePlural);
		try {
			this.state = 4194;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.CATALOGS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4178;
				this.match(StarRocksSqlParser.CATALOGS);
				}
				break;
			case StarRocksSqlParser.DATABASES:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4179;
				this.match(StarRocksSqlParser.DATABASES);
				}
				break;
			case StarRocksSqlParser.FUNCTIONS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4180;
				this.match(StarRocksSqlParser.FUNCTIONS);
				}
				break;
			case StarRocksSqlParser.GLOBAL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4181;
				this.match(StarRocksSqlParser.GLOBAL);
				this.state = 4182;
				this.match(StarRocksSqlParser.FUNCTIONS);
				}
				break;
			case StarRocksSqlParser.MATERIALIZED:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4183;
				this.match(StarRocksSqlParser.MATERIALIZED);
				this.state = 4184;
				this.match(StarRocksSqlParser.VIEWS);
				}
				break;
			case StarRocksSqlParser.POLICIES:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4185;
				this.match(StarRocksSqlParser.POLICIES);
				}
				break;
			case StarRocksSqlParser.RESOURCES:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4186;
				this.match(StarRocksSqlParser.RESOURCES);
				}
				break;
			case StarRocksSqlParser.RESOURCE:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4187;
				this.match(StarRocksSqlParser.RESOURCE);
				this.state = 4188;
				this.match(StarRocksSqlParser.GROUPS);
				}
				break;
			case StarRocksSqlParser.STORAGE:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 4189;
				this.match(StarRocksSqlParser.STORAGE);
				this.state = 4190;
				this.match(StarRocksSqlParser.VOLUMES);
				}
				break;
			case StarRocksSqlParser.TABLES:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 4191;
				this.match(StarRocksSqlParser.TABLES);
				}
				break;
			case StarRocksSqlParser.USERS:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 4192;
				this.match(StarRocksSqlParser.USERS);
				}
				break;
			case StarRocksSqlParser.VIEWS:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 4193;
				this.match(StarRocksSqlParser.VIEWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createMaskingPolicyStatement(): CreateMaskingPolicyStatementContext {
		let _localctx: CreateMaskingPolicyStatementContext = new CreateMaskingPolicyStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 514, StarRocksSqlParser.RULE_createMaskingPolicyStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4196;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 4199;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.OR) {
				{
				this.state = 4197;
				this.match(StarRocksSqlParser.OR);
				this.state = 4198;
				this.match(StarRocksSqlParser.REPLACE);
				}
			}

			this.state = 4201;
			this.match(StarRocksSqlParser.MASKING);
			this.state = 4202;
			this.match(StarRocksSqlParser.POLICY);
			this.state = 4206;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 4203;
				this.match(StarRocksSqlParser.IF);
				this.state = 4204;
				this.match(StarRocksSqlParser.NOT);
				this.state = 4205;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 4208;
			_localctx._policyName = this.qualifiedName();
			this.state = 4209;
			this.match(StarRocksSqlParser.AS);
			this.state = 4210;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 4211;
			this.policySignature();
			this.state = 4216;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 4212;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 4213;
				this.policySignature();
				}
				}
				this.state = 4218;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4219;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			this.state = 4220;
			this.match(StarRocksSqlParser.RETURNS);
			this.state = 4221;
			this.type();
			this.state = 4222;
			this.match(StarRocksSqlParser.ARROW);
			this.state = 4223;
			this.expression(0);
			this.state = 4225;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.COMMENT) {
				{
				this.state = 4224;
				this.comment();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropMaskingPolicyStatement(): DropMaskingPolicyStatementContext {
		let _localctx: DropMaskingPolicyStatementContext = new DropMaskingPolicyStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 516, StarRocksSqlParser.RULE_dropMaskingPolicyStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4227;
			this.match(StarRocksSqlParser.DROP);
			this.state = 4228;
			this.match(StarRocksSqlParser.MASKING);
			this.state = 4229;
			this.match(StarRocksSqlParser.POLICY);
			this.state = 4232;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 4230;
				this.match(StarRocksSqlParser.IF);
				this.state = 4231;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 4234;
			_localctx._policyName = this.qualifiedName();
			this.state = 4236;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FORCE) {
				{
				this.state = 4235;
				this.match(StarRocksSqlParser.FORCE);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterMaskingPolicyStatement(): AlterMaskingPolicyStatementContext {
		let _localctx: AlterMaskingPolicyStatementContext = new AlterMaskingPolicyStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 518, StarRocksSqlParser.RULE_alterMaskingPolicyStatement);
		let _la: number;
		try {
			this.state = 4276;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 439, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4238;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 4239;
				this.match(StarRocksSqlParser.MASKING);
				this.state = 4240;
				this.match(StarRocksSqlParser.POLICY);
				this.state = 4243;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.IF) {
					{
					this.state = 4241;
					this.match(StarRocksSqlParser.IF);
					this.state = 4242;
					this.match(StarRocksSqlParser.EXISTS);
					}
				}

				this.state = 4245;
				_localctx._policyName = this.qualifiedName();
				this.state = 4246;
				this.match(StarRocksSqlParser.SET);
				this.state = 4247;
				this.match(StarRocksSqlParser.BODY);
				this.state = 4248;
				this.match(StarRocksSqlParser.ARROW);
				this.state = 4249;
				this.expression(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4251;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 4252;
				this.match(StarRocksSqlParser.MASKING);
				this.state = 4253;
				this.match(StarRocksSqlParser.POLICY);
				this.state = 4256;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.IF) {
					{
					this.state = 4254;
					this.match(StarRocksSqlParser.IF);
					this.state = 4255;
					this.match(StarRocksSqlParser.EXISTS);
					}
				}

				this.state = 4258;
				_localctx._policyName = this.qualifiedName();
				this.state = 4259;
				this.match(StarRocksSqlParser.SET);
				this.state = 4260;
				this.match(StarRocksSqlParser.COMMENT);
				this.state = 4261;
				this.match(StarRocksSqlParser.EQ);
				this.state = 4262;
				this.string();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4264;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 4265;
				this.match(StarRocksSqlParser.MASKING);
				this.state = 4266;
				this.match(StarRocksSqlParser.POLICY);
				this.state = 4269;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.IF) {
					{
					this.state = 4267;
					this.match(StarRocksSqlParser.IF);
					this.state = 4268;
					this.match(StarRocksSqlParser.EXISTS);
					}
				}

				this.state = 4271;
				_localctx._policyName = this.qualifiedName();
				this.state = 4272;
				this.match(StarRocksSqlParser.RENAME);
				this.state = 4273;
				this.match(StarRocksSqlParser.TO);
				this.state = 4274;
				_localctx._newPolicyName = this.identifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showMaskingPolicyStatement(): ShowMaskingPolicyStatementContext {
		let _localctx: ShowMaskingPolicyStatementContext = new ShowMaskingPolicyStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 520, StarRocksSqlParser.RULE_showMaskingPolicyStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4278;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 4279;
			this.match(StarRocksSqlParser.MASKING);
			this.state = 4280;
			this.match(StarRocksSqlParser.POLICIES);
			this.state = 4283;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN) {
				{
				this.state = 4281;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4282;
				_localctx._db = this.qualifiedName();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showCreateMaskingPolicyStatement(): ShowCreateMaskingPolicyStatementContext {
		let _localctx: ShowCreateMaskingPolicyStatementContext = new ShowCreateMaskingPolicyStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 522, StarRocksSqlParser.RULE_showCreateMaskingPolicyStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4285;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 4286;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 4287;
			this.match(StarRocksSqlParser.MASKING);
			this.state = 4288;
			this.match(StarRocksSqlParser.POLICY);
			this.state = 4289;
			_localctx._policyName = this.qualifiedName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createRowAccessPolicyStatement(): CreateRowAccessPolicyStatementContext {
		let _localctx: CreateRowAccessPolicyStatementContext = new CreateRowAccessPolicyStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 524, StarRocksSqlParser.RULE_createRowAccessPolicyStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4291;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 4294;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.OR) {
				{
				this.state = 4292;
				this.match(StarRocksSqlParser.OR);
				this.state = 4293;
				this.match(StarRocksSqlParser.REPLACE);
				}
			}

			this.state = 4296;
			this.match(StarRocksSqlParser.ROW);
			this.state = 4297;
			this.match(StarRocksSqlParser.ACCESS);
			this.state = 4298;
			this.match(StarRocksSqlParser.POLICY);
			this.state = 4302;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 4299;
				this.match(StarRocksSqlParser.IF);
				this.state = 4300;
				this.match(StarRocksSqlParser.NOT);
				this.state = 4301;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 4304;
			_localctx._policyName = this.qualifiedName();
			this.state = 4305;
			this.match(StarRocksSqlParser.AS);
			this.state = 4306;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 4307;
			this.policySignature();
			this.state = 4312;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 4308;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 4309;
				this.policySignature();
				}
				}
				this.state = 4314;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4315;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			this.state = 4316;
			this.match(StarRocksSqlParser.RETURNS);
			this.state = 4317;
			this.match(StarRocksSqlParser.BOOLEAN);
			this.state = 4318;
			this.match(StarRocksSqlParser.ARROW);
			this.state = 4319;
			this.expression(0);
			this.state = 4321;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.COMMENT) {
				{
				this.state = 4320;
				this.comment();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropRowAccessPolicyStatement(): DropRowAccessPolicyStatementContext {
		let _localctx: DropRowAccessPolicyStatementContext = new DropRowAccessPolicyStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 526, StarRocksSqlParser.RULE_dropRowAccessPolicyStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4323;
			this.match(StarRocksSqlParser.DROP);
			this.state = 4324;
			this.match(StarRocksSqlParser.ROW);
			this.state = 4325;
			this.match(StarRocksSqlParser.ACCESS);
			this.state = 4326;
			this.match(StarRocksSqlParser.POLICY);
			this.state = 4329;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 4327;
				this.match(StarRocksSqlParser.IF);
				this.state = 4328;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 4331;
			_localctx._policyName = this.qualifiedName();
			this.state = 4333;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FORCE) {
				{
				this.state = 4332;
				this.match(StarRocksSqlParser.FORCE);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterRowAccessPolicyStatement(): AlterRowAccessPolicyStatementContext {
		let _localctx: AlterRowAccessPolicyStatementContext = new AlterRowAccessPolicyStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 528, StarRocksSqlParser.RULE_alterRowAccessPolicyStatement);
		let _la: number;
		try {
			this.state = 4376;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 450, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4335;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 4336;
				this.match(StarRocksSqlParser.ROW);
				this.state = 4337;
				this.match(StarRocksSqlParser.ACCESS);
				this.state = 4338;
				this.match(StarRocksSqlParser.POLICY);
				this.state = 4341;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.IF) {
					{
					this.state = 4339;
					this.match(StarRocksSqlParser.IF);
					this.state = 4340;
					this.match(StarRocksSqlParser.EXISTS);
					}
				}

				this.state = 4343;
				_localctx._policyName = this.qualifiedName();
				this.state = 4344;
				this.match(StarRocksSqlParser.SET);
				this.state = 4345;
				this.match(StarRocksSqlParser.BODY);
				this.state = 4346;
				this.match(StarRocksSqlParser.ARROW);
				this.state = 4347;
				this.expression(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4349;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 4350;
				this.match(StarRocksSqlParser.ROW);
				this.state = 4351;
				this.match(StarRocksSqlParser.ACCESS);
				this.state = 4352;
				this.match(StarRocksSqlParser.POLICY);
				this.state = 4355;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.IF) {
					{
					this.state = 4353;
					this.match(StarRocksSqlParser.IF);
					this.state = 4354;
					this.match(StarRocksSqlParser.EXISTS);
					}
				}

				this.state = 4357;
				_localctx._policyName = this.qualifiedName();
				this.state = 4358;
				this.match(StarRocksSqlParser.SET);
				this.state = 4359;
				this.match(StarRocksSqlParser.COMMENT);
				this.state = 4360;
				this.match(StarRocksSqlParser.EQ);
				this.state = 4361;
				this.string();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4363;
				this.match(StarRocksSqlParser.ALTER);
				this.state = 4364;
				this.match(StarRocksSqlParser.ROW);
				this.state = 4365;
				this.match(StarRocksSqlParser.ACCESS);
				this.state = 4366;
				this.match(StarRocksSqlParser.POLICY);
				this.state = 4369;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.IF) {
					{
					this.state = 4367;
					this.match(StarRocksSqlParser.IF);
					this.state = 4368;
					this.match(StarRocksSqlParser.EXISTS);
					}
				}

				this.state = 4371;
				_localctx._policyName = this.qualifiedName();
				this.state = 4372;
				this.match(StarRocksSqlParser.RENAME);
				this.state = 4373;
				this.match(StarRocksSqlParser.TO);
				this.state = 4374;
				_localctx._newPolicyName = this.identifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showRowAccessPolicyStatement(): ShowRowAccessPolicyStatementContext {
		let _localctx: ShowRowAccessPolicyStatementContext = new ShowRowAccessPolicyStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 530, StarRocksSqlParser.RULE_showRowAccessPolicyStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4378;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 4379;
			this.match(StarRocksSqlParser.ROW);
			this.state = 4380;
			this.match(StarRocksSqlParser.ACCESS);
			this.state = 4381;
			this.match(StarRocksSqlParser.POLICIES);
			this.state = 4384;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN) {
				{
				this.state = 4382;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4383;
				_localctx._db = this.qualifiedName();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showCreateRowAccessPolicyStatement(): ShowCreateRowAccessPolicyStatementContext {
		let _localctx: ShowCreateRowAccessPolicyStatementContext = new ShowCreateRowAccessPolicyStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 532, StarRocksSqlParser.RULE_showCreateRowAccessPolicyStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4386;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 4387;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 4388;
			this.match(StarRocksSqlParser.ROW);
			this.state = 4389;
			this.match(StarRocksSqlParser.ACCESS);
			this.state = 4390;
			this.match(StarRocksSqlParser.POLICY);
			this.state = 4391;
			_localctx._policyName = this.qualifiedName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public policySignature(): PolicySignatureContext {
		let _localctx: PolicySignatureContext = new PolicySignatureContext(this._ctx, this.state);
		this.enterRule(_localctx, 534, StarRocksSqlParser.RULE_policySignature);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4393;
			this.identifier();
			this.state = 4394;
			this.type();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public backupStatement(): BackupStatementContext {
		let _localctx: BackupStatementContext = new BackupStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 536, StarRocksSqlParser.RULE_backupStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4396;
			this.match(StarRocksSqlParser.BACKUP);
			this.state = 4397;
			this.match(StarRocksSqlParser.SNAPSHOT);
			this.state = 4398;
			this.qualifiedName();
			this.state = 4399;
			this.match(StarRocksSqlParser.TO);
			this.state = 4400;
			this.identifier();
			this.state = 4413;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.ON) {
				{
				this.state = 4401;
				this.match(StarRocksSqlParser.ON);
				this.state = 4402;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 4403;
				this.tableDesc();
				this.state = 4408;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 4404;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 4405;
					this.tableDesc();
					}
					}
					this.state = 4410;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4411;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
			}

			this.state = 4417;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PROPERTIES) {
				{
				this.state = 4415;
				this.match(StarRocksSqlParser.PROPERTIES);
				this.state = 4416;
				this.propertyList();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cancelBackupStatement(): CancelBackupStatementContext {
		let _localctx: CancelBackupStatementContext = new CancelBackupStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 538, StarRocksSqlParser.RULE_cancelBackupStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4419;
			this.match(StarRocksSqlParser.CANCEL);
			this.state = 4420;
			this.match(StarRocksSqlParser.BACKUP);
			this.state = 4423;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN) {
				{
				this.state = 4421;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4422;
				this.identifier();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showBackupStatement(): ShowBackupStatementContext {
		let _localctx: ShowBackupStatementContext = new ShowBackupStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 540, StarRocksSqlParser.RULE_showBackupStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4425;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 4426;
			this.match(StarRocksSqlParser.BACKUP);
			this.state = 4429;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN) {
				{
				this.state = 4427;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4428;
				this.identifier();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public restoreStatement(): RestoreStatementContext {
		let _localctx: RestoreStatementContext = new RestoreStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 542, StarRocksSqlParser.RULE_restoreStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4431;
			this.match(StarRocksSqlParser.RESTORE);
			this.state = 4432;
			this.match(StarRocksSqlParser.SNAPSHOT);
			this.state = 4433;
			this.qualifiedName();
			this.state = 4434;
			this.match(StarRocksSqlParser.FROM);
			this.state = 4435;
			this.identifier();
			this.state = 4448;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.ON) {
				{
				this.state = 4436;
				this.match(StarRocksSqlParser.ON);
				this.state = 4437;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 4438;
				this.restoreTableDesc();
				this.state = 4443;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 4439;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 4440;
					this.restoreTableDesc();
					}
					}
					this.state = 4445;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4446;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
			}

			this.state = 4452;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PROPERTIES) {
				{
				this.state = 4450;
				this.match(StarRocksSqlParser.PROPERTIES);
				this.state = 4451;
				this.propertyList();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cancelRestoreStatement(): CancelRestoreStatementContext {
		let _localctx: CancelRestoreStatementContext = new CancelRestoreStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 544, StarRocksSqlParser.RULE_cancelRestoreStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4454;
			this.match(StarRocksSqlParser.CANCEL);
			this.state = 4455;
			this.match(StarRocksSqlParser.RESTORE);
			this.state = 4458;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN) {
				{
				this.state = 4456;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4457;
				this.identifier();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showRestoreStatement(): ShowRestoreStatementContext {
		let _localctx: ShowRestoreStatementContext = new ShowRestoreStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 546, StarRocksSqlParser.RULE_showRestoreStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4460;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 4461;
			this.match(StarRocksSqlParser.RESTORE);
			this.state = 4464;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN) {
				{
				this.state = 4462;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4463;
				this.identifier();
				}
			}

			this.state = 4468;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.WHERE) {
				{
				this.state = 4466;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 4467;
				_localctx._where = this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showSnapshotStatement(): ShowSnapshotStatementContext {
		let _localctx: ShowSnapshotStatementContext = new ShowSnapshotStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 548, StarRocksSqlParser.RULE_showSnapshotStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4470;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 4471;
			this.match(StarRocksSqlParser.SNAPSHOT);
			this.state = 4472;
			this.match(StarRocksSqlParser.ON);
			this.state = 4473;
			this.identifier();
			this.state = 4476;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.WHERE) {
				{
				this.state = 4474;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 4475;
				this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createRepositoryStatement(): CreateRepositoryStatementContext {
		let _localctx: CreateRepositoryStatementContext = new CreateRepositoryStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 550, StarRocksSqlParser.RULE_createRepositoryStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4478;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 4481;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.READ) {
				{
				this.state = 4479;
				this.match(StarRocksSqlParser.READ);
				this.state = 4480;
				this.match(StarRocksSqlParser.ONLY);
				}
			}

			this.state = 4483;
			this.match(StarRocksSqlParser.REPOSITORY);
			this.state = 4484;
			_localctx._repoName = this.identifier();
			this.state = 4485;
			this.match(StarRocksSqlParser.WITH);
			this.state = 4486;
			this.match(StarRocksSqlParser.BROKER);
			this.state = 4488;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << StarRocksSqlParser.ACTIVE) | (1 << StarRocksSqlParser.ADMIN) | (1 << StarRocksSqlParser.AFTER) | (1 << StarRocksSqlParser.AGGREGATE) | (1 << StarRocksSqlParser.ANTI) | (1 << StarRocksSqlParser.ASYNC) | (1 << StarRocksSqlParser.AUTHORS) | (1 << StarRocksSqlParser.AUTHENTICATION) | (1 << StarRocksSqlParser.AUTO_INCREMENT) | (1 << StarRocksSqlParser.AVG) | (1 << StarRocksSqlParser.BACKEND) | (1 << StarRocksSqlParser.BACKENDS) | (1 << StarRocksSqlParser.BACKUP) | (1 << StarRocksSqlParser.BEGIN))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (StarRocksSqlParser.BITMAP_UNION - 32)) | (1 << (StarRocksSqlParser.BLACKLIST - 32)) | (1 << (StarRocksSqlParser.BOOLEAN - 32)) | (1 << (StarRocksSqlParser.BROKER - 32)) | (1 << (StarRocksSqlParser.BUCKETS - 32)) | (1 << (StarRocksSqlParser.BUILTIN - 32)) | (1 << (StarRocksSqlParser.CANCEL - 32)) | (1 << (StarRocksSqlParser.CAST - 32)) | (1 << (StarRocksSqlParser.CATALOG - 32)) | (1 << (StarRocksSqlParser.CATALOGS - 32)) | (1 << (StarRocksSqlParser.CEIL - 32)) | (1 << (StarRocksSqlParser.CHAIN - 32)) | (1 << (StarRocksSqlParser.CHARSET - 32)) | (1 << (StarRocksSqlParser.CLEAN - 32)) | (1 << (StarRocksSqlParser.CLUSTER - 32)) | (1 << (StarRocksSqlParser.CLUSTERS - 32)) | (1 << (StarRocksSqlParser.COLLATION - 32)) | (1 << (StarRocksSqlParser.COLUMNS - 32)) | (1 << (StarRocksSqlParser.COMMENT - 32)) | (1 << (StarRocksSqlParser.COMMIT - 32)) | (1 << (StarRocksSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (StarRocksSqlParser.COMPUTE - 64)) | (1 << (StarRocksSqlParser.CONFIG - 64)) | (1 << (StarRocksSqlParser.CONNECTION - 64)) | (1 << (StarRocksSqlParser.CONSISTENT - 64)) | (1 << (StarRocksSqlParser.COSTS - 64)) | (1 << (StarRocksSqlParser.COUNT - 64)) | (1 << (StarRocksSqlParser.CUME_DIST - 64)) | (1 << (StarRocksSqlParser.CURRENT - 64)) | (1 << (StarRocksSqlParser.DATA - 64)) | (1 << (StarRocksSqlParser.DATE - 64)) | (1 << (StarRocksSqlParser.DATETIME - 64)) | (1 << (StarRocksSqlParser.DAY - 64)) | (1 << (StarRocksSqlParser.DECOMMISSION - 64)))) !== 0) || ((((_la - 102)) & ~0x1F) === 0 && ((1 << (_la - 102)) & ((1 << (StarRocksSqlParser.DISTRIBUTED - 102)) | (1 << (StarRocksSqlParser.DISTRIBUTION - 102)) | (1 << (StarRocksSqlParser.DUPLICATE - 102)) | (1 << (StarRocksSqlParser.DYNAMIC - 102)) | (1 << (StarRocksSqlParser.ENCLOSE - 102)) | (1 << (StarRocksSqlParser.END - 102)) | (1 << (StarRocksSqlParser.ENGINE - 102)) | (1 << (StarRocksSqlParser.ENGINES - 102)) | (1 << (StarRocksSqlParser.ERRORS - 102)) | (1 << (StarRocksSqlParser.ESCAPE - 102)) | (1 << (StarRocksSqlParser.EVENTS - 102)) | (1 << (StarRocksSqlParser.EXECUTE - 102)) | (1 << (StarRocksSqlParser.EXPORT - 102)) | (1 << (StarRocksSqlParser.EXTERNAL - 102)) | (1 << (StarRocksSqlParser.EXTRACT - 102)) | (1 << (StarRocksSqlParser.EVERY - 102)) | (1 << (StarRocksSqlParser.FIELDS - 102)) | (1 << (StarRocksSqlParser.FILE - 102)) | (1 << (StarRocksSqlParser.FILTER - 102)) | (1 << (StarRocksSqlParser.FIRST - 102)) | (1 << (StarRocksSqlParser.FLOOR - 102)))) !== 0) || ((((_la - 134)) & ~0x1F) === 0 && ((1 << (_la - 134)) & ((1 << (StarRocksSqlParser.FN - 134)) | (1 << (StarRocksSqlParser.FOLLOWING - 134)) | (1 << (StarRocksSqlParser.FOLLOWER - 134)) | (1 << (StarRocksSqlParser.FORMAT - 134)) | (1 << (StarRocksSqlParser.FREE - 134)) | (1 << (StarRocksSqlParser.FRONTEND - 134)) | (1 << (StarRocksSqlParser.FRONTENDS - 134)) | (1 << (StarRocksSqlParser.FUNCTIONS - 134)) | (1 << (StarRocksSqlParser.GLOBAL - 134)) | (1 << (StarRocksSqlParser.GRANTS - 134)) | (1 << (StarRocksSqlParser.HASH - 134)) | (1 << (StarRocksSqlParser.HELP - 134)) | (1 << (StarRocksSqlParser.HISTOGRAM - 134)) | (1 << (StarRocksSqlParser.HLL_UNION - 134)) | (1 << (StarRocksSqlParser.HOST - 134)) | (1 << (StarRocksSqlParser.HOUR - 134)) | (1 << (StarRocksSqlParser.HUB - 134)) | (1 << (StarRocksSqlParser.IDENTIFIED - 134)) | (1 << (StarRocksSqlParser.IMPERSONATE - 134)))) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & ((1 << (StarRocksSqlParser.IMAGE - 168)) | (1 << (StarRocksSqlParser.INACTIVE - 168)) | (1 << (StarRocksSqlParser.INCREMENTAL - 168)) | (1 << (StarRocksSqlParser.INDEXES - 168)) | (1 << (StarRocksSqlParser.INSTALL - 168)) | (1 << (StarRocksSqlParser.INTERMEDIATE - 168)) | (1 << (StarRocksSqlParser.INTERVAL - 168)) | (1 << (StarRocksSqlParser.OVERWRITE - 168)) | (1 << (StarRocksSqlParser.ISOLATION - 168)) | (1 << (StarRocksSqlParser.JOB - 168)) | (1 << (StarRocksSqlParser.LABEL - 168)) | (1 << (StarRocksSqlParser.LAST - 168)))) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & ((1 << (StarRocksSqlParser.LESS - 203)) | (1 << (StarRocksSqlParser.LEVEL - 203)) | (1 << (StarRocksSqlParser.LIST - 203)) | (1 << (StarRocksSqlParser.LOCAL - 203)) | (1 << (StarRocksSqlParser.LOCATION - 203)) | (1 << (StarRocksSqlParser.LOGICAL - 203)) | (1 << (StarRocksSqlParser.MANUAL - 203)) | (1 << (StarRocksSqlParser.MAP - 203)) | (1 << (StarRocksSqlParser.MATERIALIZED - 203)) | (1 << (StarRocksSqlParser.MAX - 203)) | (1 << (StarRocksSqlParser.MERGE - 203)) | (1 << (StarRocksSqlParser.MIN - 203)) | (1 << (StarRocksSqlParser.MINUTE - 203)) | (1 << (StarRocksSqlParser.MINUS - 203)) | (1 << (StarRocksSqlParser.META - 203)) | (1 << (StarRocksSqlParser.MODE - 203)) | (1 << (StarRocksSqlParser.MODIFY - 203)) | (1 << (StarRocksSqlParser.MONTH - 203)) | (1 << (StarRocksSqlParser.NAME - 203)) | (1 << (StarRocksSqlParser.NAMES - 203)) | (1 << (StarRocksSqlParser.NEGATIVE - 203)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (StarRocksSqlParser.NO - 235)) | (1 << (StarRocksSqlParser.NODE - 235)) | (1 << (StarRocksSqlParser.NODES - 235)) | (1 << (StarRocksSqlParser.NONE - 235)) | (1 << (StarRocksSqlParser.NULLS - 235)) | (1 << (StarRocksSqlParser.NUMBER - 235)) | (1 << (StarRocksSqlParser.NUMERIC - 235)) | (1 << (StarRocksSqlParser.OBSERVER - 235)) | (1 << (StarRocksSqlParser.OF - 235)) | (1 << (StarRocksSqlParser.OFFSET - 235)) | (1 << (StarRocksSqlParser.ONLY - 235)) | (1 << (StarRocksSqlParser.OPEN - 235)) | (1 << (StarRocksSqlParser.OPERATE - 235)) | (1 << (StarRocksSqlParser.OPTIMIZER - 235)) | (1 << (StarRocksSqlParser.OPTION - 235)) | (1 << (StarRocksSqlParser.PARTITIONS - 235)) | (1 << (StarRocksSqlParser.PASSWORD - 235)) | (1 << (StarRocksSqlParser.PATH - 235)) | (1 << (StarRocksSqlParser.PAUSE - 235)) | (1 << (StarRocksSqlParser.PENDING - 235)) | (1 << (StarRocksSqlParser.PERCENT_RANK - 235)) | (1 << (StarRocksSqlParser.PERCENTILE_UNION - 235)))) !== 0) || ((((_la - 267)) & ~0x1F) === 0 && ((1 << (_la - 267)) & ((1 << (StarRocksSqlParser.PLUGIN - 267)) | (1 << (StarRocksSqlParser.PLUGINS - 267)) | (1 << (StarRocksSqlParser.PRECEDING - 267)) | (1 << (StarRocksSqlParser.PRIVILEGES - 267)) | (1 << (StarRocksSqlParser.PROC - 267)) | (1 << (StarRocksSqlParser.PROCESSLIST - 267)) | (1 << (StarRocksSqlParser.PROFILE - 267)) | (1 << (StarRocksSqlParser.PROFILELIST - 267)) | (1 << (StarRocksSqlParser.PROPERTIES - 267)) | (1 << (StarRocksSqlParser.PROPERTY - 267)) | (1 << (StarRocksSqlParser.QUALIFY - 267)) | (1 << (StarRocksSqlParser.QUARTER - 267)) | (1 << (StarRocksSqlParser.QUERY - 267)) | (1 << (StarRocksSqlParser.QUEUE - 267)) | (1 << (StarRocksSqlParser.QUOTA - 267)) | (1 << (StarRocksSqlParser.RANDOM - 267)) | (1 << (StarRocksSqlParser.RANK - 267)) | (1 << (StarRocksSqlParser.RECOVER - 267)) | (1 << (StarRocksSqlParser.REFRESH - 267)) | (1 << (StarRocksSqlParser.REWRITE - 267)) | (1 << (StarRocksSqlParser.REMOVE - 267)) | (1 << (StarRocksSqlParser.REPAIR - 267)) | (1 << (StarRocksSqlParser.REPEATABLE - 267)))) !== 0) || ((((_la - 300)) & ~0x1F) === 0 && ((1 << (_la - 300)) & ((1 << (StarRocksSqlParser.REPLACE_IF_NOT_NULL - 300)) | (1 << (StarRocksSqlParser.REPLICA - 300)) | (1 << (StarRocksSqlParser.REPOSITORY - 300)) | (1 << (StarRocksSqlParser.REPOSITORIES - 300)) | (1 << (StarRocksSqlParser.RESOURCE - 300)) | (1 << (StarRocksSqlParser.RESOURCES - 300)) | (1 << (StarRocksSqlParser.RESTORE - 300)) | (1 << (StarRocksSqlParser.RESUME - 300)) | (1 << (StarRocksSqlParser.RETURNS - 300)) | (1 << (StarRocksSqlParser.REVERT - 300)) | (1 << (StarRocksSqlParser.ROLE - 300)) | (1 << (StarRocksSqlParser.ROLES - 300)) | (1 << (StarRocksSqlParser.ROLLBACK - 300)) | (1 << (StarRocksSqlParser.ROLLUP - 300)) | (1 << (StarRocksSqlParser.ROUTINE - 300)) | (1 << (StarRocksSqlParser.ROW - 300)) | (1 << (StarRocksSqlParser.SAMPLE - 300)) | (1 << (StarRocksSqlParser.SCHEDULER - 300)) | (1 << (StarRocksSqlParser.SECOND - 300)) | (1 << (StarRocksSqlParser.SEMI - 300)) | (1 << (StarRocksSqlParser.SERIALIZABLE - 300)) | (1 << (StarRocksSqlParser.SESSION - 300)))) !== 0) || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & ((1 << (StarRocksSqlParser.SETS - 332)) | (1 << (StarRocksSqlParser.SIGNED - 332)) | (1 << (StarRocksSqlParser.SKIP_HEADER - 332)) | (1 << (StarRocksSqlParser.SNAPSHOT - 332)) | (1 << (StarRocksSqlParser.SQLBLACKLIST - 332)) | (1 << (StarRocksSqlParser.START - 332)) | (1 << (StarRocksSqlParser.STATS - 332)) | (1 << (StarRocksSqlParser.STATUS - 332)) | (1 << (StarRocksSqlParser.STOP - 332)) | (1 << (StarRocksSqlParser.STORAGE - 332)) | (1 << (StarRocksSqlParser.STREAM - 332)) | (1 << (StarRocksSqlParser.STRING - 332)) | (1 << (StarRocksSqlParser.SUBMIT - 332)) | (1 << (StarRocksSqlParser.SUM - 332)) | (1 << (StarRocksSqlParser.SUSPEND - 332)) | (1 << (StarRocksSqlParser.SYNC - 332)) | (1 << (StarRocksSqlParser.SYSTEM_TIME - 332)) | (1 << (StarRocksSqlParser.SWAP - 332)) | (1 << (StarRocksSqlParser.STRUCT - 332)) | (1 << (StarRocksSqlParser.TABLES - 332)) | (1 << (StarRocksSqlParser.TABLET - 332)) | (1 << (StarRocksSqlParser.TASK - 332)) | (1 << (StarRocksSqlParser.TEMPORARY - 332)) | (1 << (StarRocksSqlParser.THAN - 332)))) !== 0) || ((((_la - 364)) & ~0x1F) === 0 && ((1 << (_la - 364)) & ((1 << (StarRocksSqlParser.TIME - 364)) | (1 << (StarRocksSqlParser.TIMESTAMP - 364)) | (1 << (StarRocksSqlParser.TIMESTAMPADD - 364)) | (1 << (StarRocksSqlParser.TIMESTAMPDIFF - 364)) | (1 << (StarRocksSqlParser.TRANSACTION - 364)) | (1 << (StarRocksSqlParser.TRACE - 364)) | (1 << (StarRocksSqlParser.TRIGGERS - 364)) | (1 << (StarRocksSqlParser.TRIM_SPACE - 364)) | (1 << (StarRocksSqlParser.TRUNCATE - 364)) | (1 << (StarRocksSqlParser.TYPE - 364)) | (1 << (StarRocksSqlParser.TYPES - 364)) | (1 << (StarRocksSqlParser.UNBOUNDED - 364)) | (1 << (StarRocksSqlParser.UNCOMMITTED - 364)) | (1 << (StarRocksSqlParser.UNINSTALL - 364)) | (1 << (StarRocksSqlParser.USAGE - 364)) | (1 << (StarRocksSqlParser.USER - 364)) | (1 << (StarRocksSqlParser.USERS - 364)) | (1 << (StarRocksSqlParser.VALUE - 364)) | (1 << (StarRocksSqlParser.VARIABLES - 364)))) !== 0) || ((((_la - 396)) & ~0x1F) === 0 && ((1 << (_la - 396)) & ((1 << (StarRocksSqlParser.VERBOSE - 396)) | (1 << (StarRocksSqlParser.VIEW - 396)) | (1 << (StarRocksSqlParser.VIEWS - 396)) | (1 << (StarRocksSqlParser.WAREHOUSE - 396)) | (1 << (StarRocksSqlParser.WAREHOUSES - 396)) | (1 << (StarRocksSqlParser.WARNINGS - 396)) | (1 << (StarRocksSqlParser.WEEK - 396)) | (1 << (StarRocksSqlParser.WHITELIST - 396)) | (1 << (StarRocksSqlParser.WORK - 396)) | (1 << (StarRocksSqlParser.WRITE - 396)) | (1 << (StarRocksSqlParser.YEAR - 396)) | (1 << (StarRocksSqlParser.LOCK - 396)) | (1 << (StarRocksSqlParser.UNLOCK - 396)) | (1 << (StarRocksSqlParser.LOW_PRIORITY - 396)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (StarRocksSqlParser.SINGLE_QUOTED_TEXT - 443)) | (1 << (StarRocksSqlParser.DOUBLE_QUOTED_TEXT - 443)) | (1 << (StarRocksSqlParser.LETTER_IDENTIFIER - 443)) | (1 << (StarRocksSqlParser.DIGIT_IDENTIFIER - 443)) | (1 << (StarRocksSqlParser.BACKQUOTED_IDENTIFIER - 443)) | (1 << (StarRocksSqlParser.DOTDOTDOT - 443)))) !== 0)) {
				{
				this.state = 4487;
				_localctx._brokerName = this.identifierOrString();
				}
			}

			this.state = 4490;
			this.match(StarRocksSqlParser.ON);
			this.state = 4491;
			this.match(StarRocksSqlParser.LOCATION);
			this.state = 4492;
			_localctx._location = this.string();
			this.state = 4495;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PROPERTIES) {
				{
				this.state = 4493;
				this.match(StarRocksSqlParser.PROPERTIES);
				this.state = 4494;
				this.propertyList();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropRepositoryStatement(): DropRepositoryStatementContext {
		let _localctx: DropRepositoryStatementContext = new DropRepositoryStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 552, StarRocksSqlParser.RULE_dropRepositoryStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4497;
			this.match(StarRocksSqlParser.DROP);
			this.state = 4498;
			this.match(StarRocksSqlParser.REPOSITORY);
			this.state = 4499;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public addSqlBlackListStatement(): AddSqlBlackListStatementContext {
		let _localctx: AddSqlBlackListStatementContext = new AddSqlBlackListStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 554, StarRocksSqlParser.RULE_addSqlBlackListStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4501;
			this.match(StarRocksSqlParser.ADD);
			this.state = 4502;
			this.match(StarRocksSqlParser.SQLBLACKLIST);
			this.state = 4503;
			this.string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public delSqlBlackListStatement(): DelSqlBlackListStatementContext {
		let _localctx: DelSqlBlackListStatementContext = new DelSqlBlackListStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 556, StarRocksSqlParser.RULE_delSqlBlackListStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4505;
			this.match(StarRocksSqlParser.DELETE);
			this.state = 4506;
			this.match(StarRocksSqlParser.SQLBLACKLIST);
			this.state = 4507;
			this.match(StarRocksSqlParser.INTEGER_VALUE);
			this.state = 4512;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 4508;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 4509;
				this.match(StarRocksSqlParser.INTEGER_VALUE);
				}
				}
				this.state = 4514;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showSqlBlackListStatement(): ShowSqlBlackListStatementContext {
		let _localctx: ShowSqlBlackListStatementContext = new ShowSqlBlackListStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 558, StarRocksSqlParser.RULE_showSqlBlackListStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4515;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 4516;
			this.match(StarRocksSqlParser.SQLBLACKLIST);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showWhiteListStatement(): ShowWhiteListStatementContext {
		let _localctx: ShowWhiteListStatementContext = new ShowWhiteListStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 560, StarRocksSqlParser.RULE_showWhiteListStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4518;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 4519;
			this.match(StarRocksSqlParser.WHITELIST);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public exportStatement(): ExportStatementContext {
		let _localctx: ExportStatementContext = new ExportStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 562, StarRocksSqlParser.RULE_exportStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4521;
			this.match(StarRocksSqlParser.EXPORT);
			this.state = 4522;
			this.match(StarRocksSqlParser.TABLE);
			this.state = 4523;
			this.tableDesc();
			this.state = 4525;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.LEFT_PAREN) {
				{
				this.state = 4524;
				this.columnAliases();
				}
			}

			this.state = 4527;
			this.match(StarRocksSqlParser.TO);
			this.state = 4528;
			this.string();
			this.state = 4530;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PROPERTIES) {
				{
				this.state = 4529;
				this.properties();
				}
			}

			this.state = 4533;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 470, this._ctx) ) {
			case 1:
				{
				this.state = 4532;
				this.brokerDesc();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cancelExportStatement(): CancelExportStatementContext {
		let _localctx: CancelExportStatementContext = new CancelExportStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 564, StarRocksSqlParser.RULE_cancelExportStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4535;
			this.match(StarRocksSqlParser.CANCEL);
			this.state = 4536;
			this.match(StarRocksSqlParser.EXPORT);
			this.state = 4539;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN) {
				{
				this.state = 4537;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4538;
				_localctx._catalog = this.qualifiedName();
				}
			}

			this.state = 4545;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.LIKE:
				{
				{
				this.state = 4541;
				this.match(StarRocksSqlParser.LIKE);
				this.state = 4542;
				_localctx._pattern = this.string();
				}
				}
				break;
			case StarRocksSqlParser.WHERE:
				{
				{
				this.state = 4543;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 4544;
				this.expression(0);
				}
				}
				break;
			case StarRocksSqlParser.EOF:
			case StarRocksSqlParser.ADD:
			case StarRocksSqlParser.ADMIN:
			case StarRocksSqlParser.ALTER:
			case StarRocksSqlParser.ANALYZE:
			case StarRocksSqlParser.BACKUP:
			case StarRocksSqlParser.BEGIN:
			case StarRocksSqlParser.CANCEL:
			case StarRocksSqlParser.COMMIT:
			case StarRocksSqlParser.CREATE:
			case StarRocksSqlParser.DELETE:
			case StarRocksSqlParser.DESC:
			case StarRocksSqlParser.DESCRIBE:
			case StarRocksSqlParser.DROP:
			case StarRocksSqlParser.EXECUTE:
			case StarRocksSqlParser.EXPLAIN:
			case StarRocksSqlParser.EXPORT:
			case StarRocksSqlParser.GRANT:
			case StarRocksSqlParser.HELP:
			case StarRocksSqlParser.INSTALL:
			case StarRocksSqlParser.INSERT:
			case StarRocksSqlParser.KILL:
			case StarRocksSqlParser.LOAD:
			case StarRocksSqlParser.PAUSE:
			case StarRocksSqlParser.RECOVER:
			case StarRocksSqlParser.REFRESH:
			case StarRocksSqlParser.RESTORE:
			case StarRocksSqlParser.RESUME:
			case StarRocksSqlParser.REVOKE:
			case StarRocksSqlParser.ROLLBACK:
			case StarRocksSqlParser.SELECT:
			case StarRocksSqlParser.SET:
			case StarRocksSqlParser.SHOW:
			case StarRocksSqlParser.START:
			case StarRocksSqlParser.STOP:
			case StarRocksSqlParser.SUBMIT:
			case StarRocksSqlParser.SUSPEND:
			case StarRocksSqlParser.SYNC:
			case StarRocksSqlParser.TRACE:
			case StarRocksSqlParser.TRUNCATE:
			case StarRocksSqlParser.UNINSTALL:
			case StarRocksSqlParser.UPDATE:
			case StarRocksSqlParser.USE:
			case StarRocksSqlParser.WITH:
			case StarRocksSqlParser.LOCK:
			case StarRocksSqlParser.UNLOCK:
			case StarRocksSqlParser.SEMICOLON:
			case StarRocksSqlParser.LEFT_PAREN:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showExportStatement(): ShowExportStatementContext {
		let _localctx: ShowExportStatementContext = new ShowExportStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 566, StarRocksSqlParser.RULE_showExportStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4547;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 4548;
			this.match(StarRocksSqlParser.EXPORT);
			this.state = 4551;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN) {
				{
				this.state = 4549;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4550;
				_localctx._catalog = this.qualifiedName();
				}
			}

			this.state = 4557;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.LIKE:
				{
				{
				this.state = 4553;
				this.match(StarRocksSqlParser.LIKE);
				this.state = 4554;
				_localctx._pattern = this.string();
				}
				}
				break;
			case StarRocksSqlParser.WHERE:
				{
				{
				this.state = 4555;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 4556;
				this.expression(0);
				}
				}
				break;
			case StarRocksSqlParser.EOF:
			case StarRocksSqlParser.ADD:
			case StarRocksSqlParser.ADMIN:
			case StarRocksSqlParser.ALTER:
			case StarRocksSqlParser.ANALYZE:
			case StarRocksSqlParser.BACKUP:
			case StarRocksSqlParser.BEGIN:
			case StarRocksSqlParser.CANCEL:
			case StarRocksSqlParser.COMMIT:
			case StarRocksSqlParser.CREATE:
			case StarRocksSqlParser.DELETE:
			case StarRocksSqlParser.DESC:
			case StarRocksSqlParser.DESCRIBE:
			case StarRocksSqlParser.DROP:
			case StarRocksSqlParser.EXECUTE:
			case StarRocksSqlParser.EXPLAIN:
			case StarRocksSqlParser.EXPORT:
			case StarRocksSqlParser.GRANT:
			case StarRocksSqlParser.HELP:
			case StarRocksSqlParser.INSTALL:
			case StarRocksSqlParser.INSERT:
			case StarRocksSqlParser.KILL:
			case StarRocksSqlParser.LIMIT:
			case StarRocksSqlParser.LOAD:
			case StarRocksSqlParser.ORDER:
			case StarRocksSqlParser.PAUSE:
			case StarRocksSqlParser.RECOVER:
			case StarRocksSqlParser.REFRESH:
			case StarRocksSqlParser.RESTORE:
			case StarRocksSqlParser.RESUME:
			case StarRocksSqlParser.REVOKE:
			case StarRocksSqlParser.ROLLBACK:
			case StarRocksSqlParser.SELECT:
			case StarRocksSqlParser.SET:
			case StarRocksSqlParser.SHOW:
			case StarRocksSqlParser.START:
			case StarRocksSqlParser.STOP:
			case StarRocksSqlParser.SUBMIT:
			case StarRocksSqlParser.SUSPEND:
			case StarRocksSqlParser.SYNC:
			case StarRocksSqlParser.TRACE:
			case StarRocksSqlParser.TRUNCATE:
			case StarRocksSqlParser.UNINSTALL:
			case StarRocksSqlParser.UPDATE:
			case StarRocksSqlParser.USE:
			case StarRocksSqlParser.WITH:
			case StarRocksSqlParser.LOCK:
			case StarRocksSqlParser.UNLOCK:
			case StarRocksSqlParser.SEMICOLON:
			case StarRocksSqlParser.LEFT_PAREN:
				break;
			default:
				break;
			}
			this.state = 4569;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.ORDER) {
				{
				this.state = 4559;
				this.match(StarRocksSqlParser.ORDER);
				this.state = 4560;
				this.match(StarRocksSqlParser.BY);
				this.state = 4561;
				this.sortItem();
				this.state = 4566;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 4562;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 4563;
					this.sortItem();
					}
					}
					this.state = 4568;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 4572;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.LIMIT) {
				{
				this.state = 4571;
				this.limitElement();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public installPluginStatement(): InstallPluginStatementContext {
		let _localctx: InstallPluginStatementContext = new InstallPluginStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 568, StarRocksSqlParser.RULE_installPluginStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4574;
			this.match(StarRocksSqlParser.INSTALL);
			this.state = 4575;
			this.match(StarRocksSqlParser.PLUGIN);
			this.state = 4576;
			this.match(StarRocksSqlParser.FROM);
			this.state = 4577;
			this.identifierOrString();
			this.state = 4579;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PROPERTIES) {
				{
				this.state = 4578;
				this.properties();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public uninstallPluginStatement(): UninstallPluginStatementContext {
		let _localctx: UninstallPluginStatementContext = new UninstallPluginStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 570, StarRocksSqlParser.RULE_uninstallPluginStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4581;
			this.match(StarRocksSqlParser.UNINSTALL);
			this.state = 4582;
			this.match(StarRocksSqlParser.PLUGIN);
			this.state = 4583;
			this.identifierOrString();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createFileStatement(): CreateFileStatementContext {
		let _localctx: CreateFileStatementContext = new CreateFileStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 572, StarRocksSqlParser.RULE_createFileStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4585;
			this.match(StarRocksSqlParser.CREATE);
			this.state = 4586;
			this.match(StarRocksSqlParser.FILE);
			this.state = 4587;
			this.string();
			this.state = 4590;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN) {
				{
				this.state = 4588;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4589;
				_localctx._catalog = this.qualifiedName();
				}
			}

			this.state = 4592;
			this.properties();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropFileStatement(): DropFileStatementContext {
		let _localctx: DropFileStatementContext = new DropFileStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 574, StarRocksSqlParser.RULE_dropFileStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4594;
			this.match(StarRocksSqlParser.DROP);
			this.state = 4595;
			this.match(StarRocksSqlParser.FILE);
			this.state = 4596;
			this.string();
			this.state = 4599;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN) {
				{
				this.state = 4597;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4598;
				_localctx._catalog = this.qualifiedName();
				}
			}

			this.state = 4601;
			this.properties();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showSmallFilesStatement(): ShowSmallFilesStatementContext {
		let _localctx: ShowSmallFilesStatementContext = new ShowSmallFilesStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 576, StarRocksSqlParser.RULE_showSmallFilesStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4603;
			this.match(StarRocksSqlParser.SHOW);
			this.state = 4604;
			this.match(StarRocksSqlParser.FILE);
			this.state = 4607;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN) {
				{
				this.state = 4605;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.FROM || _la === StarRocksSqlParser.IN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4606;
				_localctx._catalog = this.qualifiedName();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setStatement(): SetStatementContext {
		let _localctx: SetStatementContext = new SetStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 578, StarRocksSqlParser.RULE_setStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4609;
			this.match(StarRocksSqlParser.SET);
			this.state = 4610;
			this.setVar();
			this.state = 4615;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 4611;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 4612;
				this.setVar();
				}
				}
				this.state = 4617;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setVar(): SetVarContext {
		let _localctx: SetVarContext = new SetVarContext(this._ctx, this.state);
		this.enterRule(_localctx, 580, StarRocksSqlParser.RULE_setVar);
		let _la: number;
		try {
			this.state = 4683;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 492, this._ctx) ) {
			case 1:
				_localctx = new SetNamesContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4623;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case StarRocksSqlParser.CHAR:
					{
					this.state = 4618;
					this.match(StarRocksSqlParser.CHAR);
					this.state = 4619;
					this.match(StarRocksSqlParser.SET);
					}
					break;
				case StarRocksSqlParser.CHARSET:
					{
					this.state = 4620;
					this.match(StarRocksSqlParser.CHARSET);
					}
					break;
				case StarRocksSqlParser.CHARACTER:
					{
					this.state = 4621;
					this.match(StarRocksSqlParser.CHARACTER);
					this.state = 4622;
					this.match(StarRocksSqlParser.SET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4627;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case StarRocksSqlParser.ACTIVE:
				case StarRocksSqlParser.ADMIN:
				case StarRocksSqlParser.AFTER:
				case StarRocksSqlParser.AGGREGATE:
				case StarRocksSqlParser.ANTI:
				case StarRocksSqlParser.ASYNC:
				case StarRocksSqlParser.AUTHORS:
				case StarRocksSqlParser.AUTHENTICATION:
				case StarRocksSqlParser.AUTO_INCREMENT:
				case StarRocksSqlParser.AVG:
				case StarRocksSqlParser.BACKEND:
				case StarRocksSqlParser.BACKENDS:
				case StarRocksSqlParser.BACKUP:
				case StarRocksSqlParser.BEGIN:
				case StarRocksSqlParser.BITMAP_UNION:
				case StarRocksSqlParser.BLACKLIST:
				case StarRocksSqlParser.BOOLEAN:
				case StarRocksSqlParser.BROKER:
				case StarRocksSqlParser.BUCKETS:
				case StarRocksSqlParser.BUILTIN:
				case StarRocksSqlParser.CANCEL:
				case StarRocksSqlParser.CAST:
				case StarRocksSqlParser.CATALOG:
				case StarRocksSqlParser.CATALOGS:
				case StarRocksSqlParser.CEIL:
				case StarRocksSqlParser.CHAIN:
				case StarRocksSqlParser.CHARSET:
				case StarRocksSqlParser.CLEAN:
				case StarRocksSqlParser.CLUSTER:
				case StarRocksSqlParser.CLUSTERS:
				case StarRocksSqlParser.COLLATION:
				case StarRocksSqlParser.COLUMNS:
				case StarRocksSqlParser.COMMENT:
				case StarRocksSqlParser.COMMIT:
				case StarRocksSqlParser.COMMITTED:
				case StarRocksSqlParser.COMPUTE:
				case StarRocksSqlParser.CONFIG:
				case StarRocksSqlParser.CONNECTION:
				case StarRocksSqlParser.CONSISTENT:
				case StarRocksSqlParser.COSTS:
				case StarRocksSqlParser.COUNT:
				case StarRocksSqlParser.CUME_DIST:
				case StarRocksSqlParser.CURRENT:
				case StarRocksSqlParser.DATA:
				case StarRocksSqlParser.DATE:
				case StarRocksSqlParser.DATETIME:
				case StarRocksSqlParser.DAY:
				case StarRocksSqlParser.DECOMMISSION:
				case StarRocksSqlParser.DISTRIBUTED:
				case StarRocksSqlParser.DISTRIBUTION:
				case StarRocksSqlParser.DUPLICATE:
				case StarRocksSqlParser.DYNAMIC:
				case StarRocksSqlParser.ENCLOSE:
				case StarRocksSqlParser.END:
				case StarRocksSqlParser.ENGINE:
				case StarRocksSqlParser.ENGINES:
				case StarRocksSqlParser.ERRORS:
				case StarRocksSqlParser.ESCAPE:
				case StarRocksSqlParser.EVENTS:
				case StarRocksSqlParser.EXECUTE:
				case StarRocksSqlParser.EXPORT:
				case StarRocksSqlParser.EXTERNAL:
				case StarRocksSqlParser.EXTRACT:
				case StarRocksSqlParser.EVERY:
				case StarRocksSqlParser.FIELDS:
				case StarRocksSqlParser.FILE:
				case StarRocksSqlParser.FILTER:
				case StarRocksSqlParser.FIRST:
				case StarRocksSqlParser.FLOOR:
				case StarRocksSqlParser.FN:
				case StarRocksSqlParser.FOLLOWING:
				case StarRocksSqlParser.FOLLOWER:
				case StarRocksSqlParser.FORMAT:
				case StarRocksSqlParser.FREE:
				case StarRocksSqlParser.FRONTEND:
				case StarRocksSqlParser.FRONTENDS:
				case StarRocksSqlParser.FUNCTIONS:
				case StarRocksSqlParser.GLOBAL:
				case StarRocksSqlParser.GRANTS:
				case StarRocksSqlParser.HASH:
				case StarRocksSqlParser.HELP:
				case StarRocksSqlParser.HISTOGRAM:
				case StarRocksSqlParser.HLL_UNION:
				case StarRocksSqlParser.HOST:
				case StarRocksSqlParser.HOUR:
				case StarRocksSqlParser.HUB:
				case StarRocksSqlParser.IDENTIFIED:
				case StarRocksSqlParser.IMPERSONATE:
				case StarRocksSqlParser.IMAGE:
				case StarRocksSqlParser.INACTIVE:
				case StarRocksSqlParser.INCREMENTAL:
				case StarRocksSqlParser.INDEXES:
				case StarRocksSqlParser.INSTALL:
				case StarRocksSqlParser.INTERMEDIATE:
				case StarRocksSqlParser.INTERVAL:
				case StarRocksSqlParser.OVERWRITE:
				case StarRocksSqlParser.ISOLATION:
				case StarRocksSqlParser.JOB:
				case StarRocksSqlParser.LABEL:
				case StarRocksSqlParser.LAST:
				case StarRocksSqlParser.LESS:
				case StarRocksSqlParser.LEVEL:
				case StarRocksSqlParser.LIST:
				case StarRocksSqlParser.LOCAL:
				case StarRocksSqlParser.LOCATION:
				case StarRocksSqlParser.LOGICAL:
				case StarRocksSqlParser.MANUAL:
				case StarRocksSqlParser.MAP:
				case StarRocksSqlParser.MATERIALIZED:
				case StarRocksSqlParser.MAX:
				case StarRocksSqlParser.MERGE:
				case StarRocksSqlParser.MIN:
				case StarRocksSqlParser.MINUTE:
				case StarRocksSqlParser.MINUS:
				case StarRocksSqlParser.META:
				case StarRocksSqlParser.MODE:
				case StarRocksSqlParser.MODIFY:
				case StarRocksSqlParser.MONTH:
				case StarRocksSqlParser.NAME:
				case StarRocksSqlParser.NAMES:
				case StarRocksSqlParser.NEGATIVE:
				case StarRocksSqlParser.NO:
				case StarRocksSqlParser.NODE:
				case StarRocksSqlParser.NODES:
				case StarRocksSqlParser.NONE:
				case StarRocksSqlParser.NULLS:
				case StarRocksSqlParser.NUMBER:
				case StarRocksSqlParser.NUMERIC:
				case StarRocksSqlParser.OBSERVER:
				case StarRocksSqlParser.OF:
				case StarRocksSqlParser.OFFSET:
				case StarRocksSqlParser.ONLY:
				case StarRocksSqlParser.OPEN:
				case StarRocksSqlParser.OPERATE:
				case StarRocksSqlParser.OPTIMIZER:
				case StarRocksSqlParser.OPTION:
				case StarRocksSqlParser.PARTITIONS:
				case StarRocksSqlParser.PASSWORD:
				case StarRocksSqlParser.PATH:
				case StarRocksSqlParser.PAUSE:
				case StarRocksSqlParser.PENDING:
				case StarRocksSqlParser.PERCENT_RANK:
				case StarRocksSqlParser.PERCENTILE_UNION:
				case StarRocksSqlParser.PLUGIN:
				case StarRocksSqlParser.PLUGINS:
				case StarRocksSqlParser.PRECEDING:
				case StarRocksSqlParser.PRIVILEGES:
				case StarRocksSqlParser.PROC:
				case StarRocksSqlParser.PROCESSLIST:
				case StarRocksSqlParser.PROFILE:
				case StarRocksSqlParser.PROFILELIST:
				case StarRocksSqlParser.PROPERTIES:
				case StarRocksSqlParser.PROPERTY:
				case StarRocksSqlParser.QUALIFY:
				case StarRocksSqlParser.QUARTER:
				case StarRocksSqlParser.QUERY:
				case StarRocksSqlParser.QUEUE:
				case StarRocksSqlParser.QUOTA:
				case StarRocksSqlParser.RANDOM:
				case StarRocksSqlParser.RANK:
				case StarRocksSqlParser.RECOVER:
				case StarRocksSqlParser.REFRESH:
				case StarRocksSqlParser.REWRITE:
				case StarRocksSqlParser.REMOVE:
				case StarRocksSqlParser.REPAIR:
				case StarRocksSqlParser.REPEATABLE:
				case StarRocksSqlParser.REPLACE_IF_NOT_NULL:
				case StarRocksSqlParser.REPLICA:
				case StarRocksSqlParser.REPOSITORY:
				case StarRocksSqlParser.REPOSITORIES:
				case StarRocksSqlParser.RESOURCE:
				case StarRocksSqlParser.RESOURCES:
				case StarRocksSqlParser.RESTORE:
				case StarRocksSqlParser.RESUME:
				case StarRocksSqlParser.RETURNS:
				case StarRocksSqlParser.REVERT:
				case StarRocksSqlParser.ROLE:
				case StarRocksSqlParser.ROLES:
				case StarRocksSqlParser.ROLLBACK:
				case StarRocksSqlParser.ROLLUP:
				case StarRocksSqlParser.ROUTINE:
				case StarRocksSqlParser.ROW:
				case StarRocksSqlParser.SAMPLE:
				case StarRocksSqlParser.SCHEDULER:
				case StarRocksSqlParser.SECOND:
				case StarRocksSqlParser.SEMI:
				case StarRocksSqlParser.SERIALIZABLE:
				case StarRocksSqlParser.SESSION:
				case StarRocksSqlParser.SETS:
				case StarRocksSqlParser.SIGNED:
				case StarRocksSqlParser.SKIP_HEADER:
				case StarRocksSqlParser.SNAPSHOT:
				case StarRocksSqlParser.SQLBLACKLIST:
				case StarRocksSqlParser.START:
				case StarRocksSqlParser.STATS:
				case StarRocksSqlParser.STATUS:
				case StarRocksSqlParser.STOP:
				case StarRocksSqlParser.STORAGE:
				case StarRocksSqlParser.STREAM:
				case StarRocksSqlParser.STRING:
				case StarRocksSqlParser.SUBMIT:
				case StarRocksSqlParser.SUM:
				case StarRocksSqlParser.SUSPEND:
				case StarRocksSqlParser.SYNC:
				case StarRocksSqlParser.SYSTEM_TIME:
				case StarRocksSqlParser.SWAP:
				case StarRocksSqlParser.STRUCT:
				case StarRocksSqlParser.TABLES:
				case StarRocksSqlParser.TABLET:
				case StarRocksSqlParser.TASK:
				case StarRocksSqlParser.TEMPORARY:
				case StarRocksSqlParser.THAN:
				case StarRocksSqlParser.TIME:
				case StarRocksSqlParser.TIMESTAMP:
				case StarRocksSqlParser.TIMESTAMPADD:
				case StarRocksSqlParser.TIMESTAMPDIFF:
				case StarRocksSqlParser.TRANSACTION:
				case StarRocksSqlParser.TRACE:
				case StarRocksSqlParser.TRIGGERS:
				case StarRocksSqlParser.TRIM_SPACE:
				case StarRocksSqlParser.TRUNCATE:
				case StarRocksSqlParser.TYPE:
				case StarRocksSqlParser.TYPES:
				case StarRocksSqlParser.UNBOUNDED:
				case StarRocksSqlParser.UNCOMMITTED:
				case StarRocksSqlParser.UNINSTALL:
				case StarRocksSqlParser.USAGE:
				case StarRocksSqlParser.USER:
				case StarRocksSqlParser.USERS:
				case StarRocksSqlParser.VALUE:
				case StarRocksSqlParser.VARIABLES:
				case StarRocksSqlParser.VERBOSE:
				case StarRocksSqlParser.VIEW:
				case StarRocksSqlParser.VIEWS:
				case StarRocksSqlParser.WAREHOUSE:
				case StarRocksSqlParser.WAREHOUSES:
				case StarRocksSqlParser.WARNINGS:
				case StarRocksSqlParser.WEEK:
				case StarRocksSqlParser.WHITELIST:
				case StarRocksSqlParser.WORK:
				case StarRocksSqlParser.WRITE:
				case StarRocksSqlParser.YEAR:
				case StarRocksSqlParser.LOCK:
				case StarRocksSqlParser.UNLOCK:
				case StarRocksSqlParser.LOW_PRIORITY:
				case StarRocksSqlParser.SINGLE_QUOTED_TEXT:
				case StarRocksSqlParser.DOUBLE_QUOTED_TEXT:
				case StarRocksSqlParser.LETTER_IDENTIFIER:
				case StarRocksSqlParser.DIGIT_IDENTIFIER:
				case StarRocksSqlParser.BACKQUOTED_IDENTIFIER:
				case StarRocksSqlParser.DOTDOTDOT:
					{
					this.state = 4625;
					this.identifierOrString();
					}
					break;
				case StarRocksSqlParser.DEFAULT:
					{
					this.state = 4626;
					this.match(StarRocksSqlParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				_localctx = new SetNamesContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4629;
				this.match(StarRocksSqlParser.NAMES);
				this.state = 4632;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case StarRocksSqlParser.ACTIVE:
				case StarRocksSqlParser.ADMIN:
				case StarRocksSqlParser.AFTER:
				case StarRocksSqlParser.AGGREGATE:
				case StarRocksSqlParser.ANTI:
				case StarRocksSqlParser.ASYNC:
				case StarRocksSqlParser.AUTHORS:
				case StarRocksSqlParser.AUTHENTICATION:
				case StarRocksSqlParser.AUTO_INCREMENT:
				case StarRocksSqlParser.AVG:
				case StarRocksSqlParser.BACKEND:
				case StarRocksSqlParser.BACKENDS:
				case StarRocksSqlParser.BACKUP:
				case StarRocksSqlParser.BEGIN:
				case StarRocksSqlParser.BITMAP_UNION:
				case StarRocksSqlParser.BLACKLIST:
				case StarRocksSqlParser.BOOLEAN:
				case StarRocksSqlParser.BROKER:
				case StarRocksSqlParser.BUCKETS:
				case StarRocksSqlParser.BUILTIN:
				case StarRocksSqlParser.CANCEL:
				case StarRocksSqlParser.CAST:
				case StarRocksSqlParser.CATALOG:
				case StarRocksSqlParser.CATALOGS:
				case StarRocksSqlParser.CEIL:
				case StarRocksSqlParser.CHAIN:
				case StarRocksSqlParser.CHARSET:
				case StarRocksSqlParser.CLEAN:
				case StarRocksSqlParser.CLUSTER:
				case StarRocksSqlParser.CLUSTERS:
				case StarRocksSqlParser.COLLATION:
				case StarRocksSqlParser.COLUMNS:
				case StarRocksSqlParser.COMMENT:
				case StarRocksSqlParser.COMMIT:
				case StarRocksSqlParser.COMMITTED:
				case StarRocksSqlParser.COMPUTE:
				case StarRocksSqlParser.CONFIG:
				case StarRocksSqlParser.CONNECTION:
				case StarRocksSqlParser.CONSISTENT:
				case StarRocksSqlParser.COSTS:
				case StarRocksSqlParser.COUNT:
				case StarRocksSqlParser.CUME_DIST:
				case StarRocksSqlParser.CURRENT:
				case StarRocksSqlParser.DATA:
				case StarRocksSqlParser.DATE:
				case StarRocksSqlParser.DATETIME:
				case StarRocksSqlParser.DAY:
				case StarRocksSqlParser.DECOMMISSION:
				case StarRocksSqlParser.DISTRIBUTED:
				case StarRocksSqlParser.DISTRIBUTION:
				case StarRocksSqlParser.DUPLICATE:
				case StarRocksSqlParser.DYNAMIC:
				case StarRocksSqlParser.ENCLOSE:
				case StarRocksSqlParser.END:
				case StarRocksSqlParser.ENGINE:
				case StarRocksSqlParser.ENGINES:
				case StarRocksSqlParser.ERRORS:
				case StarRocksSqlParser.ESCAPE:
				case StarRocksSqlParser.EVENTS:
				case StarRocksSqlParser.EXECUTE:
				case StarRocksSqlParser.EXPORT:
				case StarRocksSqlParser.EXTERNAL:
				case StarRocksSqlParser.EXTRACT:
				case StarRocksSqlParser.EVERY:
				case StarRocksSqlParser.FIELDS:
				case StarRocksSqlParser.FILE:
				case StarRocksSqlParser.FILTER:
				case StarRocksSqlParser.FIRST:
				case StarRocksSqlParser.FLOOR:
				case StarRocksSqlParser.FN:
				case StarRocksSqlParser.FOLLOWING:
				case StarRocksSqlParser.FOLLOWER:
				case StarRocksSqlParser.FORMAT:
				case StarRocksSqlParser.FREE:
				case StarRocksSqlParser.FRONTEND:
				case StarRocksSqlParser.FRONTENDS:
				case StarRocksSqlParser.FUNCTIONS:
				case StarRocksSqlParser.GLOBAL:
				case StarRocksSqlParser.GRANTS:
				case StarRocksSqlParser.HASH:
				case StarRocksSqlParser.HELP:
				case StarRocksSqlParser.HISTOGRAM:
				case StarRocksSqlParser.HLL_UNION:
				case StarRocksSqlParser.HOST:
				case StarRocksSqlParser.HOUR:
				case StarRocksSqlParser.HUB:
				case StarRocksSqlParser.IDENTIFIED:
				case StarRocksSqlParser.IMPERSONATE:
				case StarRocksSqlParser.IMAGE:
				case StarRocksSqlParser.INACTIVE:
				case StarRocksSqlParser.INCREMENTAL:
				case StarRocksSqlParser.INDEXES:
				case StarRocksSqlParser.INSTALL:
				case StarRocksSqlParser.INTERMEDIATE:
				case StarRocksSqlParser.INTERVAL:
				case StarRocksSqlParser.OVERWRITE:
				case StarRocksSqlParser.ISOLATION:
				case StarRocksSqlParser.JOB:
				case StarRocksSqlParser.LABEL:
				case StarRocksSqlParser.LAST:
				case StarRocksSqlParser.LESS:
				case StarRocksSqlParser.LEVEL:
				case StarRocksSqlParser.LIST:
				case StarRocksSqlParser.LOCAL:
				case StarRocksSqlParser.LOCATION:
				case StarRocksSqlParser.LOGICAL:
				case StarRocksSqlParser.MANUAL:
				case StarRocksSqlParser.MAP:
				case StarRocksSqlParser.MATERIALIZED:
				case StarRocksSqlParser.MAX:
				case StarRocksSqlParser.MERGE:
				case StarRocksSqlParser.MIN:
				case StarRocksSqlParser.MINUTE:
				case StarRocksSqlParser.MINUS:
				case StarRocksSqlParser.META:
				case StarRocksSqlParser.MODE:
				case StarRocksSqlParser.MODIFY:
				case StarRocksSqlParser.MONTH:
				case StarRocksSqlParser.NAME:
				case StarRocksSqlParser.NAMES:
				case StarRocksSqlParser.NEGATIVE:
				case StarRocksSqlParser.NO:
				case StarRocksSqlParser.NODE:
				case StarRocksSqlParser.NODES:
				case StarRocksSqlParser.NONE:
				case StarRocksSqlParser.NULLS:
				case StarRocksSqlParser.NUMBER:
				case StarRocksSqlParser.NUMERIC:
				case StarRocksSqlParser.OBSERVER:
				case StarRocksSqlParser.OF:
				case StarRocksSqlParser.OFFSET:
				case StarRocksSqlParser.ONLY:
				case StarRocksSqlParser.OPEN:
				case StarRocksSqlParser.OPERATE:
				case StarRocksSqlParser.OPTIMIZER:
				case StarRocksSqlParser.OPTION:
				case StarRocksSqlParser.PARTITIONS:
				case StarRocksSqlParser.PASSWORD:
				case StarRocksSqlParser.PATH:
				case StarRocksSqlParser.PAUSE:
				case StarRocksSqlParser.PENDING:
				case StarRocksSqlParser.PERCENT_RANK:
				case StarRocksSqlParser.PERCENTILE_UNION:
				case StarRocksSqlParser.PLUGIN:
				case StarRocksSqlParser.PLUGINS:
				case StarRocksSqlParser.PRECEDING:
				case StarRocksSqlParser.PRIVILEGES:
				case StarRocksSqlParser.PROC:
				case StarRocksSqlParser.PROCESSLIST:
				case StarRocksSqlParser.PROFILE:
				case StarRocksSqlParser.PROFILELIST:
				case StarRocksSqlParser.PROPERTIES:
				case StarRocksSqlParser.PROPERTY:
				case StarRocksSqlParser.QUALIFY:
				case StarRocksSqlParser.QUARTER:
				case StarRocksSqlParser.QUERY:
				case StarRocksSqlParser.QUEUE:
				case StarRocksSqlParser.QUOTA:
				case StarRocksSqlParser.RANDOM:
				case StarRocksSqlParser.RANK:
				case StarRocksSqlParser.RECOVER:
				case StarRocksSqlParser.REFRESH:
				case StarRocksSqlParser.REWRITE:
				case StarRocksSqlParser.REMOVE:
				case StarRocksSqlParser.REPAIR:
				case StarRocksSqlParser.REPEATABLE:
				case StarRocksSqlParser.REPLACE_IF_NOT_NULL:
				case StarRocksSqlParser.REPLICA:
				case StarRocksSqlParser.REPOSITORY:
				case StarRocksSqlParser.REPOSITORIES:
				case StarRocksSqlParser.RESOURCE:
				case StarRocksSqlParser.RESOURCES:
				case StarRocksSqlParser.RESTORE:
				case StarRocksSqlParser.RESUME:
				case StarRocksSqlParser.RETURNS:
				case StarRocksSqlParser.REVERT:
				case StarRocksSqlParser.ROLE:
				case StarRocksSqlParser.ROLES:
				case StarRocksSqlParser.ROLLBACK:
				case StarRocksSqlParser.ROLLUP:
				case StarRocksSqlParser.ROUTINE:
				case StarRocksSqlParser.ROW:
				case StarRocksSqlParser.SAMPLE:
				case StarRocksSqlParser.SCHEDULER:
				case StarRocksSqlParser.SECOND:
				case StarRocksSqlParser.SEMI:
				case StarRocksSqlParser.SERIALIZABLE:
				case StarRocksSqlParser.SESSION:
				case StarRocksSqlParser.SETS:
				case StarRocksSqlParser.SIGNED:
				case StarRocksSqlParser.SKIP_HEADER:
				case StarRocksSqlParser.SNAPSHOT:
				case StarRocksSqlParser.SQLBLACKLIST:
				case StarRocksSqlParser.START:
				case StarRocksSqlParser.STATS:
				case StarRocksSqlParser.STATUS:
				case StarRocksSqlParser.STOP:
				case StarRocksSqlParser.STORAGE:
				case StarRocksSqlParser.STREAM:
				case StarRocksSqlParser.STRING:
				case StarRocksSqlParser.SUBMIT:
				case StarRocksSqlParser.SUM:
				case StarRocksSqlParser.SUSPEND:
				case StarRocksSqlParser.SYNC:
				case StarRocksSqlParser.SYSTEM_TIME:
				case StarRocksSqlParser.SWAP:
				case StarRocksSqlParser.STRUCT:
				case StarRocksSqlParser.TABLES:
				case StarRocksSqlParser.TABLET:
				case StarRocksSqlParser.TASK:
				case StarRocksSqlParser.TEMPORARY:
				case StarRocksSqlParser.THAN:
				case StarRocksSqlParser.TIME:
				case StarRocksSqlParser.TIMESTAMP:
				case StarRocksSqlParser.TIMESTAMPADD:
				case StarRocksSqlParser.TIMESTAMPDIFF:
				case StarRocksSqlParser.TRANSACTION:
				case StarRocksSqlParser.TRACE:
				case StarRocksSqlParser.TRIGGERS:
				case StarRocksSqlParser.TRIM_SPACE:
				case StarRocksSqlParser.TRUNCATE:
				case StarRocksSqlParser.TYPE:
				case StarRocksSqlParser.TYPES:
				case StarRocksSqlParser.UNBOUNDED:
				case StarRocksSqlParser.UNCOMMITTED:
				case StarRocksSqlParser.UNINSTALL:
				case StarRocksSqlParser.USAGE:
				case StarRocksSqlParser.USER:
				case StarRocksSqlParser.USERS:
				case StarRocksSqlParser.VALUE:
				case StarRocksSqlParser.VARIABLES:
				case StarRocksSqlParser.VERBOSE:
				case StarRocksSqlParser.VIEW:
				case StarRocksSqlParser.VIEWS:
				case StarRocksSqlParser.WAREHOUSE:
				case StarRocksSqlParser.WAREHOUSES:
				case StarRocksSqlParser.WARNINGS:
				case StarRocksSqlParser.WEEK:
				case StarRocksSqlParser.WHITELIST:
				case StarRocksSqlParser.WORK:
				case StarRocksSqlParser.WRITE:
				case StarRocksSqlParser.YEAR:
				case StarRocksSqlParser.LOCK:
				case StarRocksSqlParser.UNLOCK:
				case StarRocksSqlParser.LOW_PRIORITY:
				case StarRocksSqlParser.SINGLE_QUOTED_TEXT:
				case StarRocksSqlParser.DOUBLE_QUOTED_TEXT:
				case StarRocksSqlParser.LETTER_IDENTIFIER:
				case StarRocksSqlParser.DIGIT_IDENTIFIER:
				case StarRocksSqlParser.BACKQUOTED_IDENTIFIER:
				case StarRocksSqlParser.DOTDOTDOT:
					{
					this.state = 4630;
					(_localctx as SetNamesContext)._charset = this.identifierOrString();
					}
					break;
				case StarRocksSqlParser.DEFAULT:
					{
					this.state = 4631;
					this.match(StarRocksSqlParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4639;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.COLLATE) {
					{
					this.state = 4634;
					this.match(StarRocksSqlParser.COLLATE);
					this.state = 4637;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case StarRocksSqlParser.ACTIVE:
					case StarRocksSqlParser.ADMIN:
					case StarRocksSqlParser.AFTER:
					case StarRocksSqlParser.AGGREGATE:
					case StarRocksSqlParser.ANTI:
					case StarRocksSqlParser.ASYNC:
					case StarRocksSqlParser.AUTHORS:
					case StarRocksSqlParser.AUTHENTICATION:
					case StarRocksSqlParser.AUTO_INCREMENT:
					case StarRocksSqlParser.AVG:
					case StarRocksSqlParser.BACKEND:
					case StarRocksSqlParser.BACKENDS:
					case StarRocksSqlParser.BACKUP:
					case StarRocksSqlParser.BEGIN:
					case StarRocksSqlParser.BITMAP_UNION:
					case StarRocksSqlParser.BLACKLIST:
					case StarRocksSqlParser.BOOLEAN:
					case StarRocksSqlParser.BROKER:
					case StarRocksSqlParser.BUCKETS:
					case StarRocksSqlParser.BUILTIN:
					case StarRocksSqlParser.CANCEL:
					case StarRocksSqlParser.CAST:
					case StarRocksSqlParser.CATALOG:
					case StarRocksSqlParser.CATALOGS:
					case StarRocksSqlParser.CEIL:
					case StarRocksSqlParser.CHAIN:
					case StarRocksSqlParser.CHARSET:
					case StarRocksSqlParser.CLEAN:
					case StarRocksSqlParser.CLUSTER:
					case StarRocksSqlParser.CLUSTERS:
					case StarRocksSqlParser.COLLATION:
					case StarRocksSqlParser.COLUMNS:
					case StarRocksSqlParser.COMMENT:
					case StarRocksSqlParser.COMMIT:
					case StarRocksSqlParser.COMMITTED:
					case StarRocksSqlParser.COMPUTE:
					case StarRocksSqlParser.CONFIG:
					case StarRocksSqlParser.CONNECTION:
					case StarRocksSqlParser.CONSISTENT:
					case StarRocksSqlParser.COSTS:
					case StarRocksSqlParser.COUNT:
					case StarRocksSqlParser.CUME_DIST:
					case StarRocksSqlParser.CURRENT:
					case StarRocksSqlParser.DATA:
					case StarRocksSqlParser.DATE:
					case StarRocksSqlParser.DATETIME:
					case StarRocksSqlParser.DAY:
					case StarRocksSqlParser.DECOMMISSION:
					case StarRocksSqlParser.DISTRIBUTED:
					case StarRocksSqlParser.DISTRIBUTION:
					case StarRocksSqlParser.DUPLICATE:
					case StarRocksSqlParser.DYNAMIC:
					case StarRocksSqlParser.ENCLOSE:
					case StarRocksSqlParser.END:
					case StarRocksSqlParser.ENGINE:
					case StarRocksSqlParser.ENGINES:
					case StarRocksSqlParser.ERRORS:
					case StarRocksSqlParser.ESCAPE:
					case StarRocksSqlParser.EVENTS:
					case StarRocksSqlParser.EXECUTE:
					case StarRocksSqlParser.EXPORT:
					case StarRocksSqlParser.EXTERNAL:
					case StarRocksSqlParser.EXTRACT:
					case StarRocksSqlParser.EVERY:
					case StarRocksSqlParser.FIELDS:
					case StarRocksSqlParser.FILE:
					case StarRocksSqlParser.FILTER:
					case StarRocksSqlParser.FIRST:
					case StarRocksSqlParser.FLOOR:
					case StarRocksSqlParser.FN:
					case StarRocksSqlParser.FOLLOWING:
					case StarRocksSqlParser.FOLLOWER:
					case StarRocksSqlParser.FORMAT:
					case StarRocksSqlParser.FREE:
					case StarRocksSqlParser.FRONTEND:
					case StarRocksSqlParser.FRONTENDS:
					case StarRocksSqlParser.FUNCTIONS:
					case StarRocksSqlParser.GLOBAL:
					case StarRocksSqlParser.GRANTS:
					case StarRocksSqlParser.HASH:
					case StarRocksSqlParser.HELP:
					case StarRocksSqlParser.HISTOGRAM:
					case StarRocksSqlParser.HLL_UNION:
					case StarRocksSqlParser.HOST:
					case StarRocksSqlParser.HOUR:
					case StarRocksSqlParser.HUB:
					case StarRocksSqlParser.IDENTIFIED:
					case StarRocksSqlParser.IMPERSONATE:
					case StarRocksSqlParser.IMAGE:
					case StarRocksSqlParser.INACTIVE:
					case StarRocksSqlParser.INCREMENTAL:
					case StarRocksSqlParser.INDEXES:
					case StarRocksSqlParser.INSTALL:
					case StarRocksSqlParser.INTERMEDIATE:
					case StarRocksSqlParser.INTERVAL:
					case StarRocksSqlParser.OVERWRITE:
					case StarRocksSqlParser.ISOLATION:
					case StarRocksSqlParser.JOB:
					case StarRocksSqlParser.LABEL:
					case StarRocksSqlParser.LAST:
					case StarRocksSqlParser.LESS:
					case StarRocksSqlParser.LEVEL:
					case StarRocksSqlParser.LIST:
					case StarRocksSqlParser.LOCAL:
					case StarRocksSqlParser.LOCATION:
					case StarRocksSqlParser.LOGICAL:
					case StarRocksSqlParser.MANUAL:
					case StarRocksSqlParser.MAP:
					case StarRocksSqlParser.MATERIALIZED:
					case StarRocksSqlParser.MAX:
					case StarRocksSqlParser.MERGE:
					case StarRocksSqlParser.MIN:
					case StarRocksSqlParser.MINUTE:
					case StarRocksSqlParser.MINUS:
					case StarRocksSqlParser.META:
					case StarRocksSqlParser.MODE:
					case StarRocksSqlParser.MODIFY:
					case StarRocksSqlParser.MONTH:
					case StarRocksSqlParser.NAME:
					case StarRocksSqlParser.NAMES:
					case StarRocksSqlParser.NEGATIVE:
					case StarRocksSqlParser.NO:
					case StarRocksSqlParser.NODE:
					case StarRocksSqlParser.NODES:
					case StarRocksSqlParser.NONE:
					case StarRocksSqlParser.NULLS:
					case StarRocksSqlParser.NUMBER:
					case StarRocksSqlParser.NUMERIC:
					case StarRocksSqlParser.OBSERVER:
					case StarRocksSqlParser.OF:
					case StarRocksSqlParser.OFFSET:
					case StarRocksSqlParser.ONLY:
					case StarRocksSqlParser.OPEN:
					case StarRocksSqlParser.OPERATE:
					case StarRocksSqlParser.OPTIMIZER:
					case StarRocksSqlParser.OPTION:
					case StarRocksSqlParser.PARTITIONS:
					case StarRocksSqlParser.PASSWORD:
					case StarRocksSqlParser.PATH:
					case StarRocksSqlParser.PAUSE:
					case StarRocksSqlParser.PENDING:
					case StarRocksSqlParser.PERCENT_RANK:
					case StarRocksSqlParser.PERCENTILE_UNION:
					case StarRocksSqlParser.PLUGIN:
					case StarRocksSqlParser.PLUGINS:
					case StarRocksSqlParser.PRECEDING:
					case StarRocksSqlParser.PRIVILEGES:
					case StarRocksSqlParser.PROC:
					case StarRocksSqlParser.PROCESSLIST:
					case StarRocksSqlParser.PROFILE:
					case StarRocksSqlParser.PROFILELIST:
					case StarRocksSqlParser.PROPERTIES:
					case StarRocksSqlParser.PROPERTY:
					case StarRocksSqlParser.QUALIFY:
					case StarRocksSqlParser.QUARTER:
					case StarRocksSqlParser.QUERY:
					case StarRocksSqlParser.QUEUE:
					case StarRocksSqlParser.QUOTA:
					case StarRocksSqlParser.RANDOM:
					case StarRocksSqlParser.RANK:
					case StarRocksSqlParser.RECOVER:
					case StarRocksSqlParser.REFRESH:
					case StarRocksSqlParser.REWRITE:
					case StarRocksSqlParser.REMOVE:
					case StarRocksSqlParser.REPAIR:
					case StarRocksSqlParser.REPEATABLE:
					case StarRocksSqlParser.REPLACE_IF_NOT_NULL:
					case StarRocksSqlParser.REPLICA:
					case StarRocksSqlParser.REPOSITORY:
					case StarRocksSqlParser.REPOSITORIES:
					case StarRocksSqlParser.RESOURCE:
					case StarRocksSqlParser.RESOURCES:
					case StarRocksSqlParser.RESTORE:
					case StarRocksSqlParser.RESUME:
					case StarRocksSqlParser.RETURNS:
					case StarRocksSqlParser.REVERT:
					case StarRocksSqlParser.ROLE:
					case StarRocksSqlParser.ROLES:
					case StarRocksSqlParser.ROLLBACK:
					case StarRocksSqlParser.ROLLUP:
					case StarRocksSqlParser.ROUTINE:
					case StarRocksSqlParser.ROW:
					case StarRocksSqlParser.SAMPLE:
					case StarRocksSqlParser.SCHEDULER:
					case StarRocksSqlParser.SECOND:
					case StarRocksSqlParser.SEMI:
					case StarRocksSqlParser.SERIALIZABLE:
					case StarRocksSqlParser.SESSION:
					case StarRocksSqlParser.SETS:
					case StarRocksSqlParser.SIGNED:
					case StarRocksSqlParser.SKIP_HEADER:
					case StarRocksSqlParser.SNAPSHOT:
					case StarRocksSqlParser.SQLBLACKLIST:
					case StarRocksSqlParser.START:
					case StarRocksSqlParser.STATS:
					case StarRocksSqlParser.STATUS:
					case StarRocksSqlParser.STOP:
					case StarRocksSqlParser.STORAGE:
					case StarRocksSqlParser.STREAM:
					case StarRocksSqlParser.STRING:
					case StarRocksSqlParser.SUBMIT:
					case StarRocksSqlParser.SUM:
					case StarRocksSqlParser.SUSPEND:
					case StarRocksSqlParser.SYNC:
					case StarRocksSqlParser.SYSTEM_TIME:
					case StarRocksSqlParser.SWAP:
					case StarRocksSqlParser.STRUCT:
					case StarRocksSqlParser.TABLES:
					case StarRocksSqlParser.TABLET:
					case StarRocksSqlParser.TASK:
					case StarRocksSqlParser.TEMPORARY:
					case StarRocksSqlParser.THAN:
					case StarRocksSqlParser.TIME:
					case StarRocksSqlParser.TIMESTAMP:
					case StarRocksSqlParser.TIMESTAMPADD:
					case StarRocksSqlParser.TIMESTAMPDIFF:
					case StarRocksSqlParser.TRANSACTION:
					case StarRocksSqlParser.TRACE:
					case StarRocksSqlParser.TRIGGERS:
					case StarRocksSqlParser.TRIM_SPACE:
					case StarRocksSqlParser.TRUNCATE:
					case StarRocksSqlParser.TYPE:
					case StarRocksSqlParser.TYPES:
					case StarRocksSqlParser.UNBOUNDED:
					case StarRocksSqlParser.UNCOMMITTED:
					case StarRocksSqlParser.UNINSTALL:
					case StarRocksSqlParser.USAGE:
					case StarRocksSqlParser.USER:
					case StarRocksSqlParser.USERS:
					case StarRocksSqlParser.VALUE:
					case StarRocksSqlParser.VARIABLES:
					case StarRocksSqlParser.VERBOSE:
					case StarRocksSqlParser.VIEW:
					case StarRocksSqlParser.VIEWS:
					case StarRocksSqlParser.WAREHOUSE:
					case StarRocksSqlParser.WAREHOUSES:
					case StarRocksSqlParser.WARNINGS:
					case StarRocksSqlParser.WEEK:
					case StarRocksSqlParser.WHITELIST:
					case StarRocksSqlParser.WORK:
					case StarRocksSqlParser.WRITE:
					case StarRocksSqlParser.YEAR:
					case StarRocksSqlParser.LOCK:
					case StarRocksSqlParser.UNLOCK:
					case StarRocksSqlParser.LOW_PRIORITY:
					case StarRocksSqlParser.SINGLE_QUOTED_TEXT:
					case StarRocksSqlParser.DOUBLE_QUOTED_TEXT:
					case StarRocksSqlParser.LETTER_IDENTIFIER:
					case StarRocksSqlParser.DIGIT_IDENTIFIER:
					case StarRocksSqlParser.BACKQUOTED_IDENTIFIER:
					case StarRocksSqlParser.DOTDOTDOT:
						{
						this.state = 4635;
						(_localctx as SetNamesContext)._collate = this.identifierOrString();
						}
						break;
					case StarRocksSqlParser.DEFAULT:
						{
						this.state = 4636;
						this.match(StarRocksSqlParser.DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;

			case 3:
				_localctx = new SetPasswordContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4641;
				this.match(StarRocksSqlParser.PASSWORD);
				this.state = 4642;
				this.match(StarRocksSqlParser.EQ);
				this.state = 4649;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case StarRocksSqlParser.SINGLE_QUOTED_TEXT:
				case StarRocksSqlParser.DOUBLE_QUOTED_TEXT:
					{
					this.state = 4643;
					this.string();
					}
					break;
				case StarRocksSqlParser.PASSWORD:
					{
					this.state = 4644;
					this.match(StarRocksSqlParser.PASSWORD);
					this.state = 4645;
					this.match(StarRocksSqlParser.LEFT_PAREN);
					this.state = 4646;
					this.string();
					this.state = 4647;
					this.match(StarRocksSqlParser.RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 4:
				_localctx = new SetPasswordContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4651;
				this.match(StarRocksSqlParser.PASSWORD);
				this.state = 4652;
				this.match(StarRocksSqlParser.FOR);
				this.state = 4653;
				this.user();
				this.state = 4654;
				this.match(StarRocksSqlParser.EQ);
				this.state = 4661;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case StarRocksSqlParser.SINGLE_QUOTED_TEXT:
				case StarRocksSqlParser.DOUBLE_QUOTED_TEXT:
					{
					this.state = 4655;
					this.string();
					}
					break;
				case StarRocksSqlParser.PASSWORD:
					{
					this.state = 4656;
					this.match(StarRocksSqlParser.PASSWORD);
					this.state = 4657;
					this.match(StarRocksSqlParser.LEFT_PAREN);
					this.state = 4658;
					this.string();
					this.state = 4659;
					this.match(StarRocksSqlParser.RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 5:
				_localctx = new SetUserVarContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4663;
				this.userVariable();
				this.state = 4664;
				this.match(StarRocksSqlParser.EQ);
				this.state = 4665;
				this.expression(0);
				}
				break;

			case 6:
				_localctx = new SetSystemVarContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4668;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 490, this._ctx) ) {
				case 1:
					{
					this.state = 4667;
					this.varType();
					}
					break;
				}
				this.state = 4670;
				this.identifier();
				this.state = 4671;
				this.match(StarRocksSqlParser.EQ);
				this.state = 4672;
				this.setExprOrDefault();
				}
				break;

			case 7:
				_localctx = new SetSystemVarContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4674;
				this.systemVariable();
				this.state = 4675;
				this.match(StarRocksSqlParser.EQ);
				this.state = 4676;
				this.setExprOrDefault();
				}
				break;

			case 8:
				_localctx = new SetTransactionContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4679;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.GLOBAL || _la === StarRocksSqlParser.LOCAL || _la === StarRocksSqlParser.SESSION || _la === StarRocksSqlParser.VERBOSE) {
					{
					this.state = 4678;
					this.varType();
					}
				}

				this.state = 4681;
				this.match(StarRocksSqlParser.TRANSACTION);
				this.state = 4682;
				this.transaction_characteristics();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transaction_characteristics(): Transaction_characteristicsContext {
		let _localctx: Transaction_characteristicsContext = new Transaction_characteristicsContext(this._ctx, this.state);
		this.enterRule(_localctx, 582, StarRocksSqlParser.RULE_transaction_characteristics);
		try {
			this.state = 4695;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 493, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4685;
				this.transaction_access_mode();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4686;
				this.isolation_level();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4687;
				this.transaction_access_mode();
				this.state = 4688;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 4689;
				this.isolation_level();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4691;
				this.isolation_level();
				this.state = 4692;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 4693;
				this.transaction_access_mode();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transaction_access_mode(): Transaction_access_modeContext {
		let _localctx: Transaction_access_modeContext = new Transaction_access_modeContext(this._ctx, this.state);
		this.enterRule(_localctx, 584, StarRocksSqlParser.RULE_transaction_access_mode);
		try {
			this.state = 4701;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 494, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4697;
				this.match(StarRocksSqlParser.READ);
				this.state = 4698;
				this.match(StarRocksSqlParser.ONLY);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4699;
				this.match(StarRocksSqlParser.READ);
				this.state = 4700;
				this.match(StarRocksSqlParser.WRITE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public isolation_level(): Isolation_levelContext {
		let _localctx: Isolation_levelContext = new Isolation_levelContext(this._ctx, this.state);
		this.enterRule(_localctx, 586, StarRocksSqlParser.RULE_isolation_level);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4703;
			this.match(StarRocksSqlParser.ISOLATION);
			this.state = 4704;
			this.match(StarRocksSqlParser.LEVEL);
			this.state = 4705;
			this.isolation_types();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public isolation_types(): Isolation_typesContext {
		let _localctx: Isolation_typesContext = new Isolation_typesContext(this._ctx, this.state);
		this.enterRule(_localctx, 588, StarRocksSqlParser.RULE_isolation_types);
		try {
			this.state = 4714;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 495, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4707;
				this.match(StarRocksSqlParser.READ);
				this.state = 4708;
				this.match(StarRocksSqlParser.UNCOMMITTED);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4709;
				this.match(StarRocksSqlParser.READ);
				this.state = 4710;
				this.match(StarRocksSqlParser.COMMITTED);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4711;
				this.match(StarRocksSqlParser.REPEATABLE);
				this.state = 4712;
				this.match(StarRocksSqlParser.READ);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4713;
				this.match(StarRocksSqlParser.SERIALIZABLE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setExprOrDefault(): SetExprOrDefaultContext {
		let _localctx: SetExprOrDefaultContext = new SetExprOrDefaultContext(this._ctx, this.state);
		this.enterRule(_localctx, 590, StarRocksSqlParser.RULE_setExprOrDefault);
		try {
			this.state = 4720;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.DEFAULT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4716;
				this.match(StarRocksSqlParser.DEFAULT);
				}
				break;
			case StarRocksSqlParser.ON:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4717;
				this.match(StarRocksSqlParser.ON);
				}
				break;
			case StarRocksSqlParser.ALL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4718;
				this.match(StarRocksSqlParser.ALL);
				}
				break;
			case StarRocksSqlParser.ACTIVE:
			case StarRocksSqlParser.ADMIN:
			case StarRocksSqlParser.AFTER:
			case StarRocksSqlParser.AGGREGATE:
			case StarRocksSqlParser.ANTI:
			case StarRocksSqlParser.ARRAY:
			case StarRocksSqlParser.ARRAY_AGG:
			case StarRocksSqlParser.ASYNC:
			case StarRocksSqlParser.AUTHORS:
			case StarRocksSqlParser.AUTHENTICATION:
			case StarRocksSqlParser.AUTO_INCREMENT:
			case StarRocksSqlParser.AVG:
			case StarRocksSqlParser.BACKEND:
			case StarRocksSqlParser.BACKENDS:
			case StarRocksSqlParser.BACKUP:
			case StarRocksSqlParser.BEGIN:
			case StarRocksSqlParser.BITMAP_UNION:
			case StarRocksSqlParser.BLACKLIST:
			case StarRocksSqlParser.BOOLEAN:
			case StarRocksSqlParser.BROKER:
			case StarRocksSqlParser.BUCKETS:
			case StarRocksSqlParser.BUILTIN:
			case StarRocksSqlParser.CANCEL:
			case StarRocksSqlParser.CASE:
			case StarRocksSqlParser.CAST:
			case StarRocksSqlParser.CATALOG:
			case StarRocksSqlParser.CATALOGS:
			case StarRocksSqlParser.CEIL:
			case StarRocksSqlParser.CHAIN:
			case StarRocksSqlParser.CHAR:
			case StarRocksSqlParser.CHARSET:
			case StarRocksSqlParser.CLEAN:
			case StarRocksSqlParser.CLUSTER:
			case StarRocksSqlParser.CLUSTERS:
			case StarRocksSqlParser.COLLATION:
			case StarRocksSqlParser.COLUMNS:
			case StarRocksSqlParser.COMMENT:
			case StarRocksSqlParser.COMMIT:
			case StarRocksSqlParser.COMMITTED:
			case StarRocksSqlParser.COMPUTE:
			case StarRocksSqlParser.CONFIG:
			case StarRocksSqlParser.CONNECTION:
			case StarRocksSqlParser.CONSISTENT:
			case StarRocksSqlParser.CONVERT:
			case StarRocksSqlParser.COSTS:
			case StarRocksSqlParser.COUNT:
			case StarRocksSqlParser.CUME_DIST:
			case StarRocksSqlParser.CURRENT:
			case StarRocksSqlParser.CURRENT_DATE:
			case StarRocksSqlParser.CURRENT_ROLE:
			case StarRocksSqlParser.CURRENT_TIME:
			case StarRocksSqlParser.CURRENT_TIMESTAMP:
			case StarRocksSqlParser.CURRENT_USER:
			case StarRocksSqlParser.DATA:
			case StarRocksSqlParser.DATABASE:
			case StarRocksSqlParser.DATE:
			case StarRocksSqlParser.DATETIME:
			case StarRocksSqlParser.DAY:
			case StarRocksSqlParser.DECOMMISSION:
			case StarRocksSqlParser.DENSE_RANK:
			case StarRocksSqlParser.NTILE:
			case StarRocksSqlParser.DISTRIBUTED:
			case StarRocksSqlParser.DISTRIBUTION:
			case StarRocksSqlParser.DUPLICATE:
			case StarRocksSqlParser.DYNAMIC:
			case StarRocksSqlParser.ENCLOSE:
			case StarRocksSqlParser.END:
			case StarRocksSqlParser.ENGINE:
			case StarRocksSqlParser.ENGINES:
			case StarRocksSqlParser.ERRORS:
			case StarRocksSqlParser.ESCAPE:
			case StarRocksSqlParser.EVENTS:
			case StarRocksSqlParser.EXECUTE:
			case StarRocksSqlParser.EXISTS:
			case StarRocksSqlParser.EXPORT:
			case StarRocksSqlParser.EXTERNAL:
			case StarRocksSqlParser.EXTRACT:
			case StarRocksSqlParser.EVERY:
			case StarRocksSqlParser.FALSE:
			case StarRocksSqlParser.FIELDS:
			case StarRocksSqlParser.FILE:
			case StarRocksSqlParser.FILTER:
			case StarRocksSqlParser.FIRST:
			case StarRocksSqlParser.FIRST_VALUE:
			case StarRocksSqlParser.FLOOR:
			case StarRocksSqlParser.FN:
			case StarRocksSqlParser.FOLLOWING:
			case StarRocksSqlParser.FOLLOWER:
			case StarRocksSqlParser.FORMAT:
			case StarRocksSqlParser.FREE:
			case StarRocksSqlParser.FRONTEND:
			case StarRocksSqlParser.FRONTENDS:
			case StarRocksSqlParser.FUNCTIONS:
			case StarRocksSqlParser.GLOBAL:
			case StarRocksSqlParser.GRANTS:
			case StarRocksSqlParser.GROUPING:
			case StarRocksSqlParser.GROUPING_ID:
			case StarRocksSqlParser.HASH:
			case StarRocksSqlParser.HELP:
			case StarRocksSqlParser.HISTOGRAM:
			case StarRocksSqlParser.HLL_UNION:
			case StarRocksSqlParser.HOST:
			case StarRocksSqlParser.HOUR:
			case StarRocksSqlParser.HUB:
			case StarRocksSqlParser.IDENTIFIED:
			case StarRocksSqlParser.IF:
			case StarRocksSqlParser.IMPERSONATE:
			case StarRocksSqlParser.IMAGE:
			case StarRocksSqlParser.INACTIVE:
			case StarRocksSqlParser.INCREMENTAL:
			case StarRocksSqlParser.INDEXES:
			case StarRocksSqlParser.INSTALL:
			case StarRocksSqlParser.INTERMEDIATE:
			case StarRocksSqlParser.INTERVAL:
			case StarRocksSqlParser.OVERWRITE:
			case StarRocksSqlParser.ISOLATION:
			case StarRocksSqlParser.JOB:
			case StarRocksSqlParser.LABEL:
			case StarRocksSqlParser.LAG:
			case StarRocksSqlParser.LAST:
			case StarRocksSqlParser.LAST_VALUE:
			case StarRocksSqlParser.LEAD:
			case StarRocksSqlParser.LEFT:
			case StarRocksSqlParser.LESS:
			case StarRocksSqlParser.LEVEL:
			case StarRocksSqlParser.LIKE:
			case StarRocksSqlParser.LIST:
			case StarRocksSqlParser.LOCAL:
			case StarRocksSqlParser.LOCALTIME:
			case StarRocksSqlParser.LOCALTIMESTAMP:
			case StarRocksSqlParser.LOCATION:
			case StarRocksSqlParser.LOGICAL:
			case StarRocksSqlParser.MANUAL:
			case StarRocksSqlParser.MAP:
			case StarRocksSqlParser.MATERIALIZED:
			case StarRocksSqlParser.MAX:
			case StarRocksSqlParser.MERGE:
			case StarRocksSqlParser.MIN:
			case StarRocksSqlParser.MINUTE:
			case StarRocksSqlParser.MINUS:
			case StarRocksSqlParser.META:
			case StarRocksSqlParser.MOD:
			case StarRocksSqlParser.MODE:
			case StarRocksSqlParser.MODIFY:
			case StarRocksSqlParser.MONTH:
			case StarRocksSqlParser.NAME:
			case StarRocksSqlParser.NAMES:
			case StarRocksSqlParser.NEGATIVE:
			case StarRocksSqlParser.NO:
			case StarRocksSqlParser.NODE:
			case StarRocksSqlParser.NODES:
			case StarRocksSqlParser.NONE:
			case StarRocksSqlParser.NOT:
			case StarRocksSqlParser.NULL:
			case StarRocksSqlParser.NULLS:
			case StarRocksSqlParser.NUMBER:
			case StarRocksSqlParser.NUMERIC:
			case StarRocksSqlParser.OBSERVER:
			case StarRocksSqlParser.OF:
			case StarRocksSqlParser.OFFSET:
			case StarRocksSqlParser.ONLY:
			case StarRocksSqlParser.OPEN:
			case StarRocksSqlParser.OPERATE:
			case StarRocksSqlParser.OPTIMIZER:
			case StarRocksSqlParser.OPTION:
			case StarRocksSqlParser.PARTITIONS:
			case StarRocksSqlParser.PASSWORD:
			case StarRocksSqlParser.PATH:
			case StarRocksSqlParser.PAUSE:
			case StarRocksSqlParser.PENDING:
			case StarRocksSqlParser.PERCENT_RANK:
			case StarRocksSqlParser.PERCENTILE_UNION:
			case StarRocksSqlParser.PLUGIN:
			case StarRocksSqlParser.PLUGINS:
			case StarRocksSqlParser.PRECEDING:
			case StarRocksSqlParser.PRIVILEGES:
			case StarRocksSqlParser.PROC:
			case StarRocksSqlParser.PROCESSLIST:
			case StarRocksSqlParser.PROFILE:
			case StarRocksSqlParser.PROFILELIST:
			case StarRocksSqlParser.PROPERTIES:
			case StarRocksSqlParser.PROPERTY:
			case StarRocksSqlParser.QUALIFY:
			case StarRocksSqlParser.QUARTER:
			case StarRocksSqlParser.QUERY:
			case StarRocksSqlParser.QUEUE:
			case StarRocksSqlParser.QUOTA:
			case StarRocksSqlParser.RANDOM:
			case StarRocksSqlParser.RANK:
			case StarRocksSqlParser.RECOVER:
			case StarRocksSqlParser.REFRESH:
			case StarRocksSqlParser.REWRITE:
			case StarRocksSqlParser.REGEXP:
			case StarRocksSqlParser.REMOVE:
			case StarRocksSqlParser.REPAIR:
			case StarRocksSqlParser.REPEATABLE:
			case StarRocksSqlParser.REPLACE:
			case StarRocksSqlParser.REPLACE_IF_NOT_NULL:
			case StarRocksSqlParser.REPLICA:
			case StarRocksSqlParser.REPOSITORY:
			case StarRocksSqlParser.REPOSITORIES:
			case StarRocksSqlParser.RESOURCE:
			case StarRocksSqlParser.RESOURCES:
			case StarRocksSqlParser.RESTORE:
			case StarRocksSqlParser.RESUME:
			case StarRocksSqlParser.RETURNS:
			case StarRocksSqlParser.REVERT:
			case StarRocksSqlParser.RIGHT:
			case StarRocksSqlParser.RLIKE:
			case StarRocksSqlParser.ROLE:
			case StarRocksSqlParser.ROLES:
			case StarRocksSqlParser.ROLLBACK:
			case StarRocksSqlParser.ROLLUP:
			case StarRocksSqlParser.ROUTINE:
			case StarRocksSqlParser.ROW:
			case StarRocksSqlParser.ROW_NUMBER:
			case StarRocksSqlParser.SAMPLE:
			case StarRocksSqlParser.SCHEDULER:
			case StarRocksSqlParser.SCHEMA:
			case StarRocksSqlParser.SECOND:
			case StarRocksSqlParser.SEMI:
			case StarRocksSqlParser.SERIALIZABLE:
			case StarRocksSqlParser.SESSION:
			case StarRocksSqlParser.SETS:
			case StarRocksSqlParser.SIGNED:
			case StarRocksSqlParser.SKIP_HEADER:
			case StarRocksSqlParser.SNAPSHOT:
			case StarRocksSqlParser.SQLBLACKLIST:
			case StarRocksSqlParser.START:
			case StarRocksSqlParser.STATS:
			case StarRocksSqlParser.STATUS:
			case StarRocksSqlParser.STOP:
			case StarRocksSqlParser.STORAGE:
			case StarRocksSqlParser.STREAM:
			case StarRocksSqlParser.STRING:
			case StarRocksSqlParser.SUBMIT:
			case StarRocksSqlParser.SUM:
			case StarRocksSqlParser.SUSPEND:
			case StarRocksSqlParser.SYNC:
			case StarRocksSqlParser.SYSTEM_TIME:
			case StarRocksSqlParser.SWAP:
			case StarRocksSqlParser.STRUCT:
			case StarRocksSqlParser.TABLES:
			case StarRocksSqlParser.TABLET:
			case StarRocksSqlParser.TASK:
			case StarRocksSqlParser.TEMPORARY:
			case StarRocksSqlParser.THAN:
			case StarRocksSqlParser.TIME:
			case StarRocksSqlParser.TIMESTAMP:
			case StarRocksSqlParser.TIMESTAMPADD:
			case StarRocksSqlParser.TIMESTAMPDIFF:
			case StarRocksSqlParser.TRANSACTION:
			case StarRocksSqlParser.TRACE:
			case StarRocksSqlParser.TRIGGERS:
			case StarRocksSqlParser.TRIM_SPACE:
			case StarRocksSqlParser.TRUE:
			case StarRocksSqlParser.TRUNCATE:
			case StarRocksSqlParser.TYPE:
			case StarRocksSqlParser.TYPES:
			case StarRocksSqlParser.UNBOUNDED:
			case StarRocksSqlParser.UNCOMMITTED:
			case StarRocksSqlParser.UNINSTALL:
			case StarRocksSqlParser.USAGE:
			case StarRocksSqlParser.USER:
			case StarRocksSqlParser.USERS:
			case StarRocksSqlParser.VALUE:
			case StarRocksSqlParser.VARIABLES:
			case StarRocksSqlParser.VERBOSE:
			case StarRocksSqlParser.VIEW:
			case StarRocksSqlParser.VIEWS:
			case StarRocksSqlParser.WAREHOUSE:
			case StarRocksSqlParser.WAREHOUSES:
			case StarRocksSqlParser.WARNINGS:
			case StarRocksSqlParser.WEEK:
			case StarRocksSqlParser.WHITELIST:
			case StarRocksSqlParser.WORK:
			case StarRocksSqlParser.WRITE:
			case StarRocksSqlParser.YEAR:
			case StarRocksSqlParser.LOCK:
			case StarRocksSqlParser.UNLOCK:
			case StarRocksSqlParser.LOW_PRIORITY:
			case StarRocksSqlParser.PLUS_SYMBOL:
			case StarRocksSqlParser.MINUS_SYMBOL:
			case StarRocksSqlParser.LOGICAL_NOT:
			case StarRocksSqlParser.BITNOT:
			case StarRocksSqlParser.AT:
			case StarRocksSqlParser.INTEGER_VALUE:
			case StarRocksSqlParser.DECIMAL_VALUE:
			case StarRocksSqlParser.DOUBLE_VALUE:
			case StarRocksSqlParser.SINGLE_QUOTED_TEXT:
			case StarRocksSqlParser.DOUBLE_QUOTED_TEXT:
			case StarRocksSqlParser.BINARY_SINGLE_QUOTED_TEXT:
			case StarRocksSqlParser.BINARY_DOUBLE_QUOTED_TEXT:
			case StarRocksSqlParser.LETTER_IDENTIFIER:
			case StarRocksSqlParser.DIGIT_IDENTIFIER:
			case StarRocksSqlParser.BACKQUOTED_IDENTIFIER:
			case StarRocksSqlParser.LEFT_PAREN:
			case StarRocksSqlParser.LEFT_BRACKET:
			case StarRocksSqlParser.LEFT_BRACE:
			case StarRocksSqlParser.DOTDOTDOT:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4719;
				this.expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setUserPropertyStatement(): SetUserPropertyStatementContext {
		let _localctx: SetUserPropertyStatementContext = new SetUserPropertyStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 592, StarRocksSqlParser.RULE_setUserPropertyStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4722;
			this.match(StarRocksSqlParser.SET);
			this.state = 4723;
			this.match(StarRocksSqlParser.PROPERTY);
			this.state = 4726;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FOR) {
				{
				this.state = 4724;
				this.match(StarRocksSqlParser.FOR);
				this.state = 4725;
				this.string();
				}
			}

			this.state = 4728;
			this.userPropertyList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public roleList(): RoleListContext {
		let _localctx: RoleListContext = new RoleListContext(this._ctx, this.state);
		this.enterRule(_localctx, 594, StarRocksSqlParser.RULE_roleList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4730;
			this.identifierOrString();
			this.state = 4735;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 4731;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 4732;
				this.identifierOrString();
				}
				}
				this.state = 4737;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public executeScriptStatement(): ExecuteScriptStatementContext {
		let _localctx: ExecuteScriptStatementContext = new ExecuteScriptStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 596, StarRocksSqlParser.RULE_executeScriptStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4738;
			this.match(StarRocksSqlParser.ADMIN);
			this.state = 4739;
			this.match(StarRocksSqlParser.EXECUTE);
			this.state = 4740;
			this.match(StarRocksSqlParser.ON);
			this.state = 4741;
			_la = this._input.LA(1);
			if (!(_la === StarRocksSqlParser.FRONTEND || _la === StarRocksSqlParser.INTEGER_VALUE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4742;
			this.string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unsupportedStatement(): UnsupportedStatementContext {
		let _localctx: UnsupportedStatementContext = new UnsupportedStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 598, StarRocksSqlParser.RULE_unsupportedStatement);
		let _la: number;
		try {
			this.state = 4801;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.START:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4744;
				this.match(StarRocksSqlParser.START);
				this.state = 4745;
				this.match(StarRocksSqlParser.TRANSACTION);
				this.state = 4749;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 499, this._ctx) ) {
				case 1:
					{
					this.state = 4746;
					this.match(StarRocksSqlParser.WITH);
					this.state = 4747;
					this.match(StarRocksSqlParser.CONSISTENT);
					this.state = 4748;
					this.match(StarRocksSqlParser.SNAPSHOT);
					}
					break;
				}
				}
				break;
			case StarRocksSqlParser.BEGIN:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4751;
				this.match(StarRocksSqlParser.BEGIN);
				this.state = 4753;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.WORK) {
					{
					this.state = 4752;
					this.match(StarRocksSqlParser.WORK);
					}
				}

				}
				break;
			case StarRocksSqlParser.COMMIT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4755;
				this.match(StarRocksSqlParser.COMMIT);
				this.state = 4757;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.WORK) {
					{
					this.state = 4756;
					this.match(StarRocksSqlParser.WORK);
					}
				}

				this.state = 4764;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.AND) {
					{
					this.state = 4759;
					this.match(StarRocksSqlParser.AND);
					this.state = 4761;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === StarRocksSqlParser.NO) {
						{
						this.state = 4760;
						this.match(StarRocksSqlParser.NO);
						}
					}

					this.state = 4763;
					this.match(StarRocksSqlParser.CHAIN);
					}
				}

				this.state = 4770;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.NO || _la === StarRocksSqlParser.RELEASE) {
					{
					this.state = 4767;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === StarRocksSqlParser.NO) {
						{
						this.state = 4766;
						this.match(StarRocksSqlParser.NO);
						}
					}

					this.state = 4769;
					this.match(StarRocksSqlParser.RELEASE);
					}
				}

				}
				break;
			case StarRocksSqlParser.ROLLBACK:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4772;
				this.match(StarRocksSqlParser.ROLLBACK);
				this.state = 4774;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.WORK) {
					{
					this.state = 4773;
					this.match(StarRocksSqlParser.WORK);
					}
				}

				this.state = 4781;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.AND) {
					{
					this.state = 4776;
					this.match(StarRocksSqlParser.AND);
					this.state = 4778;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === StarRocksSqlParser.NO) {
						{
						this.state = 4777;
						this.match(StarRocksSqlParser.NO);
						}
					}

					this.state = 4780;
					this.match(StarRocksSqlParser.CHAIN);
					}
				}

				this.state = 4787;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.NO || _la === StarRocksSqlParser.RELEASE) {
					{
					this.state = 4784;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === StarRocksSqlParser.NO) {
						{
						this.state = 4783;
						this.match(StarRocksSqlParser.NO);
						}
					}

					this.state = 4786;
					this.match(StarRocksSqlParser.RELEASE);
					}
				}

				}
				break;
			case StarRocksSqlParser.LOCK:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4789;
				this.match(StarRocksSqlParser.LOCK);
				this.state = 4790;
				this.match(StarRocksSqlParser.TABLES);
				this.state = 4791;
				this.lock_item();
				this.state = 4796;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 4792;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 4793;
					this.lock_item();
					}
					}
					this.state = 4798;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case StarRocksSqlParser.UNLOCK:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4799;
				this.match(StarRocksSqlParser.UNLOCK);
				this.state = 4800;
				this.match(StarRocksSqlParser.TABLES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lock_item(): Lock_itemContext {
		let _localctx: Lock_itemContext = new Lock_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 600, StarRocksSqlParser.RULE_lock_item);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4803;
			this.identifier();
			this.state = 4808;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 514, this._ctx) ) {
			case 1:
				{
				this.state = 4805;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.AS) {
					{
					this.state = 4804;
					this.match(StarRocksSqlParser.AS);
					}
				}

				this.state = 4807;
				_localctx._alias = this.identifier();
				}
				break;
			}
			this.state = 4810;
			this.lock_type();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lock_type(): Lock_typeContext {
		let _localctx: Lock_typeContext = new Lock_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 602, StarRocksSqlParser.RULE_lock_type);
		let _la: number;
		try {
			this.state = 4820;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.READ:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4812;
				this.match(StarRocksSqlParser.READ);
				this.state = 4814;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.LOCAL) {
					{
					this.state = 4813;
					this.match(StarRocksSqlParser.LOCAL);
					}
				}

				}
				break;
			case StarRocksSqlParser.WRITE:
			case StarRocksSqlParser.LOW_PRIORITY:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4817;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.LOW_PRIORITY) {
					{
					this.state = 4816;
					this.match(StarRocksSqlParser.LOW_PRIORITY);
					}
				}

				this.state = 4819;
				this.match(StarRocksSqlParser.WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public queryStatement(): QueryStatementContext {
		let _localctx: QueryStatementContext = new QueryStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 604, StarRocksSqlParser.RULE_queryStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4824;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.DESC:
			case StarRocksSqlParser.DESCRIBE:
			case StarRocksSqlParser.EXPLAIN:
				{
				this.state = 4822;
				this.explainDesc();
				}
				break;
			case StarRocksSqlParser.TRACE:
				{
				this.state = 4823;
				this.optimizerTrace();
				}
				break;
			case StarRocksSqlParser.SELECT:
			case StarRocksSqlParser.WITH:
			case StarRocksSqlParser.LEFT_PAREN:
				break;
			default:
				break;
			}
			this.state = 4826;
			this.queryRelation();
			this.state = 4828;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.INTO) {
				{
				this.state = 4827;
				this.outfile();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public queryRelation(): QueryRelationContext {
		let _localctx: QueryRelationContext = new QueryRelationContext(this._ctx, this.state);
		this.enterRule(_localctx, 606, StarRocksSqlParser.RULE_queryRelation);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4831;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.WITH) {
				{
				this.state = 4830;
				this.withClause();
				}
			}

			this.state = 4833;
			this.queryNoWith();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public withClause(): WithClauseContext {
		let _localctx: WithClauseContext = new WithClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 608, StarRocksSqlParser.RULE_withClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4835;
			this.match(StarRocksSqlParser.WITH);
			this.state = 4836;
			this.commonTableExpression();
			this.state = 4841;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 4837;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 4838;
				this.commonTableExpression();
				}
				}
				this.state = 4843;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public queryNoWith(): QueryNoWithContext {
		let _localctx: QueryNoWithContext = new QueryNoWithContext(this._ctx, this.state);
		this.enterRule(_localctx, 610, StarRocksSqlParser.RULE_queryNoWith);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4844;
			this.queryPrimary(0);
			this.state = 4855;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.ORDER) {
				{
				this.state = 4845;
				this.match(StarRocksSqlParser.ORDER);
				this.state = 4846;
				this.match(StarRocksSqlParser.BY);
				this.state = 4847;
				this.sortItem();
				this.state = 4852;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 4848;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 4849;
					this.sortItem();
					}
					}
					this.state = 4854;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 4858;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.LIMIT) {
				{
				this.state = 4857;
				this.limitElement();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public temporalClause(): TemporalClauseContext {
		let _localctx: TemporalClauseContext = new TemporalClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 612, StarRocksSqlParser.RULE_temporalClause);
		try {
			this.state = 4886;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 525, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4860;
				this.match(StarRocksSqlParser.AS);
				this.state = 4861;
				this.match(StarRocksSqlParser.OF);
				this.state = 4862;
				this.expression(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4863;
				this.match(StarRocksSqlParser.FOR);
				this.state = 4864;
				this.match(StarRocksSqlParser.SYSTEM_TIME);
				this.state = 4865;
				this.match(StarRocksSqlParser.AS);
				this.state = 4866;
				this.match(StarRocksSqlParser.OF);
				this.state = 4867;
				this.match(StarRocksSqlParser.TIMESTAMP);
				this.state = 4868;
				this.string();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4869;
				this.match(StarRocksSqlParser.FOR);
				this.state = 4870;
				this.match(StarRocksSqlParser.SYSTEM_TIME);
				this.state = 4871;
				this.match(StarRocksSqlParser.BETWEEN);
				this.state = 4872;
				this.expression(0);
				this.state = 4873;
				this.match(StarRocksSqlParser.AND);
				this.state = 4874;
				this.expression(0);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4876;
				this.match(StarRocksSqlParser.FOR);
				this.state = 4877;
				this.match(StarRocksSqlParser.SYSTEM_TIME);
				this.state = 4878;
				this.match(StarRocksSqlParser.FROM);
				this.state = 4879;
				this.expression(0);
				this.state = 4880;
				this.match(StarRocksSqlParser.TO);
				this.state = 4881;
				this.expression(0);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4883;
				this.match(StarRocksSqlParser.FOR);
				this.state = 4884;
				this.match(StarRocksSqlParser.SYSTEM_TIME);
				this.state = 4885;
				this.match(StarRocksSqlParser.ALL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public queryPrimary(): QueryPrimaryContext;
	public queryPrimary(_p: number): QueryPrimaryContext;
	// @RuleVersion(0)
	public queryPrimary(_p?: number): QueryPrimaryContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: QueryPrimaryContext = new QueryPrimaryContext(this._ctx, _parentState);
		let _prevctx: QueryPrimaryContext = _localctx;
		let _startState: number = 614;
		this.enterRecursionRule(_localctx, 614, StarRocksSqlParser.RULE_queryPrimary, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4891;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.SELECT:
				{
				_localctx = new QueryPrimaryDefaultContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;

				this.state = 4889;
				this.querySpecification();
				}
				break;
			case StarRocksSqlParser.LEFT_PAREN:
				{
				_localctx = new QueryWithParenthesesContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 4890;
				this.subquery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 4907;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 530, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 4905;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 529, this._ctx) ) {
					case 1:
						{
						_localctx = new SetOperationContext(new QueryPrimaryContext(_parentctx, _parentState));
						(_localctx as SetOperationContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, StarRocksSqlParser.RULE_queryPrimary);
						this.state = 4893;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 4894;
						(_localctx as SetOperationContext)._operator = this.match(StarRocksSqlParser.INTERSECT);
						this.state = 4896;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === StarRocksSqlParser.ALL || _la === StarRocksSqlParser.DISTINCT) {
							{
							this.state = 4895;
							this.setQuantifier();
							}
						}

						this.state = 4898;
						(_localctx as SetOperationContext)._right = this.queryPrimary(3);
						}
						break;

					case 2:
						{
						_localctx = new SetOperationContext(new QueryPrimaryContext(_parentctx, _parentState));
						(_localctx as SetOperationContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, StarRocksSqlParser.RULE_queryPrimary);
						this.state = 4899;
						if (!(this.precpred(this._ctx, 1))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
						}
						this.state = 4900;
						(_localctx as SetOperationContext)._operator = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === StarRocksSqlParser.EXCEPT || _la === StarRocksSqlParser.MINUS || _la === StarRocksSqlParser.UNION)) {
							(_localctx as SetOperationContext)._operator = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 4902;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === StarRocksSqlParser.ALL || _la === StarRocksSqlParser.DISTINCT) {
							{
							this.state = 4901;
							this.setQuantifier();
							}
						}

						this.state = 4904;
						(_localctx as SetOperationContext)._right = this.queryPrimary(2);
						}
						break;
					}
					}
				}
				this.state = 4909;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 530, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subquery(): SubqueryContext {
		let _localctx: SubqueryContext = new SubqueryContext(this._ctx, this.state);
		this.enterRule(_localctx, 616, StarRocksSqlParser.RULE_subquery);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4910;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 4911;
			this.queryRelation();
			this.state = 4912;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rowConstructor(): RowConstructorContext {
		let _localctx: RowConstructorContext = new RowConstructorContext(this._ctx, this.state);
		this.enterRule(_localctx, 618, StarRocksSqlParser.RULE_rowConstructor);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4914;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 4915;
			this.expressionList();
			this.state = 4916;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sortItem(): SortItemContext {
		let _localctx: SortItemContext = new SortItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 620, StarRocksSqlParser.RULE_sortItem);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4918;
			this.expression(0);
			this.state = 4920;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 531, this._ctx) ) {
			case 1:
				{
				this.state = 4919;
				_localctx._ordering = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.ASC || _la === StarRocksSqlParser.DESC)) {
					_localctx._ordering = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			this.state = 4924;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.NULLS) {
				{
				this.state = 4922;
				this.match(StarRocksSqlParser.NULLS);
				this.state = 4923;
				_localctx._nullOrdering = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.FIRST || _la === StarRocksSqlParser.LAST)) {
					_localctx._nullOrdering = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public limitElement(): LimitElementContext {
		let _localctx: LimitElementContext = new LimitElementContext(this._ctx, this.state);
		this.enterRule(_localctx, 622, StarRocksSqlParser.RULE_limitElement);
		let _la: number;
		try {
			this.state = 4936;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 534, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4926;
				this.match(StarRocksSqlParser.LIMIT);
				this.state = 4927;
				_localctx._limit = this.match(StarRocksSqlParser.INTEGER_VALUE);
				this.state = 4930;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.OFFSET) {
					{
					this.state = 4928;
					this.match(StarRocksSqlParser.OFFSET);
					this.state = 4929;
					_localctx._offset = this.match(StarRocksSqlParser.INTEGER_VALUE);
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4932;
				this.match(StarRocksSqlParser.LIMIT);
				this.state = 4933;
				_localctx._offset = this.match(StarRocksSqlParser.INTEGER_VALUE);
				this.state = 4934;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 4935;
				_localctx._limit = this.match(StarRocksSqlParser.INTEGER_VALUE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public querySpecification(): QuerySpecificationContext {
		let _localctx: QuerySpecificationContext = new QuerySpecificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 624, StarRocksSqlParser.RULE_querySpecification);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4938;
			this.match(StarRocksSqlParser.SELECT);
			this.state = 4942;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.HENT_START) {
				{
				{
				this.state = 4939;
				this.setVarHint();
				}
				}
				this.state = 4944;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4946;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.ALL || _la === StarRocksSqlParser.DISTINCT) {
				{
				this.state = 4945;
				this.setQuantifier();
				}
			}

			this.state = 4948;
			this.selectItem();
			this.state = 4953;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 537, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4949;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 4950;
					this.selectItem();
					}
					}
				}
				this.state = 4955;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 537, this._ctx);
			}
			this.state = 4956;
			this.fromClause();
			{
			this.state = 4959;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 538, this._ctx) ) {
			case 1:
				{
				this.state = 4957;
				this.match(StarRocksSqlParser.WHERE);
				this.state = 4958;
				_localctx._where = this.expression(0);
				}
				break;
			}
			this.state = 4964;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 539, this._ctx) ) {
			case 1:
				{
				this.state = 4961;
				this.match(StarRocksSqlParser.GROUP);
				this.state = 4962;
				this.match(StarRocksSqlParser.BY);
				this.state = 4963;
				this.groupingElement();
				}
				break;
			}
			this.state = 4968;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 540, this._ctx) ) {
			case 1:
				{
				this.state = 4966;
				this.match(StarRocksSqlParser.HAVING);
				this.state = 4967;
				_localctx._having = this.expression(0);
				}
				break;
			}
			this.state = 4975;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 541, this._ctx) ) {
			case 1:
				{
				this.state = 4970;
				this.match(StarRocksSqlParser.QUALIFY);
				this.state = 4971;
				_localctx._qualifyFunction = this.selectItem();
				this.state = 4972;
				this.comparisonOperator();
				this.state = 4973;
				_localctx._limit = this.match(StarRocksSqlParser.INTEGER_VALUE);
				}
				break;
			}
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fromClause(): FromClauseContext {
		let _localctx: FromClauseContext = new FromClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 626, StarRocksSqlParser.RULE_fromClause);
		try {
			this.state = 4983;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 543, this._ctx) ) {
			case 1:
				_localctx = new FromContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4979;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 542, this._ctx) ) {
				case 1:
					{
					this.state = 4977;
					this.match(StarRocksSqlParser.FROM);
					this.state = 4978;
					this.relations();
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new DualContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4981;
				this.match(StarRocksSqlParser.FROM);
				this.state = 4982;
				this.match(StarRocksSqlParser.DUAL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public groupingElement(): GroupingElementContext {
		let _localctx: GroupingElementContext = new GroupingElementContext(this._ctx, this.state);
		this.enterRule(_localctx, 628, StarRocksSqlParser.RULE_groupingElement);
		let _la: number;
		try {
			this.state = 5011;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 547, this._ctx) ) {
			case 1:
				_localctx = new RollupContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4985;
				this.match(StarRocksSqlParser.ROLLUP);
				this.state = 4986;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 4988;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << StarRocksSqlParser.ACTIVE) | (1 << StarRocksSqlParser.ADMIN) | (1 << StarRocksSqlParser.AFTER) | (1 << StarRocksSqlParser.AGGREGATE) | (1 << StarRocksSqlParser.ANTI) | (1 << StarRocksSqlParser.ARRAY) | (1 << StarRocksSqlParser.ARRAY_AGG) | (1 << StarRocksSqlParser.ASYNC) | (1 << StarRocksSqlParser.AUTHORS) | (1 << StarRocksSqlParser.AUTHENTICATION) | (1 << StarRocksSqlParser.AUTO_INCREMENT) | (1 << StarRocksSqlParser.AVG) | (1 << StarRocksSqlParser.BACKEND) | (1 << StarRocksSqlParser.BACKENDS) | (1 << StarRocksSqlParser.BACKUP) | (1 << StarRocksSqlParser.BEGIN))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (StarRocksSqlParser.BITMAP_UNION - 32)) | (1 << (StarRocksSqlParser.BLACKLIST - 32)) | (1 << (StarRocksSqlParser.BOOLEAN - 32)) | (1 << (StarRocksSqlParser.BROKER - 32)) | (1 << (StarRocksSqlParser.BUCKETS - 32)) | (1 << (StarRocksSqlParser.BUILTIN - 32)) | (1 << (StarRocksSqlParser.CANCEL - 32)) | (1 << (StarRocksSqlParser.CASE - 32)) | (1 << (StarRocksSqlParser.CAST - 32)) | (1 << (StarRocksSqlParser.CATALOG - 32)) | (1 << (StarRocksSqlParser.CATALOGS - 32)) | (1 << (StarRocksSqlParser.CEIL - 32)) | (1 << (StarRocksSqlParser.CHAIN - 32)) | (1 << (StarRocksSqlParser.CHAR - 32)) | (1 << (StarRocksSqlParser.CHARSET - 32)) | (1 << (StarRocksSqlParser.CLEAN - 32)) | (1 << (StarRocksSqlParser.CLUSTER - 32)) | (1 << (StarRocksSqlParser.CLUSTERS - 32)) | (1 << (StarRocksSqlParser.COLLATION - 32)) | (1 << (StarRocksSqlParser.COLUMNS - 32)) | (1 << (StarRocksSqlParser.COMMENT - 32)) | (1 << (StarRocksSqlParser.COMMIT - 32)) | (1 << (StarRocksSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (StarRocksSqlParser.COMPUTE - 64)) | (1 << (StarRocksSqlParser.CONFIG - 64)) | (1 << (StarRocksSqlParser.CONNECTION - 64)) | (1 << (StarRocksSqlParser.CONSISTENT - 64)) | (1 << (StarRocksSqlParser.CONVERT - 64)) | (1 << (StarRocksSqlParser.COSTS - 64)) | (1 << (StarRocksSqlParser.COUNT - 64)) | (1 << (StarRocksSqlParser.CUME_DIST - 64)) | (1 << (StarRocksSqlParser.CURRENT - 64)) | (1 << (StarRocksSqlParser.CURRENT_DATE - 64)) | (1 << (StarRocksSqlParser.CURRENT_ROLE - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIME - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (StarRocksSqlParser.CURRENT_USER - 64)) | (1 << (StarRocksSqlParser.DATA - 64)) | (1 << (StarRocksSqlParser.DATABASE - 64)) | (1 << (StarRocksSqlParser.DATE - 64)) | (1 << (StarRocksSqlParser.DATETIME - 64)) | (1 << (StarRocksSqlParser.DAY - 64)) | (1 << (StarRocksSqlParser.DECOMMISSION - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (StarRocksSqlParser.DENSE_RANK - 96)) | (1 << (StarRocksSqlParser.NTILE - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTED - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTION - 96)) | (1 << (StarRocksSqlParser.DUPLICATE - 96)) | (1 << (StarRocksSqlParser.DYNAMIC - 96)) | (1 << (StarRocksSqlParser.ENCLOSE - 96)) | (1 << (StarRocksSqlParser.END - 96)) | (1 << (StarRocksSqlParser.ENGINE - 96)) | (1 << (StarRocksSqlParser.ENGINES - 96)) | (1 << (StarRocksSqlParser.ERRORS - 96)) | (1 << (StarRocksSqlParser.ESCAPE - 96)) | (1 << (StarRocksSqlParser.EVENTS - 96)) | (1 << (StarRocksSqlParser.EXECUTE - 96)) | (1 << (StarRocksSqlParser.EXISTS - 96)) | (1 << (StarRocksSqlParser.EXPORT - 96)) | (1 << (StarRocksSqlParser.EXTERNAL - 96)) | (1 << (StarRocksSqlParser.EXTRACT - 96)) | (1 << (StarRocksSqlParser.EVERY - 96)) | (1 << (StarRocksSqlParser.FALSE - 96)) | (1 << (StarRocksSqlParser.FIELDS - 96)) | (1 << (StarRocksSqlParser.FILE - 96)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (StarRocksSqlParser.FILTER - 129)) | (1 << (StarRocksSqlParser.FIRST - 129)) | (1 << (StarRocksSqlParser.FIRST_VALUE - 129)) | (1 << (StarRocksSqlParser.FLOOR - 129)) | (1 << (StarRocksSqlParser.FN - 129)) | (1 << (StarRocksSqlParser.FOLLOWING - 129)) | (1 << (StarRocksSqlParser.FOLLOWER - 129)) | (1 << (StarRocksSqlParser.FORMAT - 129)) | (1 << (StarRocksSqlParser.FREE - 129)) | (1 << (StarRocksSqlParser.FRONTEND - 129)) | (1 << (StarRocksSqlParser.FRONTENDS - 129)) | (1 << (StarRocksSqlParser.FUNCTIONS - 129)) | (1 << (StarRocksSqlParser.GLOBAL - 129)) | (1 << (StarRocksSqlParser.GRANTS - 129)) | (1 << (StarRocksSqlParser.GROUPING - 129)) | (1 << (StarRocksSqlParser.GROUPING_ID - 129)) | (1 << (StarRocksSqlParser.HASH - 129)) | (1 << (StarRocksSqlParser.HELP - 129)) | (1 << (StarRocksSqlParser.HISTOGRAM - 129)) | (1 << (StarRocksSqlParser.HLL_UNION - 129)) | (1 << (StarRocksSqlParser.HOST - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (StarRocksSqlParser.HOUR - 161)) | (1 << (StarRocksSqlParser.HUB - 161)) | (1 << (StarRocksSqlParser.IDENTIFIED - 161)) | (1 << (StarRocksSqlParser.IF - 161)) | (1 << (StarRocksSqlParser.IMPERSONATE - 161)) | (1 << (StarRocksSqlParser.IMAGE - 161)) | (1 << (StarRocksSqlParser.INACTIVE - 161)) | (1 << (StarRocksSqlParser.INCREMENTAL - 161)) | (1 << (StarRocksSqlParser.INDEXES - 161)) | (1 << (StarRocksSqlParser.INSTALL - 161)) | (1 << (StarRocksSqlParser.INTERMEDIATE - 161)) | (1 << (StarRocksSqlParser.INTERVAL - 161)) | (1 << (StarRocksSqlParser.OVERWRITE - 161)) | (1 << (StarRocksSqlParser.ISOLATION - 161)) | (1 << (StarRocksSqlParser.JOB - 161)))) !== 0) || ((((_la - 195)) & ~0x1F) === 0 && ((1 << (_la - 195)) & ((1 << (StarRocksSqlParser.LABEL - 195)) | (1 << (StarRocksSqlParser.LAG - 195)) | (1 << (StarRocksSqlParser.LAST - 195)) | (1 << (StarRocksSqlParser.LAST_VALUE - 195)) | (1 << (StarRocksSqlParser.LEAD - 195)) | (1 << (StarRocksSqlParser.LEFT - 195)) | (1 << (StarRocksSqlParser.LESS - 195)) | (1 << (StarRocksSqlParser.LEVEL - 195)) | (1 << (StarRocksSqlParser.LIKE - 195)) | (1 << (StarRocksSqlParser.LIST - 195)) | (1 << (StarRocksSqlParser.LOCAL - 195)) | (1 << (StarRocksSqlParser.LOCALTIME - 195)) | (1 << (StarRocksSqlParser.LOCALTIMESTAMP - 195)) | (1 << (StarRocksSqlParser.LOCATION - 195)) | (1 << (StarRocksSqlParser.LOGICAL - 195)) | (1 << (StarRocksSqlParser.MANUAL - 195)) | (1 << (StarRocksSqlParser.MAP - 195)) | (1 << (StarRocksSqlParser.MATERIALIZED - 195)) | (1 << (StarRocksSqlParser.MAX - 195)) | (1 << (StarRocksSqlParser.MERGE - 195)) | (1 << (StarRocksSqlParser.MIN - 195)) | (1 << (StarRocksSqlParser.MINUTE - 195)) | (1 << (StarRocksSqlParser.MINUS - 195)))) !== 0) || ((((_la - 227)) & ~0x1F) === 0 && ((1 << (_la - 227)) & ((1 << (StarRocksSqlParser.META - 227)) | (1 << (StarRocksSqlParser.MOD - 227)) | (1 << (StarRocksSqlParser.MODE - 227)) | (1 << (StarRocksSqlParser.MODIFY - 227)) | (1 << (StarRocksSqlParser.MONTH - 227)) | (1 << (StarRocksSqlParser.NAME - 227)) | (1 << (StarRocksSqlParser.NAMES - 227)) | (1 << (StarRocksSqlParser.NEGATIVE - 227)) | (1 << (StarRocksSqlParser.NO - 227)) | (1 << (StarRocksSqlParser.NODE - 227)) | (1 << (StarRocksSqlParser.NODES - 227)) | (1 << (StarRocksSqlParser.NONE - 227)) | (1 << (StarRocksSqlParser.NOT - 227)) | (1 << (StarRocksSqlParser.NULL - 227)) | (1 << (StarRocksSqlParser.NULLS - 227)) | (1 << (StarRocksSqlParser.NUMBER - 227)) | (1 << (StarRocksSqlParser.NUMERIC - 227)) | (1 << (StarRocksSqlParser.OBSERVER - 227)) | (1 << (StarRocksSqlParser.OF - 227)) | (1 << (StarRocksSqlParser.OFFSET - 227)) | (1 << (StarRocksSqlParser.ONLY - 227)) | (1 << (StarRocksSqlParser.OPEN - 227)) | (1 << (StarRocksSqlParser.OPERATE - 227)) | (1 << (StarRocksSqlParser.OPTIMIZER - 227)) | (1 << (StarRocksSqlParser.OPTION - 227)))) !== 0) || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (StarRocksSqlParser.PARTITIONS - 259)) | (1 << (StarRocksSqlParser.PASSWORD - 259)) | (1 << (StarRocksSqlParser.PATH - 259)) | (1 << (StarRocksSqlParser.PAUSE - 259)) | (1 << (StarRocksSqlParser.PENDING - 259)) | (1 << (StarRocksSqlParser.PERCENT_RANK - 259)) | (1 << (StarRocksSqlParser.PERCENTILE_UNION - 259)) | (1 << (StarRocksSqlParser.PLUGIN - 259)) | (1 << (StarRocksSqlParser.PLUGINS - 259)) | (1 << (StarRocksSqlParser.PRECEDING - 259)) | (1 << (StarRocksSqlParser.PRIVILEGES - 259)) | (1 << (StarRocksSqlParser.PROC - 259)) | (1 << (StarRocksSqlParser.PROCESSLIST - 259)) | (1 << (StarRocksSqlParser.PROFILE - 259)) | (1 << (StarRocksSqlParser.PROFILELIST - 259)) | (1 << (StarRocksSqlParser.PROPERTIES - 259)) | (1 << (StarRocksSqlParser.PROPERTY - 259)) | (1 << (StarRocksSqlParser.QUALIFY - 259)) | (1 << (StarRocksSqlParser.QUARTER - 259)) | (1 << (StarRocksSqlParser.QUERY - 259)) | (1 << (StarRocksSqlParser.QUEUE - 259)) | (1 << (StarRocksSqlParser.QUOTA - 259)) | (1 << (StarRocksSqlParser.RANDOM - 259)) | (1 << (StarRocksSqlParser.RANK - 259)) | (1 << (StarRocksSqlParser.RECOVER - 259)))) !== 0) || ((((_la - 291)) & ~0x1F) === 0 && ((1 << (_la - 291)) & ((1 << (StarRocksSqlParser.REFRESH - 291)) | (1 << (StarRocksSqlParser.REWRITE - 291)) | (1 << (StarRocksSqlParser.REGEXP - 291)) | (1 << (StarRocksSqlParser.REMOVE - 291)) | (1 << (StarRocksSqlParser.REPAIR - 291)) | (1 << (StarRocksSqlParser.REPEATABLE - 291)) | (1 << (StarRocksSqlParser.REPLACE - 291)) | (1 << (StarRocksSqlParser.REPLACE_IF_NOT_NULL - 291)) | (1 << (StarRocksSqlParser.REPLICA - 291)) | (1 << (StarRocksSqlParser.REPOSITORY - 291)) | (1 << (StarRocksSqlParser.REPOSITORIES - 291)) | (1 << (StarRocksSqlParser.RESOURCE - 291)) | (1 << (StarRocksSqlParser.RESOURCES - 291)) | (1 << (StarRocksSqlParser.RESTORE - 291)) | (1 << (StarRocksSqlParser.RESUME - 291)) | (1 << (StarRocksSqlParser.RETURNS - 291)) | (1 << (StarRocksSqlParser.REVERT - 291)) | (1 << (StarRocksSqlParser.RIGHT - 291)) | (1 << (StarRocksSqlParser.RLIKE - 291)) | (1 << (StarRocksSqlParser.ROLE - 291)) | (1 << (StarRocksSqlParser.ROLES - 291)) | (1 << (StarRocksSqlParser.ROLLBACK - 291)) | (1 << (StarRocksSqlParser.ROLLUP - 291)) | (1 << (StarRocksSqlParser.ROUTINE - 291)) | (1 << (StarRocksSqlParser.ROW - 291)) | (1 << (StarRocksSqlParser.ROW_NUMBER - 291)) | (1 << (StarRocksSqlParser.SAMPLE - 291)) | (1 << (StarRocksSqlParser.SCHEDULER - 291)))) !== 0) || ((((_la - 323)) & ~0x1F) === 0 && ((1 << (_la - 323)) & ((1 << (StarRocksSqlParser.SCHEMA - 323)) | (1 << (StarRocksSqlParser.SECOND - 323)) | (1 << (StarRocksSqlParser.SEMI - 323)) | (1 << (StarRocksSqlParser.SERIALIZABLE - 323)) | (1 << (StarRocksSqlParser.SESSION - 323)) | (1 << (StarRocksSqlParser.SETS - 323)) | (1 << (StarRocksSqlParser.SIGNED - 323)) | (1 << (StarRocksSqlParser.SKIP_HEADER - 323)) | (1 << (StarRocksSqlParser.SNAPSHOT - 323)) | (1 << (StarRocksSqlParser.SQLBLACKLIST - 323)) | (1 << (StarRocksSqlParser.START - 323)) | (1 << (StarRocksSqlParser.STATS - 323)) | (1 << (StarRocksSqlParser.STATUS - 323)) | (1 << (StarRocksSqlParser.STOP - 323)) | (1 << (StarRocksSqlParser.STORAGE - 323)) | (1 << (StarRocksSqlParser.STREAM - 323)) | (1 << (StarRocksSqlParser.STRING - 323)) | (1 << (StarRocksSqlParser.SUBMIT - 323)) | (1 << (StarRocksSqlParser.SUM - 323)) | (1 << (StarRocksSqlParser.SUSPEND - 323)) | (1 << (StarRocksSqlParser.SYNC - 323)) | (1 << (StarRocksSqlParser.SYSTEM_TIME - 323)) | (1 << (StarRocksSqlParser.SWAP - 323)))) !== 0) || ((((_la - 355)) & ~0x1F) === 0 && ((1 << (_la - 355)) & ((1 << (StarRocksSqlParser.STRUCT - 355)) | (1 << (StarRocksSqlParser.TABLES - 355)) | (1 << (StarRocksSqlParser.TABLET - 355)) | (1 << (StarRocksSqlParser.TASK - 355)) | (1 << (StarRocksSqlParser.TEMPORARY - 355)) | (1 << (StarRocksSqlParser.THAN - 355)) | (1 << (StarRocksSqlParser.TIME - 355)) | (1 << (StarRocksSqlParser.TIMESTAMP - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPADD - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPDIFF - 355)) | (1 << (StarRocksSqlParser.TRANSACTION - 355)) | (1 << (StarRocksSqlParser.TRACE - 355)) | (1 << (StarRocksSqlParser.TRIGGERS - 355)) | (1 << (StarRocksSqlParser.TRIM_SPACE - 355)) | (1 << (StarRocksSqlParser.TRUE - 355)) | (1 << (StarRocksSqlParser.TRUNCATE - 355)) | (1 << (StarRocksSqlParser.TYPE - 355)) | (1 << (StarRocksSqlParser.TYPES - 355)) | (1 << (StarRocksSqlParser.UNBOUNDED - 355)) | (1 << (StarRocksSqlParser.UNCOMMITTED - 355)) | (1 << (StarRocksSqlParser.UNINSTALL - 355)) | (1 << (StarRocksSqlParser.USAGE - 355)))) !== 0) || ((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & ((1 << (StarRocksSqlParser.USER - 388)) | (1 << (StarRocksSqlParser.USERS - 388)) | (1 << (StarRocksSqlParser.VALUE - 388)) | (1 << (StarRocksSqlParser.VARIABLES - 388)) | (1 << (StarRocksSqlParser.VERBOSE - 388)) | (1 << (StarRocksSqlParser.VIEW - 388)) | (1 << (StarRocksSqlParser.VIEWS - 388)) | (1 << (StarRocksSqlParser.WAREHOUSE - 388)) | (1 << (StarRocksSqlParser.WAREHOUSES - 388)) | (1 << (StarRocksSqlParser.WARNINGS - 388)) | (1 << (StarRocksSqlParser.WEEK - 388)) | (1 << (StarRocksSqlParser.WHITELIST - 388)) | (1 << (StarRocksSqlParser.WORK - 388)) | (1 << (StarRocksSqlParser.WRITE - 388)) | (1 << (StarRocksSqlParser.YEAR - 388)) | (1 << (StarRocksSqlParser.LOCK - 388)) | (1 << (StarRocksSqlParser.UNLOCK - 388)) | (1 << (StarRocksSqlParser.LOW_PRIORITY - 388)))) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (StarRocksSqlParser.PLUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.MINUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.LOGICAL_NOT - 422)) | (1 << (StarRocksSqlParser.BITNOT - 422)) | (1 << (StarRocksSqlParser.AT - 422)) | (1 << (StarRocksSqlParser.INTEGER_VALUE - 422)) | (1 << (StarRocksSqlParser.DECIMAL_VALUE - 422)) | (1 << (StarRocksSqlParser.DOUBLE_VALUE - 422)) | (1 << (StarRocksSqlParser.SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.LETTER_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.DIGIT_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.BACKQUOTED_IDENTIFIER - 422)))) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & ((1 << (StarRocksSqlParser.LEFT_PAREN - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACKET - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACE - 456)) | (1 << (StarRocksSqlParser.DOTDOTDOT - 456)))) !== 0)) {
					{
					this.state = 4987;
					this.expressionList();
					}
				}

				this.state = 4990;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;

			case 2:
				_localctx = new CubeContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4991;
				this.match(StarRocksSqlParser.CUBE);
				this.state = 4992;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 4994;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << StarRocksSqlParser.ACTIVE) | (1 << StarRocksSqlParser.ADMIN) | (1 << StarRocksSqlParser.AFTER) | (1 << StarRocksSqlParser.AGGREGATE) | (1 << StarRocksSqlParser.ANTI) | (1 << StarRocksSqlParser.ARRAY) | (1 << StarRocksSqlParser.ARRAY_AGG) | (1 << StarRocksSqlParser.ASYNC) | (1 << StarRocksSqlParser.AUTHORS) | (1 << StarRocksSqlParser.AUTHENTICATION) | (1 << StarRocksSqlParser.AUTO_INCREMENT) | (1 << StarRocksSqlParser.AVG) | (1 << StarRocksSqlParser.BACKEND) | (1 << StarRocksSqlParser.BACKENDS) | (1 << StarRocksSqlParser.BACKUP) | (1 << StarRocksSqlParser.BEGIN))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (StarRocksSqlParser.BITMAP_UNION - 32)) | (1 << (StarRocksSqlParser.BLACKLIST - 32)) | (1 << (StarRocksSqlParser.BOOLEAN - 32)) | (1 << (StarRocksSqlParser.BROKER - 32)) | (1 << (StarRocksSqlParser.BUCKETS - 32)) | (1 << (StarRocksSqlParser.BUILTIN - 32)) | (1 << (StarRocksSqlParser.CANCEL - 32)) | (1 << (StarRocksSqlParser.CASE - 32)) | (1 << (StarRocksSqlParser.CAST - 32)) | (1 << (StarRocksSqlParser.CATALOG - 32)) | (1 << (StarRocksSqlParser.CATALOGS - 32)) | (1 << (StarRocksSqlParser.CEIL - 32)) | (1 << (StarRocksSqlParser.CHAIN - 32)) | (1 << (StarRocksSqlParser.CHAR - 32)) | (1 << (StarRocksSqlParser.CHARSET - 32)) | (1 << (StarRocksSqlParser.CLEAN - 32)) | (1 << (StarRocksSqlParser.CLUSTER - 32)) | (1 << (StarRocksSqlParser.CLUSTERS - 32)) | (1 << (StarRocksSqlParser.COLLATION - 32)) | (1 << (StarRocksSqlParser.COLUMNS - 32)) | (1 << (StarRocksSqlParser.COMMENT - 32)) | (1 << (StarRocksSqlParser.COMMIT - 32)) | (1 << (StarRocksSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (StarRocksSqlParser.COMPUTE - 64)) | (1 << (StarRocksSqlParser.CONFIG - 64)) | (1 << (StarRocksSqlParser.CONNECTION - 64)) | (1 << (StarRocksSqlParser.CONSISTENT - 64)) | (1 << (StarRocksSqlParser.CONVERT - 64)) | (1 << (StarRocksSqlParser.COSTS - 64)) | (1 << (StarRocksSqlParser.COUNT - 64)) | (1 << (StarRocksSqlParser.CUME_DIST - 64)) | (1 << (StarRocksSqlParser.CURRENT - 64)) | (1 << (StarRocksSqlParser.CURRENT_DATE - 64)) | (1 << (StarRocksSqlParser.CURRENT_ROLE - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIME - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (StarRocksSqlParser.CURRENT_USER - 64)) | (1 << (StarRocksSqlParser.DATA - 64)) | (1 << (StarRocksSqlParser.DATABASE - 64)) | (1 << (StarRocksSqlParser.DATE - 64)) | (1 << (StarRocksSqlParser.DATETIME - 64)) | (1 << (StarRocksSqlParser.DAY - 64)) | (1 << (StarRocksSqlParser.DECOMMISSION - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (StarRocksSqlParser.DENSE_RANK - 96)) | (1 << (StarRocksSqlParser.NTILE - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTED - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTION - 96)) | (1 << (StarRocksSqlParser.DUPLICATE - 96)) | (1 << (StarRocksSqlParser.DYNAMIC - 96)) | (1 << (StarRocksSqlParser.ENCLOSE - 96)) | (1 << (StarRocksSqlParser.END - 96)) | (1 << (StarRocksSqlParser.ENGINE - 96)) | (1 << (StarRocksSqlParser.ENGINES - 96)) | (1 << (StarRocksSqlParser.ERRORS - 96)) | (1 << (StarRocksSqlParser.ESCAPE - 96)) | (1 << (StarRocksSqlParser.EVENTS - 96)) | (1 << (StarRocksSqlParser.EXECUTE - 96)) | (1 << (StarRocksSqlParser.EXISTS - 96)) | (1 << (StarRocksSqlParser.EXPORT - 96)) | (1 << (StarRocksSqlParser.EXTERNAL - 96)) | (1 << (StarRocksSqlParser.EXTRACT - 96)) | (1 << (StarRocksSqlParser.EVERY - 96)) | (1 << (StarRocksSqlParser.FALSE - 96)) | (1 << (StarRocksSqlParser.FIELDS - 96)) | (1 << (StarRocksSqlParser.FILE - 96)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (StarRocksSqlParser.FILTER - 129)) | (1 << (StarRocksSqlParser.FIRST - 129)) | (1 << (StarRocksSqlParser.FIRST_VALUE - 129)) | (1 << (StarRocksSqlParser.FLOOR - 129)) | (1 << (StarRocksSqlParser.FN - 129)) | (1 << (StarRocksSqlParser.FOLLOWING - 129)) | (1 << (StarRocksSqlParser.FOLLOWER - 129)) | (1 << (StarRocksSqlParser.FORMAT - 129)) | (1 << (StarRocksSqlParser.FREE - 129)) | (1 << (StarRocksSqlParser.FRONTEND - 129)) | (1 << (StarRocksSqlParser.FRONTENDS - 129)) | (1 << (StarRocksSqlParser.FUNCTIONS - 129)) | (1 << (StarRocksSqlParser.GLOBAL - 129)) | (1 << (StarRocksSqlParser.GRANTS - 129)) | (1 << (StarRocksSqlParser.GROUPING - 129)) | (1 << (StarRocksSqlParser.GROUPING_ID - 129)) | (1 << (StarRocksSqlParser.HASH - 129)) | (1 << (StarRocksSqlParser.HELP - 129)) | (1 << (StarRocksSqlParser.HISTOGRAM - 129)) | (1 << (StarRocksSqlParser.HLL_UNION - 129)) | (1 << (StarRocksSqlParser.HOST - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (StarRocksSqlParser.HOUR - 161)) | (1 << (StarRocksSqlParser.HUB - 161)) | (1 << (StarRocksSqlParser.IDENTIFIED - 161)) | (1 << (StarRocksSqlParser.IF - 161)) | (1 << (StarRocksSqlParser.IMPERSONATE - 161)) | (1 << (StarRocksSqlParser.IMAGE - 161)) | (1 << (StarRocksSqlParser.INACTIVE - 161)) | (1 << (StarRocksSqlParser.INCREMENTAL - 161)) | (1 << (StarRocksSqlParser.INDEXES - 161)) | (1 << (StarRocksSqlParser.INSTALL - 161)) | (1 << (StarRocksSqlParser.INTERMEDIATE - 161)) | (1 << (StarRocksSqlParser.INTERVAL - 161)) | (1 << (StarRocksSqlParser.OVERWRITE - 161)) | (1 << (StarRocksSqlParser.ISOLATION - 161)) | (1 << (StarRocksSqlParser.JOB - 161)))) !== 0) || ((((_la - 195)) & ~0x1F) === 0 && ((1 << (_la - 195)) & ((1 << (StarRocksSqlParser.LABEL - 195)) | (1 << (StarRocksSqlParser.LAG - 195)) | (1 << (StarRocksSqlParser.LAST - 195)) | (1 << (StarRocksSqlParser.LAST_VALUE - 195)) | (1 << (StarRocksSqlParser.LEAD - 195)) | (1 << (StarRocksSqlParser.LEFT - 195)) | (1 << (StarRocksSqlParser.LESS - 195)) | (1 << (StarRocksSqlParser.LEVEL - 195)) | (1 << (StarRocksSqlParser.LIKE - 195)) | (1 << (StarRocksSqlParser.LIST - 195)) | (1 << (StarRocksSqlParser.LOCAL - 195)) | (1 << (StarRocksSqlParser.LOCALTIME - 195)) | (1 << (StarRocksSqlParser.LOCALTIMESTAMP - 195)) | (1 << (StarRocksSqlParser.LOCATION - 195)) | (1 << (StarRocksSqlParser.LOGICAL - 195)) | (1 << (StarRocksSqlParser.MANUAL - 195)) | (1 << (StarRocksSqlParser.MAP - 195)) | (1 << (StarRocksSqlParser.MATERIALIZED - 195)) | (1 << (StarRocksSqlParser.MAX - 195)) | (1 << (StarRocksSqlParser.MERGE - 195)) | (1 << (StarRocksSqlParser.MIN - 195)) | (1 << (StarRocksSqlParser.MINUTE - 195)) | (1 << (StarRocksSqlParser.MINUS - 195)))) !== 0) || ((((_la - 227)) & ~0x1F) === 0 && ((1 << (_la - 227)) & ((1 << (StarRocksSqlParser.META - 227)) | (1 << (StarRocksSqlParser.MOD - 227)) | (1 << (StarRocksSqlParser.MODE - 227)) | (1 << (StarRocksSqlParser.MODIFY - 227)) | (1 << (StarRocksSqlParser.MONTH - 227)) | (1 << (StarRocksSqlParser.NAME - 227)) | (1 << (StarRocksSqlParser.NAMES - 227)) | (1 << (StarRocksSqlParser.NEGATIVE - 227)) | (1 << (StarRocksSqlParser.NO - 227)) | (1 << (StarRocksSqlParser.NODE - 227)) | (1 << (StarRocksSqlParser.NODES - 227)) | (1 << (StarRocksSqlParser.NONE - 227)) | (1 << (StarRocksSqlParser.NOT - 227)) | (1 << (StarRocksSqlParser.NULL - 227)) | (1 << (StarRocksSqlParser.NULLS - 227)) | (1 << (StarRocksSqlParser.NUMBER - 227)) | (1 << (StarRocksSqlParser.NUMERIC - 227)) | (1 << (StarRocksSqlParser.OBSERVER - 227)) | (1 << (StarRocksSqlParser.OF - 227)) | (1 << (StarRocksSqlParser.OFFSET - 227)) | (1 << (StarRocksSqlParser.ONLY - 227)) | (1 << (StarRocksSqlParser.OPEN - 227)) | (1 << (StarRocksSqlParser.OPERATE - 227)) | (1 << (StarRocksSqlParser.OPTIMIZER - 227)) | (1 << (StarRocksSqlParser.OPTION - 227)))) !== 0) || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (StarRocksSqlParser.PARTITIONS - 259)) | (1 << (StarRocksSqlParser.PASSWORD - 259)) | (1 << (StarRocksSqlParser.PATH - 259)) | (1 << (StarRocksSqlParser.PAUSE - 259)) | (1 << (StarRocksSqlParser.PENDING - 259)) | (1 << (StarRocksSqlParser.PERCENT_RANK - 259)) | (1 << (StarRocksSqlParser.PERCENTILE_UNION - 259)) | (1 << (StarRocksSqlParser.PLUGIN - 259)) | (1 << (StarRocksSqlParser.PLUGINS - 259)) | (1 << (StarRocksSqlParser.PRECEDING - 259)) | (1 << (StarRocksSqlParser.PRIVILEGES - 259)) | (1 << (StarRocksSqlParser.PROC - 259)) | (1 << (StarRocksSqlParser.PROCESSLIST - 259)) | (1 << (StarRocksSqlParser.PROFILE - 259)) | (1 << (StarRocksSqlParser.PROFILELIST - 259)) | (1 << (StarRocksSqlParser.PROPERTIES - 259)) | (1 << (StarRocksSqlParser.PROPERTY - 259)) | (1 << (StarRocksSqlParser.QUALIFY - 259)) | (1 << (StarRocksSqlParser.QUARTER - 259)) | (1 << (StarRocksSqlParser.QUERY - 259)) | (1 << (StarRocksSqlParser.QUEUE - 259)) | (1 << (StarRocksSqlParser.QUOTA - 259)) | (1 << (StarRocksSqlParser.RANDOM - 259)) | (1 << (StarRocksSqlParser.RANK - 259)) | (1 << (StarRocksSqlParser.RECOVER - 259)))) !== 0) || ((((_la - 291)) & ~0x1F) === 0 && ((1 << (_la - 291)) & ((1 << (StarRocksSqlParser.REFRESH - 291)) | (1 << (StarRocksSqlParser.REWRITE - 291)) | (1 << (StarRocksSqlParser.REGEXP - 291)) | (1 << (StarRocksSqlParser.REMOVE - 291)) | (1 << (StarRocksSqlParser.REPAIR - 291)) | (1 << (StarRocksSqlParser.REPEATABLE - 291)) | (1 << (StarRocksSqlParser.REPLACE - 291)) | (1 << (StarRocksSqlParser.REPLACE_IF_NOT_NULL - 291)) | (1 << (StarRocksSqlParser.REPLICA - 291)) | (1 << (StarRocksSqlParser.REPOSITORY - 291)) | (1 << (StarRocksSqlParser.REPOSITORIES - 291)) | (1 << (StarRocksSqlParser.RESOURCE - 291)) | (1 << (StarRocksSqlParser.RESOURCES - 291)) | (1 << (StarRocksSqlParser.RESTORE - 291)) | (1 << (StarRocksSqlParser.RESUME - 291)) | (1 << (StarRocksSqlParser.RETURNS - 291)) | (1 << (StarRocksSqlParser.REVERT - 291)) | (1 << (StarRocksSqlParser.RIGHT - 291)) | (1 << (StarRocksSqlParser.RLIKE - 291)) | (1 << (StarRocksSqlParser.ROLE - 291)) | (1 << (StarRocksSqlParser.ROLES - 291)) | (1 << (StarRocksSqlParser.ROLLBACK - 291)) | (1 << (StarRocksSqlParser.ROLLUP - 291)) | (1 << (StarRocksSqlParser.ROUTINE - 291)) | (1 << (StarRocksSqlParser.ROW - 291)) | (1 << (StarRocksSqlParser.ROW_NUMBER - 291)) | (1 << (StarRocksSqlParser.SAMPLE - 291)) | (1 << (StarRocksSqlParser.SCHEDULER - 291)))) !== 0) || ((((_la - 323)) & ~0x1F) === 0 && ((1 << (_la - 323)) & ((1 << (StarRocksSqlParser.SCHEMA - 323)) | (1 << (StarRocksSqlParser.SECOND - 323)) | (1 << (StarRocksSqlParser.SEMI - 323)) | (1 << (StarRocksSqlParser.SERIALIZABLE - 323)) | (1 << (StarRocksSqlParser.SESSION - 323)) | (1 << (StarRocksSqlParser.SETS - 323)) | (1 << (StarRocksSqlParser.SIGNED - 323)) | (1 << (StarRocksSqlParser.SKIP_HEADER - 323)) | (1 << (StarRocksSqlParser.SNAPSHOT - 323)) | (1 << (StarRocksSqlParser.SQLBLACKLIST - 323)) | (1 << (StarRocksSqlParser.START - 323)) | (1 << (StarRocksSqlParser.STATS - 323)) | (1 << (StarRocksSqlParser.STATUS - 323)) | (1 << (StarRocksSqlParser.STOP - 323)) | (1 << (StarRocksSqlParser.STORAGE - 323)) | (1 << (StarRocksSqlParser.STREAM - 323)) | (1 << (StarRocksSqlParser.STRING - 323)) | (1 << (StarRocksSqlParser.SUBMIT - 323)) | (1 << (StarRocksSqlParser.SUM - 323)) | (1 << (StarRocksSqlParser.SUSPEND - 323)) | (1 << (StarRocksSqlParser.SYNC - 323)) | (1 << (StarRocksSqlParser.SYSTEM_TIME - 323)) | (1 << (StarRocksSqlParser.SWAP - 323)))) !== 0) || ((((_la - 355)) & ~0x1F) === 0 && ((1 << (_la - 355)) & ((1 << (StarRocksSqlParser.STRUCT - 355)) | (1 << (StarRocksSqlParser.TABLES - 355)) | (1 << (StarRocksSqlParser.TABLET - 355)) | (1 << (StarRocksSqlParser.TASK - 355)) | (1 << (StarRocksSqlParser.TEMPORARY - 355)) | (1 << (StarRocksSqlParser.THAN - 355)) | (1 << (StarRocksSqlParser.TIME - 355)) | (1 << (StarRocksSqlParser.TIMESTAMP - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPADD - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPDIFF - 355)) | (1 << (StarRocksSqlParser.TRANSACTION - 355)) | (1 << (StarRocksSqlParser.TRACE - 355)) | (1 << (StarRocksSqlParser.TRIGGERS - 355)) | (1 << (StarRocksSqlParser.TRIM_SPACE - 355)) | (1 << (StarRocksSqlParser.TRUE - 355)) | (1 << (StarRocksSqlParser.TRUNCATE - 355)) | (1 << (StarRocksSqlParser.TYPE - 355)) | (1 << (StarRocksSqlParser.TYPES - 355)) | (1 << (StarRocksSqlParser.UNBOUNDED - 355)) | (1 << (StarRocksSqlParser.UNCOMMITTED - 355)) | (1 << (StarRocksSqlParser.UNINSTALL - 355)) | (1 << (StarRocksSqlParser.USAGE - 355)))) !== 0) || ((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & ((1 << (StarRocksSqlParser.USER - 388)) | (1 << (StarRocksSqlParser.USERS - 388)) | (1 << (StarRocksSqlParser.VALUE - 388)) | (1 << (StarRocksSqlParser.VARIABLES - 388)) | (1 << (StarRocksSqlParser.VERBOSE - 388)) | (1 << (StarRocksSqlParser.VIEW - 388)) | (1 << (StarRocksSqlParser.VIEWS - 388)) | (1 << (StarRocksSqlParser.WAREHOUSE - 388)) | (1 << (StarRocksSqlParser.WAREHOUSES - 388)) | (1 << (StarRocksSqlParser.WARNINGS - 388)) | (1 << (StarRocksSqlParser.WEEK - 388)) | (1 << (StarRocksSqlParser.WHITELIST - 388)) | (1 << (StarRocksSqlParser.WORK - 388)) | (1 << (StarRocksSqlParser.WRITE - 388)) | (1 << (StarRocksSqlParser.YEAR - 388)) | (1 << (StarRocksSqlParser.LOCK - 388)) | (1 << (StarRocksSqlParser.UNLOCK - 388)) | (1 << (StarRocksSqlParser.LOW_PRIORITY - 388)))) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (StarRocksSqlParser.PLUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.MINUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.LOGICAL_NOT - 422)) | (1 << (StarRocksSqlParser.BITNOT - 422)) | (1 << (StarRocksSqlParser.AT - 422)) | (1 << (StarRocksSqlParser.INTEGER_VALUE - 422)) | (1 << (StarRocksSqlParser.DECIMAL_VALUE - 422)) | (1 << (StarRocksSqlParser.DOUBLE_VALUE - 422)) | (1 << (StarRocksSqlParser.SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.LETTER_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.DIGIT_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.BACKQUOTED_IDENTIFIER - 422)))) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & ((1 << (StarRocksSqlParser.LEFT_PAREN - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACKET - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACE - 456)) | (1 << (StarRocksSqlParser.DOTDOTDOT - 456)))) !== 0)) {
					{
					this.state = 4993;
					this.expressionList();
					}
				}

				this.state = 4996;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;

			case 3:
				_localctx = new MultipleGroupingSetsContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4997;
				this.match(StarRocksSqlParser.GROUPING);
				this.state = 4998;
				this.match(StarRocksSqlParser.SETS);
				this.state = 4999;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5000;
				this.groupingSet();
				this.state = 5005;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 5001;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 5002;
					this.groupingSet();
					}
					}
					this.state = 5007;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5008;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;

			case 4:
				_localctx = new SingleGroupingSetContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5010;
				this.expressionList();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public groupingSet(): GroupingSetContext {
		let _localctx: GroupingSetContext = new GroupingSetContext(this._ctx, this.state);
		this.enterRule(_localctx, 630, StarRocksSqlParser.RULE_groupingSet);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5013;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 5015;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << StarRocksSqlParser.ACTIVE) | (1 << StarRocksSqlParser.ADMIN) | (1 << StarRocksSqlParser.AFTER) | (1 << StarRocksSqlParser.AGGREGATE) | (1 << StarRocksSqlParser.ANTI) | (1 << StarRocksSqlParser.ARRAY) | (1 << StarRocksSqlParser.ARRAY_AGG) | (1 << StarRocksSqlParser.ASYNC) | (1 << StarRocksSqlParser.AUTHORS) | (1 << StarRocksSqlParser.AUTHENTICATION) | (1 << StarRocksSqlParser.AUTO_INCREMENT) | (1 << StarRocksSqlParser.AVG) | (1 << StarRocksSqlParser.BACKEND) | (1 << StarRocksSqlParser.BACKENDS) | (1 << StarRocksSqlParser.BACKUP) | (1 << StarRocksSqlParser.BEGIN))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (StarRocksSqlParser.BITMAP_UNION - 32)) | (1 << (StarRocksSqlParser.BLACKLIST - 32)) | (1 << (StarRocksSqlParser.BOOLEAN - 32)) | (1 << (StarRocksSqlParser.BROKER - 32)) | (1 << (StarRocksSqlParser.BUCKETS - 32)) | (1 << (StarRocksSqlParser.BUILTIN - 32)) | (1 << (StarRocksSqlParser.CANCEL - 32)) | (1 << (StarRocksSqlParser.CASE - 32)) | (1 << (StarRocksSqlParser.CAST - 32)) | (1 << (StarRocksSqlParser.CATALOG - 32)) | (1 << (StarRocksSqlParser.CATALOGS - 32)) | (1 << (StarRocksSqlParser.CEIL - 32)) | (1 << (StarRocksSqlParser.CHAIN - 32)) | (1 << (StarRocksSqlParser.CHAR - 32)) | (1 << (StarRocksSqlParser.CHARSET - 32)) | (1 << (StarRocksSqlParser.CLEAN - 32)) | (1 << (StarRocksSqlParser.CLUSTER - 32)) | (1 << (StarRocksSqlParser.CLUSTERS - 32)) | (1 << (StarRocksSqlParser.COLLATION - 32)) | (1 << (StarRocksSqlParser.COLUMNS - 32)) | (1 << (StarRocksSqlParser.COMMENT - 32)) | (1 << (StarRocksSqlParser.COMMIT - 32)) | (1 << (StarRocksSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (StarRocksSqlParser.COMPUTE - 64)) | (1 << (StarRocksSqlParser.CONFIG - 64)) | (1 << (StarRocksSqlParser.CONNECTION - 64)) | (1 << (StarRocksSqlParser.CONSISTENT - 64)) | (1 << (StarRocksSqlParser.CONVERT - 64)) | (1 << (StarRocksSqlParser.COSTS - 64)) | (1 << (StarRocksSqlParser.COUNT - 64)) | (1 << (StarRocksSqlParser.CUME_DIST - 64)) | (1 << (StarRocksSqlParser.CURRENT - 64)) | (1 << (StarRocksSqlParser.CURRENT_DATE - 64)) | (1 << (StarRocksSqlParser.CURRENT_ROLE - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIME - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (StarRocksSqlParser.CURRENT_USER - 64)) | (1 << (StarRocksSqlParser.DATA - 64)) | (1 << (StarRocksSqlParser.DATABASE - 64)) | (1 << (StarRocksSqlParser.DATE - 64)) | (1 << (StarRocksSqlParser.DATETIME - 64)) | (1 << (StarRocksSqlParser.DAY - 64)) | (1 << (StarRocksSqlParser.DECOMMISSION - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (StarRocksSqlParser.DENSE_RANK - 96)) | (1 << (StarRocksSqlParser.NTILE - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTED - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTION - 96)) | (1 << (StarRocksSqlParser.DUPLICATE - 96)) | (1 << (StarRocksSqlParser.DYNAMIC - 96)) | (1 << (StarRocksSqlParser.ENCLOSE - 96)) | (1 << (StarRocksSqlParser.END - 96)) | (1 << (StarRocksSqlParser.ENGINE - 96)) | (1 << (StarRocksSqlParser.ENGINES - 96)) | (1 << (StarRocksSqlParser.ERRORS - 96)) | (1 << (StarRocksSqlParser.ESCAPE - 96)) | (1 << (StarRocksSqlParser.EVENTS - 96)) | (1 << (StarRocksSqlParser.EXECUTE - 96)) | (1 << (StarRocksSqlParser.EXISTS - 96)) | (1 << (StarRocksSqlParser.EXPORT - 96)) | (1 << (StarRocksSqlParser.EXTERNAL - 96)) | (1 << (StarRocksSqlParser.EXTRACT - 96)) | (1 << (StarRocksSqlParser.EVERY - 96)) | (1 << (StarRocksSqlParser.FALSE - 96)) | (1 << (StarRocksSqlParser.FIELDS - 96)) | (1 << (StarRocksSqlParser.FILE - 96)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (StarRocksSqlParser.FILTER - 129)) | (1 << (StarRocksSqlParser.FIRST - 129)) | (1 << (StarRocksSqlParser.FIRST_VALUE - 129)) | (1 << (StarRocksSqlParser.FLOOR - 129)) | (1 << (StarRocksSqlParser.FN - 129)) | (1 << (StarRocksSqlParser.FOLLOWING - 129)) | (1 << (StarRocksSqlParser.FOLLOWER - 129)) | (1 << (StarRocksSqlParser.FORMAT - 129)) | (1 << (StarRocksSqlParser.FREE - 129)) | (1 << (StarRocksSqlParser.FRONTEND - 129)) | (1 << (StarRocksSqlParser.FRONTENDS - 129)) | (1 << (StarRocksSqlParser.FUNCTIONS - 129)) | (1 << (StarRocksSqlParser.GLOBAL - 129)) | (1 << (StarRocksSqlParser.GRANTS - 129)) | (1 << (StarRocksSqlParser.GROUPING - 129)) | (1 << (StarRocksSqlParser.GROUPING_ID - 129)) | (1 << (StarRocksSqlParser.HASH - 129)) | (1 << (StarRocksSqlParser.HELP - 129)) | (1 << (StarRocksSqlParser.HISTOGRAM - 129)) | (1 << (StarRocksSqlParser.HLL_UNION - 129)) | (1 << (StarRocksSqlParser.HOST - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (StarRocksSqlParser.HOUR - 161)) | (1 << (StarRocksSqlParser.HUB - 161)) | (1 << (StarRocksSqlParser.IDENTIFIED - 161)) | (1 << (StarRocksSqlParser.IF - 161)) | (1 << (StarRocksSqlParser.IMPERSONATE - 161)) | (1 << (StarRocksSqlParser.IMAGE - 161)) | (1 << (StarRocksSqlParser.INACTIVE - 161)) | (1 << (StarRocksSqlParser.INCREMENTAL - 161)) | (1 << (StarRocksSqlParser.INDEXES - 161)) | (1 << (StarRocksSqlParser.INSTALL - 161)) | (1 << (StarRocksSqlParser.INTERMEDIATE - 161)) | (1 << (StarRocksSqlParser.INTERVAL - 161)) | (1 << (StarRocksSqlParser.OVERWRITE - 161)) | (1 << (StarRocksSqlParser.ISOLATION - 161)) | (1 << (StarRocksSqlParser.JOB - 161)))) !== 0) || ((((_la - 195)) & ~0x1F) === 0 && ((1 << (_la - 195)) & ((1 << (StarRocksSqlParser.LABEL - 195)) | (1 << (StarRocksSqlParser.LAG - 195)) | (1 << (StarRocksSqlParser.LAST - 195)) | (1 << (StarRocksSqlParser.LAST_VALUE - 195)) | (1 << (StarRocksSqlParser.LEAD - 195)) | (1 << (StarRocksSqlParser.LEFT - 195)) | (1 << (StarRocksSqlParser.LESS - 195)) | (1 << (StarRocksSqlParser.LEVEL - 195)) | (1 << (StarRocksSqlParser.LIKE - 195)) | (1 << (StarRocksSqlParser.LIST - 195)) | (1 << (StarRocksSqlParser.LOCAL - 195)) | (1 << (StarRocksSqlParser.LOCALTIME - 195)) | (1 << (StarRocksSqlParser.LOCALTIMESTAMP - 195)) | (1 << (StarRocksSqlParser.LOCATION - 195)) | (1 << (StarRocksSqlParser.LOGICAL - 195)) | (1 << (StarRocksSqlParser.MANUAL - 195)) | (1 << (StarRocksSqlParser.MAP - 195)) | (1 << (StarRocksSqlParser.MATERIALIZED - 195)) | (1 << (StarRocksSqlParser.MAX - 195)) | (1 << (StarRocksSqlParser.MERGE - 195)) | (1 << (StarRocksSqlParser.MIN - 195)) | (1 << (StarRocksSqlParser.MINUTE - 195)) | (1 << (StarRocksSqlParser.MINUS - 195)))) !== 0) || ((((_la - 227)) & ~0x1F) === 0 && ((1 << (_la - 227)) & ((1 << (StarRocksSqlParser.META - 227)) | (1 << (StarRocksSqlParser.MOD - 227)) | (1 << (StarRocksSqlParser.MODE - 227)) | (1 << (StarRocksSqlParser.MODIFY - 227)) | (1 << (StarRocksSqlParser.MONTH - 227)) | (1 << (StarRocksSqlParser.NAME - 227)) | (1 << (StarRocksSqlParser.NAMES - 227)) | (1 << (StarRocksSqlParser.NEGATIVE - 227)) | (1 << (StarRocksSqlParser.NO - 227)) | (1 << (StarRocksSqlParser.NODE - 227)) | (1 << (StarRocksSqlParser.NODES - 227)) | (1 << (StarRocksSqlParser.NONE - 227)) | (1 << (StarRocksSqlParser.NOT - 227)) | (1 << (StarRocksSqlParser.NULL - 227)) | (1 << (StarRocksSqlParser.NULLS - 227)) | (1 << (StarRocksSqlParser.NUMBER - 227)) | (1 << (StarRocksSqlParser.NUMERIC - 227)) | (1 << (StarRocksSqlParser.OBSERVER - 227)) | (1 << (StarRocksSqlParser.OF - 227)) | (1 << (StarRocksSqlParser.OFFSET - 227)) | (1 << (StarRocksSqlParser.ONLY - 227)) | (1 << (StarRocksSqlParser.OPEN - 227)) | (1 << (StarRocksSqlParser.OPERATE - 227)) | (1 << (StarRocksSqlParser.OPTIMIZER - 227)) | (1 << (StarRocksSqlParser.OPTION - 227)))) !== 0) || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (StarRocksSqlParser.PARTITIONS - 259)) | (1 << (StarRocksSqlParser.PASSWORD - 259)) | (1 << (StarRocksSqlParser.PATH - 259)) | (1 << (StarRocksSqlParser.PAUSE - 259)) | (1 << (StarRocksSqlParser.PENDING - 259)) | (1 << (StarRocksSqlParser.PERCENT_RANK - 259)) | (1 << (StarRocksSqlParser.PERCENTILE_UNION - 259)) | (1 << (StarRocksSqlParser.PLUGIN - 259)) | (1 << (StarRocksSqlParser.PLUGINS - 259)) | (1 << (StarRocksSqlParser.PRECEDING - 259)) | (1 << (StarRocksSqlParser.PRIVILEGES - 259)) | (1 << (StarRocksSqlParser.PROC - 259)) | (1 << (StarRocksSqlParser.PROCESSLIST - 259)) | (1 << (StarRocksSqlParser.PROFILE - 259)) | (1 << (StarRocksSqlParser.PROFILELIST - 259)) | (1 << (StarRocksSqlParser.PROPERTIES - 259)) | (1 << (StarRocksSqlParser.PROPERTY - 259)) | (1 << (StarRocksSqlParser.QUALIFY - 259)) | (1 << (StarRocksSqlParser.QUARTER - 259)) | (1 << (StarRocksSqlParser.QUERY - 259)) | (1 << (StarRocksSqlParser.QUEUE - 259)) | (1 << (StarRocksSqlParser.QUOTA - 259)) | (1 << (StarRocksSqlParser.RANDOM - 259)) | (1 << (StarRocksSqlParser.RANK - 259)) | (1 << (StarRocksSqlParser.RECOVER - 259)))) !== 0) || ((((_la - 291)) & ~0x1F) === 0 && ((1 << (_la - 291)) & ((1 << (StarRocksSqlParser.REFRESH - 291)) | (1 << (StarRocksSqlParser.REWRITE - 291)) | (1 << (StarRocksSqlParser.REGEXP - 291)) | (1 << (StarRocksSqlParser.REMOVE - 291)) | (1 << (StarRocksSqlParser.REPAIR - 291)) | (1 << (StarRocksSqlParser.REPEATABLE - 291)) | (1 << (StarRocksSqlParser.REPLACE - 291)) | (1 << (StarRocksSqlParser.REPLACE_IF_NOT_NULL - 291)) | (1 << (StarRocksSqlParser.REPLICA - 291)) | (1 << (StarRocksSqlParser.REPOSITORY - 291)) | (1 << (StarRocksSqlParser.REPOSITORIES - 291)) | (1 << (StarRocksSqlParser.RESOURCE - 291)) | (1 << (StarRocksSqlParser.RESOURCES - 291)) | (1 << (StarRocksSqlParser.RESTORE - 291)) | (1 << (StarRocksSqlParser.RESUME - 291)) | (1 << (StarRocksSqlParser.RETURNS - 291)) | (1 << (StarRocksSqlParser.REVERT - 291)) | (1 << (StarRocksSqlParser.RIGHT - 291)) | (1 << (StarRocksSqlParser.RLIKE - 291)) | (1 << (StarRocksSqlParser.ROLE - 291)) | (1 << (StarRocksSqlParser.ROLES - 291)) | (1 << (StarRocksSqlParser.ROLLBACK - 291)) | (1 << (StarRocksSqlParser.ROLLUP - 291)) | (1 << (StarRocksSqlParser.ROUTINE - 291)) | (1 << (StarRocksSqlParser.ROW - 291)) | (1 << (StarRocksSqlParser.ROW_NUMBER - 291)) | (1 << (StarRocksSqlParser.SAMPLE - 291)) | (1 << (StarRocksSqlParser.SCHEDULER - 291)))) !== 0) || ((((_la - 323)) & ~0x1F) === 0 && ((1 << (_la - 323)) & ((1 << (StarRocksSqlParser.SCHEMA - 323)) | (1 << (StarRocksSqlParser.SECOND - 323)) | (1 << (StarRocksSqlParser.SEMI - 323)) | (1 << (StarRocksSqlParser.SERIALIZABLE - 323)) | (1 << (StarRocksSqlParser.SESSION - 323)) | (1 << (StarRocksSqlParser.SETS - 323)) | (1 << (StarRocksSqlParser.SIGNED - 323)) | (1 << (StarRocksSqlParser.SKIP_HEADER - 323)) | (1 << (StarRocksSqlParser.SNAPSHOT - 323)) | (1 << (StarRocksSqlParser.SQLBLACKLIST - 323)) | (1 << (StarRocksSqlParser.START - 323)) | (1 << (StarRocksSqlParser.STATS - 323)) | (1 << (StarRocksSqlParser.STATUS - 323)) | (1 << (StarRocksSqlParser.STOP - 323)) | (1 << (StarRocksSqlParser.STORAGE - 323)) | (1 << (StarRocksSqlParser.STREAM - 323)) | (1 << (StarRocksSqlParser.STRING - 323)) | (1 << (StarRocksSqlParser.SUBMIT - 323)) | (1 << (StarRocksSqlParser.SUM - 323)) | (1 << (StarRocksSqlParser.SUSPEND - 323)) | (1 << (StarRocksSqlParser.SYNC - 323)) | (1 << (StarRocksSqlParser.SYSTEM_TIME - 323)) | (1 << (StarRocksSqlParser.SWAP - 323)))) !== 0) || ((((_la - 355)) & ~0x1F) === 0 && ((1 << (_la - 355)) & ((1 << (StarRocksSqlParser.STRUCT - 355)) | (1 << (StarRocksSqlParser.TABLES - 355)) | (1 << (StarRocksSqlParser.TABLET - 355)) | (1 << (StarRocksSqlParser.TASK - 355)) | (1 << (StarRocksSqlParser.TEMPORARY - 355)) | (1 << (StarRocksSqlParser.THAN - 355)) | (1 << (StarRocksSqlParser.TIME - 355)) | (1 << (StarRocksSqlParser.TIMESTAMP - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPADD - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPDIFF - 355)) | (1 << (StarRocksSqlParser.TRANSACTION - 355)) | (1 << (StarRocksSqlParser.TRACE - 355)) | (1 << (StarRocksSqlParser.TRIGGERS - 355)) | (1 << (StarRocksSqlParser.TRIM_SPACE - 355)) | (1 << (StarRocksSqlParser.TRUE - 355)) | (1 << (StarRocksSqlParser.TRUNCATE - 355)) | (1 << (StarRocksSqlParser.TYPE - 355)) | (1 << (StarRocksSqlParser.TYPES - 355)) | (1 << (StarRocksSqlParser.UNBOUNDED - 355)) | (1 << (StarRocksSqlParser.UNCOMMITTED - 355)) | (1 << (StarRocksSqlParser.UNINSTALL - 355)) | (1 << (StarRocksSqlParser.USAGE - 355)))) !== 0) || ((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & ((1 << (StarRocksSqlParser.USER - 388)) | (1 << (StarRocksSqlParser.USERS - 388)) | (1 << (StarRocksSqlParser.VALUE - 388)) | (1 << (StarRocksSqlParser.VARIABLES - 388)) | (1 << (StarRocksSqlParser.VERBOSE - 388)) | (1 << (StarRocksSqlParser.VIEW - 388)) | (1 << (StarRocksSqlParser.VIEWS - 388)) | (1 << (StarRocksSqlParser.WAREHOUSE - 388)) | (1 << (StarRocksSqlParser.WAREHOUSES - 388)) | (1 << (StarRocksSqlParser.WARNINGS - 388)) | (1 << (StarRocksSqlParser.WEEK - 388)) | (1 << (StarRocksSqlParser.WHITELIST - 388)) | (1 << (StarRocksSqlParser.WORK - 388)) | (1 << (StarRocksSqlParser.WRITE - 388)) | (1 << (StarRocksSqlParser.YEAR - 388)) | (1 << (StarRocksSqlParser.LOCK - 388)) | (1 << (StarRocksSqlParser.UNLOCK - 388)) | (1 << (StarRocksSqlParser.LOW_PRIORITY - 388)))) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (StarRocksSqlParser.PLUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.MINUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.LOGICAL_NOT - 422)) | (1 << (StarRocksSqlParser.BITNOT - 422)) | (1 << (StarRocksSqlParser.AT - 422)) | (1 << (StarRocksSqlParser.INTEGER_VALUE - 422)) | (1 << (StarRocksSqlParser.DECIMAL_VALUE - 422)) | (1 << (StarRocksSqlParser.DOUBLE_VALUE - 422)) | (1 << (StarRocksSqlParser.SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.LETTER_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.DIGIT_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.BACKQUOTED_IDENTIFIER - 422)))) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & ((1 << (StarRocksSqlParser.LEFT_PAREN - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACKET - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACE - 456)) | (1 << (StarRocksSqlParser.DOTDOTDOT - 456)))) !== 0)) {
				{
				this.state = 5014;
				this.expression(0);
				}
			}

			this.state = 5021;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 5017;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 5018;
				this.expression(0);
				}
				}
				this.state = 5023;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5024;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public commonTableExpression(): CommonTableExpressionContext {
		let _localctx: CommonTableExpressionContext = new CommonTableExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 632, StarRocksSqlParser.RULE_commonTableExpression);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5026;
			_localctx._name = this.identifier();
			this.state = 5028;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.LEFT_PAREN) {
				{
				this.state = 5027;
				this.columnAliases();
				}
			}

			this.state = 5030;
			this.match(StarRocksSqlParser.AS);
			this.state = 5031;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 5032;
			this.queryRelation();
			this.state = 5033;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setQuantifier(): SetQuantifierContext {
		let _localctx: SetQuantifierContext = new SetQuantifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 634, StarRocksSqlParser.RULE_setQuantifier);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5035;
			_la = this._input.LA(1);
			if (!(_la === StarRocksSqlParser.ALL || _la === StarRocksSqlParser.DISTINCT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectItem(): SelectItemContext {
		let _localctx: SelectItemContext = new SelectItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 636, StarRocksSqlParser.RULE_selectItem);
		let _la: number;
		try {
			this.state = 5052;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 554, this._ctx) ) {
			case 1:
				_localctx = new SelectSingleContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5037;
				this.expression(0);
				this.state = 5045;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 553, this._ctx) ) {
				case 1:
					{
					this.state = 5039;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === StarRocksSqlParser.AS) {
						{
						this.state = 5038;
						this.match(StarRocksSqlParser.AS);
						}
					}

					this.state = 5043;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case StarRocksSqlParser.ACTIVE:
					case StarRocksSqlParser.ADMIN:
					case StarRocksSqlParser.AFTER:
					case StarRocksSqlParser.AGGREGATE:
					case StarRocksSqlParser.ANTI:
					case StarRocksSqlParser.ASYNC:
					case StarRocksSqlParser.AUTHORS:
					case StarRocksSqlParser.AUTHENTICATION:
					case StarRocksSqlParser.AUTO_INCREMENT:
					case StarRocksSqlParser.AVG:
					case StarRocksSqlParser.BACKEND:
					case StarRocksSqlParser.BACKENDS:
					case StarRocksSqlParser.BACKUP:
					case StarRocksSqlParser.BEGIN:
					case StarRocksSqlParser.BITMAP_UNION:
					case StarRocksSqlParser.BLACKLIST:
					case StarRocksSqlParser.BOOLEAN:
					case StarRocksSqlParser.BROKER:
					case StarRocksSqlParser.BUCKETS:
					case StarRocksSqlParser.BUILTIN:
					case StarRocksSqlParser.CANCEL:
					case StarRocksSqlParser.CAST:
					case StarRocksSqlParser.CATALOG:
					case StarRocksSqlParser.CATALOGS:
					case StarRocksSqlParser.CEIL:
					case StarRocksSqlParser.CHAIN:
					case StarRocksSqlParser.CHARSET:
					case StarRocksSqlParser.CLEAN:
					case StarRocksSqlParser.CLUSTER:
					case StarRocksSqlParser.CLUSTERS:
					case StarRocksSqlParser.COLLATION:
					case StarRocksSqlParser.COLUMNS:
					case StarRocksSqlParser.COMMENT:
					case StarRocksSqlParser.COMMIT:
					case StarRocksSqlParser.COMMITTED:
					case StarRocksSqlParser.COMPUTE:
					case StarRocksSqlParser.CONFIG:
					case StarRocksSqlParser.CONNECTION:
					case StarRocksSqlParser.CONSISTENT:
					case StarRocksSqlParser.COSTS:
					case StarRocksSqlParser.COUNT:
					case StarRocksSqlParser.CUME_DIST:
					case StarRocksSqlParser.CURRENT:
					case StarRocksSqlParser.DATA:
					case StarRocksSqlParser.DATE:
					case StarRocksSqlParser.DATETIME:
					case StarRocksSqlParser.DAY:
					case StarRocksSqlParser.DECOMMISSION:
					case StarRocksSqlParser.DISTRIBUTED:
					case StarRocksSqlParser.DISTRIBUTION:
					case StarRocksSqlParser.DUPLICATE:
					case StarRocksSqlParser.DYNAMIC:
					case StarRocksSqlParser.ENCLOSE:
					case StarRocksSqlParser.END:
					case StarRocksSqlParser.ENGINE:
					case StarRocksSqlParser.ENGINES:
					case StarRocksSqlParser.ERRORS:
					case StarRocksSqlParser.ESCAPE:
					case StarRocksSqlParser.EVENTS:
					case StarRocksSqlParser.EXECUTE:
					case StarRocksSqlParser.EXPORT:
					case StarRocksSqlParser.EXTERNAL:
					case StarRocksSqlParser.EXTRACT:
					case StarRocksSqlParser.EVERY:
					case StarRocksSqlParser.FIELDS:
					case StarRocksSqlParser.FILE:
					case StarRocksSqlParser.FILTER:
					case StarRocksSqlParser.FIRST:
					case StarRocksSqlParser.FLOOR:
					case StarRocksSqlParser.FN:
					case StarRocksSqlParser.FOLLOWING:
					case StarRocksSqlParser.FOLLOWER:
					case StarRocksSqlParser.FORMAT:
					case StarRocksSqlParser.FREE:
					case StarRocksSqlParser.FRONTEND:
					case StarRocksSqlParser.FRONTENDS:
					case StarRocksSqlParser.FUNCTIONS:
					case StarRocksSqlParser.GLOBAL:
					case StarRocksSqlParser.GRANTS:
					case StarRocksSqlParser.HASH:
					case StarRocksSqlParser.HELP:
					case StarRocksSqlParser.HISTOGRAM:
					case StarRocksSqlParser.HLL_UNION:
					case StarRocksSqlParser.HOST:
					case StarRocksSqlParser.HOUR:
					case StarRocksSqlParser.HUB:
					case StarRocksSqlParser.IDENTIFIED:
					case StarRocksSqlParser.IMPERSONATE:
					case StarRocksSqlParser.IMAGE:
					case StarRocksSqlParser.INACTIVE:
					case StarRocksSqlParser.INCREMENTAL:
					case StarRocksSqlParser.INDEXES:
					case StarRocksSqlParser.INSTALL:
					case StarRocksSqlParser.INTERMEDIATE:
					case StarRocksSqlParser.INTERVAL:
					case StarRocksSqlParser.OVERWRITE:
					case StarRocksSqlParser.ISOLATION:
					case StarRocksSqlParser.JOB:
					case StarRocksSqlParser.LABEL:
					case StarRocksSqlParser.LAST:
					case StarRocksSqlParser.LESS:
					case StarRocksSqlParser.LEVEL:
					case StarRocksSqlParser.LIST:
					case StarRocksSqlParser.LOCAL:
					case StarRocksSqlParser.LOCATION:
					case StarRocksSqlParser.LOGICAL:
					case StarRocksSqlParser.MANUAL:
					case StarRocksSqlParser.MAP:
					case StarRocksSqlParser.MATERIALIZED:
					case StarRocksSqlParser.MAX:
					case StarRocksSqlParser.MERGE:
					case StarRocksSqlParser.MIN:
					case StarRocksSqlParser.MINUTE:
					case StarRocksSqlParser.MINUS:
					case StarRocksSqlParser.META:
					case StarRocksSqlParser.MODE:
					case StarRocksSqlParser.MODIFY:
					case StarRocksSqlParser.MONTH:
					case StarRocksSqlParser.NAME:
					case StarRocksSqlParser.NAMES:
					case StarRocksSqlParser.NEGATIVE:
					case StarRocksSqlParser.NO:
					case StarRocksSqlParser.NODE:
					case StarRocksSqlParser.NODES:
					case StarRocksSqlParser.NONE:
					case StarRocksSqlParser.NULLS:
					case StarRocksSqlParser.NUMBER:
					case StarRocksSqlParser.NUMERIC:
					case StarRocksSqlParser.OBSERVER:
					case StarRocksSqlParser.OF:
					case StarRocksSqlParser.OFFSET:
					case StarRocksSqlParser.ONLY:
					case StarRocksSqlParser.OPEN:
					case StarRocksSqlParser.OPERATE:
					case StarRocksSqlParser.OPTIMIZER:
					case StarRocksSqlParser.OPTION:
					case StarRocksSqlParser.PARTITIONS:
					case StarRocksSqlParser.PASSWORD:
					case StarRocksSqlParser.PATH:
					case StarRocksSqlParser.PAUSE:
					case StarRocksSqlParser.PENDING:
					case StarRocksSqlParser.PERCENT_RANK:
					case StarRocksSqlParser.PERCENTILE_UNION:
					case StarRocksSqlParser.PLUGIN:
					case StarRocksSqlParser.PLUGINS:
					case StarRocksSqlParser.PRECEDING:
					case StarRocksSqlParser.PRIVILEGES:
					case StarRocksSqlParser.PROC:
					case StarRocksSqlParser.PROCESSLIST:
					case StarRocksSqlParser.PROFILE:
					case StarRocksSqlParser.PROFILELIST:
					case StarRocksSqlParser.PROPERTIES:
					case StarRocksSqlParser.PROPERTY:
					case StarRocksSqlParser.QUALIFY:
					case StarRocksSqlParser.QUARTER:
					case StarRocksSqlParser.QUERY:
					case StarRocksSqlParser.QUEUE:
					case StarRocksSqlParser.QUOTA:
					case StarRocksSqlParser.RANDOM:
					case StarRocksSqlParser.RANK:
					case StarRocksSqlParser.RECOVER:
					case StarRocksSqlParser.REFRESH:
					case StarRocksSqlParser.REWRITE:
					case StarRocksSqlParser.REMOVE:
					case StarRocksSqlParser.REPAIR:
					case StarRocksSqlParser.REPEATABLE:
					case StarRocksSqlParser.REPLACE_IF_NOT_NULL:
					case StarRocksSqlParser.REPLICA:
					case StarRocksSqlParser.REPOSITORY:
					case StarRocksSqlParser.REPOSITORIES:
					case StarRocksSqlParser.RESOURCE:
					case StarRocksSqlParser.RESOURCES:
					case StarRocksSqlParser.RESTORE:
					case StarRocksSqlParser.RESUME:
					case StarRocksSqlParser.RETURNS:
					case StarRocksSqlParser.REVERT:
					case StarRocksSqlParser.ROLE:
					case StarRocksSqlParser.ROLES:
					case StarRocksSqlParser.ROLLBACK:
					case StarRocksSqlParser.ROLLUP:
					case StarRocksSqlParser.ROUTINE:
					case StarRocksSqlParser.ROW:
					case StarRocksSqlParser.SAMPLE:
					case StarRocksSqlParser.SCHEDULER:
					case StarRocksSqlParser.SECOND:
					case StarRocksSqlParser.SEMI:
					case StarRocksSqlParser.SERIALIZABLE:
					case StarRocksSqlParser.SESSION:
					case StarRocksSqlParser.SETS:
					case StarRocksSqlParser.SIGNED:
					case StarRocksSqlParser.SKIP_HEADER:
					case StarRocksSqlParser.SNAPSHOT:
					case StarRocksSqlParser.SQLBLACKLIST:
					case StarRocksSqlParser.START:
					case StarRocksSqlParser.STATS:
					case StarRocksSqlParser.STATUS:
					case StarRocksSqlParser.STOP:
					case StarRocksSqlParser.STORAGE:
					case StarRocksSqlParser.STREAM:
					case StarRocksSqlParser.STRING:
					case StarRocksSqlParser.SUBMIT:
					case StarRocksSqlParser.SUM:
					case StarRocksSqlParser.SUSPEND:
					case StarRocksSqlParser.SYNC:
					case StarRocksSqlParser.SYSTEM_TIME:
					case StarRocksSqlParser.SWAP:
					case StarRocksSqlParser.STRUCT:
					case StarRocksSqlParser.TABLES:
					case StarRocksSqlParser.TABLET:
					case StarRocksSqlParser.TASK:
					case StarRocksSqlParser.TEMPORARY:
					case StarRocksSqlParser.THAN:
					case StarRocksSqlParser.TIME:
					case StarRocksSqlParser.TIMESTAMP:
					case StarRocksSqlParser.TIMESTAMPADD:
					case StarRocksSqlParser.TIMESTAMPDIFF:
					case StarRocksSqlParser.TRANSACTION:
					case StarRocksSqlParser.TRACE:
					case StarRocksSqlParser.TRIGGERS:
					case StarRocksSqlParser.TRIM_SPACE:
					case StarRocksSqlParser.TRUNCATE:
					case StarRocksSqlParser.TYPE:
					case StarRocksSqlParser.TYPES:
					case StarRocksSqlParser.UNBOUNDED:
					case StarRocksSqlParser.UNCOMMITTED:
					case StarRocksSqlParser.UNINSTALL:
					case StarRocksSqlParser.USAGE:
					case StarRocksSqlParser.USER:
					case StarRocksSqlParser.USERS:
					case StarRocksSqlParser.VALUE:
					case StarRocksSqlParser.VARIABLES:
					case StarRocksSqlParser.VERBOSE:
					case StarRocksSqlParser.VIEW:
					case StarRocksSqlParser.VIEWS:
					case StarRocksSqlParser.WAREHOUSE:
					case StarRocksSqlParser.WAREHOUSES:
					case StarRocksSqlParser.WARNINGS:
					case StarRocksSqlParser.WEEK:
					case StarRocksSqlParser.WHITELIST:
					case StarRocksSqlParser.WORK:
					case StarRocksSqlParser.WRITE:
					case StarRocksSqlParser.YEAR:
					case StarRocksSqlParser.LOCK:
					case StarRocksSqlParser.UNLOCK:
					case StarRocksSqlParser.LOW_PRIORITY:
					case StarRocksSqlParser.LETTER_IDENTIFIER:
					case StarRocksSqlParser.DIGIT_IDENTIFIER:
					case StarRocksSqlParser.BACKQUOTED_IDENTIFIER:
					case StarRocksSqlParser.DOTDOTDOT:
						{
						this.state = 5041;
						this.identifier();
						}
						break;
					case StarRocksSqlParser.SINGLE_QUOTED_TEXT:
					case StarRocksSqlParser.DOUBLE_QUOTED_TEXT:
						{
						this.state = 5042;
						this.string();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new SelectAllContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5047;
				this.qualifiedName();
				this.state = 5048;
				this.match(StarRocksSqlParser.DOT);
				this.state = 5049;
				this.match(StarRocksSqlParser.ASTERISK_SYMBOL);
				}
				break;

			case 3:
				_localctx = new SelectAllContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5051;
				this.match(StarRocksSqlParser.ASTERISK_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public relations(): RelationsContext {
		let _localctx: RelationsContext = new RelationsContext(this._ctx, this.state);
		this.enterRule(_localctx, 638, StarRocksSqlParser.RULE_relations);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5054;
			this.relation();
			this.state = 5062;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 556, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5055;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 5057;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === StarRocksSqlParser.LATERAL) {
						{
						this.state = 5056;
						this.match(StarRocksSqlParser.LATERAL);
						}
					}

					this.state = 5059;
					this.relation();
					}
					}
				}
				this.state = 5064;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 556, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public relation(): RelationContext {
		let _localctx: RelationContext = new RelationContext(this._ctx, this.state);
		this.enterRule(_localctx, 640, StarRocksSqlParser.RULE_relation);
		let _la: number;
		try {
			let _alt: number;
			this.state = 5082;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 559, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5065;
				this.relationPrimary();
				this.state = 5069;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 557, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 5066;
						this.joinRelation();
						}
						}
					}
					this.state = 5071;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 557, this._ctx);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5072;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5073;
				this.relationPrimary();
				this.state = 5077;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.CROSS || _la === StarRocksSqlParser.FULL || _la === StarRocksSqlParser.INNER || _la === StarRocksSqlParser.JOIN || _la === StarRocksSqlParser.LEFT || _la === StarRocksSqlParser.RIGHT) {
					{
					{
					this.state = 5074;
					this.joinRelation();
					}
					}
					this.state = 5079;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5080;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public relationPrimary(): RelationPrimaryContext {
		let _localctx: RelationPrimaryContext = new RelationPrimaryContext(this._ctx, this.state);
		this.enterRule(_localctx, 642, StarRocksSqlParser.RULE_relationPrimary);
		let _la: number;
		try {
			this.state = 5177;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 582, this._ctx) ) {
			case 1:
				_localctx = new TableAtomContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5084;
				this.qualifiedName();
				this.state = 5086;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 560, this._ctx) ) {
				case 1:
					{
					this.state = 5085;
					this.temporalClause();
					}
					break;
				}
				this.state = 5089;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 561, this._ctx) ) {
				case 1:
					{
					this.state = 5088;
					this.partitionNames();
					}
					break;
				}
				this.state = 5092;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 562, this._ctx) ) {
				case 1:
					{
					this.state = 5091;
					this.tabletList();
					}
					break;
				}
				this.state = 5098;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 564, this._ctx) ) {
				case 1:
					{
					this.state = 5095;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === StarRocksSqlParser.AS) {
						{
						this.state = 5094;
						this.match(StarRocksSqlParser.AS);
						}
					}

					this.state = 5097;
					(_localctx as TableAtomContext)._alias = this.identifier();
					}
					break;
				}
				this.state = 5101;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 565, this._ctx) ) {
				case 1:
					{
					this.state = 5100;
					this.bracketHint();
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new InlineTableContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5103;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5104;
				this.match(StarRocksSqlParser.VALUES);
				this.state = 5105;
				this.rowConstructor();
				this.state = 5110;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 5106;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 5107;
					this.rowConstructor();
					}
					}
					this.state = 5112;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5113;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				this.state = 5121;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 569, this._ctx) ) {
				case 1:
					{
					this.state = 5115;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === StarRocksSqlParser.AS) {
						{
						this.state = 5114;
						this.match(StarRocksSqlParser.AS);
						}
					}

					this.state = 5117;
					(_localctx as InlineTableContext)._alias = this.identifier();
					this.state = 5119;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 568, this._ctx) ) {
					case 1:
						{
						this.state = 5118;
						this.columnAliases();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 3:
				_localctx = new SubqueryWithAliasContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5123;
				this.subquery();
				this.state = 5131;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 572, this._ctx) ) {
				case 1:
					{
					this.state = 5125;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === StarRocksSqlParser.AS) {
						{
						this.state = 5124;
						this.match(StarRocksSqlParser.AS);
						}
					}

					this.state = 5127;
					(_localctx as SubqueryWithAliasContext)._alias = this.identifier();
					this.state = 5129;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 571, this._ctx) ) {
					case 1:
						{
						this.state = 5128;
						this.columnAliases();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 4:
				_localctx = new TableFunctionContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5133;
				this.qualifiedName();
				this.state = 5134;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5135;
				this.expressionList();
				this.state = 5136;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				this.state = 5144;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 575, this._ctx) ) {
				case 1:
					{
					this.state = 5138;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === StarRocksSqlParser.AS) {
						{
						this.state = 5137;
						this.match(StarRocksSqlParser.AS);
						}
					}

					this.state = 5140;
					(_localctx as TableFunctionContext)._alias = this.identifier();
					this.state = 5142;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 574, this._ctx) ) {
					case 1:
						{
						this.state = 5141;
						this.columnAliases();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 5:
				_localctx = new NormalizedTableFunctionContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5146;
				this.match(StarRocksSqlParser.TABLE);
				this.state = 5147;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5148;
				this.qualifiedName();
				this.state = 5149;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5150;
				this.expressionList();
				this.state = 5151;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				this.state = 5152;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				this.state = 5160;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 578, this._ctx) ) {
				case 1:
					{
					this.state = 5154;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === StarRocksSqlParser.AS) {
						{
						this.state = 5153;
						this.match(StarRocksSqlParser.AS);
						}
					}

					this.state = 5156;
					(_localctx as NormalizedTableFunctionContext)._alias = this.identifier();
					this.state = 5158;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 577, this._ctx) ) {
					case 1:
						{
						this.state = 5157;
						this.columnAliases();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 6:
				_localctx = new FileTableFunctionContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5162;
				this.match(StarRocksSqlParser.FILES);
				this.state = 5163;
				this.propertyList();
				this.state = 5171;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 581, this._ctx) ) {
				case 1:
					{
					this.state = 5165;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === StarRocksSqlParser.AS) {
						{
						this.state = 5164;
						this.match(StarRocksSqlParser.AS);
						}
					}

					this.state = 5167;
					(_localctx as FileTableFunctionContext)._alias = this.identifier();
					this.state = 5169;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 580, this._ctx) ) {
					case 1:
						{
						this.state = 5168;
						this.columnAliases();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 7:
				_localctx = new ParenthesizedRelationContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5173;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5174;
				this.relations();
				this.state = 5175;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public joinRelation(): JoinRelationContext {
		let _localctx: JoinRelationContext = new JoinRelationContext(this._ctx, this.state);
		this.enterRule(_localctx, 644, StarRocksSqlParser.RULE_joinRelation);
		let _la: number;
		try {
			this.state = 5200;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.CROSS:
			case StarRocksSqlParser.INNER:
			case StarRocksSqlParser.JOIN:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5179;
				this.crossOrInnerJoinType();
				this.state = 5181;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.LEFT_BRACKET) {
					{
					this.state = 5180;
					this.bracketHint();
					}
				}

				this.state = 5184;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.LATERAL) {
					{
					this.state = 5183;
					this.match(StarRocksSqlParser.LATERAL);
					}
				}

				this.state = 5186;
				_localctx._rightRelation = this.relationPrimary();
				this.state = 5188;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 585, this._ctx) ) {
				case 1:
					{
					this.state = 5187;
					this.joinCriteria();
					}
					break;
				}
				}
				break;
			case StarRocksSqlParser.FULL:
			case StarRocksSqlParser.LEFT:
			case StarRocksSqlParser.RIGHT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5190;
				this.outerAndSemiJoinType();
				this.state = 5192;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.LEFT_BRACKET) {
					{
					this.state = 5191;
					this.bracketHint();
					}
				}

				this.state = 5195;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.LATERAL) {
					{
					this.state = 5194;
					this.match(StarRocksSqlParser.LATERAL);
					}
				}

				this.state = 5197;
				_localctx._rightRelation = this.relationPrimary();
				this.state = 5198;
				this.joinCriteria();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public crossOrInnerJoinType(): CrossOrInnerJoinTypeContext {
		let _localctx: CrossOrInnerJoinTypeContext = new CrossOrInnerJoinTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 646, StarRocksSqlParser.RULE_crossOrInnerJoinType);
		try {
			this.state = 5208;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 589, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5202;
				this.match(StarRocksSqlParser.JOIN);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5203;
				this.match(StarRocksSqlParser.INNER);
				this.state = 5204;
				this.match(StarRocksSqlParser.JOIN);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5205;
				this.match(StarRocksSqlParser.CROSS);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5206;
				this.match(StarRocksSqlParser.CROSS);
				this.state = 5207;
				this.match(StarRocksSqlParser.JOIN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public outerAndSemiJoinType(): OuterAndSemiJoinTypeContext {
		let _localctx: OuterAndSemiJoinTypeContext = new OuterAndSemiJoinTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 648, StarRocksSqlParser.RULE_outerAndSemiJoinType);
		try {
			this.state = 5237;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 590, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5210;
				this.match(StarRocksSqlParser.LEFT);
				this.state = 5211;
				this.match(StarRocksSqlParser.JOIN);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5212;
				this.match(StarRocksSqlParser.RIGHT);
				this.state = 5213;
				this.match(StarRocksSqlParser.JOIN);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5214;
				this.match(StarRocksSqlParser.FULL);
				this.state = 5215;
				this.match(StarRocksSqlParser.JOIN);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5216;
				this.match(StarRocksSqlParser.LEFT);
				this.state = 5217;
				this.match(StarRocksSqlParser.OUTER);
				this.state = 5218;
				this.match(StarRocksSqlParser.JOIN);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5219;
				this.match(StarRocksSqlParser.RIGHT);
				this.state = 5220;
				this.match(StarRocksSqlParser.OUTER);
				this.state = 5221;
				this.match(StarRocksSqlParser.JOIN);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5222;
				this.match(StarRocksSqlParser.FULL);
				this.state = 5223;
				this.match(StarRocksSqlParser.OUTER);
				this.state = 5224;
				this.match(StarRocksSqlParser.JOIN);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5225;
				this.match(StarRocksSqlParser.LEFT);
				this.state = 5226;
				this.match(StarRocksSqlParser.SEMI);
				this.state = 5227;
				this.match(StarRocksSqlParser.JOIN);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5228;
				this.match(StarRocksSqlParser.RIGHT);
				this.state = 5229;
				this.match(StarRocksSqlParser.SEMI);
				this.state = 5230;
				this.match(StarRocksSqlParser.JOIN);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5231;
				this.match(StarRocksSqlParser.LEFT);
				this.state = 5232;
				this.match(StarRocksSqlParser.ANTI);
				this.state = 5233;
				this.match(StarRocksSqlParser.JOIN);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 5234;
				this.match(StarRocksSqlParser.RIGHT);
				this.state = 5235;
				this.match(StarRocksSqlParser.ANTI);
				this.state = 5236;
				this.match(StarRocksSqlParser.JOIN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bracketHint(): BracketHintContext {
		let _localctx: BracketHintContext = new BracketHintContext(this._ctx, this.state);
		this.enterRule(_localctx, 650, StarRocksSqlParser.RULE_bracketHint);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5239;
			this.match(StarRocksSqlParser.LEFT_BRACKET);
			this.state = 5240;
			this.identifier();
			this.state = 5245;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 5241;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 5242;
				this.identifier();
				}
				}
				this.state = 5247;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5248;
			this.match(StarRocksSqlParser.RIGHT_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setVarHint(): SetVarHintContext {
		let _localctx: SetVarHintContext = new SetVarHintContext(this._ctx, this.state);
		this.enterRule(_localctx, 652, StarRocksSqlParser.RULE_setVarHint);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5250;
			this.match(StarRocksSqlParser.HENT_START);
			this.state = 5251;
			this.match(StarRocksSqlParser.SET_VAR);
			this.state = 5252;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 5253;
			this.hintMap();
			this.state = 5258;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 5254;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 5255;
				this.hintMap();
				}
				}
				this.state = 5260;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5261;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			this.state = 5262;
			this.match(StarRocksSqlParser.HENT_END);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public hintMap(): HintMapContext {
		let _localctx: HintMapContext = new HintMapContext(this._ctx, this.state);
		this.enterRule(_localctx, 654, StarRocksSqlParser.RULE_hintMap);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5264;
			_localctx._k = this.identifierOrString();
			this.state = 5265;
			this.match(StarRocksSqlParser.EQ);
			this.state = 5266;
			_localctx._v = this.literalExpression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public joinCriteria(): JoinCriteriaContext {
		let _localctx: JoinCriteriaContext = new JoinCriteriaContext(this._ctx, this.state);
		this.enterRule(_localctx, 656, StarRocksSqlParser.RULE_joinCriteria);
		let _la: number;
		try {
			this.state = 5282;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.ON:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5268;
				this.match(StarRocksSqlParser.ON);
				this.state = 5269;
				this.expression(0);
				}
				break;
			case StarRocksSqlParser.USING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5270;
				this.match(StarRocksSqlParser.USING);
				this.state = 5271;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5272;
				this.identifier();
				this.state = 5277;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 5273;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 5274;
					this.identifier();
					}
					}
					this.state = 5279;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5280;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnAliases(): ColumnAliasesContext {
		let _localctx: ColumnAliasesContext = new ColumnAliasesContext(this._ctx, this.state);
		this.enterRule(_localctx, 658, StarRocksSqlParser.RULE_columnAliases);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5284;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 5285;
			this.identifier();
			this.state = 5290;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 5286;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 5287;
				this.identifier();
				}
				}
				this.state = 5292;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5293;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionNames(): PartitionNamesContext {
		let _localctx: PartitionNamesContext = new PartitionNamesContext(this._ctx, this.state);
		this.enterRule(_localctx, 660, StarRocksSqlParser.RULE_partitionNames);
		let _la: number;
		try {
			this.state = 5316;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 599, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5296;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.TEMPORARY) {
					{
					this.state = 5295;
					this.match(StarRocksSqlParser.TEMPORARY);
					}
				}

				this.state = 5298;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.PARTITION || _la === StarRocksSqlParser.PARTITIONS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5299;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5300;
				this.identifierOrString();
				this.state = 5305;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 5301;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 5302;
					this.identifierOrString();
					}
					}
					this.state = 5307;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5308;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5311;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.TEMPORARY) {
					{
					this.state = 5310;
					this.match(StarRocksSqlParser.TEMPORARY);
					}
				}

				this.state = 5313;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.PARTITION || _la === StarRocksSqlParser.PARTITIONS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5314;
				this.identifierOrString();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5315;
				this.keyPartitions();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public keyPartitions(): KeyPartitionsContext {
		let _localctx: KeyPartitionsContext = new KeyPartitionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 662, StarRocksSqlParser.RULE_keyPartitions);
		let _la: number;
		try {
			_localctx = new KeyPartitionListContext(_localctx);
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5318;
			this.match(StarRocksSqlParser.PARTITION);
			this.state = 5319;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 5320;
			this.keyPartition();
			this.state = 5325;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 5321;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 5322;
				this.keyPartition();
				}
				}
				this.state = 5327;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5328;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tabletList(): TabletListContext {
		let _localctx: TabletListContext = new TabletListContext(this._ctx, this.state);
		this.enterRule(_localctx, 664, StarRocksSqlParser.RULE_tabletList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5330;
			this.match(StarRocksSqlParser.TABLET);
			this.state = 5331;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 5332;
			this.match(StarRocksSqlParser.INTEGER_VALUE);
			this.state = 5337;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 5333;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 5334;
				this.match(StarRocksSqlParser.INTEGER_VALUE);
				}
				}
				this.state = 5339;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5340;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expressionsWithDefault(): ExpressionsWithDefaultContext {
		let _localctx: ExpressionsWithDefaultContext = new ExpressionsWithDefaultContext(this._ctx, this.state);
		this.enterRule(_localctx, 666, StarRocksSqlParser.RULE_expressionsWithDefault);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5342;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 5343;
			this.expressionOrDefault();
			this.state = 5348;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 5344;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 5345;
				this.expressionOrDefault();
				}
				}
				this.state = 5350;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5351;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expressionOrDefault(): ExpressionOrDefaultContext {
		let _localctx: ExpressionOrDefaultContext = new ExpressionOrDefaultContext(this._ctx, this.state);
		this.enterRule(_localctx, 668, StarRocksSqlParser.RULE_expressionOrDefault);
		try {
			this.state = 5355;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.ACTIVE:
			case StarRocksSqlParser.ADMIN:
			case StarRocksSqlParser.AFTER:
			case StarRocksSqlParser.AGGREGATE:
			case StarRocksSqlParser.ANTI:
			case StarRocksSqlParser.ARRAY:
			case StarRocksSqlParser.ARRAY_AGG:
			case StarRocksSqlParser.ASYNC:
			case StarRocksSqlParser.AUTHORS:
			case StarRocksSqlParser.AUTHENTICATION:
			case StarRocksSqlParser.AUTO_INCREMENT:
			case StarRocksSqlParser.AVG:
			case StarRocksSqlParser.BACKEND:
			case StarRocksSqlParser.BACKENDS:
			case StarRocksSqlParser.BACKUP:
			case StarRocksSqlParser.BEGIN:
			case StarRocksSqlParser.BITMAP_UNION:
			case StarRocksSqlParser.BLACKLIST:
			case StarRocksSqlParser.BOOLEAN:
			case StarRocksSqlParser.BROKER:
			case StarRocksSqlParser.BUCKETS:
			case StarRocksSqlParser.BUILTIN:
			case StarRocksSqlParser.CANCEL:
			case StarRocksSqlParser.CASE:
			case StarRocksSqlParser.CAST:
			case StarRocksSqlParser.CATALOG:
			case StarRocksSqlParser.CATALOGS:
			case StarRocksSqlParser.CEIL:
			case StarRocksSqlParser.CHAIN:
			case StarRocksSqlParser.CHAR:
			case StarRocksSqlParser.CHARSET:
			case StarRocksSqlParser.CLEAN:
			case StarRocksSqlParser.CLUSTER:
			case StarRocksSqlParser.CLUSTERS:
			case StarRocksSqlParser.COLLATION:
			case StarRocksSqlParser.COLUMNS:
			case StarRocksSqlParser.COMMENT:
			case StarRocksSqlParser.COMMIT:
			case StarRocksSqlParser.COMMITTED:
			case StarRocksSqlParser.COMPUTE:
			case StarRocksSqlParser.CONFIG:
			case StarRocksSqlParser.CONNECTION:
			case StarRocksSqlParser.CONSISTENT:
			case StarRocksSqlParser.CONVERT:
			case StarRocksSqlParser.COSTS:
			case StarRocksSqlParser.COUNT:
			case StarRocksSqlParser.CUME_DIST:
			case StarRocksSqlParser.CURRENT:
			case StarRocksSqlParser.CURRENT_DATE:
			case StarRocksSqlParser.CURRENT_ROLE:
			case StarRocksSqlParser.CURRENT_TIME:
			case StarRocksSqlParser.CURRENT_TIMESTAMP:
			case StarRocksSqlParser.CURRENT_USER:
			case StarRocksSqlParser.DATA:
			case StarRocksSqlParser.DATABASE:
			case StarRocksSqlParser.DATE:
			case StarRocksSqlParser.DATETIME:
			case StarRocksSqlParser.DAY:
			case StarRocksSqlParser.DECOMMISSION:
			case StarRocksSqlParser.DENSE_RANK:
			case StarRocksSqlParser.NTILE:
			case StarRocksSqlParser.DISTRIBUTED:
			case StarRocksSqlParser.DISTRIBUTION:
			case StarRocksSqlParser.DUPLICATE:
			case StarRocksSqlParser.DYNAMIC:
			case StarRocksSqlParser.ENCLOSE:
			case StarRocksSqlParser.END:
			case StarRocksSqlParser.ENGINE:
			case StarRocksSqlParser.ENGINES:
			case StarRocksSqlParser.ERRORS:
			case StarRocksSqlParser.ESCAPE:
			case StarRocksSqlParser.EVENTS:
			case StarRocksSqlParser.EXECUTE:
			case StarRocksSqlParser.EXISTS:
			case StarRocksSqlParser.EXPORT:
			case StarRocksSqlParser.EXTERNAL:
			case StarRocksSqlParser.EXTRACT:
			case StarRocksSqlParser.EVERY:
			case StarRocksSqlParser.FALSE:
			case StarRocksSqlParser.FIELDS:
			case StarRocksSqlParser.FILE:
			case StarRocksSqlParser.FILTER:
			case StarRocksSqlParser.FIRST:
			case StarRocksSqlParser.FIRST_VALUE:
			case StarRocksSqlParser.FLOOR:
			case StarRocksSqlParser.FN:
			case StarRocksSqlParser.FOLLOWING:
			case StarRocksSqlParser.FOLLOWER:
			case StarRocksSqlParser.FORMAT:
			case StarRocksSqlParser.FREE:
			case StarRocksSqlParser.FRONTEND:
			case StarRocksSqlParser.FRONTENDS:
			case StarRocksSqlParser.FUNCTIONS:
			case StarRocksSqlParser.GLOBAL:
			case StarRocksSqlParser.GRANTS:
			case StarRocksSqlParser.GROUPING:
			case StarRocksSqlParser.GROUPING_ID:
			case StarRocksSqlParser.HASH:
			case StarRocksSqlParser.HELP:
			case StarRocksSqlParser.HISTOGRAM:
			case StarRocksSqlParser.HLL_UNION:
			case StarRocksSqlParser.HOST:
			case StarRocksSqlParser.HOUR:
			case StarRocksSqlParser.HUB:
			case StarRocksSqlParser.IDENTIFIED:
			case StarRocksSqlParser.IF:
			case StarRocksSqlParser.IMPERSONATE:
			case StarRocksSqlParser.IMAGE:
			case StarRocksSqlParser.INACTIVE:
			case StarRocksSqlParser.INCREMENTAL:
			case StarRocksSqlParser.INDEXES:
			case StarRocksSqlParser.INSTALL:
			case StarRocksSqlParser.INTERMEDIATE:
			case StarRocksSqlParser.INTERVAL:
			case StarRocksSqlParser.OVERWRITE:
			case StarRocksSqlParser.ISOLATION:
			case StarRocksSqlParser.JOB:
			case StarRocksSqlParser.LABEL:
			case StarRocksSqlParser.LAG:
			case StarRocksSqlParser.LAST:
			case StarRocksSqlParser.LAST_VALUE:
			case StarRocksSqlParser.LEAD:
			case StarRocksSqlParser.LEFT:
			case StarRocksSqlParser.LESS:
			case StarRocksSqlParser.LEVEL:
			case StarRocksSqlParser.LIKE:
			case StarRocksSqlParser.LIST:
			case StarRocksSqlParser.LOCAL:
			case StarRocksSqlParser.LOCALTIME:
			case StarRocksSqlParser.LOCALTIMESTAMP:
			case StarRocksSqlParser.LOCATION:
			case StarRocksSqlParser.LOGICAL:
			case StarRocksSqlParser.MANUAL:
			case StarRocksSqlParser.MAP:
			case StarRocksSqlParser.MATERIALIZED:
			case StarRocksSqlParser.MAX:
			case StarRocksSqlParser.MERGE:
			case StarRocksSqlParser.MIN:
			case StarRocksSqlParser.MINUTE:
			case StarRocksSqlParser.MINUS:
			case StarRocksSqlParser.META:
			case StarRocksSqlParser.MOD:
			case StarRocksSqlParser.MODE:
			case StarRocksSqlParser.MODIFY:
			case StarRocksSqlParser.MONTH:
			case StarRocksSqlParser.NAME:
			case StarRocksSqlParser.NAMES:
			case StarRocksSqlParser.NEGATIVE:
			case StarRocksSqlParser.NO:
			case StarRocksSqlParser.NODE:
			case StarRocksSqlParser.NODES:
			case StarRocksSqlParser.NONE:
			case StarRocksSqlParser.NOT:
			case StarRocksSqlParser.NULL:
			case StarRocksSqlParser.NULLS:
			case StarRocksSqlParser.NUMBER:
			case StarRocksSqlParser.NUMERIC:
			case StarRocksSqlParser.OBSERVER:
			case StarRocksSqlParser.OF:
			case StarRocksSqlParser.OFFSET:
			case StarRocksSqlParser.ONLY:
			case StarRocksSqlParser.OPEN:
			case StarRocksSqlParser.OPERATE:
			case StarRocksSqlParser.OPTIMIZER:
			case StarRocksSqlParser.OPTION:
			case StarRocksSqlParser.PARTITIONS:
			case StarRocksSqlParser.PASSWORD:
			case StarRocksSqlParser.PATH:
			case StarRocksSqlParser.PAUSE:
			case StarRocksSqlParser.PENDING:
			case StarRocksSqlParser.PERCENT_RANK:
			case StarRocksSqlParser.PERCENTILE_UNION:
			case StarRocksSqlParser.PLUGIN:
			case StarRocksSqlParser.PLUGINS:
			case StarRocksSqlParser.PRECEDING:
			case StarRocksSqlParser.PRIVILEGES:
			case StarRocksSqlParser.PROC:
			case StarRocksSqlParser.PROCESSLIST:
			case StarRocksSqlParser.PROFILE:
			case StarRocksSqlParser.PROFILELIST:
			case StarRocksSqlParser.PROPERTIES:
			case StarRocksSqlParser.PROPERTY:
			case StarRocksSqlParser.QUALIFY:
			case StarRocksSqlParser.QUARTER:
			case StarRocksSqlParser.QUERY:
			case StarRocksSqlParser.QUEUE:
			case StarRocksSqlParser.QUOTA:
			case StarRocksSqlParser.RANDOM:
			case StarRocksSqlParser.RANK:
			case StarRocksSqlParser.RECOVER:
			case StarRocksSqlParser.REFRESH:
			case StarRocksSqlParser.REWRITE:
			case StarRocksSqlParser.REGEXP:
			case StarRocksSqlParser.REMOVE:
			case StarRocksSqlParser.REPAIR:
			case StarRocksSqlParser.REPEATABLE:
			case StarRocksSqlParser.REPLACE:
			case StarRocksSqlParser.REPLACE_IF_NOT_NULL:
			case StarRocksSqlParser.REPLICA:
			case StarRocksSqlParser.REPOSITORY:
			case StarRocksSqlParser.REPOSITORIES:
			case StarRocksSqlParser.RESOURCE:
			case StarRocksSqlParser.RESOURCES:
			case StarRocksSqlParser.RESTORE:
			case StarRocksSqlParser.RESUME:
			case StarRocksSqlParser.RETURNS:
			case StarRocksSqlParser.REVERT:
			case StarRocksSqlParser.RIGHT:
			case StarRocksSqlParser.RLIKE:
			case StarRocksSqlParser.ROLE:
			case StarRocksSqlParser.ROLES:
			case StarRocksSqlParser.ROLLBACK:
			case StarRocksSqlParser.ROLLUP:
			case StarRocksSqlParser.ROUTINE:
			case StarRocksSqlParser.ROW:
			case StarRocksSqlParser.ROW_NUMBER:
			case StarRocksSqlParser.SAMPLE:
			case StarRocksSqlParser.SCHEDULER:
			case StarRocksSqlParser.SCHEMA:
			case StarRocksSqlParser.SECOND:
			case StarRocksSqlParser.SEMI:
			case StarRocksSqlParser.SERIALIZABLE:
			case StarRocksSqlParser.SESSION:
			case StarRocksSqlParser.SETS:
			case StarRocksSqlParser.SIGNED:
			case StarRocksSqlParser.SKIP_HEADER:
			case StarRocksSqlParser.SNAPSHOT:
			case StarRocksSqlParser.SQLBLACKLIST:
			case StarRocksSqlParser.START:
			case StarRocksSqlParser.STATS:
			case StarRocksSqlParser.STATUS:
			case StarRocksSqlParser.STOP:
			case StarRocksSqlParser.STORAGE:
			case StarRocksSqlParser.STREAM:
			case StarRocksSqlParser.STRING:
			case StarRocksSqlParser.SUBMIT:
			case StarRocksSqlParser.SUM:
			case StarRocksSqlParser.SUSPEND:
			case StarRocksSqlParser.SYNC:
			case StarRocksSqlParser.SYSTEM_TIME:
			case StarRocksSqlParser.SWAP:
			case StarRocksSqlParser.STRUCT:
			case StarRocksSqlParser.TABLES:
			case StarRocksSqlParser.TABLET:
			case StarRocksSqlParser.TASK:
			case StarRocksSqlParser.TEMPORARY:
			case StarRocksSqlParser.THAN:
			case StarRocksSqlParser.TIME:
			case StarRocksSqlParser.TIMESTAMP:
			case StarRocksSqlParser.TIMESTAMPADD:
			case StarRocksSqlParser.TIMESTAMPDIFF:
			case StarRocksSqlParser.TRANSACTION:
			case StarRocksSqlParser.TRACE:
			case StarRocksSqlParser.TRIGGERS:
			case StarRocksSqlParser.TRIM_SPACE:
			case StarRocksSqlParser.TRUE:
			case StarRocksSqlParser.TRUNCATE:
			case StarRocksSqlParser.TYPE:
			case StarRocksSqlParser.TYPES:
			case StarRocksSqlParser.UNBOUNDED:
			case StarRocksSqlParser.UNCOMMITTED:
			case StarRocksSqlParser.UNINSTALL:
			case StarRocksSqlParser.USAGE:
			case StarRocksSqlParser.USER:
			case StarRocksSqlParser.USERS:
			case StarRocksSqlParser.VALUE:
			case StarRocksSqlParser.VARIABLES:
			case StarRocksSqlParser.VERBOSE:
			case StarRocksSqlParser.VIEW:
			case StarRocksSqlParser.VIEWS:
			case StarRocksSqlParser.WAREHOUSE:
			case StarRocksSqlParser.WAREHOUSES:
			case StarRocksSqlParser.WARNINGS:
			case StarRocksSqlParser.WEEK:
			case StarRocksSqlParser.WHITELIST:
			case StarRocksSqlParser.WORK:
			case StarRocksSqlParser.WRITE:
			case StarRocksSqlParser.YEAR:
			case StarRocksSqlParser.LOCK:
			case StarRocksSqlParser.UNLOCK:
			case StarRocksSqlParser.LOW_PRIORITY:
			case StarRocksSqlParser.PLUS_SYMBOL:
			case StarRocksSqlParser.MINUS_SYMBOL:
			case StarRocksSqlParser.LOGICAL_NOT:
			case StarRocksSqlParser.BITNOT:
			case StarRocksSqlParser.AT:
			case StarRocksSqlParser.INTEGER_VALUE:
			case StarRocksSqlParser.DECIMAL_VALUE:
			case StarRocksSqlParser.DOUBLE_VALUE:
			case StarRocksSqlParser.SINGLE_QUOTED_TEXT:
			case StarRocksSqlParser.DOUBLE_QUOTED_TEXT:
			case StarRocksSqlParser.BINARY_SINGLE_QUOTED_TEXT:
			case StarRocksSqlParser.BINARY_DOUBLE_QUOTED_TEXT:
			case StarRocksSqlParser.LETTER_IDENTIFIER:
			case StarRocksSqlParser.DIGIT_IDENTIFIER:
			case StarRocksSqlParser.BACKQUOTED_IDENTIFIER:
			case StarRocksSqlParser.LEFT_PAREN:
			case StarRocksSqlParser.LEFT_BRACKET:
			case StarRocksSqlParser.LEFT_BRACE:
			case StarRocksSqlParser.DOTDOTDOT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5353;
				this.expression(0);
				}
				break;
			case StarRocksSqlParser.DEFAULT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5354;
				this.match(StarRocksSqlParser.DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mapExpressionList(): MapExpressionListContext {
		let _localctx: MapExpressionListContext = new MapExpressionListContext(this._ctx, this.state);
		this.enterRule(_localctx, 670, StarRocksSqlParser.RULE_mapExpressionList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5357;
			this.mapExpression();
			this.state = 5362;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 5358;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 5359;
				this.mapExpression();
				}
				}
				this.state = 5364;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mapExpression(): MapExpressionContext {
		let _localctx: MapExpressionContext = new MapExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 672, StarRocksSqlParser.RULE_mapExpression);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5365;
			_localctx._key = this.expression(0);
			this.state = 5366;
			this.match(StarRocksSqlParser.COLON);
			this.state = 5367;
			_localctx._value = this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expressionSingleton(): ExpressionSingletonContext {
		let _localctx: ExpressionSingletonContext = new ExpressionSingletonContext(this._ctx, this.state);
		this.enterRule(_localctx, 674, StarRocksSqlParser.RULE_expressionSingleton);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5369;
			this.expression(0);
			this.state = 5370;
			this.match(StarRocksSqlParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public expression(): ExpressionContext;
	public expression(_p: number): ExpressionContext;
	// @RuleVersion(0)
	public expression(_p?: number): ExpressionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: ExpressionContext = new ExpressionContext(this._ctx, _parentState);
		let _prevctx: ExpressionContext = _localctx;
		let _startState: number = 676;
		this.enterRecursionRule(_localctx, 676, StarRocksSqlParser.RULE_expression, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5376;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.ACTIVE:
			case StarRocksSqlParser.ADMIN:
			case StarRocksSqlParser.AFTER:
			case StarRocksSqlParser.AGGREGATE:
			case StarRocksSqlParser.ANTI:
			case StarRocksSqlParser.ARRAY:
			case StarRocksSqlParser.ARRAY_AGG:
			case StarRocksSqlParser.ASYNC:
			case StarRocksSqlParser.AUTHORS:
			case StarRocksSqlParser.AUTHENTICATION:
			case StarRocksSqlParser.AUTO_INCREMENT:
			case StarRocksSqlParser.AVG:
			case StarRocksSqlParser.BACKEND:
			case StarRocksSqlParser.BACKENDS:
			case StarRocksSqlParser.BACKUP:
			case StarRocksSqlParser.BEGIN:
			case StarRocksSqlParser.BITMAP_UNION:
			case StarRocksSqlParser.BLACKLIST:
			case StarRocksSqlParser.BOOLEAN:
			case StarRocksSqlParser.BROKER:
			case StarRocksSqlParser.BUCKETS:
			case StarRocksSqlParser.BUILTIN:
			case StarRocksSqlParser.CANCEL:
			case StarRocksSqlParser.CASE:
			case StarRocksSqlParser.CAST:
			case StarRocksSqlParser.CATALOG:
			case StarRocksSqlParser.CATALOGS:
			case StarRocksSqlParser.CEIL:
			case StarRocksSqlParser.CHAIN:
			case StarRocksSqlParser.CHAR:
			case StarRocksSqlParser.CHARSET:
			case StarRocksSqlParser.CLEAN:
			case StarRocksSqlParser.CLUSTER:
			case StarRocksSqlParser.CLUSTERS:
			case StarRocksSqlParser.COLLATION:
			case StarRocksSqlParser.COLUMNS:
			case StarRocksSqlParser.COMMENT:
			case StarRocksSqlParser.COMMIT:
			case StarRocksSqlParser.COMMITTED:
			case StarRocksSqlParser.COMPUTE:
			case StarRocksSqlParser.CONFIG:
			case StarRocksSqlParser.CONNECTION:
			case StarRocksSqlParser.CONSISTENT:
			case StarRocksSqlParser.CONVERT:
			case StarRocksSqlParser.COSTS:
			case StarRocksSqlParser.COUNT:
			case StarRocksSqlParser.CUME_DIST:
			case StarRocksSqlParser.CURRENT:
			case StarRocksSqlParser.CURRENT_DATE:
			case StarRocksSqlParser.CURRENT_ROLE:
			case StarRocksSqlParser.CURRENT_TIME:
			case StarRocksSqlParser.CURRENT_TIMESTAMP:
			case StarRocksSqlParser.CURRENT_USER:
			case StarRocksSqlParser.DATA:
			case StarRocksSqlParser.DATABASE:
			case StarRocksSqlParser.DATE:
			case StarRocksSqlParser.DATETIME:
			case StarRocksSqlParser.DAY:
			case StarRocksSqlParser.DECOMMISSION:
			case StarRocksSqlParser.DENSE_RANK:
			case StarRocksSqlParser.NTILE:
			case StarRocksSqlParser.DISTRIBUTED:
			case StarRocksSqlParser.DISTRIBUTION:
			case StarRocksSqlParser.DUPLICATE:
			case StarRocksSqlParser.DYNAMIC:
			case StarRocksSqlParser.ENCLOSE:
			case StarRocksSqlParser.END:
			case StarRocksSqlParser.ENGINE:
			case StarRocksSqlParser.ENGINES:
			case StarRocksSqlParser.ERRORS:
			case StarRocksSqlParser.ESCAPE:
			case StarRocksSqlParser.EVENTS:
			case StarRocksSqlParser.EXECUTE:
			case StarRocksSqlParser.EXISTS:
			case StarRocksSqlParser.EXPORT:
			case StarRocksSqlParser.EXTERNAL:
			case StarRocksSqlParser.EXTRACT:
			case StarRocksSqlParser.EVERY:
			case StarRocksSqlParser.FALSE:
			case StarRocksSqlParser.FIELDS:
			case StarRocksSqlParser.FILE:
			case StarRocksSqlParser.FILTER:
			case StarRocksSqlParser.FIRST:
			case StarRocksSqlParser.FIRST_VALUE:
			case StarRocksSqlParser.FLOOR:
			case StarRocksSqlParser.FN:
			case StarRocksSqlParser.FOLLOWING:
			case StarRocksSqlParser.FOLLOWER:
			case StarRocksSqlParser.FORMAT:
			case StarRocksSqlParser.FREE:
			case StarRocksSqlParser.FRONTEND:
			case StarRocksSqlParser.FRONTENDS:
			case StarRocksSqlParser.FUNCTIONS:
			case StarRocksSqlParser.GLOBAL:
			case StarRocksSqlParser.GRANTS:
			case StarRocksSqlParser.GROUPING:
			case StarRocksSqlParser.GROUPING_ID:
			case StarRocksSqlParser.HASH:
			case StarRocksSqlParser.HELP:
			case StarRocksSqlParser.HISTOGRAM:
			case StarRocksSqlParser.HLL_UNION:
			case StarRocksSqlParser.HOST:
			case StarRocksSqlParser.HOUR:
			case StarRocksSqlParser.HUB:
			case StarRocksSqlParser.IDENTIFIED:
			case StarRocksSqlParser.IF:
			case StarRocksSqlParser.IMPERSONATE:
			case StarRocksSqlParser.IMAGE:
			case StarRocksSqlParser.INACTIVE:
			case StarRocksSqlParser.INCREMENTAL:
			case StarRocksSqlParser.INDEXES:
			case StarRocksSqlParser.INSTALL:
			case StarRocksSqlParser.INTERMEDIATE:
			case StarRocksSqlParser.INTERVAL:
			case StarRocksSqlParser.OVERWRITE:
			case StarRocksSqlParser.ISOLATION:
			case StarRocksSqlParser.JOB:
			case StarRocksSqlParser.LABEL:
			case StarRocksSqlParser.LAG:
			case StarRocksSqlParser.LAST:
			case StarRocksSqlParser.LAST_VALUE:
			case StarRocksSqlParser.LEAD:
			case StarRocksSqlParser.LEFT:
			case StarRocksSqlParser.LESS:
			case StarRocksSqlParser.LEVEL:
			case StarRocksSqlParser.LIKE:
			case StarRocksSqlParser.LIST:
			case StarRocksSqlParser.LOCAL:
			case StarRocksSqlParser.LOCALTIME:
			case StarRocksSqlParser.LOCALTIMESTAMP:
			case StarRocksSqlParser.LOCATION:
			case StarRocksSqlParser.LOGICAL:
			case StarRocksSqlParser.MANUAL:
			case StarRocksSqlParser.MAP:
			case StarRocksSqlParser.MATERIALIZED:
			case StarRocksSqlParser.MAX:
			case StarRocksSqlParser.MERGE:
			case StarRocksSqlParser.MIN:
			case StarRocksSqlParser.MINUTE:
			case StarRocksSqlParser.MINUS:
			case StarRocksSqlParser.META:
			case StarRocksSqlParser.MOD:
			case StarRocksSqlParser.MODE:
			case StarRocksSqlParser.MODIFY:
			case StarRocksSqlParser.MONTH:
			case StarRocksSqlParser.NAME:
			case StarRocksSqlParser.NAMES:
			case StarRocksSqlParser.NEGATIVE:
			case StarRocksSqlParser.NO:
			case StarRocksSqlParser.NODE:
			case StarRocksSqlParser.NODES:
			case StarRocksSqlParser.NONE:
			case StarRocksSqlParser.NULL:
			case StarRocksSqlParser.NULLS:
			case StarRocksSqlParser.NUMBER:
			case StarRocksSqlParser.NUMERIC:
			case StarRocksSqlParser.OBSERVER:
			case StarRocksSqlParser.OF:
			case StarRocksSqlParser.OFFSET:
			case StarRocksSqlParser.ONLY:
			case StarRocksSqlParser.OPEN:
			case StarRocksSqlParser.OPERATE:
			case StarRocksSqlParser.OPTIMIZER:
			case StarRocksSqlParser.OPTION:
			case StarRocksSqlParser.PARTITIONS:
			case StarRocksSqlParser.PASSWORD:
			case StarRocksSqlParser.PATH:
			case StarRocksSqlParser.PAUSE:
			case StarRocksSqlParser.PENDING:
			case StarRocksSqlParser.PERCENT_RANK:
			case StarRocksSqlParser.PERCENTILE_UNION:
			case StarRocksSqlParser.PLUGIN:
			case StarRocksSqlParser.PLUGINS:
			case StarRocksSqlParser.PRECEDING:
			case StarRocksSqlParser.PRIVILEGES:
			case StarRocksSqlParser.PROC:
			case StarRocksSqlParser.PROCESSLIST:
			case StarRocksSqlParser.PROFILE:
			case StarRocksSqlParser.PROFILELIST:
			case StarRocksSqlParser.PROPERTIES:
			case StarRocksSqlParser.PROPERTY:
			case StarRocksSqlParser.QUALIFY:
			case StarRocksSqlParser.QUARTER:
			case StarRocksSqlParser.QUERY:
			case StarRocksSqlParser.QUEUE:
			case StarRocksSqlParser.QUOTA:
			case StarRocksSqlParser.RANDOM:
			case StarRocksSqlParser.RANK:
			case StarRocksSqlParser.RECOVER:
			case StarRocksSqlParser.REFRESH:
			case StarRocksSqlParser.REWRITE:
			case StarRocksSqlParser.REGEXP:
			case StarRocksSqlParser.REMOVE:
			case StarRocksSqlParser.REPAIR:
			case StarRocksSqlParser.REPEATABLE:
			case StarRocksSqlParser.REPLACE:
			case StarRocksSqlParser.REPLACE_IF_NOT_NULL:
			case StarRocksSqlParser.REPLICA:
			case StarRocksSqlParser.REPOSITORY:
			case StarRocksSqlParser.REPOSITORIES:
			case StarRocksSqlParser.RESOURCE:
			case StarRocksSqlParser.RESOURCES:
			case StarRocksSqlParser.RESTORE:
			case StarRocksSqlParser.RESUME:
			case StarRocksSqlParser.RETURNS:
			case StarRocksSqlParser.REVERT:
			case StarRocksSqlParser.RIGHT:
			case StarRocksSqlParser.RLIKE:
			case StarRocksSqlParser.ROLE:
			case StarRocksSqlParser.ROLES:
			case StarRocksSqlParser.ROLLBACK:
			case StarRocksSqlParser.ROLLUP:
			case StarRocksSqlParser.ROUTINE:
			case StarRocksSqlParser.ROW:
			case StarRocksSqlParser.ROW_NUMBER:
			case StarRocksSqlParser.SAMPLE:
			case StarRocksSqlParser.SCHEDULER:
			case StarRocksSqlParser.SCHEMA:
			case StarRocksSqlParser.SECOND:
			case StarRocksSqlParser.SEMI:
			case StarRocksSqlParser.SERIALIZABLE:
			case StarRocksSqlParser.SESSION:
			case StarRocksSqlParser.SETS:
			case StarRocksSqlParser.SIGNED:
			case StarRocksSqlParser.SKIP_HEADER:
			case StarRocksSqlParser.SNAPSHOT:
			case StarRocksSqlParser.SQLBLACKLIST:
			case StarRocksSqlParser.START:
			case StarRocksSqlParser.STATS:
			case StarRocksSqlParser.STATUS:
			case StarRocksSqlParser.STOP:
			case StarRocksSqlParser.STORAGE:
			case StarRocksSqlParser.STREAM:
			case StarRocksSqlParser.STRING:
			case StarRocksSqlParser.SUBMIT:
			case StarRocksSqlParser.SUM:
			case StarRocksSqlParser.SUSPEND:
			case StarRocksSqlParser.SYNC:
			case StarRocksSqlParser.SYSTEM_TIME:
			case StarRocksSqlParser.SWAP:
			case StarRocksSqlParser.STRUCT:
			case StarRocksSqlParser.TABLES:
			case StarRocksSqlParser.TABLET:
			case StarRocksSqlParser.TASK:
			case StarRocksSqlParser.TEMPORARY:
			case StarRocksSqlParser.THAN:
			case StarRocksSqlParser.TIME:
			case StarRocksSqlParser.TIMESTAMP:
			case StarRocksSqlParser.TIMESTAMPADD:
			case StarRocksSqlParser.TIMESTAMPDIFF:
			case StarRocksSqlParser.TRANSACTION:
			case StarRocksSqlParser.TRACE:
			case StarRocksSqlParser.TRIGGERS:
			case StarRocksSqlParser.TRIM_SPACE:
			case StarRocksSqlParser.TRUE:
			case StarRocksSqlParser.TRUNCATE:
			case StarRocksSqlParser.TYPE:
			case StarRocksSqlParser.TYPES:
			case StarRocksSqlParser.UNBOUNDED:
			case StarRocksSqlParser.UNCOMMITTED:
			case StarRocksSqlParser.UNINSTALL:
			case StarRocksSqlParser.USAGE:
			case StarRocksSqlParser.USER:
			case StarRocksSqlParser.USERS:
			case StarRocksSqlParser.VALUE:
			case StarRocksSqlParser.VARIABLES:
			case StarRocksSqlParser.VERBOSE:
			case StarRocksSqlParser.VIEW:
			case StarRocksSqlParser.VIEWS:
			case StarRocksSqlParser.WAREHOUSE:
			case StarRocksSqlParser.WAREHOUSES:
			case StarRocksSqlParser.WARNINGS:
			case StarRocksSqlParser.WEEK:
			case StarRocksSqlParser.WHITELIST:
			case StarRocksSqlParser.WORK:
			case StarRocksSqlParser.WRITE:
			case StarRocksSqlParser.YEAR:
			case StarRocksSqlParser.LOCK:
			case StarRocksSqlParser.UNLOCK:
			case StarRocksSqlParser.LOW_PRIORITY:
			case StarRocksSqlParser.PLUS_SYMBOL:
			case StarRocksSqlParser.MINUS_SYMBOL:
			case StarRocksSqlParser.LOGICAL_NOT:
			case StarRocksSqlParser.BITNOT:
			case StarRocksSqlParser.AT:
			case StarRocksSqlParser.INTEGER_VALUE:
			case StarRocksSqlParser.DECIMAL_VALUE:
			case StarRocksSqlParser.DOUBLE_VALUE:
			case StarRocksSqlParser.SINGLE_QUOTED_TEXT:
			case StarRocksSqlParser.DOUBLE_QUOTED_TEXT:
			case StarRocksSqlParser.BINARY_SINGLE_QUOTED_TEXT:
			case StarRocksSqlParser.BINARY_DOUBLE_QUOTED_TEXT:
			case StarRocksSqlParser.LETTER_IDENTIFIER:
			case StarRocksSqlParser.DIGIT_IDENTIFIER:
			case StarRocksSqlParser.BACKQUOTED_IDENTIFIER:
			case StarRocksSqlParser.LEFT_PAREN:
			case StarRocksSqlParser.LEFT_BRACKET:
			case StarRocksSqlParser.LEFT_BRACE:
			case StarRocksSqlParser.DOTDOTDOT:
				{
				_localctx = new ExpressionDefaultContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;

				this.state = 5373;
				this.booleanExpression(0);
				}
				break;
			case StarRocksSqlParser.NOT:
				{
				_localctx = new LogicalNotContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5374;
				this.match(StarRocksSqlParser.NOT);
				this.state = 5375;
				this.expression(3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 5386;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 607, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 5384;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 606, this._ctx) ) {
					case 1:
						{
						_localctx = new LogicalBinaryContext(new ExpressionContext(_parentctx, _parentState));
						(_localctx as LogicalBinaryContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, StarRocksSqlParser.RULE_expression);
						this.state = 5378;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 5379;
						(_localctx as LogicalBinaryContext)._operator = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === StarRocksSqlParser.AND || _la === StarRocksSqlParser.LOGICAL_AND)) {
							(_localctx as LogicalBinaryContext)._operator = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 5380;
						(_localctx as LogicalBinaryContext)._right = this.expression(3);
						}
						break;

					case 2:
						{
						_localctx = new LogicalBinaryContext(new ExpressionContext(_parentctx, _parentState));
						(_localctx as LogicalBinaryContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, StarRocksSqlParser.RULE_expression);
						this.state = 5381;
						if (!(this.precpred(this._ctx, 1))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
						}
						this.state = 5382;
						(_localctx as LogicalBinaryContext)._operator = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === StarRocksSqlParser.OR || _la === StarRocksSqlParser.LOGICAL_OR)) {
							(_localctx as LogicalBinaryContext)._operator = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 5383;
						(_localctx as LogicalBinaryContext)._right = this.expression(2);
						}
						break;
					}
					}
				}
				this.state = 5388;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 607, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expressionList(): ExpressionListContext {
		let _localctx: ExpressionListContext = new ExpressionListContext(this._ctx, this.state);
		this.enterRule(_localctx, 678, StarRocksSqlParser.RULE_expressionList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5389;
			this.expression(0);
			this.state = 5394;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 608, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5390;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 5391;
					this.expression(0);
					}
					}
				}
				this.state = 5396;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 608, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public booleanExpression(): BooleanExpressionContext;
	public booleanExpression(_p: number): BooleanExpressionContext;
	// @RuleVersion(0)
	public booleanExpression(_p?: number): BooleanExpressionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: BooleanExpressionContext = new BooleanExpressionContext(this._ctx, _parentState);
		let _prevctx: BooleanExpressionContext = _localctx;
		let _startState: number = 680;
		this.enterRecursionRule(_localctx, 680, StarRocksSqlParser.RULE_booleanExpression, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new BooleanExpressionDefaultContext(_localctx);
			this._ctx = _localctx;
			_prevctx = _localctx;

			this.state = 5398;
			this.predicate();
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 5418;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 611, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 5416;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 610, this._ctx) ) {
					case 1:
						{
						_localctx = new IsNullContext(new BooleanExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, StarRocksSqlParser.RULE_booleanExpression);
						this.state = 5400;
						if (!(this.precpred(this._ctx, 3))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
						}
						this.state = 5401;
						this.match(StarRocksSqlParser.IS);
						this.state = 5403;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === StarRocksSqlParser.NOT) {
							{
							this.state = 5402;
							this.match(StarRocksSqlParser.NOT);
							}
						}

						this.state = 5405;
						this.match(StarRocksSqlParser.NULL);
						}
						break;

					case 2:
						{
						_localctx = new ComparisonContext(new BooleanExpressionContext(_parentctx, _parentState));
						(_localctx as ComparisonContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, StarRocksSqlParser.RULE_booleanExpression);
						this.state = 5406;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 5407;
						this.comparisonOperator();
						this.state = 5408;
						(_localctx as ComparisonContext)._right = this.predicate();
						}
						break;

					case 3:
						{
						_localctx = new ScalarSubqueryContext(new BooleanExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, StarRocksSqlParser.RULE_booleanExpression);
						this.state = 5410;
						if (!(this.precpred(this._ctx, 1))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
						}
						this.state = 5411;
						this.comparisonOperator();
						this.state = 5412;
						this.match(StarRocksSqlParser.LEFT_PAREN);
						this.state = 5413;
						this.queryRelation();
						this.state = 5414;
						this.match(StarRocksSqlParser.RIGHT_PAREN);
						}
						break;
					}
					}
				}
				this.state = 5420;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 611, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public predicate(): PredicateContext {
		let _localctx: PredicateContext = new PredicateContext(this._ctx, this.state);
		this.enterRule(_localctx, 682, StarRocksSqlParser.RULE_predicate);
		try {
			this.state = 5426;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 613, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5421;
				_localctx._valueExpression = this.valueExpression(0);
				this.state = 5423;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 612, this._ctx) ) {
				case 1:
					{
					this.state = 5422;
					this.predicateOperations(_localctx._valueExpression);
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5425;
				this.tupleInSubquery();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tupleInSubquery(): TupleInSubqueryContext {
		let _localctx: TupleInSubqueryContext = new TupleInSubqueryContext(this._ctx, this.state);
		this.enterRule(_localctx, 684, StarRocksSqlParser.RULE_tupleInSubquery);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5428;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 5429;
			this.expression(0);
			this.state = 5432;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5430;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 5431;
				this.expression(0);
				}
				}
				this.state = 5434;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === StarRocksSqlParser.COMMA);
			this.state = 5436;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			this.state = 5438;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.NOT) {
				{
				this.state = 5437;
				this.match(StarRocksSqlParser.NOT);
				}
			}

			this.state = 5440;
			this.match(StarRocksSqlParser.IN);
			this.state = 5441;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 5442;
			this.queryRelation();
			this.state = 5443;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public predicateOperations(value: ParserRuleContext): PredicateOperationsContext {
		let _localctx: PredicateOperationsContext = new PredicateOperationsContext(this._ctx, this.state, value);
		this.enterRule(_localctx, 686, StarRocksSqlParser.RULE_predicateOperations);
		let _la: number;
		try {
			this.state = 5474;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 620, this._ctx) ) {
			case 1:
				_localctx = new InSubqueryContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5446;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.NOT) {
					{
					this.state = 5445;
					this.match(StarRocksSqlParser.NOT);
					}
				}

				this.state = 5448;
				this.match(StarRocksSqlParser.IN);
				this.state = 5449;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5450;
				this.queryRelation();
				this.state = 5451;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;

			case 2:
				_localctx = new InListContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5454;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.NOT) {
					{
					this.state = 5453;
					this.match(StarRocksSqlParser.NOT);
					}
				}

				this.state = 5456;
				this.match(StarRocksSqlParser.IN);
				this.state = 5457;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5458;
				this.expressionList();
				this.state = 5459;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;

			case 3:
				_localctx = new BetweenContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5462;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.NOT) {
					{
					this.state = 5461;
					this.match(StarRocksSqlParser.NOT);
					}
				}

				this.state = 5464;
				this.match(StarRocksSqlParser.BETWEEN);
				this.state = 5465;
				(_localctx as BetweenContext)._lower = this.valueExpression(0);
				this.state = 5466;
				this.match(StarRocksSqlParser.AND);
				this.state = 5467;
				(_localctx as BetweenContext)._upper = this.predicate();
				}
				break;

			case 4:
				_localctx = new LikeContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5470;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.NOT) {
					{
					this.state = 5469;
					this.match(StarRocksSqlParser.NOT);
					}
				}

				this.state = 5472;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.LIKE || _la === StarRocksSqlParser.REGEXP || _la === StarRocksSqlParser.RLIKE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5473;
				(_localctx as LikeContext)._pattern = this.valueExpression(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public valueExpression(): ValueExpressionContext;
	public valueExpression(_p: number): ValueExpressionContext;
	// @RuleVersion(0)
	public valueExpression(_p?: number): ValueExpressionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: ValueExpressionContext = new ValueExpressionContext(this._ctx, _parentState);
		let _prevctx: ValueExpressionContext = _localctx;
		let _startState: number = 688;
		this.enterRecursionRule(_localctx, 688, StarRocksSqlParser.RULE_valueExpression, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ValueExpressionDefaultContext(_localctx);
			this._ctx = _localctx;
			_prevctx = _localctx;

			this.state = 5477;
			this.primaryExpression(0);
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 5505;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 622, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 5503;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 621, this._ctx) ) {
					case 1:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						(_localctx as ArithmeticBinaryContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, StarRocksSqlParser.RULE_valueExpression);
						this.state = 5479;
						if (!(this.precpred(this._ctx, 8))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 8)");
						}
						this.state = 5480;
						(_localctx as ArithmeticBinaryContext)._operator = this.match(StarRocksSqlParser.BITXOR);
						this.state = 5481;
						(_localctx as ArithmeticBinaryContext)._right = this.valueExpression(9);
						}
						break;

					case 2:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						(_localctx as ArithmeticBinaryContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, StarRocksSqlParser.RULE_valueExpression);
						this.state = 5482;
						if (!(this.precpred(this._ctx, 7))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 7)");
						}
						this.state = 5483;
						(_localctx as ArithmeticBinaryContext)._operator = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === StarRocksSqlParser.MOD || ((((_la - 424)) & ~0x1F) === 0 && ((1 << (_la - 424)) & ((1 << (StarRocksSqlParser.ASTERISK_SYMBOL - 424)) | (1 << (StarRocksSqlParser.SLASH_SYMBOL - 424)) | (1 << (StarRocksSqlParser.PERCENT_SYMBOL - 424)) | (1 << (StarRocksSqlParser.INT_DIV - 424)))) !== 0))) {
							(_localctx as ArithmeticBinaryContext)._operator = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 5484;
						(_localctx as ArithmeticBinaryContext)._right = this.valueExpression(8);
						}
						break;

					case 3:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						(_localctx as ArithmeticBinaryContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, StarRocksSqlParser.RULE_valueExpression);
						this.state = 5485;
						if (!(this.precpred(this._ctx, 6))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 6)");
						}
						this.state = 5486;
						(_localctx as ArithmeticBinaryContext)._operator = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === StarRocksSqlParser.PLUS_SYMBOL || _la === StarRocksSqlParser.MINUS_SYMBOL)) {
							(_localctx as ArithmeticBinaryContext)._operator = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 5487;
						(_localctx as ArithmeticBinaryContext)._right = this.valueExpression(7);
						}
						break;

					case 4:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						(_localctx as ArithmeticBinaryContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, StarRocksSqlParser.RULE_valueExpression);
						this.state = 5488;
						if (!(this.precpred(this._ctx, 5))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 5)");
						}
						this.state = 5489;
						(_localctx as ArithmeticBinaryContext)._operator = this.match(StarRocksSqlParser.BITAND);
						this.state = 5490;
						(_localctx as ArithmeticBinaryContext)._right = this.valueExpression(6);
						}
						break;

					case 5:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						(_localctx as ArithmeticBinaryContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, StarRocksSqlParser.RULE_valueExpression);
						this.state = 5491;
						if (!(this.precpred(this._ctx, 4))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 4)");
						}
						this.state = 5492;
						(_localctx as ArithmeticBinaryContext)._operator = this.match(StarRocksSqlParser.BITOR);
						this.state = 5493;
						(_localctx as ArithmeticBinaryContext)._right = this.valueExpression(5);
						}
						break;

					case 6:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						(_localctx as ArithmeticBinaryContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, StarRocksSqlParser.RULE_valueExpression);
						this.state = 5494;
						if (!(this.precpred(this._ctx, 3))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
						}
						this.state = 5495;
						(_localctx as ArithmeticBinaryContext)._operator = this.match(StarRocksSqlParser.BIT_SHIFT_LEFT);
						this.state = 5496;
						(_localctx as ArithmeticBinaryContext)._right = this.valueExpression(4);
						}
						break;

					case 7:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						(_localctx as ArithmeticBinaryContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, StarRocksSqlParser.RULE_valueExpression);
						this.state = 5497;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 5498;
						(_localctx as ArithmeticBinaryContext)._operator = this.match(StarRocksSqlParser.BIT_SHIFT_RIGHT);
						this.state = 5499;
						(_localctx as ArithmeticBinaryContext)._right = this.valueExpression(3);
						}
						break;

					case 8:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						(_localctx as ArithmeticBinaryContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, StarRocksSqlParser.RULE_valueExpression);
						this.state = 5500;
						if (!(this.precpred(this._ctx, 1))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
						}
						this.state = 5501;
						(_localctx as ArithmeticBinaryContext)._operator = this.match(StarRocksSqlParser.BIT_SHIFT_RIGHT_LOGICAL);
						this.state = 5502;
						(_localctx as ArithmeticBinaryContext)._right = this.valueExpression(2);
						}
						break;
					}
					}
				}
				this.state = 5507;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 622, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public primaryExpression(): PrimaryExpressionContext;
	public primaryExpression(_p: number): PrimaryExpressionContext;
	// @RuleVersion(0)
	public primaryExpression(_p?: number): PrimaryExpressionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: PrimaryExpressionContext = new PrimaryExpressionContext(this._ctx, _parentState);
		let _prevctx: PrimaryExpressionContext = _localctx;
		let _startState: number = 690;
		this.enterRecursionRule(_localctx, 690, StarRocksSqlParser.RULE_primaryExpression, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5608;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 633, this._ctx) ) {
			case 1:
				{
				_localctx = new UserVariableExpressionContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;

				this.state = 5509;
				this.userVariable();
				}
				break;

			case 2:
				{
				_localctx = new SystemVariableExpressionContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5510;
				this.systemVariable();
				}
				break;

			case 3:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5511;
				this.functionCall();
				}
				break;

			case 4:
				{
				_localctx = new OdbcFunctionCallExpressionContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5512;
				this.match(StarRocksSqlParser.LEFT_BRACE);
				this.state = 5513;
				this.match(StarRocksSqlParser.FN);
				this.state = 5514;
				this.functionCall();
				this.state = 5515;
				this.match(StarRocksSqlParser.RIGHT_BRACE);
				}
				break;

			case 5:
				{
				_localctx = new LiteralContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5517;
				this.literalExpression();
				}
				break;

			case 6:
				{
				_localctx = new ColumnRefContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5518;
				this.columnReference();
				}
				break;

			case 7:
				{
				_localctx = new ArithmeticUnaryContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5519;
				(_localctx as ArithmeticUnaryContext)._operator = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (StarRocksSqlParser.PLUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.MINUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.BITNOT - 422)))) !== 0))) {
					(_localctx as ArithmeticUnaryContext)._operator = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5520;
				this.primaryExpression(17);
				}
				break;

			case 8:
				{
				_localctx = new ArithmeticUnaryContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5521;
				(_localctx as ArithmeticUnaryContext)._operator = this.match(StarRocksSqlParser.LOGICAL_NOT);
				this.state = 5522;
				this.primaryExpression(16);
				}
				break;

			case 9:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5523;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5524;
				this.expression(0);
				this.state = 5525;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;

			case 10:
				{
				_localctx = new ExistsContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5527;
				this.match(StarRocksSqlParser.EXISTS);
				this.state = 5528;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5529;
				this.queryRelation();
				this.state = 5530;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;

			case 11:
				{
				_localctx = new SubqueryExpressionContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5532;
				this.subquery();
				}
				break;

			case 12:
				{
				_localctx = new CastContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5533;
				this.match(StarRocksSqlParser.CAST);
				this.state = 5534;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5535;
				this.expression(0);
				this.state = 5536;
				this.match(StarRocksSqlParser.AS);
				this.state = 5537;
				this.type();
				this.state = 5538;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;

			case 13:
				{
				_localctx = new ConvertContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5540;
				this.match(StarRocksSqlParser.CONVERT);
				this.state = 5541;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5542;
				this.expression(0);
				this.state = 5543;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 5544;
				this.type();
				this.state = 5545;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;

			case 14:
				{
				_localctx = new SimpleCaseContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5547;
				this.match(StarRocksSqlParser.CASE);
				this.state = 5548;
				(_localctx as SimpleCaseContext)._caseExpr = this.expression(0);
				this.state = 5550;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5549;
					this.whenClause();
					}
					}
					this.state = 5552;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === StarRocksSqlParser.WHEN);
				this.state = 5556;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.ELSE) {
					{
					this.state = 5554;
					this.match(StarRocksSqlParser.ELSE);
					this.state = 5555;
					(_localctx as SimpleCaseContext)._elseExpression = this.expression(0);
					}
				}

				this.state = 5558;
				this.match(StarRocksSqlParser.END);
				}
				break;

			case 15:
				{
				_localctx = new SearchedCaseContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5560;
				this.match(StarRocksSqlParser.CASE);
				this.state = 5562;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5561;
					this.whenClause();
					}
					}
					this.state = 5564;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === StarRocksSqlParser.WHEN);
				this.state = 5568;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.ELSE) {
					{
					this.state = 5566;
					this.match(StarRocksSqlParser.ELSE);
					this.state = 5567;
					(_localctx as SearchedCaseContext)._elseExpression = this.expression(0);
					}
				}

				this.state = 5570;
				this.match(StarRocksSqlParser.END);
				}
				break;

			case 16:
				{
				_localctx = new ArrayConstructorContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5573;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.ARRAY) {
					{
					this.state = 5572;
					this.arrayType();
					}
				}

				this.state = 5575;
				this.match(StarRocksSqlParser.LEFT_BRACKET);
				this.state = 5577;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << StarRocksSqlParser.ACTIVE) | (1 << StarRocksSqlParser.ADMIN) | (1 << StarRocksSqlParser.AFTER) | (1 << StarRocksSqlParser.AGGREGATE) | (1 << StarRocksSqlParser.ANTI) | (1 << StarRocksSqlParser.ARRAY) | (1 << StarRocksSqlParser.ARRAY_AGG) | (1 << StarRocksSqlParser.ASYNC) | (1 << StarRocksSqlParser.AUTHORS) | (1 << StarRocksSqlParser.AUTHENTICATION) | (1 << StarRocksSqlParser.AUTO_INCREMENT) | (1 << StarRocksSqlParser.AVG) | (1 << StarRocksSqlParser.BACKEND) | (1 << StarRocksSqlParser.BACKENDS) | (1 << StarRocksSqlParser.BACKUP) | (1 << StarRocksSqlParser.BEGIN))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (StarRocksSqlParser.BITMAP_UNION - 32)) | (1 << (StarRocksSqlParser.BLACKLIST - 32)) | (1 << (StarRocksSqlParser.BOOLEAN - 32)) | (1 << (StarRocksSqlParser.BROKER - 32)) | (1 << (StarRocksSqlParser.BUCKETS - 32)) | (1 << (StarRocksSqlParser.BUILTIN - 32)) | (1 << (StarRocksSqlParser.CANCEL - 32)) | (1 << (StarRocksSqlParser.CASE - 32)) | (1 << (StarRocksSqlParser.CAST - 32)) | (1 << (StarRocksSqlParser.CATALOG - 32)) | (1 << (StarRocksSqlParser.CATALOGS - 32)) | (1 << (StarRocksSqlParser.CEIL - 32)) | (1 << (StarRocksSqlParser.CHAIN - 32)) | (1 << (StarRocksSqlParser.CHAR - 32)) | (1 << (StarRocksSqlParser.CHARSET - 32)) | (1 << (StarRocksSqlParser.CLEAN - 32)) | (1 << (StarRocksSqlParser.CLUSTER - 32)) | (1 << (StarRocksSqlParser.CLUSTERS - 32)) | (1 << (StarRocksSqlParser.COLLATION - 32)) | (1 << (StarRocksSqlParser.COLUMNS - 32)) | (1 << (StarRocksSqlParser.COMMENT - 32)) | (1 << (StarRocksSqlParser.COMMIT - 32)) | (1 << (StarRocksSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (StarRocksSqlParser.COMPUTE - 64)) | (1 << (StarRocksSqlParser.CONFIG - 64)) | (1 << (StarRocksSqlParser.CONNECTION - 64)) | (1 << (StarRocksSqlParser.CONSISTENT - 64)) | (1 << (StarRocksSqlParser.CONVERT - 64)) | (1 << (StarRocksSqlParser.COSTS - 64)) | (1 << (StarRocksSqlParser.COUNT - 64)) | (1 << (StarRocksSqlParser.CUME_DIST - 64)) | (1 << (StarRocksSqlParser.CURRENT - 64)) | (1 << (StarRocksSqlParser.CURRENT_DATE - 64)) | (1 << (StarRocksSqlParser.CURRENT_ROLE - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIME - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (StarRocksSqlParser.CURRENT_USER - 64)) | (1 << (StarRocksSqlParser.DATA - 64)) | (1 << (StarRocksSqlParser.DATABASE - 64)) | (1 << (StarRocksSqlParser.DATE - 64)) | (1 << (StarRocksSqlParser.DATETIME - 64)) | (1 << (StarRocksSqlParser.DAY - 64)) | (1 << (StarRocksSqlParser.DECOMMISSION - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (StarRocksSqlParser.DENSE_RANK - 96)) | (1 << (StarRocksSqlParser.NTILE - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTED - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTION - 96)) | (1 << (StarRocksSqlParser.DUPLICATE - 96)) | (1 << (StarRocksSqlParser.DYNAMIC - 96)) | (1 << (StarRocksSqlParser.ENCLOSE - 96)) | (1 << (StarRocksSqlParser.END - 96)) | (1 << (StarRocksSqlParser.ENGINE - 96)) | (1 << (StarRocksSqlParser.ENGINES - 96)) | (1 << (StarRocksSqlParser.ERRORS - 96)) | (1 << (StarRocksSqlParser.ESCAPE - 96)) | (1 << (StarRocksSqlParser.EVENTS - 96)) | (1 << (StarRocksSqlParser.EXECUTE - 96)) | (1 << (StarRocksSqlParser.EXISTS - 96)) | (1 << (StarRocksSqlParser.EXPORT - 96)) | (1 << (StarRocksSqlParser.EXTERNAL - 96)) | (1 << (StarRocksSqlParser.EXTRACT - 96)) | (1 << (StarRocksSqlParser.EVERY - 96)) | (1 << (StarRocksSqlParser.FALSE - 96)) | (1 << (StarRocksSqlParser.FIELDS - 96)) | (1 << (StarRocksSqlParser.FILE - 96)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (StarRocksSqlParser.FILTER - 129)) | (1 << (StarRocksSqlParser.FIRST - 129)) | (1 << (StarRocksSqlParser.FIRST_VALUE - 129)) | (1 << (StarRocksSqlParser.FLOOR - 129)) | (1 << (StarRocksSqlParser.FN - 129)) | (1 << (StarRocksSqlParser.FOLLOWING - 129)) | (1 << (StarRocksSqlParser.FOLLOWER - 129)) | (1 << (StarRocksSqlParser.FORMAT - 129)) | (1 << (StarRocksSqlParser.FREE - 129)) | (1 << (StarRocksSqlParser.FRONTEND - 129)) | (1 << (StarRocksSqlParser.FRONTENDS - 129)) | (1 << (StarRocksSqlParser.FUNCTIONS - 129)) | (1 << (StarRocksSqlParser.GLOBAL - 129)) | (1 << (StarRocksSqlParser.GRANTS - 129)) | (1 << (StarRocksSqlParser.GROUPING - 129)) | (1 << (StarRocksSqlParser.GROUPING_ID - 129)) | (1 << (StarRocksSqlParser.HASH - 129)) | (1 << (StarRocksSqlParser.HELP - 129)) | (1 << (StarRocksSqlParser.HISTOGRAM - 129)) | (1 << (StarRocksSqlParser.HLL_UNION - 129)) | (1 << (StarRocksSqlParser.HOST - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (StarRocksSqlParser.HOUR - 161)) | (1 << (StarRocksSqlParser.HUB - 161)) | (1 << (StarRocksSqlParser.IDENTIFIED - 161)) | (1 << (StarRocksSqlParser.IF - 161)) | (1 << (StarRocksSqlParser.IMPERSONATE - 161)) | (1 << (StarRocksSqlParser.IMAGE - 161)) | (1 << (StarRocksSqlParser.INACTIVE - 161)) | (1 << (StarRocksSqlParser.INCREMENTAL - 161)) | (1 << (StarRocksSqlParser.INDEXES - 161)) | (1 << (StarRocksSqlParser.INSTALL - 161)) | (1 << (StarRocksSqlParser.INTERMEDIATE - 161)) | (1 << (StarRocksSqlParser.INTERVAL - 161)) | (1 << (StarRocksSqlParser.OVERWRITE - 161)) | (1 << (StarRocksSqlParser.ISOLATION - 161)) | (1 << (StarRocksSqlParser.JOB - 161)))) !== 0) || ((((_la - 195)) & ~0x1F) === 0 && ((1 << (_la - 195)) & ((1 << (StarRocksSqlParser.LABEL - 195)) | (1 << (StarRocksSqlParser.LAG - 195)) | (1 << (StarRocksSqlParser.LAST - 195)) | (1 << (StarRocksSqlParser.LAST_VALUE - 195)) | (1 << (StarRocksSqlParser.LEAD - 195)) | (1 << (StarRocksSqlParser.LEFT - 195)) | (1 << (StarRocksSqlParser.LESS - 195)) | (1 << (StarRocksSqlParser.LEVEL - 195)) | (1 << (StarRocksSqlParser.LIKE - 195)) | (1 << (StarRocksSqlParser.LIST - 195)) | (1 << (StarRocksSqlParser.LOCAL - 195)) | (1 << (StarRocksSqlParser.LOCALTIME - 195)) | (1 << (StarRocksSqlParser.LOCALTIMESTAMP - 195)) | (1 << (StarRocksSqlParser.LOCATION - 195)) | (1 << (StarRocksSqlParser.LOGICAL - 195)) | (1 << (StarRocksSqlParser.MANUAL - 195)) | (1 << (StarRocksSqlParser.MAP - 195)) | (1 << (StarRocksSqlParser.MATERIALIZED - 195)) | (1 << (StarRocksSqlParser.MAX - 195)) | (1 << (StarRocksSqlParser.MERGE - 195)) | (1 << (StarRocksSqlParser.MIN - 195)) | (1 << (StarRocksSqlParser.MINUTE - 195)) | (1 << (StarRocksSqlParser.MINUS - 195)))) !== 0) || ((((_la - 227)) & ~0x1F) === 0 && ((1 << (_la - 227)) & ((1 << (StarRocksSqlParser.META - 227)) | (1 << (StarRocksSqlParser.MOD - 227)) | (1 << (StarRocksSqlParser.MODE - 227)) | (1 << (StarRocksSqlParser.MODIFY - 227)) | (1 << (StarRocksSqlParser.MONTH - 227)) | (1 << (StarRocksSqlParser.NAME - 227)) | (1 << (StarRocksSqlParser.NAMES - 227)) | (1 << (StarRocksSqlParser.NEGATIVE - 227)) | (1 << (StarRocksSqlParser.NO - 227)) | (1 << (StarRocksSqlParser.NODE - 227)) | (1 << (StarRocksSqlParser.NODES - 227)) | (1 << (StarRocksSqlParser.NONE - 227)) | (1 << (StarRocksSqlParser.NOT - 227)) | (1 << (StarRocksSqlParser.NULL - 227)) | (1 << (StarRocksSqlParser.NULLS - 227)) | (1 << (StarRocksSqlParser.NUMBER - 227)) | (1 << (StarRocksSqlParser.NUMERIC - 227)) | (1 << (StarRocksSqlParser.OBSERVER - 227)) | (1 << (StarRocksSqlParser.OF - 227)) | (1 << (StarRocksSqlParser.OFFSET - 227)) | (1 << (StarRocksSqlParser.ONLY - 227)) | (1 << (StarRocksSqlParser.OPEN - 227)) | (1 << (StarRocksSqlParser.OPERATE - 227)) | (1 << (StarRocksSqlParser.OPTIMIZER - 227)) | (1 << (StarRocksSqlParser.OPTION - 227)))) !== 0) || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (StarRocksSqlParser.PARTITIONS - 259)) | (1 << (StarRocksSqlParser.PASSWORD - 259)) | (1 << (StarRocksSqlParser.PATH - 259)) | (1 << (StarRocksSqlParser.PAUSE - 259)) | (1 << (StarRocksSqlParser.PENDING - 259)) | (1 << (StarRocksSqlParser.PERCENT_RANK - 259)) | (1 << (StarRocksSqlParser.PERCENTILE_UNION - 259)) | (1 << (StarRocksSqlParser.PLUGIN - 259)) | (1 << (StarRocksSqlParser.PLUGINS - 259)) | (1 << (StarRocksSqlParser.PRECEDING - 259)) | (1 << (StarRocksSqlParser.PRIVILEGES - 259)) | (1 << (StarRocksSqlParser.PROC - 259)) | (1 << (StarRocksSqlParser.PROCESSLIST - 259)) | (1 << (StarRocksSqlParser.PROFILE - 259)) | (1 << (StarRocksSqlParser.PROFILELIST - 259)) | (1 << (StarRocksSqlParser.PROPERTIES - 259)) | (1 << (StarRocksSqlParser.PROPERTY - 259)) | (1 << (StarRocksSqlParser.QUALIFY - 259)) | (1 << (StarRocksSqlParser.QUARTER - 259)) | (1 << (StarRocksSqlParser.QUERY - 259)) | (1 << (StarRocksSqlParser.QUEUE - 259)) | (1 << (StarRocksSqlParser.QUOTA - 259)) | (1 << (StarRocksSqlParser.RANDOM - 259)) | (1 << (StarRocksSqlParser.RANK - 259)) | (1 << (StarRocksSqlParser.RECOVER - 259)))) !== 0) || ((((_la - 291)) & ~0x1F) === 0 && ((1 << (_la - 291)) & ((1 << (StarRocksSqlParser.REFRESH - 291)) | (1 << (StarRocksSqlParser.REWRITE - 291)) | (1 << (StarRocksSqlParser.REGEXP - 291)) | (1 << (StarRocksSqlParser.REMOVE - 291)) | (1 << (StarRocksSqlParser.REPAIR - 291)) | (1 << (StarRocksSqlParser.REPEATABLE - 291)) | (1 << (StarRocksSqlParser.REPLACE - 291)) | (1 << (StarRocksSqlParser.REPLACE_IF_NOT_NULL - 291)) | (1 << (StarRocksSqlParser.REPLICA - 291)) | (1 << (StarRocksSqlParser.REPOSITORY - 291)) | (1 << (StarRocksSqlParser.REPOSITORIES - 291)) | (1 << (StarRocksSqlParser.RESOURCE - 291)) | (1 << (StarRocksSqlParser.RESOURCES - 291)) | (1 << (StarRocksSqlParser.RESTORE - 291)) | (1 << (StarRocksSqlParser.RESUME - 291)) | (1 << (StarRocksSqlParser.RETURNS - 291)) | (1 << (StarRocksSqlParser.REVERT - 291)) | (1 << (StarRocksSqlParser.RIGHT - 291)) | (1 << (StarRocksSqlParser.RLIKE - 291)) | (1 << (StarRocksSqlParser.ROLE - 291)) | (1 << (StarRocksSqlParser.ROLES - 291)) | (1 << (StarRocksSqlParser.ROLLBACK - 291)) | (1 << (StarRocksSqlParser.ROLLUP - 291)) | (1 << (StarRocksSqlParser.ROUTINE - 291)) | (1 << (StarRocksSqlParser.ROW - 291)) | (1 << (StarRocksSqlParser.ROW_NUMBER - 291)) | (1 << (StarRocksSqlParser.SAMPLE - 291)) | (1 << (StarRocksSqlParser.SCHEDULER - 291)))) !== 0) || ((((_la - 323)) & ~0x1F) === 0 && ((1 << (_la - 323)) & ((1 << (StarRocksSqlParser.SCHEMA - 323)) | (1 << (StarRocksSqlParser.SECOND - 323)) | (1 << (StarRocksSqlParser.SEMI - 323)) | (1 << (StarRocksSqlParser.SERIALIZABLE - 323)) | (1 << (StarRocksSqlParser.SESSION - 323)) | (1 << (StarRocksSqlParser.SETS - 323)) | (1 << (StarRocksSqlParser.SIGNED - 323)) | (1 << (StarRocksSqlParser.SKIP_HEADER - 323)) | (1 << (StarRocksSqlParser.SNAPSHOT - 323)) | (1 << (StarRocksSqlParser.SQLBLACKLIST - 323)) | (1 << (StarRocksSqlParser.START - 323)) | (1 << (StarRocksSqlParser.STATS - 323)) | (1 << (StarRocksSqlParser.STATUS - 323)) | (1 << (StarRocksSqlParser.STOP - 323)) | (1 << (StarRocksSqlParser.STORAGE - 323)) | (1 << (StarRocksSqlParser.STREAM - 323)) | (1 << (StarRocksSqlParser.STRING - 323)) | (1 << (StarRocksSqlParser.SUBMIT - 323)) | (1 << (StarRocksSqlParser.SUM - 323)) | (1 << (StarRocksSqlParser.SUSPEND - 323)) | (1 << (StarRocksSqlParser.SYNC - 323)) | (1 << (StarRocksSqlParser.SYSTEM_TIME - 323)) | (1 << (StarRocksSqlParser.SWAP - 323)))) !== 0) || ((((_la - 355)) & ~0x1F) === 0 && ((1 << (_la - 355)) & ((1 << (StarRocksSqlParser.STRUCT - 355)) | (1 << (StarRocksSqlParser.TABLES - 355)) | (1 << (StarRocksSqlParser.TABLET - 355)) | (1 << (StarRocksSqlParser.TASK - 355)) | (1 << (StarRocksSqlParser.TEMPORARY - 355)) | (1 << (StarRocksSqlParser.THAN - 355)) | (1 << (StarRocksSqlParser.TIME - 355)) | (1 << (StarRocksSqlParser.TIMESTAMP - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPADD - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPDIFF - 355)) | (1 << (StarRocksSqlParser.TRANSACTION - 355)) | (1 << (StarRocksSqlParser.TRACE - 355)) | (1 << (StarRocksSqlParser.TRIGGERS - 355)) | (1 << (StarRocksSqlParser.TRIM_SPACE - 355)) | (1 << (StarRocksSqlParser.TRUE - 355)) | (1 << (StarRocksSqlParser.TRUNCATE - 355)) | (1 << (StarRocksSqlParser.TYPE - 355)) | (1 << (StarRocksSqlParser.TYPES - 355)) | (1 << (StarRocksSqlParser.UNBOUNDED - 355)) | (1 << (StarRocksSqlParser.UNCOMMITTED - 355)) | (1 << (StarRocksSqlParser.UNINSTALL - 355)) | (1 << (StarRocksSqlParser.USAGE - 355)))) !== 0) || ((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & ((1 << (StarRocksSqlParser.USER - 388)) | (1 << (StarRocksSqlParser.USERS - 388)) | (1 << (StarRocksSqlParser.VALUE - 388)) | (1 << (StarRocksSqlParser.VARIABLES - 388)) | (1 << (StarRocksSqlParser.VERBOSE - 388)) | (1 << (StarRocksSqlParser.VIEW - 388)) | (1 << (StarRocksSqlParser.VIEWS - 388)) | (1 << (StarRocksSqlParser.WAREHOUSE - 388)) | (1 << (StarRocksSqlParser.WAREHOUSES - 388)) | (1 << (StarRocksSqlParser.WARNINGS - 388)) | (1 << (StarRocksSqlParser.WEEK - 388)) | (1 << (StarRocksSqlParser.WHITELIST - 388)) | (1 << (StarRocksSqlParser.WORK - 388)) | (1 << (StarRocksSqlParser.WRITE - 388)) | (1 << (StarRocksSqlParser.YEAR - 388)) | (1 << (StarRocksSqlParser.LOCK - 388)) | (1 << (StarRocksSqlParser.UNLOCK - 388)) | (1 << (StarRocksSqlParser.LOW_PRIORITY - 388)))) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (StarRocksSqlParser.PLUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.MINUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.LOGICAL_NOT - 422)) | (1 << (StarRocksSqlParser.BITNOT - 422)) | (1 << (StarRocksSqlParser.AT - 422)) | (1 << (StarRocksSqlParser.INTEGER_VALUE - 422)) | (1 << (StarRocksSqlParser.DECIMAL_VALUE - 422)) | (1 << (StarRocksSqlParser.DOUBLE_VALUE - 422)) | (1 << (StarRocksSqlParser.SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.LETTER_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.DIGIT_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.BACKQUOTED_IDENTIFIER - 422)))) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & ((1 << (StarRocksSqlParser.LEFT_PAREN - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACKET - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACE - 456)) | (1 << (StarRocksSqlParser.DOTDOTDOT - 456)))) !== 0)) {
					{
					this.state = 5576;
					this.expressionList();
					}
				}

				this.state = 5579;
				this.match(StarRocksSqlParser.RIGHT_BRACKET);
				}
				break;

			case 17:
				{
				_localctx = new MapConstructorContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5580;
				this.mapType();
				this.state = 5581;
				this.match(StarRocksSqlParser.LEFT_BRACE);
				this.state = 5583;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << StarRocksSqlParser.ACTIVE) | (1 << StarRocksSqlParser.ADMIN) | (1 << StarRocksSqlParser.AFTER) | (1 << StarRocksSqlParser.AGGREGATE) | (1 << StarRocksSqlParser.ANTI) | (1 << StarRocksSqlParser.ARRAY) | (1 << StarRocksSqlParser.ARRAY_AGG) | (1 << StarRocksSqlParser.ASYNC) | (1 << StarRocksSqlParser.AUTHORS) | (1 << StarRocksSqlParser.AUTHENTICATION) | (1 << StarRocksSqlParser.AUTO_INCREMENT) | (1 << StarRocksSqlParser.AVG) | (1 << StarRocksSqlParser.BACKEND) | (1 << StarRocksSqlParser.BACKENDS) | (1 << StarRocksSqlParser.BACKUP) | (1 << StarRocksSqlParser.BEGIN))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (StarRocksSqlParser.BITMAP_UNION - 32)) | (1 << (StarRocksSqlParser.BLACKLIST - 32)) | (1 << (StarRocksSqlParser.BOOLEAN - 32)) | (1 << (StarRocksSqlParser.BROKER - 32)) | (1 << (StarRocksSqlParser.BUCKETS - 32)) | (1 << (StarRocksSqlParser.BUILTIN - 32)) | (1 << (StarRocksSqlParser.CANCEL - 32)) | (1 << (StarRocksSqlParser.CASE - 32)) | (1 << (StarRocksSqlParser.CAST - 32)) | (1 << (StarRocksSqlParser.CATALOG - 32)) | (1 << (StarRocksSqlParser.CATALOGS - 32)) | (1 << (StarRocksSqlParser.CEIL - 32)) | (1 << (StarRocksSqlParser.CHAIN - 32)) | (1 << (StarRocksSqlParser.CHAR - 32)) | (1 << (StarRocksSqlParser.CHARSET - 32)) | (1 << (StarRocksSqlParser.CLEAN - 32)) | (1 << (StarRocksSqlParser.CLUSTER - 32)) | (1 << (StarRocksSqlParser.CLUSTERS - 32)) | (1 << (StarRocksSqlParser.COLLATION - 32)) | (1 << (StarRocksSqlParser.COLUMNS - 32)) | (1 << (StarRocksSqlParser.COMMENT - 32)) | (1 << (StarRocksSqlParser.COMMIT - 32)) | (1 << (StarRocksSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (StarRocksSqlParser.COMPUTE - 64)) | (1 << (StarRocksSqlParser.CONFIG - 64)) | (1 << (StarRocksSqlParser.CONNECTION - 64)) | (1 << (StarRocksSqlParser.CONSISTENT - 64)) | (1 << (StarRocksSqlParser.CONVERT - 64)) | (1 << (StarRocksSqlParser.COSTS - 64)) | (1 << (StarRocksSqlParser.COUNT - 64)) | (1 << (StarRocksSqlParser.CUME_DIST - 64)) | (1 << (StarRocksSqlParser.CURRENT - 64)) | (1 << (StarRocksSqlParser.CURRENT_DATE - 64)) | (1 << (StarRocksSqlParser.CURRENT_ROLE - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIME - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (StarRocksSqlParser.CURRENT_USER - 64)) | (1 << (StarRocksSqlParser.DATA - 64)) | (1 << (StarRocksSqlParser.DATABASE - 64)) | (1 << (StarRocksSqlParser.DATE - 64)) | (1 << (StarRocksSqlParser.DATETIME - 64)) | (1 << (StarRocksSqlParser.DAY - 64)) | (1 << (StarRocksSqlParser.DECOMMISSION - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (StarRocksSqlParser.DENSE_RANK - 96)) | (1 << (StarRocksSqlParser.NTILE - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTED - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTION - 96)) | (1 << (StarRocksSqlParser.DUPLICATE - 96)) | (1 << (StarRocksSqlParser.DYNAMIC - 96)) | (1 << (StarRocksSqlParser.ENCLOSE - 96)) | (1 << (StarRocksSqlParser.END - 96)) | (1 << (StarRocksSqlParser.ENGINE - 96)) | (1 << (StarRocksSqlParser.ENGINES - 96)) | (1 << (StarRocksSqlParser.ERRORS - 96)) | (1 << (StarRocksSqlParser.ESCAPE - 96)) | (1 << (StarRocksSqlParser.EVENTS - 96)) | (1 << (StarRocksSqlParser.EXECUTE - 96)) | (1 << (StarRocksSqlParser.EXISTS - 96)) | (1 << (StarRocksSqlParser.EXPORT - 96)) | (1 << (StarRocksSqlParser.EXTERNAL - 96)) | (1 << (StarRocksSqlParser.EXTRACT - 96)) | (1 << (StarRocksSqlParser.EVERY - 96)) | (1 << (StarRocksSqlParser.FALSE - 96)) | (1 << (StarRocksSqlParser.FIELDS - 96)) | (1 << (StarRocksSqlParser.FILE - 96)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (StarRocksSqlParser.FILTER - 129)) | (1 << (StarRocksSqlParser.FIRST - 129)) | (1 << (StarRocksSqlParser.FIRST_VALUE - 129)) | (1 << (StarRocksSqlParser.FLOOR - 129)) | (1 << (StarRocksSqlParser.FN - 129)) | (1 << (StarRocksSqlParser.FOLLOWING - 129)) | (1 << (StarRocksSqlParser.FOLLOWER - 129)) | (1 << (StarRocksSqlParser.FORMAT - 129)) | (1 << (StarRocksSqlParser.FREE - 129)) | (1 << (StarRocksSqlParser.FRONTEND - 129)) | (1 << (StarRocksSqlParser.FRONTENDS - 129)) | (1 << (StarRocksSqlParser.FUNCTIONS - 129)) | (1 << (StarRocksSqlParser.GLOBAL - 129)) | (1 << (StarRocksSqlParser.GRANTS - 129)) | (1 << (StarRocksSqlParser.GROUPING - 129)) | (1 << (StarRocksSqlParser.GROUPING_ID - 129)) | (1 << (StarRocksSqlParser.HASH - 129)) | (1 << (StarRocksSqlParser.HELP - 129)) | (1 << (StarRocksSqlParser.HISTOGRAM - 129)) | (1 << (StarRocksSqlParser.HLL_UNION - 129)) | (1 << (StarRocksSqlParser.HOST - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (StarRocksSqlParser.HOUR - 161)) | (1 << (StarRocksSqlParser.HUB - 161)) | (1 << (StarRocksSqlParser.IDENTIFIED - 161)) | (1 << (StarRocksSqlParser.IF - 161)) | (1 << (StarRocksSqlParser.IMPERSONATE - 161)) | (1 << (StarRocksSqlParser.IMAGE - 161)) | (1 << (StarRocksSqlParser.INACTIVE - 161)) | (1 << (StarRocksSqlParser.INCREMENTAL - 161)) | (1 << (StarRocksSqlParser.INDEXES - 161)) | (1 << (StarRocksSqlParser.INSTALL - 161)) | (1 << (StarRocksSqlParser.INTERMEDIATE - 161)) | (1 << (StarRocksSqlParser.INTERVAL - 161)) | (1 << (StarRocksSqlParser.OVERWRITE - 161)) | (1 << (StarRocksSqlParser.ISOLATION - 161)) | (1 << (StarRocksSqlParser.JOB - 161)))) !== 0) || ((((_la - 195)) & ~0x1F) === 0 && ((1 << (_la - 195)) & ((1 << (StarRocksSqlParser.LABEL - 195)) | (1 << (StarRocksSqlParser.LAG - 195)) | (1 << (StarRocksSqlParser.LAST - 195)) | (1 << (StarRocksSqlParser.LAST_VALUE - 195)) | (1 << (StarRocksSqlParser.LEAD - 195)) | (1 << (StarRocksSqlParser.LEFT - 195)) | (1 << (StarRocksSqlParser.LESS - 195)) | (1 << (StarRocksSqlParser.LEVEL - 195)) | (1 << (StarRocksSqlParser.LIKE - 195)) | (1 << (StarRocksSqlParser.LIST - 195)) | (1 << (StarRocksSqlParser.LOCAL - 195)) | (1 << (StarRocksSqlParser.LOCALTIME - 195)) | (1 << (StarRocksSqlParser.LOCALTIMESTAMP - 195)) | (1 << (StarRocksSqlParser.LOCATION - 195)) | (1 << (StarRocksSqlParser.LOGICAL - 195)) | (1 << (StarRocksSqlParser.MANUAL - 195)) | (1 << (StarRocksSqlParser.MAP - 195)) | (1 << (StarRocksSqlParser.MATERIALIZED - 195)) | (1 << (StarRocksSqlParser.MAX - 195)) | (1 << (StarRocksSqlParser.MERGE - 195)) | (1 << (StarRocksSqlParser.MIN - 195)) | (1 << (StarRocksSqlParser.MINUTE - 195)) | (1 << (StarRocksSqlParser.MINUS - 195)))) !== 0) || ((((_la - 227)) & ~0x1F) === 0 && ((1 << (_la - 227)) & ((1 << (StarRocksSqlParser.META - 227)) | (1 << (StarRocksSqlParser.MOD - 227)) | (1 << (StarRocksSqlParser.MODE - 227)) | (1 << (StarRocksSqlParser.MODIFY - 227)) | (1 << (StarRocksSqlParser.MONTH - 227)) | (1 << (StarRocksSqlParser.NAME - 227)) | (1 << (StarRocksSqlParser.NAMES - 227)) | (1 << (StarRocksSqlParser.NEGATIVE - 227)) | (1 << (StarRocksSqlParser.NO - 227)) | (1 << (StarRocksSqlParser.NODE - 227)) | (1 << (StarRocksSqlParser.NODES - 227)) | (1 << (StarRocksSqlParser.NONE - 227)) | (1 << (StarRocksSqlParser.NOT - 227)) | (1 << (StarRocksSqlParser.NULL - 227)) | (1 << (StarRocksSqlParser.NULLS - 227)) | (1 << (StarRocksSqlParser.NUMBER - 227)) | (1 << (StarRocksSqlParser.NUMERIC - 227)) | (1 << (StarRocksSqlParser.OBSERVER - 227)) | (1 << (StarRocksSqlParser.OF - 227)) | (1 << (StarRocksSqlParser.OFFSET - 227)) | (1 << (StarRocksSqlParser.ONLY - 227)) | (1 << (StarRocksSqlParser.OPEN - 227)) | (1 << (StarRocksSqlParser.OPERATE - 227)) | (1 << (StarRocksSqlParser.OPTIMIZER - 227)) | (1 << (StarRocksSqlParser.OPTION - 227)))) !== 0) || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (StarRocksSqlParser.PARTITIONS - 259)) | (1 << (StarRocksSqlParser.PASSWORD - 259)) | (1 << (StarRocksSqlParser.PATH - 259)) | (1 << (StarRocksSqlParser.PAUSE - 259)) | (1 << (StarRocksSqlParser.PENDING - 259)) | (1 << (StarRocksSqlParser.PERCENT_RANK - 259)) | (1 << (StarRocksSqlParser.PERCENTILE_UNION - 259)) | (1 << (StarRocksSqlParser.PLUGIN - 259)) | (1 << (StarRocksSqlParser.PLUGINS - 259)) | (1 << (StarRocksSqlParser.PRECEDING - 259)) | (1 << (StarRocksSqlParser.PRIVILEGES - 259)) | (1 << (StarRocksSqlParser.PROC - 259)) | (1 << (StarRocksSqlParser.PROCESSLIST - 259)) | (1 << (StarRocksSqlParser.PROFILE - 259)) | (1 << (StarRocksSqlParser.PROFILELIST - 259)) | (1 << (StarRocksSqlParser.PROPERTIES - 259)) | (1 << (StarRocksSqlParser.PROPERTY - 259)) | (1 << (StarRocksSqlParser.QUALIFY - 259)) | (1 << (StarRocksSqlParser.QUARTER - 259)) | (1 << (StarRocksSqlParser.QUERY - 259)) | (1 << (StarRocksSqlParser.QUEUE - 259)) | (1 << (StarRocksSqlParser.QUOTA - 259)) | (1 << (StarRocksSqlParser.RANDOM - 259)) | (1 << (StarRocksSqlParser.RANK - 259)) | (1 << (StarRocksSqlParser.RECOVER - 259)))) !== 0) || ((((_la - 291)) & ~0x1F) === 0 && ((1 << (_la - 291)) & ((1 << (StarRocksSqlParser.REFRESH - 291)) | (1 << (StarRocksSqlParser.REWRITE - 291)) | (1 << (StarRocksSqlParser.REGEXP - 291)) | (1 << (StarRocksSqlParser.REMOVE - 291)) | (1 << (StarRocksSqlParser.REPAIR - 291)) | (1 << (StarRocksSqlParser.REPEATABLE - 291)) | (1 << (StarRocksSqlParser.REPLACE - 291)) | (1 << (StarRocksSqlParser.REPLACE_IF_NOT_NULL - 291)) | (1 << (StarRocksSqlParser.REPLICA - 291)) | (1 << (StarRocksSqlParser.REPOSITORY - 291)) | (1 << (StarRocksSqlParser.REPOSITORIES - 291)) | (1 << (StarRocksSqlParser.RESOURCE - 291)) | (1 << (StarRocksSqlParser.RESOURCES - 291)) | (1 << (StarRocksSqlParser.RESTORE - 291)) | (1 << (StarRocksSqlParser.RESUME - 291)) | (1 << (StarRocksSqlParser.RETURNS - 291)) | (1 << (StarRocksSqlParser.REVERT - 291)) | (1 << (StarRocksSqlParser.RIGHT - 291)) | (1 << (StarRocksSqlParser.RLIKE - 291)) | (1 << (StarRocksSqlParser.ROLE - 291)) | (1 << (StarRocksSqlParser.ROLES - 291)) | (1 << (StarRocksSqlParser.ROLLBACK - 291)) | (1 << (StarRocksSqlParser.ROLLUP - 291)) | (1 << (StarRocksSqlParser.ROUTINE - 291)) | (1 << (StarRocksSqlParser.ROW - 291)) | (1 << (StarRocksSqlParser.ROW_NUMBER - 291)) | (1 << (StarRocksSqlParser.SAMPLE - 291)) | (1 << (StarRocksSqlParser.SCHEDULER - 291)))) !== 0) || ((((_la - 323)) & ~0x1F) === 0 && ((1 << (_la - 323)) & ((1 << (StarRocksSqlParser.SCHEMA - 323)) | (1 << (StarRocksSqlParser.SECOND - 323)) | (1 << (StarRocksSqlParser.SEMI - 323)) | (1 << (StarRocksSqlParser.SERIALIZABLE - 323)) | (1 << (StarRocksSqlParser.SESSION - 323)) | (1 << (StarRocksSqlParser.SETS - 323)) | (1 << (StarRocksSqlParser.SIGNED - 323)) | (1 << (StarRocksSqlParser.SKIP_HEADER - 323)) | (1 << (StarRocksSqlParser.SNAPSHOT - 323)) | (1 << (StarRocksSqlParser.SQLBLACKLIST - 323)) | (1 << (StarRocksSqlParser.START - 323)) | (1 << (StarRocksSqlParser.STATS - 323)) | (1 << (StarRocksSqlParser.STATUS - 323)) | (1 << (StarRocksSqlParser.STOP - 323)) | (1 << (StarRocksSqlParser.STORAGE - 323)) | (1 << (StarRocksSqlParser.STREAM - 323)) | (1 << (StarRocksSqlParser.STRING - 323)) | (1 << (StarRocksSqlParser.SUBMIT - 323)) | (1 << (StarRocksSqlParser.SUM - 323)) | (1 << (StarRocksSqlParser.SUSPEND - 323)) | (1 << (StarRocksSqlParser.SYNC - 323)) | (1 << (StarRocksSqlParser.SYSTEM_TIME - 323)) | (1 << (StarRocksSqlParser.SWAP - 323)))) !== 0) || ((((_la - 355)) & ~0x1F) === 0 && ((1 << (_la - 355)) & ((1 << (StarRocksSqlParser.STRUCT - 355)) | (1 << (StarRocksSqlParser.TABLES - 355)) | (1 << (StarRocksSqlParser.TABLET - 355)) | (1 << (StarRocksSqlParser.TASK - 355)) | (1 << (StarRocksSqlParser.TEMPORARY - 355)) | (1 << (StarRocksSqlParser.THAN - 355)) | (1 << (StarRocksSqlParser.TIME - 355)) | (1 << (StarRocksSqlParser.TIMESTAMP - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPADD - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPDIFF - 355)) | (1 << (StarRocksSqlParser.TRANSACTION - 355)) | (1 << (StarRocksSqlParser.TRACE - 355)) | (1 << (StarRocksSqlParser.TRIGGERS - 355)) | (1 << (StarRocksSqlParser.TRIM_SPACE - 355)) | (1 << (StarRocksSqlParser.TRUE - 355)) | (1 << (StarRocksSqlParser.TRUNCATE - 355)) | (1 << (StarRocksSqlParser.TYPE - 355)) | (1 << (StarRocksSqlParser.TYPES - 355)) | (1 << (StarRocksSqlParser.UNBOUNDED - 355)) | (1 << (StarRocksSqlParser.UNCOMMITTED - 355)) | (1 << (StarRocksSqlParser.UNINSTALL - 355)) | (1 << (StarRocksSqlParser.USAGE - 355)))) !== 0) || ((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & ((1 << (StarRocksSqlParser.USER - 388)) | (1 << (StarRocksSqlParser.USERS - 388)) | (1 << (StarRocksSqlParser.VALUE - 388)) | (1 << (StarRocksSqlParser.VARIABLES - 388)) | (1 << (StarRocksSqlParser.VERBOSE - 388)) | (1 << (StarRocksSqlParser.VIEW - 388)) | (1 << (StarRocksSqlParser.VIEWS - 388)) | (1 << (StarRocksSqlParser.WAREHOUSE - 388)) | (1 << (StarRocksSqlParser.WAREHOUSES - 388)) | (1 << (StarRocksSqlParser.WARNINGS - 388)) | (1 << (StarRocksSqlParser.WEEK - 388)) | (1 << (StarRocksSqlParser.WHITELIST - 388)) | (1 << (StarRocksSqlParser.WORK - 388)) | (1 << (StarRocksSqlParser.WRITE - 388)) | (1 << (StarRocksSqlParser.YEAR - 388)) | (1 << (StarRocksSqlParser.LOCK - 388)) | (1 << (StarRocksSqlParser.UNLOCK - 388)) | (1 << (StarRocksSqlParser.LOW_PRIORITY - 388)))) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (StarRocksSqlParser.PLUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.MINUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.LOGICAL_NOT - 422)) | (1 << (StarRocksSqlParser.BITNOT - 422)) | (1 << (StarRocksSqlParser.AT - 422)) | (1 << (StarRocksSqlParser.INTEGER_VALUE - 422)) | (1 << (StarRocksSqlParser.DECIMAL_VALUE - 422)) | (1 << (StarRocksSqlParser.DOUBLE_VALUE - 422)) | (1 << (StarRocksSqlParser.SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.LETTER_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.DIGIT_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.BACKQUOTED_IDENTIFIER - 422)))) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & ((1 << (StarRocksSqlParser.LEFT_PAREN - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACKET - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACE - 456)) | (1 << (StarRocksSqlParser.DOTDOTDOT - 456)))) !== 0)) {
					{
					this.state = 5582;
					this.mapExpressionList();
					}
				}

				this.state = 5585;
				this.match(StarRocksSqlParser.RIGHT_BRACE);
				}
				break;

			case 18:
				{
				_localctx = new MapConstructorContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5587;
				this.match(StarRocksSqlParser.MAP);
				this.state = 5588;
				this.match(StarRocksSqlParser.LEFT_BRACE);
				this.state = 5590;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << StarRocksSqlParser.ACTIVE) | (1 << StarRocksSqlParser.ADMIN) | (1 << StarRocksSqlParser.AFTER) | (1 << StarRocksSqlParser.AGGREGATE) | (1 << StarRocksSqlParser.ANTI) | (1 << StarRocksSqlParser.ARRAY) | (1 << StarRocksSqlParser.ARRAY_AGG) | (1 << StarRocksSqlParser.ASYNC) | (1 << StarRocksSqlParser.AUTHORS) | (1 << StarRocksSqlParser.AUTHENTICATION) | (1 << StarRocksSqlParser.AUTO_INCREMENT) | (1 << StarRocksSqlParser.AVG) | (1 << StarRocksSqlParser.BACKEND) | (1 << StarRocksSqlParser.BACKENDS) | (1 << StarRocksSqlParser.BACKUP) | (1 << StarRocksSqlParser.BEGIN))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (StarRocksSqlParser.BITMAP_UNION - 32)) | (1 << (StarRocksSqlParser.BLACKLIST - 32)) | (1 << (StarRocksSqlParser.BOOLEAN - 32)) | (1 << (StarRocksSqlParser.BROKER - 32)) | (1 << (StarRocksSqlParser.BUCKETS - 32)) | (1 << (StarRocksSqlParser.BUILTIN - 32)) | (1 << (StarRocksSqlParser.CANCEL - 32)) | (1 << (StarRocksSqlParser.CASE - 32)) | (1 << (StarRocksSqlParser.CAST - 32)) | (1 << (StarRocksSqlParser.CATALOG - 32)) | (1 << (StarRocksSqlParser.CATALOGS - 32)) | (1 << (StarRocksSqlParser.CEIL - 32)) | (1 << (StarRocksSqlParser.CHAIN - 32)) | (1 << (StarRocksSqlParser.CHAR - 32)) | (1 << (StarRocksSqlParser.CHARSET - 32)) | (1 << (StarRocksSqlParser.CLEAN - 32)) | (1 << (StarRocksSqlParser.CLUSTER - 32)) | (1 << (StarRocksSqlParser.CLUSTERS - 32)) | (1 << (StarRocksSqlParser.COLLATION - 32)) | (1 << (StarRocksSqlParser.COLUMNS - 32)) | (1 << (StarRocksSqlParser.COMMENT - 32)) | (1 << (StarRocksSqlParser.COMMIT - 32)) | (1 << (StarRocksSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (StarRocksSqlParser.COMPUTE - 64)) | (1 << (StarRocksSqlParser.CONFIG - 64)) | (1 << (StarRocksSqlParser.CONNECTION - 64)) | (1 << (StarRocksSqlParser.CONSISTENT - 64)) | (1 << (StarRocksSqlParser.CONVERT - 64)) | (1 << (StarRocksSqlParser.COSTS - 64)) | (1 << (StarRocksSqlParser.COUNT - 64)) | (1 << (StarRocksSqlParser.CUME_DIST - 64)) | (1 << (StarRocksSqlParser.CURRENT - 64)) | (1 << (StarRocksSqlParser.CURRENT_DATE - 64)) | (1 << (StarRocksSqlParser.CURRENT_ROLE - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIME - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (StarRocksSqlParser.CURRENT_USER - 64)) | (1 << (StarRocksSqlParser.DATA - 64)) | (1 << (StarRocksSqlParser.DATABASE - 64)) | (1 << (StarRocksSqlParser.DATE - 64)) | (1 << (StarRocksSqlParser.DATETIME - 64)) | (1 << (StarRocksSqlParser.DAY - 64)) | (1 << (StarRocksSqlParser.DECOMMISSION - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (StarRocksSqlParser.DENSE_RANK - 96)) | (1 << (StarRocksSqlParser.NTILE - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTED - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTION - 96)) | (1 << (StarRocksSqlParser.DUPLICATE - 96)) | (1 << (StarRocksSqlParser.DYNAMIC - 96)) | (1 << (StarRocksSqlParser.ENCLOSE - 96)) | (1 << (StarRocksSqlParser.END - 96)) | (1 << (StarRocksSqlParser.ENGINE - 96)) | (1 << (StarRocksSqlParser.ENGINES - 96)) | (1 << (StarRocksSqlParser.ERRORS - 96)) | (1 << (StarRocksSqlParser.ESCAPE - 96)) | (1 << (StarRocksSqlParser.EVENTS - 96)) | (1 << (StarRocksSqlParser.EXECUTE - 96)) | (1 << (StarRocksSqlParser.EXISTS - 96)) | (1 << (StarRocksSqlParser.EXPORT - 96)) | (1 << (StarRocksSqlParser.EXTERNAL - 96)) | (1 << (StarRocksSqlParser.EXTRACT - 96)) | (1 << (StarRocksSqlParser.EVERY - 96)) | (1 << (StarRocksSqlParser.FALSE - 96)) | (1 << (StarRocksSqlParser.FIELDS - 96)) | (1 << (StarRocksSqlParser.FILE - 96)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (StarRocksSqlParser.FILTER - 129)) | (1 << (StarRocksSqlParser.FIRST - 129)) | (1 << (StarRocksSqlParser.FIRST_VALUE - 129)) | (1 << (StarRocksSqlParser.FLOOR - 129)) | (1 << (StarRocksSqlParser.FN - 129)) | (1 << (StarRocksSqlParser.FOLLOWING - 129)) | (1 << (StarRocksSqlParser.FOLLOWER - 129)) | (1 << (StarRocksSqlParser.FORMAT - 129)) | (1 << (StarRocksSqlParser.FREE - 129)) | (1 << (StarRocksSqlParser.FRONTEND - 129)) | (1 << (StarRocksSqlParser.FRONTENDS - 129)) | (1 << (StarRocksSqlParser.FUNCTIONS - 129)) | (1 << (StarRocksSqlParser.GLOBAL - 129)) | (1 << (StarRocksSqlParser.GRANTS - 129)) | (1 << (StarRocksSqlParser.GROUPING - 129)) | (1 << (StarRocksSqlParser.GROUPING_ID - 129)) | (1 << (StarRocksSqlParser.HASH - 129)) | (1 << (StarRocksSqlParser.HELP - 129)) | (1 << (StarRocksSqlParser.HISTOGRAM - 129)) | (1 << (StarRocksSqlParser.HLL_UNION - 129)) | (1 << (StarRocksSqlParser.HOST - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (StarRocksSqlParser.HOUR - 161)) | (1 << (StarRocksSqlParser.HUB - 161)) | (1 << (StarRocksSqlParser.IDENTIFIED - 161)) | (1 << (StarRocksSqlParser.IF - 161)) | (1 << (StarRocksSqlParser.IMPERSONATE - 161)) | (1 << (StarRocksSqlParser.IMAGE - 161)) | (1 << (StarRocksSqlParser.INACTIVE - 161)) | (1 << (StarRocksSqlParser.INCREMENTAL - 161)) | (1 << (StarRocksSqlParser.INDEXES - 161)) | (1 << (StarRocksSqlParser.INSTALL - 161)) | (1 << (StarRocksSqlParser.INTERMEDIATE - 161)) | (1 << (StarRocksSqlParser.INTERVAL - 161)) | (1 << (StarRocksSqlParser.OVERWRITE - 161)) | (1 << (StarRocksSqlParser.ISOLATION - 161)) | (1 << (StarRocksSqlParser.JOB - 161)))) !== 0) || ((((_la - 195)) & ~0x1F) === 0 && ((1 << (_la - 195)) & ((1 << (StarRocksSqlParser.LABEL - 195)) | (1 << (StarRocksSqlParser.LAG - 195)) | (1 << (StarRocksSqlParser.LAST - 195)) | (1 << (StarRocksSqlParser.LAST_VALUE - 195)) | (1 << (StarRocksSqlParser.LEAD - 195)) | (1 << (StarRocksSqlParser.LEFT - 195)) | (1 << (StarRocksSqlParser.LESS - 195)) | (1 << (StarRocksSqlParser.LEVEL - 195)) | (1 << (StarRocksSqlParser.LIKE - 195)) | (1 << (StarRocksSqlParser.LIST - 195)) | (1 << (StarRocksSqlParser.LOCAL - 195)) | (1 << (StarRocksSqlParser.LOCALTIME - 195)) | (1 << (StarRocksSqlParser.LOCALTIMESTAMP - 195)) | (1 << (StarRocksSqlParser.LOCATION - 195)) | (1 << (StarRocksSqlParser.LOGICAL - 195)) | (1 << (StarRocksSqlParser.MANUAL - 195)) | (1 << (StarRocksSqlParser.MAP - 195)) | (1 << (StarRocksSqlParser.MATERIALIZED - 195)) | (1 << (StarRocksSqlParser.MAX - 195)) | (1 << (StarRocksSqlParser.MERGE - 195)) | (1 << (StarRocksSqlParser.MIN - 195)) | (1 << (StarRocksSqlParser.MINUTE - 195)) | (1 << (StarRocksSqlParser.MINUS - 195)))) !== 0) || ((((_la - 227)) & ~0x1F) === 0 && ((1 << (_la - 227)) & ((1 << (StarRocksSqlParser.META - 227)) | (1 << (StarRocksSqlParser.MOD - 227)) | (1 << (StarRocksSqlParser.MODE - 227)) | (1 << (StarRocksSqlParser.MODIFY - 227)) | (1 << (StarRocksSqlParser.MONTH - 227)) | (1 << (StarRocksSqlParser.NAME - 227)) | (1 << (StarRocksSqlParser.NAMES - 227)) | (1 << (StarRocksSqlParser.NEGATIVE - 227)) | (1 << (StarRocksSqlParser.NO - 227)) | (1 << (StarRocksSqlParser.NODE - 227)) | (1 << (StarRocksSqlParser.NODES - 227)) | (1 << (StarRocksSqlParser.NONE - 227)) | (1 << (StarRocksSqlParser.NOT - 227)) | (1 << (StarRocksSqlParser.NULL - 227)) | (1 << (StarRocksSqlParser.NULLS - 227)) | (1 << (StarRocksSqlParser.NUMBER - 227)) | (1 << (StarRocksSqlParser.NUMERIC - 227)) | (1 << (StarRocksSqlParser.OBSERVER - 227)) | (1 << (StarRocksSqlParser.OF - 227)) | (1 << (StarRocksSqlParser.OFFSET - 227)) | (1 << (StarRocksSqlParser.ONLY - 227)) | (1 << (StarRocksSqlParser.OPEN - 227)) | (1 << (StarRocksSqlParser.OPERATE - 227)) | (1 << (StarRocksSqlParser.OPTIMIZER - 227)) | (1 << (StarRocksSqlParser.OPTION - 227)))) !== 0) || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (StarRocksSqlParser.PARTITIONS - 259)) | (1 << (StarRocksSqlParser.PASSWORD - 259)) | (1 << (StarRocksSqlParser.PATH - 259)) | (1 << (StarRocksSqlParser.PAUSE - 259)) | (1 << (StarRocksSqlParser.PENDING - 259)) | (1 << (StarRocksSqlParser.PERCENT_RANK - 259)) | (1 << (StarRocksSqlParser.PERCENTILE_UNION - 259)) | (1 << (StarRocksSqlParser.PLUGIN - 259)) | (1 << (StarRocksSqlParser.PLUGINS - 259)) | (1 << (StarRocksSqlParser.PRECEDING - 259)) | (1 << (StarRocksSqlParser.PRIVILEGES - 259)) | (1 << (StarRocksSqlParser.PROC - 259)) | (1 << (StarRocksSqlParser.PROCESSLIST - 259)) | (1 << (StarRocksSqlParser.PROFILE - 259)) | (1 << (StarRocksSqlParser.PROFILELIST - 259)) | (1 << (StarRocksSqlParser.PROPERTIES - 259)) | (1 << (StarRocksSqlParser.PROPERTY - 259)) | (1 << (StarRocksSqlParser.QUALIFY - 259)) | (1 << (StarRocksSqlParser.QUARTER - 259)) | (1 << (StarRocksSqlParser.QUERY - 259)) | (1 << (StarRocksSqlParser.QUEUE - 259)) | (1 << (StarRocksSqlParser.QUOTA - 259)) | (1 << (StarRocksSqlParser.RANDOM - 259)) | (1 << (StarRocksSqlParser.RANK - 259)) | (1 << (StarRocksSqlParser.RECOVER - 259)))) !== 0) || ((((_la - 291)) & ~0x1F) === 0 && ((1 << (_la - 291)) & ((1 << (StarRocksSqlParser.REFRESH - 291)) | (1 << (StarRocksSqlParser.REWRITE - 291)) | (1 << (StarRocksSqlParser.REGEXP - 291)) | (1 << (StarRocksSqlParser.REMOVE - 291)) | (1 << (StarRocksSqlParser.REPAIR - 291)) | (1 << (StarRocksSqlParser.REPEATABLE - 291)) | (1 << (StarRocksSqlParser.REPLACE - 291)) | (1 << (StarRocksSqlParser.REPLACE_IF_NOT_NULL - 291)) | (1 << (StarRocksSqlParser.REPLICA - 291)) | (1 << (StarRocksSqlParser.REPOSITORY - 291)) | (1 << (StarRocksSqlParser.REPOSITORIES - 291)) | (1 << (StarRocksSqlParser.RESOURCE - 291)) | (1 << (StarRocksSqlParser.RESOURCES - 291)) | (1 << (StarRocksSqlParser.RESTORE - 291)) | (1 << (StarRocksSqlParser.RESUME - 291)) | (1 << (StarRocksSqlParser.RETURNS - 291)) | (1 << (StarRocksSqlParser.REVERT - 291)) | (1 << (StarRocksSqlParser.RIGHT - 291)) | (1 << (StarRocksSqlParser.RLIKE - 291)) | (1 << (StarRocksSqlParser.ROLE - 291)) | (1 << (StarRocksSqlParser.ROLES - 291)) | (1 << (StarRocksSqlParser.ROLLBACK - 291)) | (1 << (StarRocksSqlParser.ROLLUP - 291)) | (1 << (StarRocksSqlParser.ROUTINE - 291)) | (1 << (StarRocksSqlParser.ROW - 291)) | (1 << (StarRocksSqlParser.ROW_NUMBER - 291)) | (1 << (StarRocksSqlParser.SAMPLE - 291)) | (1 << (StarRocksSqlParser.SCHEDULER - 291)))) !== 0) || ((((_la - 323)) & ~0x1F) === 0 && ((1 << (_la - 323)) & ((1 << (StarRocksSqlParser.SCHEMA - 323)) | (1 << (StarRocksSqlParser.SECOND - 323)) | (1 << (StarRocksSqlParser.SEMI - 323)) | (1 << (StarRocksSqlParser.SERIALIZABLE - 323)) | (1 << (StarRocksSqlParser.SESSION - 323)) | (1 << (StarRocksSqlParser.SETS - 323)) | (1 << (StarRocksSqlParser.SIGNED - 323)) | (1 << (StarRocksSqlParser.SKIP_HEADER - 323)) | (1 << (StarRocksSqlParser.SNAPSHOT - 323)) | (1 << (StarRocksSqlParser.SQLBLACKLIST - 323)) | (1 << (StarRocksSqlParser.START - 323)) | (1 << (StarRocksSqlParser.STATS - 323)) | (1 << (StarRocksSqlParser.STATUS - 323)) | (1 << (StarRocksSqlParser.STOP - 323)) | (1 << (StarRocksSqlParser.STORAGE - 323)) | (1 << (StarRocksSqlParser.STREAM - 323)) | (1 << (StarRocksSqlParser.STRING - 323)) | (1 << (StarRocksSqlParser.SUBMIT - 323)) | (1 << (StarRocksSqlParser.SUM - 323)) | (1 << (StarRocksSqlParser.SUSPEND - 323)) | (1 << (StarRocksSqlParser.SYNC - 323)) | (1 << (StarRocksSqlParser.SYSTEM_TIME - 323)) | (1 << (StarRocksSqlParser.SWAP - 323)))) !== 0) || ((((_la - 355)) & ~0x1F) === 0 && ((1 << (_la - 355)) & ((1 << (StarRocksSqlParser.STRUCT - 355)) | (1 << (StarRocksSqlParser.TABLES - 355)) | (1 << (StarRocksSqlParser.TABLET - 355)) | (1 << (StarRocksSqlParser.TASK - 355)) | (1 << (StarRocksSqlParser.TEMPORARY - 355)) | (1 << (StarRocksSqlParser.THAN - 355)) | (1 << (StarRocksSqlParser.TIME - 355)) | (1 << (StarRocksSqlParser.TIMESTAMP - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPADD - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPDIFF - 355)) | (1 << (StarRocksSqlParser.TRANSACTION - 355)) | (1 << (StarRocksSqlParser.TRACE - 355)) | (1 << (StarRocksSqlParser.TRIGGERS - 355)) | (1 << (StarRocksSqlParser.TRIM_SPACE - 355)) | (1 << (StarRocksSqlParser.TRUE - 355)) | (1 << (StarRocksSqlParser.TRUNCATE - 355)) | (1 << (StarRocksSqlParser.TYPE - 355)) | (1 << (StarRocksSqlParser.TYPES - 355)) | (1 << (StarRocksSqlParser.UNBOUNDED - 355)) | (1 << (StarRocksSqlParser.UNCOMMITTED - 355)) | (1 << (StarRocksSqlParser.UNINSTALL - 355)) | (1 << (StarRocksSqlParser.USAGE - 355)))) !== 0) || ((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & ((1 << (StarRocksSqlParser.USER - 388)) | (1 << (StarRocksSqlParser.USERS - 388)) | (1 << (StarRocksSqlParser.VALUE - 388)) | (1 << (StarRocksSqlParser.VARIABLES - 388)) | (1 << (StarRocksSqlParser.VERBOSE - 388)) | (1 << (StarRocksSqlParser.VIEW - 388)) | (1 << (StarRocksSqlParser.VIEWS - 388)) | (1 << (StarRocksSqlParser.WAREHOUSE - 388)) | (1 << (StarRocksSqlParser.WAREHOUSES - 388)) | (1 << (StarRocksSqlParser.WARNINGS - 388)) | (1 << (StarRocksSqlParser.WEEK - 388)) | (1 << (StarRocksSqlParser.WHITELIST - 388)) | (1 << (StarRocksSqlParser.WORK - 388)) | (1 << (StarRocksSqlParser.WRITE - 388)) | (1 << (StarRocksSqlParser.YEAR - 388)) | (1 << (StarRocksSqlParser.LOCK - 388)) | (1 << (StarRocksSqlParser.UNLOCK - 388)) | (1 << (StarRocksSqlParser.LOW_PRIORITY - 388)))) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (StarRocksSqlParser.PLUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.MINUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.LOGICAL_NOT - 422)) | (1 << (StarRocksSqlParser.BITNOT - 422)) | (1 << (StarRocksSqlParser.AT - 422)) | (1 << (StarRocksSqlParser.INTEGER_VALUE - 422)) | (1 << (StarRocksSqlParser.DECIMAL_VALUE - 422)) | (1 << (StarRocksSqlParser.DOUBLE_VALUE - 422)) | (1 << (StarRocksSqlParser.SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.LETTER_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.DIGIT_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.BACKQUOTED_IDENTIFIER - 422)))) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & ((1 << (StarRocksSqlParser.LEFT_PAREN - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACKET - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACE - 456)) | (1 << (StarRocksSqlParser.DOTDOTDOT - 456)))) !== 0)) {
					{
					this.state = 5589;
					this.mapExpressionList();
					}
				}

				this.state = 5592;
				this.match(StarRocksSqlParser.RIGHT_BRACE);
				}
				break;

			case 19:
				{
				_localctx = new LambdaFunctionExprContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5595;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case StarRocksSqlParser.ACTIVE:
				case StarRocksSqlParser.ADMIN:
				case StarRocksSqlParser.AFTER:
				case StarRocksSqlParser.AGGREGATE:
				case StarRocksSqlParser.ANTI:
				case StarRocksSqlParser.ASYNC:
				case StarRocksSqlParser.AUTHORS:
				case StarRocksSqlParser.AUTHENTICATION:
				case StarRocksSqlParser.AUTO_INCREMENT:
				case StarRocksSqlParser.AVG:
				case StarRocksSqlParser.BACKEND:
				case StarRocksSqlParser.BACKENDS:
				case StarRocksSqlParser.BACKUP:
				case StarRocksSqlParser.BEGIN:
				case StarRocksSqlParser.BITMAP_UNION:
				case StarRocksSqlParser.BLACKLIST:
				case StarRocksSqlParser.BOOLEAN:
				case StarRocksSqlParser.BROKER:
				case StarRocksSqlParser.BUCKETS:
				case StarRocksSqlParser.BUILTIN:
				case StarRocksSqlParser.CANCEL:
				case StarRocksSqlParser.CAST:
				case StarRocksSqlParser.CATALOG:
				case StarRocksSqlParser.CATALOGS:
				case StarRocksSqlParser.CEIL:
				case StarRocksSqlParser.CHAIN:
				case StarRocksSqlParser.CHARSET:
				case StarRocksSqlParser.CLEAN:
				case StarRocksSqlParser.CLUSTER:
				case StarRocksSqlParser.CLUSTERS:
				case StarRocksSqlParser.COLLATION:
				case StarRocksSqlParser.COLUMNS:
				case StarRocksSqlParser.COMMENT:
				case StarRocksSqlParser.COMMIT:
				case StarRocksSqlParser.COMMITTED:
				case StarRocksSqlParser.COMPUTE:
				case StarRocksSqlParser.CONFIG:
				case StarRocksSqlParser.CONNECTION:
				case StarRocksSqlParser.CONSISTENT:
				case StarRocksSqlParser.COSTS:
				case StarRocksSqlParser.COUNT:
				case StarRocksSqlParser.CUME_DIST:
				case StarRocksSqlParser.CURRENT:
				case StarRocksSqlParser.DATA:
				case StarRocksSqlParser.DATE:
				case StarRocksSqlParser.DATETIME:
				case StarRocksSqlParser.DAY:
				case StarRocksSqlParser.DECOMMISSION:
				case StarRocksSqlParser.DISTRIBUTED:
				case StarRocksSqlParser.DISTRIBUTION:
				case StarRocksSqlParser.DUPLICATE:
				case StarRocksSqlParser.DYNAMIC:
				case StarRocksSqlParser.ENCLOSE:
				case StarRocksSqlParser.END:
				case StarRocksSqlParser.ENGINE:
				case StarRocksSqlParser.ENGINES:
				case StarRocksSqlParser.ERRORS:
				case StarRocksSqlParser.ESCAPE:
				case StarRocksSqlParser.EVENTS:
				case StarRocksSqlParser.EXECUTE:
				case StarRocksSqlParser.EXPORT:
				case StarRocksSqlParser.EXTERNAL:
				case StarRocksSqlParser.EXTRACT:
				case StarRocksSqlParser.EVERY:
				case StarRocksSqlParser.FIELDS:
				case StarRocksSqlParser.FILE:
				case StarRocksSqlParser.FILTER:
				case StarRocksSqlParser.FIRST:
				case StarRocksSqlParser.FLOOR:
				case StarRocksSqlParser.FN:
				case StarRocksSqlParser.FOLLOWING:
				case StarRocksSqlParser.FOLLOWER:
				case StarRocksSqlParser.FORMAT:
				case StarRocksSqlParser.FREE:
				case StarRocksSqlParser.FRONTEND:
				case StarRocksSqlParser.FRONTENDS:
				case StarRocksSqlParser.FUNCTIONS:
				case StarRocksSqlParser.GLOBAL:
				case StarRocksSqlParser.GRANTS:
				case StarRocksSqlParser.HASH:
				case StarRocksSqlParser.HELP:
				case StarRocksSqlParser.HISTOGRAM:
				case StarRocksSqlParser.HLL_UNION:
				case StarRocksSqlParser.HOST:
				case StarRocksSqlParser.HOUR:
				case StarRocksSqlParser.HUB:
				case StarRocksSqlParser.IDENTIFIED:
				case StarRocksSqlParser.IMPERSONATE:
				case StarRocksSqlParser.IMAGE:
				case StarRocksSqlParser.INACTIVE:
				case StarRocksSqlParser.INCREMENTAL:
				case StarRocksSqlParser.INDEXES:
				case StarRocksSqlParser.INSTALL:
				case StarRocksSqlParser.INTERMEDIATE:
				case StarRocksSqlParser.INTERVAL:
				case StarRocksSqlParser.OVERWRITE:
				case StarRocksSqlParser.ISOLATION:
				case StarRocksSqlParser.JOB:
				case StarRocksSqlParser.LABEL:
				case StarRocksSqlParser.LAST:
				case StarRocksSqlParser.LESS:
				case StarRocksSqlParser.LEVEL:
				case StarRocksSqlParser.LIST:
				case StarRocksSqlParser.LOCAL:
				case StarRocksSqlParser.LOCATION:
				case StarRocksSqlParser.LOGICAL:
				case StarRocksSqlParser.MANUAL:
				case StarRocksSqlParser.MAP:
				case StarRocksSqlParser.MATERIALIZED:
				case StarRocksSqlParser.MAX:
				case StarRocksSqlParser.MERGE:
				case StarRocksSqlParser.MIN:
				case StarRocksSqlParser.MINUTE:
				case StarRocksSqlParser.MINUS:
				case StarRocksSqlParser.META:
				case StarRocksSqlParser.MODE:
				case StarRocksSqlParser.MODIFY:
				case StarRocksSqlParser.MONTH:
				case StarRocksSqlParser.NAME:
				case StarRocksSqlParser.NAMES:
				case StarRocksSqlParser.NEGATIVE:
				case StarRocksSqlParser.NO:
				case StarRocksSqlParser.NODE:
				case StarRocksSqlParser.NODES:
				case StarRocksSqlParser.NONE:
				case StarRocksSqlParser.NULLS:
				case StarRocksSqlParser.NUMBER:
				case StarRocksSqlParser.NUMERIC:
				case StarRocksSqlParser.OBSERVER:
				case StarRocksSqlParser.OF:
				case StarRocksSqlParser.OFFSET:
				case StarRocksSqlParser.ONLY:
				case StarRocksSqlParser.OPEN:
				case StarRocksSqlParser.OPERATE:
				case StarRocksSqlParser.OPTIMIZER:
				case StarRocksSqlParser.OPTION:
				case StarRocksSqlParser.PARTITIONS:
				case StarRocksSqlParser.PASSWORD:
				case StarRocksSqlParser.PATH:
				case StarRocksSqlParser.PAUSE:
				case StarRocksSqlParser.PENDING:
				case StarRocksSqlParser.PERCENT_RANK:
				case StarRocksSqlParser.PERCENTILE_UNION:
				case StarRocksSqlParser.PLUGIN:
				case StarRocksSqlParser.PLUGINS:
				case StarRocksSqlParser.PRECEDING:
				case StarRocksSqlParser.PRIVILEGES:
				case StarRocksSqlParser.PROC:
				case StarRocksSqlParser.PROCESSLIST:
				case StarRocksSqlParser.PROFILE:
				case StarRocksSqlParser.PROFILELIST:
				case StarRocksSqlParser.PROPERTIES:
				case StarRocksSqlParser.PROPERTY:
				case StarRocksSqlParser.QUALIFY:
				case StarRocksSqlParser.QUARTER:
				case StarRocksSqlParser.QUERY:
				case StarRocksSqlParser.QUEUE:
				case StarRocksSqlParser.QUOTA:
				case StarRocksSqlParser.RANDOM:
				case StarRocksSqlParser.RANK:
				case StarRocksSqlParser.RECOVER:
				case StarRocksSqlParser.REFRESH:
				case StarRocksSqlParser.REWRITE:
				case StarRocksSqlParser.REMOVE:
				case StarRocksSqlParser.REPAIR:
				case StarRocksSqlParser.REPEATABLE:
				case StarRocksSqlParser.REPLACE_IF_NOT_NULL:
				case StarRocksSqlParser.REPLICA:
				case StarRocksSqlParser.REPOSITORY:
				case StarRocksSqlParser.REPOSITORIES:
				case StarRocksSqlParser.RESOURCE:
				case StarRocksSqlParser.RESOURCES:
				case StarRocksSqlParser.RESTORE:
				case StarRocksSqlParser.RESUME:
				case StarRocksSqlParser.RETURNS:
				case StarRocksSqlParser.REVERT:
				case StarRocksSqlParser.ROLE:
				case StarRocksSqlParser.ROLES:
				case StarRocksSqlParser.ROLLBACK:
				case StarRocksSqlParser.ROLLUP:
				case StarRocksSqlParser.ROUTINE:
				case StarRocksSqlParser.ROW:
				case StarRocksSqlParser.SAMPLE:
				case StarRocksSqlParser.SCHEDULER:
				case StarRocksSqlParser.SECOND:
				case StarRocksSqlParser.SEMI:
				case StarRocksSqlParser.SERIALIZABLE:
				case StarRocksSqlParser.SESSION:
				case StarRocksSqlParser.SETS:
				case StarRocksSqlParser.SIGNED:
				case StarRocksSqlParser.SKIP_HEADER:
				case StarRocksSqlParser.SNAPSHOT:
				case StarRocksSqlParser.SQLBLACKLIST:
				case StarRocksSqlParser.START:
				case StarRocksSqlParser.STATS:
				case StarRocksSqlParser.STATUS:
				case StarRocksSqlParser.STOP:
				case StarRocksSqlParser.STORAGE:
				case StarRocksSqlParser.STREAM:
				case StarRocksSqlParser.STRING:
				case StarRocksSqlParser.SUBMIT:
				case StarRocksSqlParser.SUM:
				case StarRocksSqlParser.SUSPEND:
				case StarRocksSqlParser.SYNC:
				case StarRocksSqlParser.SYSTEM_TIME:
				case StarRocksSqlParser.SWAP:
				case StarRocksSqlParser.STRUCT:
				case StarRocksSqlParser.TABLES:
				case StarRocksSqlParser.TABLET:
				case StarRocksSqlParser.TASK:
				case StarRocksSqlParser.TEMPORARY:
				case StarRocksSqlParser.THAN:
				case StarRocksSqlParser.TIME:
				case StarRocksSqlParser.TIMESTAMP:
				case StarRocksSqlParser.TIMESTAMPADD:
				case StarRocksSqlParser.TIMESTAMPDIFF:
				case StarRocksSqlParser.TRANSACTION:
				case StarRocksSqlParser.TRACE:
				case StarRocksSqlParser.TRIGGERS:
				case StarRocksSqlParser.TRIM_SPACE:
				case StarRocksSqlParser.TRUNCATE:
				case StarRocksSqlParser.TYPE:
				case StarRocksSqlParser.TYPES:
				case StarRocksSqlParser.UNBOUNDED:
				case StarRocksSqlParser.UNCOMMITTED:
				case StarRocksSqlParser.UNINSTALL:
				case StarRocksSqlParser.USAGE:
				case StarRocksSqlParser.USER:
				case StarRocksSqlParser.USERS:
				case StarRocksSqlParser.VALUE:
				case StarRocksSqlParser.VARIABLES:
				case StarRocksSqlParser.VERBOSE:
				case StarRocksSqlParser.VIEW:
				case StarRocksSqlParser.VIEWS:
				case StarRocksSqlParser.WAREHOUSE:
				case StarRocksSqlParser.WAREHOUSES:
				case StarRocksSqlParser.WARNINGS:
				case StarRocksSqlParser.WEEK:
				case StarRocksSqlParser.WHITELIST:
				case StarRocksSqlParser.WORK:
				case StarRocksSqlParser.WRITE:
				case StarRocksSqlParser.YEAR:
				case StarRocksSqlParser.LOCK:
				case StarRocksSqlParser.UNLOCK:
				case StarRocksSqlParser.LOW_PRIORITY:
				case StarRocksSqlParser.LETTER_IDENTIFIER:
				case StarRocksSqlParser.DIGIT_IDENTIFIER:
				case StarRocksSqlParser.BACKQUOTED_IDENTIFIER:
				case StarRocksSqlParser.DOTDOTDOT:
					{
					this.state = 5593;
					this.identifier();
					}
					break;
				case StarRocksSqlParser.LEFT_PAREN:
					{
					this.state = 5594;
					this.identifierList();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5597;
				this.match(StarRocksSqlParser.ARROW);
				this.state = 5598;
				this.expression(0);
				}
				break;

			case 20:
				{
				_localctx = new LambdaFunctionExprContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 5600;
				this.identifierList();
				this.state = 5601;
				this.match(StarRocksSqlParser.ARROW);
				this.state = 5602;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5604;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << StarRocksSqlParser.ACTIVE) | (1 << StarRocksSqlParser.ADMIN) | (1 << StarRocksSqlParser.AFTER) | (1 << StarRocksSqlParser.AGGREGATE) | (1 << StarRocksSqlParser.ANTI) | (1 << StarRocksSqlParser.ARRAY) | (1 << StarRocksSqlParser.ARRAY_AGG) | (1 << StarRocksSqlParser.ASYNC) | (1 << StarRocksSqlParser.AUTHORS) | (1 << StarRocksSqlParser.AUTHENTICATION) | (1 << StarRocksSqlParser.AUTO_INCREMENT) | (1 << StarRocksSqlParser.AVG) | (1 << StarRocksSqlParser.BACKEND) | (1 << StarRocksSqlParser.BACKENDS) | (1 << StarRocksSqlParser.BACKUP) | (1 << StarRocksSqlParser.BEGIN))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (StarRocksSqlParser.BITMAP_UNION - 32)) | (1 << (StarRocksSqlParser.BLACKLIST - 32)) | (1 << (StarRocksSqlParser.BOOLEAN - 32)) | (1 << (StarRocksSqlParser.BROKER - 32)) | (1 << (StarRocksSqlParser.BUCKETS - 32)) | (1 << (StarRocksSqlParser.BUILTIN - 32)) | (1 << (StarRocksSqlParser.CANCEL - 32)) | (1 << (StarRocksSqlParser.CASE - 32)) | (1 << (StarRocksSqlParser.CAST - 32)) | (1 << (StarRocksSqlParser.CATALOG - 32)) | (1 << (StarRocksSqlParser.CATALOGS - 32)) | (1 << (StarRocksSqlParser.CEIL - 32)) | (1 << (StarRocksSqlParser.CHAIN - 32)) | (1 << (StarRocksSqlParser.CHAR - 32)) | (1 << (StarRocksSqlParser.CHARSET - 32)) | (1 << (StarRocksSqlParser.CLEAN - 32)) | (1 << (StarRocksSqlParser.CLUSTER - 32)) | (1 << (StarRocksSqlParser.CLUSTERS - 32)) | (1 << (StarRocksSqlParser.COLLATION - 32)) | (1 << (StarRocksSqlParser.COLUMNS - 32)) | (1 << (StarRocksSqlParser.COMMENT - 32)) | (1 << (StarRocksSqlParser.COMMIT - 32)) | (1 << (StarRocksSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (StarRocksSqlParser.COMPUTE - 64)) | (1 << (StarRocksSqlParser.CONFIG - 64)) | (1 << (StarRocksSqlParser.CONNECTION - 64)) | (1 << (StarRocksSqlParser.CONSISTENT - 64)) | (1 << (StarRocksSqlParser.CONVERT - 64)) | (1 << (StarRocksSqlParser.COSTS - 64)) | (1 << (StarRocksSqlParser.COUNT - 64)) | (1 << (StarRocksSqlParser.CUME_DIST - 64)) | (1 << (StarRocksSqlParser.CURRENT - 64)) | (1 << (StarRocksSqlParser.CURRENT_DATE - 64)) | (1 << (StarRocksSqlParser.CURRENT_ROLE - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIME - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (StarRocksSqlParser.CURRENT_USER - 64)) | (1 << (StarRocksSqlParser.DATA - 64)) | (1 << (StarRocksSqlParser.DATABASE - 64)) | (1 << (StarRocksSqlParser.DATE - 64)) | (1 << (StarRocksSqlParser.DATETIME - 64)) | (1 << (StarRocksSqlParser.DAY - 64)) | (1 << (StarRocksSqlParser.DECOMMISSION - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (StarRocksSqlParser.DENSE_RANK - 96)) | (1 << (StarRocksSqlParser.NTILE - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTED - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTION - 96)) | (1 << (StarRocksSqlParser.DUPLICATE - 96)) | (1 << (StarRocksSqlParser.DYNAMIC - 96)) | (1 << (StarRocksSqlParser.ENCLOSE - 96)) | (1 << (StarRocksSqlParser.END - 96)) | (1 << (StarRocksSqlParser.ENGINE - 96)) | (1 << (StarRocksSqlParser.ENGINES - 96)) | (1 << (StarRocksSqlParser.ERRORS - 96)) | (1 << (StarRocksSqlParser.ESCAPE - 96)) | (1 << (StarRocksSqlParser.EVENTS - 96)) | (1 << (StarRocksSqlParser.EXECUTE - 96)) | (1 << (StarRocksSqlParser.EXISTS - 96)) | (1 << (StarRocksSqlParser.EXPORT - 96)) | (1 << (StarRocksSqlParser.EXTERNAL - 96)) | (1 << (StarRocksSqlParser.EXTRACT - 96)) | (1 << (StarRocksSqlParser.EVERY - 96)) | (1 << (StarRocksSqlParser.FALSE - 96)) | (1 << (StarRocksSqlParser.FIELDS - 96)) | (1 << (StarRocksSqlParser.FILE - 96)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (StarRocksSqlParser.FILTER - 129)) | (1 << (StarRocksSqlParser.FIRST - 129)) | (1 << (StarRocksSqlParser.FIRST_VALUE - 129)) | (1 << (StarRocksSqlParser.FLOOR - 129)) | (1 << (StarRocksSqlParser.FN - 129)) | (1 << (StarRocksSqlParser.FOLLOWING - 129)) | (1 << (StarRocksSqlParser.FOLLOWER - 129)) | (1 << (StarRocksSqlParser.FORMAT - 129)) | (1 << (StarRocksSqlParser.FREE - 129)) | (1 << (StarRocksSqlParser.FRONTEND - 129)) | (1 << (StarRocksSqlParser.FRONTENDS - 129)) | (1 << (StarRocksSqlParser.FUNCTIONS - 129)) | (1 << (StarRocksSqlParser.GLOBAL - 129)) | (1 << (StarRocksSqlParser.GRANTS - 129)) | (1 << (StarRocksSqlParser.GROUPING - 129)) | (1 << (StarRocksSqlParser.GROUPING_ID - 129)) | (1 << (StarRocksSqlParser.HASH - 129)) | (1 << (StarRocksSqlParser.HELP - 129)) | (1 << (StarRocksSqlParser.HISTOGRAM - 129)) | (1 << (StarRocksSqlParser.HLL_UNION - 129)) | (1 << (StarRocksSqlParser.HOST - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (StarRocksSqlParser.HOUR - 161)) | (1 << (StarRocksSqlParser.HUB - 161)) | (1 << (StarRocksSqlParser.IDENTIFIED - 161)) | (1 << (StarRocksSqlParser.IF - 161)) | (1 << (StarRocksSqlParser.IMPERSONATE - 161)) | (1 << (StarRocksSqlParser.IMAGE - 161)) | (1 << (StarRocksSqlParser.INACTIVE - 161)) | (1 << (StarRocksSqlParser.INCREMENTAL - 161)) | (1 << (StarRocksSqlParser.INDEXES - 161)) | (1 << (StarRocksSqlParser.INSTALL - 161)) | (1 << (StarRocksSqlParser.INTERMEDIATE - 161)) | (1 << (StarRocksSqlParser.INTERVAL - 161)) | (1 << (StarRocksSqlParser.OVERWRITE - 161)) | (1 << (StarRocksSqlParser.ISOLATION - 161)) | (1 << (StarRocksSqlParser.JOB - 161)))) !== 0) || ((((_la - 195)) & ~0x1F) === 0 && ((1 << (_la - 195)) & ((1 << (StarRocksSqlParser.LABEL - 195)) | (1 << (StarRocksSqlParser.LAG - 195)) | (1 << (StarRocksSqlParser.LAST - 195)) | (1 << (StarRocksSqlParser.LAST_VALUE - 195)) | (1 << (StarRocksSqlParser.LEAD - 195)) | (1 << (StarRocksSqlParser.LEFT - 195)) | (1 << (StarRocksSqlParser.LESS - 195)) | (1 << (StarRocksSqlParser.LEVEL - 195)) | (1 << (StarRocksSqlParser.LIKE - 195)) | (1 << (StarRocksSqlParser.LIST - 195)) | (1 << (StarRocksSqlParser.LOCAL - 195)) | (1 << (StarRocksSqlParser.LOCALTIME - 195)) | (1 << (StarRocksSqlParser.LOCALTIMESTAMP - 195)) | (1 << (StarRocksSqlParser.LOCATION - 195)) | (1 << (StarRocksSqlParser.LOGICAL - 195)) | (1 << (StarRocksSqlParser.MANUAL - 195)) | (1 << (StarRocksSqlParser.MAP - 195)) | (1 << (StarRocksSqlParser.MATERIALIZED - 195)) | (1 << (StarRocksSqlParser.MAX - 195)) | (1 << (StarRocksSqlParser.MERGE - 195)) | (1 << (StarRocksSqlParser.MIN - 195)) | (1 << (StarRocksSqlParser.MINUTE - 195)) | (1 << (StarRocksSqlParser.MINUS - 195)))) !== 0) || ((((_la - 227)) & ~0x1F) === 0 && ((1 << (_la - 227)) & ((1 << (StarRocksSqlParser.META - 227)) | (1 << (StarRocksSqlParser.MOD - 227)) | (1 << (StarRocksSqlParser.MODE - 227)) | (1 << (StarRocksSqlParser.MODIFY - 227)) | (1 << (StarRocksSqlParser.MONTH - 227)) | (1 << (StarRocksSqlParser.NAME - 227)) | (1 << (StarRocksSqlParser.NAMES - 227)) | (1 << (StarRocksSqlParser.NEGATIVE - 227)) | (1 << (StarRocksSqlParser.NO - 227)) | (1 << (StarRocksSqlParser.NODE - 227)) | (1 << (StarRocksSqlParser.NODES - 227)) | (1 << (StarRocksSqlParser.NONE - 227)) | (1 << (StarRocksSqlParser.NOT - 227)) | (1 << (StarRocksSqlParser.NULL - 227)) | (1 << (StarRocksSqlParser.NULLS - 227)) | (1 << (StarRocksSqlParser.NUMBER - 227)) | (1 << (StarRocksSqlParser.NUMERIC - 227)) | (1 << (StarRocksSqlParser.OBSERVER - 227)) | (1 << (StarRocksSqlParser.OF - 227)) | (1 << (StarRocksSqlParser.OFFSET - 227)) | (1 << (StarRocksSqlParser.ONLY - 227)) | (1 << (StarRocksSqlParser.OPEN - 227)) | (1 << (StarRocksSqlParser.OPERATE - 227)) | (1 << (StarRocksSqlParser.OPTIMIZER - 227)) | (1 << (StarRocksSqlParser.OPTION - 227)))) !== 0) || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (StarRocksSqlParser.PARTITIONS - 259)) | (1 << (StarRocksSqlParser.PASSWORD - 259)) | (1 << (StarRocksSqlParser.PATH - 259)) | (1 << (StarRocksSqlParser.PAUSE - 259)) | (1 << (StarRocksSqlParser.PENDING - 259)) | (1 << (StarRocksSqlParser.PERCENT_RANK - 259)) | (1 << (StarRocksSqlParser.PERCENTILE_UNION - 259)) | (1 << (StarRocksSqlParser.PLUGIN - 259)) | (1 << (StarRocksSqlParser.PLUGINS - 259)) | (1 << (StarRocksSqlParser.PRECEDING - 259)) | (1 << (StarRocksSqlParser.PRIVILEGES - 259)) | (1 << (StarRocksSqlParser.PROC - 259)) | (1 << (StarRocksSqlParser.PROCESSLIST - 259)) | (1 << (StarRocksSqlParser.PROFILE - 259)) | (1 << (StarRocksSqlParser.PROFILELIST - 259)) | (1 << (StarRocksSqlParser.PROPERTIES - 259)) | (1 << (StarRocksSqlParser.PROPERTY - 259)) | (1 << (StarRocksSqlParser.QUALIFY - 259)) | (1 << (StarRocksSqlParser.QUARTER - 259)) | (1 << (StarRocksSqlParser.QUERY - 259)) | (1 << (StarRocksSqlParser.QUEUE - 259)) | (1 << (StarRocksSqlParser.QUOTA - 259)) | (1 << (StarRocksSqlParser.RANDOM - 259)) | (1 << (StarRocksSqlParser.RANK - 259)) | (1 << (StarRocksSqlParser.RECOVER - 259)))) !== 0) || ((((_la - 291)) & ~0x1F) === 0 && ((1 << (_la - 291)) & ((1 << (StarRocksSqlParser.REFRESH - 291)) | (1 << (StarRocksSqlParser.REWRITE - 291)) | (1 << (StarRocksSqlParser.REGEXP - 291)) | (1 << (StarRocksSqlParser.REMOVE - 291)) | (1 << (StarRocksSqlParser.REPAIR - 291)) | (1 << (StarRocksSqlParser.REPEATABLE - 291)) | (1 << (StarRocksSqlParser.REPLACE - 291)) | (1 << (StarRocksSqlParser.REPLACE_IF_NOT_NULL - 291)) | (1 << (StarRocksSqlParser.REPLICA - 291)) | (1 << (StarRocksSqlParser.REPOSITORY - 291)) | (1 << (StarRocksSqlParser.REPOSITORIES - 291)) | (1 << (StarRocksSqlParser.RESOURCE - 291)) | (1 << (StarRocksSqlParser.RESOURCES - 291)) | (1 << (StarRocksSqlParser.RESTORE - 291)) | (1 << (StarRocksSqlParser.RESUME - 291)) | (1 << (StarRocksSqlParser.RETURNS - 291)) | (1 << (StarRocksSqlParser.REVERT - 291)) | (1 << (StarRocksSqlParser.RIGHT - 291)) | (1 << (StarRocksSqlParser.RLIKE - 291)) | (1 << (StarRocksSqlParser.ROLE - 291)) | (1 << (StarRocksSqlParser.ROLES - 291)) | (1 << (StarRocksSqlParser.ROLLBACK - 291)) | (1 << (StarRocksSqlParser.ROLLUP - 291)) | (1 << (StarRocksSqlParser.ROUTINE - 291)) | (1 << (StarRocksSqlParser.ROW - 291)) | (1 << (StarRocksSqlParser.ROW_NUMBER - 291)) | (1 << (StarRocksSqlParser.SAMPLE - 291)) | (1 << (StarRocksSqlParser.SCHEDULER - 291)))) !== 0) || ((((_la - 323)) & ~0x1F) === 0 && ((1 << (_la - 323)) & ((1 << (StarRocksSqlParser.SCHEMA - 323)) | (1 << (StarRocksSqlParser.SECOND - 323)) | (1 << (StarRocksSqlParser.SEMI - 323)) | (1 << (StarRocksSqlParser.SERIALIZABLE - 323)) | (1 << (StarRocksSqlParser.SESSION - 323)) | (1 << (StarRocksSqlParser.SETS - 323)) | (1 << (StarRocksSqlParser.SIGNED - 323)) | (1 << (StarRocksSqlParser.SKIP_HEADER - 323)) | (1 << (StarRocksSqlParser.SNAPSHOT - 323)) | (1 << (StarRocksSqlParser.SQLBLACKLIST - 323)) | (1 << (StarRocksSqlParser.START - 323)) | (1 << (StarRocksSqlParser.STATS - 323)) | (1 << (StarRocksSqlParser.STATUS - 323)) | (1 << (StarRocksSqlParser.STOP - 323)) | (1 << (StarRocksSqlParser.STORAGE - 323)) | (1 << (StarRocksSqlParser.STREAM - 323)) | (1 << (StarRocksSqlParser.STRING - 323)) | (1 << (StarRocksSqlParser.SUBMIT - 323)) | (1 << (StarRocksSqlParser.SUM - 323)) | (1 << (StarRocksSqlParser.SUSPEND - 323)) | (1 << (StarRocksSqlParser.SYNC - 323)) | (1 << (StarRocksSqlParser.SYSTEM_TIME - 323)) | (1 << (StarRocksSqlParser.SWAP - 323)))) !== 0) || ((((_la - 355)) & ~0x1F) === 0 && ((1 << (_la - 355)) & ((1 << (StarRocksSqlParser.STRUCT - 355)) | (1 << (StarRocksSqlParser.TABLES - 355)) | (1 << (StarRocksSqlParser.TABLET - 355)) | (1 << (StarRocksSqlParser.TASK - 355)) | (1 << (StarRocksSqlParser.TEMPORARY - 355)) | (1 << (StarRocksSqlParser.THAN - 355)) | (1 << (StarRocksSqlParser.TIME - 355)) | (1 << (StarRocksSqlParser.TIMESTAMP - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPADD - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPDIFF - 355)) | (1 << (StarRocksSqlParser.TRANSACTION - 355)) | (1 << (StarRocksSqlParser.TRACE - 355)) | (1 << (StarRocksSqlParser.TRIGGERS - 355)) | (1 << (StarRocksSqlParser.TRIM_SPACE - 355)) | (1 << (StarRocksSqlParser.TRUE - 355)) | (1 << (StarRocksSqlParser.TRUNCATE - 355)) | (1 << (StarRocksSqlParser.TYPE - 355)) | (1 << (StarRocksSqlParser.TYPES - 355)) | (1 << (StarRocksSqlParser.UNBOUNDED - 355)) | (1 << (StarRocksSqlParser.UNCOMMITTED - 355)) | (1 << (StarRocksSqlParser.UNINSTALL - 355)) | (1 << (StarRocksSqlParser.USAGE - 355)))) !== 0) || ((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & ((1 << (StarRocksSqlParser.USER - 388)) | (1 << (StarRocksSqlParser.USERS - 388)) | (1 << (StarRocksSqlParser.VALUE - 388)) | (1 << (StarRocksSqlParser.VARIABLES - 388)) | (1 << (StarRocksSqlParser.VERBOSE - 388)) | (1 << (StarRocksSqlParser.VIEW - 388)) | (1 << (StarRocksSqlParser.VIEWS - 388)) | (1 << (StarRocksSqlParser.WAREHOUSE - 388)) | (1 << (StarRocksSqlParser.WAREHOUSES - 388)) | (1 << (StarRocksSqlParser.WARNINGS - 388)) | (1 << (StarRocksSqlParser.WEEK - 388)) | (1 << (StarRocksSqlParser.WHITELIST - 388)) | (1 << (StarRocksSqlParser.WORK - 388)) | (1 << (StarRocksSqlParser.WRITE - 388)) | (1 << (StarRocksSqlParser.YEAR - 388)) | (1 << (StarRocksSqlParser.LOCK - 388)) | (1 << (StarRocksSqlParser.UNLOCK - 388)) | (1 << (StarRocksSqlParser.LOW_PRIORITY - 388)))) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (StarRocksSqlParser.PLUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.MINUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.LOGICAL_NOT - 422)) | (1 << (StarRocksSqlParser.BITNOT - 422)) | (1 << (StarRocksSqlParser.AT - 422)) | (1 << (StarRocksSqlParser.INTEGER_VALUE - 422)) | (1 << (StarRocksSqlParser.DECIMAL_VALUE - 422)) | (1 << (StarRocksSqlParser.DOUBLE_VALUE - 422)) | (1 << (StarRocksSqlParser.SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.LETTER_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.DIGIT_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.BACKQUOTED_IDENTIFIER - 422)))) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & ((1 << (StarRocksSqlParser.LEFT_PAREN - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACKET - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACE - 456)) | (1 << (StarRocksSqlParser.DOTDOTDOT - 456)))) !== 0)) {
					{
					this.state = 5603;
					this.expressionList();
					}
				}

				this.state = 5606;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 5645;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 639, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 5643;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 638, this._ctx) ) {
					case 1:
						{
						_localctx = new ConcatContext(new PrimaryExpressionContext(_parentctx, _parentState));
						(_localctx as ConcatContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, StarRocksSqlParser.RULE_primaryExpression);
						this.state = 5610;
						if (!(this.precpred(this._ctx, 18))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 18)");
						}
						this.state = 5611;
						this.match(StarRocksSqlParser.CONCAT);
						this.state = 5612;
						(_localctx as ConcatContext)._right = this.primaryExpression(19);
						}
						break;

					case 2:
						{
						_localctx = new CollateContext(new PrimaryExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, StarRocksSqlParser.RULE_primaryExpression);
						this.state = 5613;
						if (!(this.precpred(this._ctx, 22))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 22)");
						}
						this.state = 5614;
						this.match(StarRocksSqlParser.COLLATE);
						this.state = 5617;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case StarRocksSqlParser.ACTIVE:
						case StarRocksSqlParser.ADMIN:
						case StarRocksSqlParser.AFTER:
						case StarRocksSqlParser.AGGREGATE:
						case StarRocksSqlParser.ANTI:
						case StarRocksSqlParser.ASYNC:
						case StarRocksSqlParser.AUTHORS:
						case StarRocksSqlParser.AUTHENTICATION:
						case StarRocksSqlParser.AUTO_INCREMENT:
						case StarRocksSqlParser.AVG:
						case StarRocksSqlParser.BACKEND:
						case StarRocksSqlParser.BACKENDS:
						case StarRocksSqlParser.BACKUP:
						case StarRocksSqlParser.BEGIN:
						case StarRocksSqlParser.BITMAP_UNION:
						case StarRocksSqlParser.BLACKLIST:
						case StarRocksSqlParser.BOOLEAN:
						case StarRocksSqlParser.BROKER:
						case StarRocksSqlParser.BUCKETS:
						case StarRocksSqlParser.BUILTIN:
						case StarRocksSqlParser.CANCEL:
						case StarRocksSqlParser.CAST:
						case StarRocksSqlParser.CATALOG:
						case StarRocksSqlParser.CATALOGS:
						case StarRocksSqlParser.CEIL:
						case StarRocksSqlParser.CHAIN:
						case StarRocksSqlParser.CHARSET:
						case StarRocksSqlParser.CLEAN:
						case StarRocksSqlParser.CLUSTER:
						case StarRocksSqlParser.CLUSTERS:
						case StarRocksSqlParser.COLLATION:
						case StarRocksSqlParser.COLUMNS:
						case StarRocksSqlParser.COMMENT:
						case StarRocksSqlParser.COMMIT:
						case StarRocksSqlParser.COMMITTED:
						case StarRocksSqlParser.COMPUTE:
						case StarRocksSqlParser.CONFIG:
						case StarRocksSqlParser.CONNECTION:
						case StarRocksSqlParser.CONSISTENT:
						case StarRocksSqlParser.COSTS:
						case StarRocksSqlParser.COUNT:
						case StarRocksSqlParser.CUME_DIST:
						case StarRocksSqlParser.CURRENT:
						case StarRocksSqlParser.DATA:
						case StarRocksSqlParser.DATE:
						case StarRocksSqlParser.DATETIME:
						case StarRocksSqlParser.DAY:
						case StarRocksSqlParser.DECOMMISSION:
						case StarRocksSqlParser.DISTRIBUTED:
						case StarRocksSqlParser.DISTRIBUTION:
						case StarRocksSqlParser.DUPLICATE:
						case StarRocksSqlParser.DYNAMIC:
						case StarRocksSqlParser.ENCLOSE:
						case StarRocksSqlParser.END:
						case StarRocksSqlParser.ENGINE:
						case StarRocksSqlParser.ENGINES:
						case StarRocksSqlParser.ERRORS:
						case StarRocksSqlParser.ESCAPE:
						case StarRocksSqlParser.EVENTS:
						case StarRocksSqlParser.EXECUTE:
						case StarRocksSqlParser.EXPORT:
						case StarRocksSqlParser.EXTERNAL:
						case StarRocksSqlParser.EXTRACT:
						case StarRocksSqlParser.EVERY:
						case StarRocksSqlParser.FIELDS:
						case StarRocksSqlParser.FILE:
						case StarRocksSqlParser.FILTER:
						case StarRocksSqlParser.FIRST:
						case StarRocksSqlParser.FLOOR:
						case StarRocksSqlParser.FN:
						case StarRocksSqlParser.FOLLOWING:
						case StarRocksSqlParser.FOLLOWER:
						case StarRocksSqlParser.FORMAT:
						case StarRocksSqlParser.FREE:
						case StarRocksSqlParser.FRONTEND:
						case StarRocksSqlParser.FRONTENDS:
						case StarRocksSqlParser.FUNCTIONS:
						case StarRocksSqlParser.GLOBAL:
						case StarRocksSqlParser.GRANTS:
						case StarRocksSqlParser.HASH:
						case StarRocksSqlParser.HELP:
						case StarRocksSqlParser.HISTOGRAM:
						case StarRocksSqlParser.HLL_UNION:
						case StarRocksSqlParser.HOST:
						case StarRocksSqlParser.HOUR:
						case StarRocksSqlParser.HUB:
						case StarRocksSqlParser.IDENTIFIED:
						case StarRocksSqlParser.IMPERSONATE:
						case StarRocksSqlParser.IMAGE:
						case StarRocksSqlParser.INACTIVE:
						case StarRocksSqlParser.INCREMENTAL:
						case StarRocksSqlParser.INDEXES:
						case StarRocksSqlParser.INSTALL:
						case StarRocksSqlParser.INTERMEDIATE:
						case StarRocksSqlParser.INTERVAL:
						case StarRocksSqlParser.OVERWRITE:
						case StarRocksSqlParser.ISOLATION:
						case StarRocksSqlParser.JOB:
						case StarRocksSqlParser.LABEL:
						case StarRocksSqlParser.LAST:
						case StarRocksSqlParser.LESS:
						case StarRocksSqlParser.LEVEL:
						case StarRocksSqlParser.LIST:
						case StarRocksSqlParser.LOCAL:
						case StarRocksSqlParser.LOCATION:
						case StarRocksSqlParser.LOGICAL:
						case StarRocksSqlParser.MANUAL:
						case StarRocksSqlParser.MAP:
						case StarRocksSqlParser.MATERIALIZED:
						case StarRocksSqlParser.MAX:
						case StarRocksSqlParser.MERGE:
						case StarRocksSqlParser.MIN:
						case StarRocksSqlParser.MINUTE:
						case StarRocksSqlParser.MINUS:
						case StarRocksSqlParser.META:
						case StarRocksSqlParser.MODE:
						case StarRocksSqlParser.MODIFY:
						case StarRocksSqlParser.MONTH:
						case StarRocksSqlParser.NAME:
						case StarRocksSqlParser.NAMES:
						case StarRocksSqlParser.NEGATIVE:
						case StarRocksSqlParser.NO:
						case StarRocksSqlParser.NODE:
						case StarRocksSqlParser.NODES:
						case StarRocksSqlParser.NONE:
						case StarRocksSqlParser.NULLS:
						case StarRocksSqlParser.NUMBER:
						case StarRocksSqlParser.NUMERIC:
						case StarRocksSqlParser.OBSERVER:
						case StarRocksSqlParser.OF:
						case StarRocksSqlParser.OFFSET:
						case StarRocksSqlParser.ONLY:
						case StarRocksSqlParser.OPEN:
						case StarRocksSqlParser.OPERATE:
						case StarRocksSqlParser.OPTIMIZER:
						case StarRocksSqlParser.OPTION:
						case StarRocksSqlParser.PARTITIONS:
						case StarRocksSqlParser.PASSWORD:
						case StarRocksSqlParser.PATH:
						case StarRocksSqlParser.PAUSE:
						case StarRocksSqlParser.PENDING:
						case StarRocksSqlParser.PERCENT_RANK:
						case StarRocksSqlParser.PERCENTILE_UNION:
						case StarRocksSqlParser.PLUGIN:
						case StarRocksSqlParser.PLUGINS:
						case StarRocksSqlParser.PRECEDING:
						case StarRocksSqlParser.PRIVILEGES:
						case StarRocksSqlParser.PROC:
						case StarRocksSqlParser.PROCESSLIST:
						case StarRocksSqlParser.PROFILE:
						case StarRocksSqlParser.PROFILELIST:
						case StarRocksSqlParser.PROPERTIES:
						case StarRocksSqlParser.PROPERTY:
						case StarRocksSqlParser.QUALIFY:
						case StarRocksSqlParser.QUARTER:
						case StarRocksSqlParser.QUERY:
						case StarRocksSqlParser.QUEUE:
						case StarRocksSqlParser.QUOTA:
						case StarRocksSqlParser.RANDOM:
						case StarRocksSqlParser.RANK:
						case StarRocksSqlParser.RECOVER:
						case StarRocksSqlParser.REFRESH:
						case StarRocksSqlParser.REWRITE:
						case StarRocksSqlParser.REMOVE:
						case StarRocksSqlParser.REPAIR:
						case StarRocksSqlParser.REPEATABLE:
						case StarRocksSqlParser.REPLACE_IF_NOT_NULL:
						case StarRocksSqlParser.REPLICA:
						case StarRocksSqlParser.REPOSITORY:
						case StarRocksSqlParser.REPOSITORIES:
						case StarRocksSqlParser.RESOURCE:
						case StarRocksSqlParser.RESOURCES:
						case StarRocksSqlParser.RESTORE:
						case StarRocksSqlParser.RESUME:
						case StarRocksSqlParser.RETURNS:
						case StarRocksSqlParser.REVERT:
						case StarRocksSqlParser.ROLE:
						case StarRocksSqlParser.ROLES:
						case StarRocksSqlParser.ROLLBACK:
						case StarRocksSqlParser.ROLLUP:
						case StarRocksSqlParser.ROUTINE:
						case StarRocksSqlParser.ROW:
						case StarRocksSqlParser.SAMPLE:
						case StarRocksSqlParser.SCHEDULER:
						case StarRocksSqlParser.SECOND:
						case StarRocksSqlParser.SEMI:
						case StarRocksSqlParser.SERIALIZABLE:
						case StarRocksSqlParser.SESSION:
						case StarRocksSqlParser.SETS:
						case StarRocksSqlParser.SIGNED:
						case StarRocksSqlParser.SKIP_HEADER:
						case StarRocksSqlParser.SNAPSHOT:
						case StarRocksSqlParser.SQLBLACKLIST:
						case StarRocksSqlParser.START:
						case StarRocksSqlParser.STATS:
						case StarRocksSqlParser.STATUS:
						case StarRocksSqlParser.STOP:
						case StarRocksSqlParser.STORAGE:
						case StarRocksSqlParser.STREAM:
						case StarRocksSqlParser.STRING:
						case StarRocksSqlParser.SUBMIT:
						case StarRocksSqlParser.SUM:
						case StarRocksSqlParser.SUSPEND:
						case StarRocksSqlParser.SYNC:
						case StarRocksSqlParser.SYSTEM_TIME:
						case StarRocksSqlParser.SWAP:
						case StarRocksSqlParser.STRUCT:
						case StarRocksSqlParser.TABLES:
						case StarRocksSqlParser.TABLET:
						case StarRocksSqlParser.TASK:
						case StarRocksSqlParser.TEMPORARY:
						case StarRocksSqlParser.THAN:
						case StarRocksSqlParser.TIME:
						case StarRocksSqlParser.TIMESTAMP:
						case StarRocksSqlParser.TIMESTAMPADD:
						case StarRocksSqlParser.TIMESTAMPDIFF:
						case StarRocksSqlParser.TRANSACTION:
						case StarRocksSqlParser.TRACE:
						case StarRocksSqlParser.TRIGGERS:
						case StarRocksSqlParser.TRIM_SPACE:
						case StarRocksSqlParser.TRUNCATE:
						case StarRocksSqlParser.TYPE:
						case StarRocksSqlParser.TYPES:
						case StarRocksSqlParser.UNBOUNDED:
						case StarRocksSqlParser.UNCOMMITTED:
						case StarRocksSqlParser.UNINSTALL:
						case StarRocksSqlParser.USAGE:
						case StarRocksSqlParser.USER:
						case StarRocksSqlParser.USERS:
						case StarRocksSqlParser.VALUE:
						case StarRocksSqlParser.VARIABLES:
						case StarRocksSqlParser.VERBOSE:
						case StarRocksSqlParser.VIEW:
						case StarRocksSqlParser.VIEWS:
						case StarRocksSqlParser.WAREHOUSE:
						case StarRocksSqlParser.WAREHOUSES:
						case StarRocksSqlParser.WARNINGS:
						case StarRocksSqlParser.WEEK:
						case StarRocksSqlParser.WHITELIST:
						case StarRocksSqlParser.WORK:
						case StarRocksSqlParser.WRITE:
						case StarRocksSqlParser.YEAR:
						case StarRocksSqlParser.LOCK:
						case StarRocksSqlParser.UNLOCK:
						case StarRocksSqlParser.LOW_PRIORITY:
						case StarRocksSqlParser.LETTER_IDENTIFIER:
						case StarRocksSqlParser.DIGIT_IDENTIFIER:
						case StarRocksSqlParser.BACKQUOTED_IDENTIFIER:
						case StarRocksSqlParser.DOTDOTDOT:
							{
							this.state = 5615;
							this.identifier();
							}
							break;
						case StarRocksSqlParser.SINGLE_QUOTED_TEXT:
						case StarRocksSqlParser.DOUBLE_QUOTED_TEXT:
							{
							this.state = 5616;
							this.string();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;

					case 3:
						{
						_localctx = new DereferenceContext(new PrimaryExpressionContext(_parentctx, _parentState));
						(_localctx as DereferenceContext)._base = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, StarRocksSqlParser.RULE_primaryExpression);
						this.state = 5619;
						if (!(this.precpred(this._ctx, 19))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 19)");
						}
						this.state = 5623;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case StarRocksSqlParser.DOT_IDENTIFIER:
							{
							this.state = 5620;
							this.match(StarRocksSqlParser.DOT_IDENTIFIER);
							}
							break;
						case StarRocksSqlParser.DOT:
							{
							this.state = 5621;
							this.match(StarRocksSqlParser.DOT);
							this.state = 5622;
							(_localctx as DereferenceContext)._fieldName = this.identifier();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;

					case 4:
						{
						_localctx = new CollectionSubscriptContext(new PrimaryExpressionContext(_parentctx, _parentState));
						(_localctx as CollectionSubscriptContext)._value = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, StarRocksSqlParser.RULE_primaryExpression);
						this.state = 5625;
						if (!(this.precpred(this._ctx, 5))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 5)");
						}
						this.state = 5626;
						this.match(StarRocksSqlParser.LEFT_BRACKET);
						this.state = 5627;
						(_localctx as CollectionSubscriptContext)._index = this.valueExpression(0);
						this.state = 5628;
						this.match(StarRocksSqlParser.RIGHT_BRACKET);
						}
						break;

					case 5:
						{
						_localctx = new ArraySliceContext(new PrimaryExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, StarRocksSqlParser.RULE_primaryExpression);
						this.state = 5630;
						if (!(this.precpred(this._ctx, 4))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 4)");
						}
						this.state = 5631;
						this.match(StarRocksSqlParser.LEFT_BRACKET);
						this.state = 5633;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === StarRocksSqlParser.INTEGER_VALUE) {
							{
							this.state = 5632;
							(_localctx as ArraySliceContext)._start = this.match(StarRocksSqlParser.INTEGER_VALUE);
							}
						}

						this.state = 5635;
						this.match(StarRocksSqlParser.COLON);
						this.state = 5637;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === StarRocksSqlParser.INTEGER_VALUE) {
							{
							this.state = 5636;
							(_localctx as ArraySliceContext)._end = this.match(StarRocksSqlParser.INTEGER_VALUE);
							}
						}

						this.state = 5639;
						this.match(StarRocksSqlParser.RIGHT_BRACKET);
						}
						break;

					case 6:
						{
						_localctx = new ArrowExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, StarRocksSqlParser.RULE_primaryExpression);
						this.state = 5640;
						if (!(this.precpred(this._ctx, 3))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
						}
						this.state = 5641;
						this.match(StarRocksSqlParser.ARROW);
						this.state = 5642;
						this.string();
						}
						break;
					}
					}
				}
				this.state = 5647;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 639, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public literalExpression(): LiteralExpressionContext {
		let _localctx: LiteralExpressionContext = new LiteralExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 692, StarRocksSqlParser.RULE_literalExpression);
		let _la: number;
		try {
			this.state = 5657;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.NULL:
				_localctx = new NullLiteralContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5648;
				this.match(StarRocksSqlParser.NULL);
				}
				break;
			case StarRocksSqlParser.FALSE:
			case StarRocksSqlParser.TRUE:
				_localctx = new BooleanLiteralContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5649;
				this.booleanValue();
				}
				break;
			case StarRocksSqlParser.INTEGER_VALUE:
			case StarRocksSqlParser.DECIMAL_VALUE:
			case StarRocksSqlParser.DOUBLE_VALUE:
				_localctx = new NumericLiteralContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5650;
				this.number();
				}
				break;
			case StarRocksSqlParser.DATE:
			case StarRocksSqlParser.DATETIME:
				_localctx = new DateLiteralContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5651;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.DATE || _la === StarRocksSqlParser.DATETIME)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5652;
				this.string();
				}
				break;
			case StarRocksSqlParser.SINGLE_QUOTED_TEXT:
			case StarRocksSqlParser.DOUBLE_QUOTED_TEXT:
				_localctx = new StringLiteralContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5653;
				this.string();
				}
				break;
			case StarRocksSqlParser.INTERVAL:
				_localctx = new IntervalLiteralContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5654;
				this.interval();
				}
				break;
			case StarRocksSqlParser.CEIL:
			case StarRocksSqlParser.FLOOR:
				_localctx = new UnitBoundaryLiteralContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5655;
				this.unitBoundary();
				}
				break;
			case StarRocksSqlParser.BINARY_SINGLE_QUOTED_TEXT:
			case StarRocksSqlParser.BINARY_DOUBLE_QUOTED_TEXT:
				_localctx = new BinaryLiteralContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5656;
				this.binary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionCall(): FunctionCallContext {
		let _localctx: FunctionCallContext = new FunctionCallContext(this._ctx, this.state);
		this.enterRule(_localctx, 694, StarRocksSqlParser.RULE_functionCall);
		let _la: number;
		try {
			this.state = 5718;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 649, this._ctx) ) {
			case 1:
				_localctx = new ExtractContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5659;
				this.match(StarRocksSqlParser.EXTRACT);
				this.state = 5660;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5661;
				this.identifier();
				this.state = 5662;
				this.match(StarRocksSqlParser.FROM);
				this.state = 5663;
				this.valueExpression(0);
				this.state = 5664;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;

			case 2:
				_localctx = new GroupingOperationContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5666;
				this.match(StarRocksSqlParser.GROUPING);
				this.state = 5667;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5676;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << StarRocksSqlParser.ACTIVE) | (1 << StarRocksSqlParser.ADMIN) | (1 << StarRocksSqlParser.AFTER) | (1 << StarRocksSqlParser.AGGREGATE) | (1 << StarRocksSqlParser.ANTI) | (1 << StarRocksSqlParser.ARRAY) | (1 << StarRocksSqlParser.ARRAY_AGG) | (1 << StarRocksSqlParser.ASYNC) | (1 << StarRocksSqlParser.AUTHORS) | (1 << StarRocksSqlParser.AUTHENTICATION) | (1 << StarRocksSqlParser.AUTO_INCREMENT) | (1 << StarRocksSqlParser.AVG) | (1 << StarRocksSqlParser.BACKEND) | (1 << StarRocksSqlParser.BACKENDS) | (1 << StarRocksSqlParser.BACKUP) | (1 << StarRocksSqlParser.BEGIN))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (StarRocksSqlParser.BITMAP_UNION - 32)) | (1 << (StarRocksSqlParser.BLACKLIST - 32)) | (1 << (StarRocksSqlParser.BOOLEAN - 32)) | (1 << (StarRocksSqlParser.BROKER - 32)) | (1 << (StarRocksSqlParser.BUCKETS - 32)) | (1 << (StarRocksSqlParser.BUILTIN - 32)) | (1 << (StarRocksSqlParser.CANCEL - 32)) | (1 << (StarRocksSqlParser.CASE - 32)) | (1 << (StarRocksSqlParser.CAST - 32)) | (1 << (StarRocksSqlParser.CATALOG - 32)) | (1 << (StarRocksSqlParser.CATALOGS - 32)) | (1 << (StarRocksSqlParser.CEIL - 32)) | (1 << (StarRocksSqlParser.CHAIN - 32)) | (1 << (StarRocksSqlParser.CHAR - 32)) | (1 << (StarRocksSqlParser.CHARSET - 32)) | (1 << (StarRocksSqlParser.CLEAN - 32)) | (1 << (StarRocksSqlParser.CLUSTER - 32)) | (1 << (StarRocksSqlParser.CLUSTERS - 32)) | (1 << (StarRocksSqlParser.COLLATION - 32)) | (1 << (StarRocksSqlParser.COLUMNS - 32)) | (1 << (StarRocksSqlParser.COMMENT - 32)) | (1 << (StarRocksSqlParser.COMMIT - 32)) | (1 << (StarRocksSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (StarRocksSqlParser.COMPUTE - 64)) | (1 << (StarRocksSqlParser.CONFIG - 64)) | (1 << (StarRocksSqlParser.CONNECTION - 64)) | (1 << (StarRocksSqlParser.CONSISTENT - 64)) | (1 << (StarRocksSqlParser.CONVERT - 64)) | (1 << (StarRocksSqlParser.COSTS - 64)) | (1 << (StarRocksSqlParser.COUNT - 64)) | (1 << (StarRocksSqlParser.CUME_DIST - 64)) | (1 << (StarRocksSqlParser.CURRENT - 64)) | (1 << (StarRocksSqlParser.CURRENT_DATE - 64)) | (1 << (StarRocksSqlParser.CURRENT_ROLE - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIME - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (StarRocksSqlParser.CURRENT_USER - 64)) | (1 << (StarRocksSqlParser.DATA - 64)) | (1 << (StarRocksSqlParser.DATABASE - 64)) | (1 << (StarRocksSqlParser.DATE - 64)) | (1 << (StarRocksSqlParser.DATETIME - 64)) | (1 << (StarRocksSqlParser.DAY - 64)) | (1 << (StarRocksSqlParser.DECOMMISSION - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (StarRocksSqlParser.DENSE_RANK - 96)) | (1 << (StarRocksSqlParser.NTILE - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTED - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTION - 96)) | (1 << (StarRocksSqlParser.DUPLICATE - 96)) | (1 << (StarRocksSqlParser.DYNAMIC - 96)) | (1 << (StarRocksSqlParser.ENCLOSE - 96)) | (1 << (StarRocksSqlParser.END - 96)) | (1 << (StarRocksSqlParser.ENGINE - 96)) | (1 << (StarRocksSqlParser.ENGINES - 96)) | (1 << (StarRocksSqlParser.ERRORS - 96)) | (1 << (StarRocksSqlParser.ESCAPE - 96)) | (1 << (StarRocksSqlParser.EVENTS - 96)) | (1 << (StarRocksSqlParser.EXECUTE - 96)) | (1 << (StarRocksSqlParser.EXISTS - 96)) | (1 << (StarRocksSqlParser.EXPORT - 96)) | (1 << (StarRocksSqlParser.EXTERNAL - 96)) | (1 << (StarRocksSqlParser.EXTRACT - 96)) | (1 << (StarRocksSqlParser.EVERY - 96)) | (1 << (StarRocksSqlParser.FALSE - 96)) | (1 << (StarRocksSqlParser.FIELDS - 96)) | (1 << (StarRocksSqlParser.FILE - 96)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (StarRocksSqlParser.FILTER - 129)) | (1 << (StarRocksSqlParser.FIRST - 129)) | (1 << (StarRocksSqlParser.FIRST_VALUE - 129)) | (1 << (StarRocksSqlParser.FLOOR - 129)) | (1 << (StarRocksSqlParser.FN - 129)) | (1 << (StarRocksSqlParser.FOLLOWING - 129)) | (1 << (StarRocksSqlParser.FOLLOWER - 129)) | (1 << (StarRocksSqlParser.FORMAT - 129)) | (1 << (StarRocksSqlParser.FREE - 129)) | (1 << (StarRocksSqlParser.FRONTEND - 129)) | (1 << (StarRocksSqlParser.FRONTENDS - 129)) | (1 << (StarRocksSqlParser.FUNCTIONS - 129)) | (1 << (StarRocksSqlParser.GLOBAL - 129)) | (1 << (StarRocksSqlParser.GRANTS - 129)) | (1 << (StarRocksSqlParser.GROUPING - 129)) | (1 << (StarRocksSqlParser.GROUPING_ID - 129)) | (1 << (StarRocksSqlParser.HASH - 129)) | (1 << (StarRocksSqlParser.HELP - 129)) | (1 << (StarRocksSqlParser.HISTOGRAM - 129)) | (1 << (StarRocksSqlParser.HLL_UNION - 129)) | (1 << (StarRocksSqlParser.HOST - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (StarRocksSqlParser.HOUR - 161)) | (1 << (StarRocksSqlParser.HUB - 161)) | (1 << (StarRocksSqlParser.IDENTIFIED - 161)) | (1 << (StarRocksSqlParser.IF - 161)) | (1 << (StarRocksSqlParser.IMPERSONATE - 161)) | (1 << (StarRocksSqlParser.IMAGE - 161)) | (1 << (StarRocksSqlParser.INACTIVE - 161)) | (1 << (StarRocksSqlParser.INCREMENTAL - 161)) | (1 << (StarRocksSqlParser.INDEXES - 161)) | (1 << (StarRocksSqlParser.INSTALL - 161)) | (1 << (StarRocksSqlParser.INTERMEDIATE - 161)) | (1 << (StarRocksSqlParser.INTERVAL - 161)) | (1 << (StarRocksSqlParser.OVERWRITE - 161)) | (1 << (StarRocksSqlParser.ISOLATION - 161)) | (1 << (StarRocksSqlParser.JOB - 161)))) !== 0) || ((((_la - 195)) & ~0x1F) === 0 && ((1 << (_la - 195)) & ((1 << (StarRocksSqlParser.LABEL - 195)) | (1 << (StarRocksSqlParser.LAG - 195)) | (1 << (StarRocksSqlParser.LAST - 195)) | (1 << (StarRocksSqlParser.LAST_VALUE - 195)) | (1 << (StarRocksSqlParser.LEAD - 195)) | (1 << (StarRocksSqlParser.LEFT - 195)) | (1 << (StarRocksSqlParser.LESS - 195)) | (1 << (StarRocksSqlParser.LEVEL - 195)) | (1 << (StarRocksSqlParser.LIKE - 195)) | (1 << (StarRocksSqlParser.LIST - 195)) | (1 << (StarRocksSqlParser.LOCAL - 195)) | (1 << (StarRocksSqlParser.LOCALTIME - 195)) | (1 << (StarRocksSqlParser.LOCALTIMESTAMP - 195)) | (1 << (StarRocksSqlParser.LOCATION - 195)) | (1 << (StarRocksSqlParser.LOGICAL - 195)) | (1 << (StarRocksSqlParser.MANUAL - 195)) | (1 << (StarRocksSqlParser.MAP - 195)) | (1 << (StarRocksSqlParser.MATERIALIZED - 195)) | (1 << (StarRocksSqlParser.MAX - 195)) | (1 << (StarRocksSqlParser.MERGE - 195)) | (1 << (StarRocksSqlParser.MIN - 195)) | (1 << (StarRocksSqlParser.MINUTE - 195)) | (1 << (StarRocksSqlParser.MINUS - 195)))) !== 0) || ((((_la - 227)) & ~0x1F) === 0 && ((1 << (_la - 227)) & ((1 << (StarRocksSqlParser.META - 227)) | (1 << (StarRocksSqlParser.MOD - 227)) | (1 << (StarRocksSqlParser.MODE - 227)) | (1 << (StarRocksSqlParser.MODIFY - 227)) | (1 << (StarRocksSqlParser.MONTH - 227)) | (1 << (StarRocksSqlParser.NAME - 227)) | (1 << (StarRocksSqlParser.NAMES - 227)) | (1 << (StarRocksSqlParser.NEGATIVE - 227)) | (1 << (StarRocksSqlParser.NO - 227)) | (1 << (StarRocksSqlParser.NODE - 227)) | (1 << (StarRocksSqlParser.NODES - 227)) | (1 << (StarRocksSqlParser.NONE - 227)) | (1 << (StarRocksSqlParser.NOT - 227)) | (1 << (StarRocksSqlParser.NULL - 227)) | (1 << (StarRocksSqlParser.NULLS - 227)) | (1 << (StarRocksSqlParser.NUMBER - 227)) | (1 << (StarRocksSqlParser.NUMERIC - 227)) | (1 << (StarRocksSqlParser.OBSERVER - 227)) | (1 << (StarRocksSqlParser.OF - 227)) | (1 << (StarRocksSqlParser.OFFSET - 227)) | (1 << (StarRocksSqlParser.ONLY - 227)) | (1 << (StarRocksSqlParser.OPEN - 227)) | (1 << (StarRocksSqlParser.OPERATE - 227)) | (1 << (StarRocksSqlParser.OPTIMIZER - 227)) | (1 << (StarRocksSqlParser.OPTION - 227)))) !== 0) || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (StarRocksSqlParser.PARTITIONS - 259)) | (1 << (StarRocksSqlParser.PASSWORD - 259)) | (1 << (StarRocksSqlParser.PATH - 259)) | (1 << (StarRocksSqlParser.PAUSE - 259)) | (1 << (StarRocksSqlParser.PENDING - 259)) | (1 << (StarRocksSqlParser.PERCENT_RANK - 259)) | (1 << (StarRocksSqlParser.PERCENTILE_UNION - 259)) | (1 << (StarRocksSqlParser.PLUGIN - 259)) | (1 << (StarRocksSqlParser.PLUGINS - 259)) | (1 << (StarRocksSqlParser.PRECEDING - 259)) | (1 << (StarRocksSqlParser.PRIVILEGES - 259)) | (1 << (StarRocksSqlParser.PROC - 259)) | (1 << (StarRocksSqlParser.PROCESSLIST - 259)) | (1 << (StarRocksSqlParser.PROFILE - 259)) | (1 << (StarRocksSqlParser.PROFILELIST - 259)) | (1 << (StarRocksSqlParser.PROPERTIES - 259)) | (1 << (StarRocksSqlParser.PROPERTY - 259)) | (1 << (StarRocksSqlParser.QUALIFY - 259)) | (1 << (StarRocksSqlParser.QUARTER - 259)) | (1 << (StarRocksSqlParser.QUERY - 259)) | (1 << (StarRocksSqlParser.QUEUE - 259)) | (1 << (StarRocksSqlParser.QUOTA - 259)) | (1 << (StarRocksSqlParser.RANDOM - 259)) | (1 << (StarRocksSqlParser.RANK - 259)) | (1 << (StarRocksSqlParser.RECOVER - 259)))) !== 0) || ((((_la - 291)) & ~0x1F) === 0 && ((1 << (_la - 291)) & ((1 << (StarRocksSqlParser.REFRESH - 291)) | (1 << (StarRocksSqlParser.REWRITE - 291)) | (1 << (StarRocksSqlParser.REGEXP - 291)) | (1 << (StarRocksSqlParser.REMOVE - 291)) | (1 << (StarRocksSqlParser.REPAIR - 291)) | (1 << (StarRocksSqlParser.REPEATABLE - 291)) | (1 << (StarRocksSqlParser.REPLACE - 291)) | (1 << (StarRocksSqlParser.REPLACE_IF_NOT_NULL - 291)) | (1 << (StarRocksSqlParser.REPLICA - 291)) | (1 << (StarRocksSqlParser.REPOSITORY - 291)) | (1 << (StarRocksSqlParser.REPOSITORIES - 291)) | (1 << (StarRocksSqlParser.RESOURCE - 291)) | (1 << (StarRocksSqlParser.RESOURCES - 291)) | (1 << (StarRocksSqlParser.RESTORE - 291)) | (1 << (StarRocksSqlParser.RESUME - 291)) | (1 << (StarRocksSqlParser.RETURNS - 291)) | (1 << (StarRocksSqlParser.REVERT - 291)) | (1 << (StarRocksSqlParser.RIGHT - 291)) | (1 << (StarRocksSqlParser.RLIKE - 291)) | (1 << (StarRocksSqlParser.ROLE - 291)) | (1 << (StarRocksSqlParser.ROLES - 291)) | (1 << (StarRocksSqlParser.ROLLBACK - 291)) | (1 << (StarRocksSqlParser.ROLLUP - 291)) | (1 << (StarRocksSqlParser.ROUTINE - 291)) | (1 << (StarRocksSqlParser.ROW - 291)) | (1 << (StarRocksSqlParser.ROW_NUMBER - 291)) | (1 << (StarRocksSqlParser.SAMPLE - 291)) | (1 << (StarRocksSqlParser.SCHEDULER - 291)))) !== 0) || ((((_la - 323)) & ~0x1F) === 0 && ((1 << (_la - 323)) & ((1 << (StarRocksSqlParser.SCHEMA - 323)) | (1 << (StarRocksSqlParser.SECOND - 323)) | (1 << (StarRocksSqlParser.SEMI - 323)) | (1 << (StarRocksSqlParser.SERIALIZABLE - 323)) | (1 << (StarRocksSqlParser.SESSION - 323)) | (1 << (StarRocksSqlParser.SETS - 323)) | (1 << (StarRocksSqlParser.SIGNED - 323)) | (1 << (StarRocksSqlParser.SKIP_HEADER - 323)) | (1 << (StarRocksSqlParser.SNAPSHOT - 323)) | (1 << (StarRocksSqlParser.SQLBLACKLIST - 323)) | (1 << (StarRocksSqlParser.START - 323)) | (1 << (StarRocksSqlParser.STATS - 323)) | (1 << (StarRocksSqlParser.STATUS - 323)) | (1 << (StarRocksSqlParser.STOP - 323)) | (1 << (StarRocksSqlParser.STORAGE - 323)) | (1 << (StarRocksSqlParser.STREAM - 323)) | (1 << (StarRocksSqlParser.STRING - 323)) | (1 << (StarRocksSqlParser.SUBMIT - 323)) | (1 << (StarRocksSqlParser.SUM - 323)) | (1 << (StarRocksSqlParser.SUSPEND - 323)) | (1 << (StarRocksSqlParser.SYNC - 323)) | (1 << (StarRocksSqlParser.SYSTEM_TIME - 323)) | (1 << (StarRocksSqlParser.SWAP - 323)))) !== 0) || ((((_la - 355)) & ~0x1F) === 0 && ((1 << (_la - 355)) & ((1 << (StarRocksSqlParser.STRUCT - 355)) | (1 << (StarRocksSqlParser.TABLES - 355)) | (1 << (StarRocksSqlParser.TABLET - 355)) | (1 << (StarRocksSqlParser.TASK - 355)) | (1 << (StarRocksSqlParser.TEMPORARY - 355)) | (1 << (StarRocksSqlParser.THAN - 355)) | (1 << (StarRocksSqlParser.TIME - 355)) | (1 << (StarRocksSqlParser.TIMESTAMP - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPADD - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPDIFF - 355)) | (1 << (StarRocksSqlParser.TRANSACTION - 355)) | (1 << (StarRocksSqlParser.TRACE - 355)) | (1 << (StarRocksSqlParser.TRIGGERS - 355)) | (1 << (StarRocksSqlParser.TRIM_SPACE - 355)) | (1 << (StarRocksSqlParser.TRUE - 355)) | (1 << (StarRocksSqlParser.TRUNCATE - 355)) | (1 << (StarRocksSqlParser.TYPE - 355)) | (1 << (StarRocksSqlParser.TYPES - 355)) | (1 << (StarRocksSqlParser.UNBOUNDED - 355)) | (1 << (StarRocksSqlParser.UNCOMMITTED - 355)) | (1 << (StarRocksSqlParser.UNINSTALL - 355)) | (1 << (StarRocksSqlParser.USAGE - 355)))) !== 0) || ((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & ((1 << (StarRocksSqlParser.USER - 388)) | (1 << (StarRocksSqlParser.USERS - 388)) | (1 << (StarRocksSqlParser.VALUE - 388)) | (1 << (StarRocksSqlParser.VARIABLES - 388)) | (1 << (StarRocksSqlParser.VERBOSE - 388)) | (1 << (StarRocksSqlParser.VIEW - 388)) | (1 << (StarRocksSqlParser.VIEWS - 388)) | (1 << (StarRocksSqlParser.WAREHOUSE - 388)) | (1 << (StarRocksSqlParser.WAREHOUSES - 388)) | (1 << (StarRocksSqlParser.WARNINGS - 388)) | (1 << (StarRocksSqlParser.WEEK - 388)) | (1 << (StarRocksSqlParser.WHITELIST - 388)) | (1 << (StarRocksSqlParser.WORK - 388)) | (1 << (StarRocksSqlParser.WRITE - 388)) | (1 << (StarRocksSqlParser.YEAR - 388)) | (1 << (StarRocksSqlParser.LOCK - 388)) | (1 << (StarRocksSqlParser.UNLOCK - 388)) | (1 << (StarRocksSqlParser.LOW_PRIORITY - 388)))) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (StarRocksSqlParser.PLUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.MINUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.LOGICAL_NOT - 422)) | (1 << (StarRocksSqlParser.BITNOT - 422)) | (1 << (StarRocksSqlParser.AT - 422)) | (1 << (StarRocksSqlParser.INTEGER_VALUE - 422)) | (1 << (StarRocksSqlParser.DECIMAL_VALUE - 422)) | (1 << (StarRocksSqlParser.DOUBLE_VALUE - 422)) | (1 << (StarRocksSqlParser.SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.LETTER_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.DIGIT_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.BACKQUOTED_IDENTIFIER - 422)))) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & ((1 << (StarRocksSqlParser.LEFT_PAREN - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACKET - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACE - 456)) | (1 << (StarRocksSqlParser.DOTDOTDOT - 456)))) !== 0)) {
					{
					this.state = 5668;
					this.expression(0);
					this.state = 5673;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === StarRocksSqlParser.COMMA) {
						{
						{
						this.state = 5669;
						this.match(StarRocksSqlParser.COMMA);
						this.state = 5670;
						this.expression(0);
						}
						}
						this.state = 5675;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 5678;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;

			case 3:
				_localctx = new GroupingOperationContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5679;
				this.match(StarRocksSqlParser.GROUPING_ID);
				this.state = 5680;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5689;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << StarRocksSqlParser.ACTIVE) | (1 << StarRocksSqlParser.ADMIN) | (1 << StarRocksSqlParser.AFTER) | (1 << StarRocksSqlParser.AGGREGATE) | (1 << StarRocksSqlParser.ANTI) | (1 << StarRocksSqlParser.ARRAY) | (1 << StarRocksSqlParser.ARRAY_AGG) | (1 << StarRocksSqlParser.ASYNC) | (1 << StarRocksSqlParser.AUTHORS) | (1 << StarRocksSqlParser.AUTHENTICATION) | (1 << StarRocksSqlParser.AUTO_INCREMENT) | (1 << StarRocksSqlParser.AVG) | (1 << StarRocksSqlParser.BACKEND) | (1 << StarRocksSqlParser.BACKENDS) | (1 << StarRocksSqlParser.BACKUP) | (1 << StarRocksSqlParser.BEGIN))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (StarRocksSqlParser.BITMAP_UNION - 32)) | (1 << (StarRocksSqlParser.BLACKLIST - 32)) | (1 << (StarRocksSqlParser.BOOLEAN - 32)) | (1 << (StarRocksSqlParser.BROKER - 32)) | (1 << (StarRocksSqlParser.BUCKETS - 32)) | (1 << (StarRocksSqlParser.BUILTIN - 32)) | (1 << (StarRocksSqlParser.CANCEL - 32)) | (1 << (StarRocksSqlParser.CASE - 32)) | (1 << (StarRocksSqlParser.CAST - 32)) | (1 << (StarRocksSqlParser.CATALOG - 32)) | (1 << (StarRocksSqlParser.CATALOGS - 32)) | (1 << (StarRocksSqlParser.CEIL - 32)) | (1 << (StarRocksSqlParser.CHAIN - 32)) | (1 << (StarRocksSqlParser.CHAR - 32)) | (1 << (StarRocksSqlParser.CHARSET - 32)) | (1 << (StarRocksSqlParser.CLEAN - 32)) | (1 << (StarRocksSqlParser.CLUSTER - 32)) | (1 << (StarRocksSqlParser.CLUSTERS - 32)) | (1 << (StarRocksSqlParser.COLLATION - 32)) | (1 << (StarRocksSqlParser.COLUMNS - 32)) | (1 << (StarRocksSqlParser.COMMENT - 32)) | (1 << (StarRocksSqlParser.COMMIT - 32)) | (1 << (StarRocksSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (StarRocksSqlParser.COMPUTE - 64)) | (1 << (StarRocksSqlParser.CONFIG - 64)) | (1 << (StarRocksSqlParser.CONNECTION - 64)) | (1 << (StarRocksSqlParser.CONSISTENT - 64)) | (1 << (StarRocksSqlParser.CONVERT - 64)) | (1 << (StarRocksSqlParser.COSTS - 64)) | (1 << (StarRocksSqlParser.COUNT - 64)) | (1 << (StarRocksSqlParser.CUME_DIST - 64)) | (1 << (StarRocksSqlParser.CURRENT - 64)) | (1 << (StarRocksSqlParser.CURRENT_DATE - 64)) | (1 << (StarRocksSqlParser.CURRENT_ROLE - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIME - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (StarRocksSqlParser.CURRENT_USER - 64)) | (1 << (StarRocksSqlParser.DATA - 64)) | (1 << (StarRocksSqlParser.DATABASE - 64)) | (1 << (StarRocksSqlParser.DATE - 64)) | (1 << (StarRocksSqlParser.DATETIME - 64)) | (1 << (StarRocksSqlParser.DAY - 64)) | (1 << (StarRocksSqlParser.DECOMMISSION - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (StarRocksSqlParser.DENSE_RANK - 96)) | (1 << (StarRocksSqlParser.NTILE - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTED - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTION - 96)) | (1 << (StarRocksSqlParser.DUPLICATE - 96)) | (1 << (StarRocksSqlParser.DYNAMIC - 96)) | (1 << (StarRocksSqlParser.ENCLOSE - 96)) | (1 << (StarRocksSqlParser.END - 96)) | (1 << (StarRocksSqlParser.ENGINE - 96)) | (1 << (StarRocksSqlParser.ENGINES - 96)) | (1 << (StarRocksSqlParser.ERRORS - 96)) | (1 << (StarRocksSqlParser.ESCAPE - 96)) | (1 << (StarRocksSqlParser.EVENTS - 96)) | (1 << (StarRocksSqlParser.EXECUTE - 96)) | (1 << (StarRocksSqlParser.EXISTS - 96)) | (1 << (StarRocksSqlParser.EXPORT - 96)) | (1 << (StarRocksSqlParser.EXTERNAL - 96)) | (1 << (StarRocksSqlParser.EXTRACT - 96)) | (1 << (StarRocksSqlParser.EVERY - 96)) | (1 << (StarRocksSqlParser.FALSE - 96)) | (1 << (StarRocksSqlParser.FIELDS - 96)) | (1 << (StarRocksSqlParser.FILE - 96)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (StarRocksSqlParser.FILTER - 129)) | (1 << (StarRocksSqlParser.FIRST - 129)) | (1 << (StarRocksSqlParser.FIRST_VALUE - 129)) | (1 << (StarRocksSqlParser.FLOOR - 129)) | (1 << (StarRocksSqlParser.FN - 129)) | (1 << (StarRocksSqlParser.FOLLOWING - 129)) | (1 << (StarRocksSqlParser.FOLLOWER - 129)) | (1 << (StarRocksSqlParser.FORMAT - 129)) | (1 << (StarRocksSqlParser.FREE - 129)) | (1 << (StarRocksSqlParser.FRONTEND - 129)) | (1 << (StarRocksSqlParser.FRONTENDS - 129)) | (1 << (StarRocksSqlParser.FUNCTIONS - 129)) | (1 << (StarRocksSqlParser.GLOBAL - 129)) | (1 << (StarRocksSqlParser.GRANTS - 129)) | (1 << (StarRocksSqlParser.GROUPING - 129)) | (1 << (StarRocksSqlParser.GROUPING_ID - 129)) | (1 << (StarRocksSqlParser.HASH - 129)) | (1 << (StarRocksSqlParser.HELP - 129)) | (1 << (StarRocksSqlParser.HISTOGRAM - 129)) | (1 << (StarRocksSqlParser.HLL_UNION - 129)) | (1 << (StarRocksSqlParser.HOST - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (StarRocksSqlParser.HOUR - 161)) | (1 << (StarRocksSqlParser.HUB - 161)) | (1 << (StarRocksSqlParser.IDENTIFIED - 161)) | (1 << (StarRocksSqlParser.IF - 161)) | (1 << (StarRocksSqlParser.IMPERSONATE - 161)) | (1 << (StarRocksSqlParser.IMAGE - 161)) | (1 << (StarRocksSqlParser.INACTIVE - 161)) | (1 << (StarRocksSqlParser.INCREMENTAL - 161)) | (1 << (StarRocksSqlParser.INDEXES - 161)) | (1 << (StarRocksSqlParser.INSTALL - 161)) | (1 << (StarRocksSqlParser.INTERMEDIATE - 161)) | (1 << (StarRocksSqlParser.INTERVAL - 161)) | (1 << (StarRocksSqlParser.OVERWRITE - 161)) | (1 << (StarRocksSqlParser.ISOLATION - 161)) | (1 << (StarRocksSqlParser.JOB - 161)))) !== 0) || ((((_la - 195)) & ~0x1F) === 0 && ((1 << (_la - 195)) & ((1 << (StarRocksSqlParser.LABEL - 195)) | (1 << (StarRocksSqlParser.LAG - 195)) | (1 << (StarRocksSqlParser.LAST - 195)) | (1 << (StarRocksSqlParser.LAST_VALUE - 195)) | (1 << (StarRocksSqlParser.LEAD - 195)) | (1 << (StarRocksSqlParser.LEFT - 195)) | (1 << (StarRocksSqlParser.LESS - 195)) | (1 << (StarRocksSqlParser.LEVEL - 195)) | (1 << (StarRocksSqlParser.LIKE - 195)) | (1 << (StarRocksSqlParser.LIST - 195)) | (1 << (StarRocksSqlParser.LOCAL - 195)) | (1 << (StarRocksSqlParser.LOCALTIME - 195)) | (1 << (StarRocksSqlParser.LOCALTIMESTAMP - 195)) | (1 << (StarRocksSqlParser.LOCATION - 195)) | (1 << (StarRocksSqlParser.LOGICAL - 195)) | (1 << (StarRocksSqlParser.MANUAL - 195)) | (1 << (StarRocksSqlParser.MAP - 195)) | (1 << (StarRocksSqlParser.MATERIALIZED - 195)) | (1 << (StarRocksSqlParser.MAX - 195)) | (1 << (StarRocksSqlParser.MERGE - 195)) | (1 << (StarRocksSqlParser.MIN - 195)) | (1 << (StarRocksSqlParser.MINUTE - 195)) | (1 << (StarRocksSqlParser.MINUS - 195)))) !== 0) || ((((_la - 227)) & ~0x1F) === 0 && ((1 << (_la - 227)) & ((1 << (StarRocksSqlParser.META - 227)) | (1 << (StarRocksSqlParser.MOD - 227)) | (1 << (StarRocksSqlParser.MODE - 227)) | (1 << (StarRocksSqlParser.MODIFY - 227)) | (1 << (StarRocksSqlParser.MONTH - 227)) | (1 << (StarRocksSqlParser.NAME - 227)) | (1 << (StarRocksSqlParser.NAMES - 227)) | (1 << (StarRocksSqlParser.NEGATIVE - 227)) | (1 << (StarRocksSqlParser.NO - 227)) | (1 << (StarRocksSqlParser.NODE - 227)) | (1 << (StarRocksSqlParser.NODES - 227)) | (1 << (StarRocksSqlParser.NONE - 227)) | (1 << (StarRocksSqlParser.NOT - 227)) | (1 << (StarRocksSqlParser.NULL - 227)) | (1 << (StarRocksSqlParser.NULLS - 227)) | (1 << (StarRocksSqlParser.NUMBER - 227)) | (1 << (StarRocksSqlParser.NUMERIC - 227)) | (1 << (StarRocksSqlParser.OBSERVER - 227)) | (1 << (StarRocksSqlParser.OF - 227)) | (1 << (StarRocksSqlParser.OFFSET - 227)) | (1 << (StarRocksSqlParser.ONLY - 227)) | (1 << (StarRocksSqlParser.OPEN - 227)) | (1 << (StarRocksSqlParser.OPERATE - 227)) | (1 << (StarRocksSqlParser.OPTIMIZER - 227)) | (1 << (StarRocksSqlParser.OPTION - 227)))) !== 0) || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (StarRocksSqlParser.PARTITIONS - 259)) | (1 << (StarRocksSqlParser.PASSWORD - 259)) | (1 << (StarRocksSqlParser.PATH - 259)) | (1 << (StarRocksSqlParser.PAUSE - 259)) | (1 << (StarRocksSqlParser.PENDING - 259)) | (1 << (StarRocksSqlParser.PERCENT_RANK - 259)) | (1 << (StarRocksSqlParser.PERCENTILE_UNION - 259)) | (1 << (StarRocksSqlParser.PLUGIN - 259)) | (1 << (StarRocksSqlParser.PLUGINS - 259)) | (1 << (StarRocksSqlParser.PRECEDING - 259)) | (1 << (StarRocksSqlParser.PRIVILEGES - 259)) | (1 << (StarRocksSqlParser.PROC - 259)) | (1 << (StarRocksSqlParser.PROCESSLIST - 259)) | (1 << (StarRocksSqlParser.PROFILE - 259)) | (1 << (StarRocksSqlParser.PROFILELIST - 259)) | (1 << (StarRocksSqlParser.PROPERTIES - 259)) | (1 << (StarRocksSqlParser.PROPERTY - 259)) | (1 << (StarRocksSqlParser.QUALIFY - 259)) | (1 << (StarRocksSqlParser.QUARTER - 259)) | (1 << (StarRocksSqlParser.QUERY - 259)) | (1 << (StarRocksSqlParser.QUEUE - 259)) | (1 << (StarRocksSqlParser.QUOTA - 259)) | (1 << (StarRocksSqlParser.RANDOM - 259)) | (1 << (StarRocksSqlParser.RANK - 259)) | (1 << (StarRocksSqlParser.RECOVER - 259)))) !== 0) || ((((_la - 291)) & ~0x1F) === 0 && ((1 << (_la - 291)) & ((1 << (StarRocksSqlParser.REFRESH - 291)) | (1 << (StarRocksSqlParser.REWRITE - 291)) | (1 << (StarRocksSqlParser.REGEXP - 291)) | (1 << (StarRocksSqlParser.REMOVE - 291)) | (1 << (StarRocksSqlParser.REPAIR - 291)) | (1 << (StarRocksSqlParser.REPEATABLE - 291)) | (1 << (StarRocksSqlParser.REPLACE - 291)) | (1 << (StarRocksSqlParser.REPLACE_IF_NOT_NULL - 291)) | (1 << (StarRocksSqlParser.REPLICA - 291)) | (1 << (StarRocksSqlParser.REPOSITORY - 291)) | (1 << (StarRocksSqlParser.REPOSITORIES - 291)) | (1 << (StarRocksSqlParser.RESOURCE - 291)) | (1 << (StarRocksSqlParser.RESOURCES - 291)) | (1 << (StarRocksSqlParser.RESTORE - 291)) | (1 << (StarRocksSqlParser.RESUME - 291)) | (1 << (StarRocksSqlParser.RETURNS - 291)) | (1 << (StarRocksSqlParser.REVERT - 291)) | (1 << (StarRocksSqlParser.RIGHT - 291)) | (1 << (StarRocksSqlParser.RLIKE - 291)) | (1 << (StarRocksSqlParser.ROLE - 291)) | (1 << (StarRocksSqlParser.ROLES - 291)) | (1 << (StarRocksSqlParser.ROLLBACK - 291)) | (1 << (StarRocksSqlParser.ROLLUP - 291)) | (1 << (StarRocksSqlParser.ROUTINE - 291)) | (1 << (StarRocksSqlParser.ROW - 291)) | (1 << (StarRocksSqlParser.ROW_NUMBER - 291)) | (1 << (StarRocksSqlParser.SAMPLE - 291)) | (1 << (StarRocksSqlParser.SCHEDULER - 291)))) !== 0) || ((((_la - 323)) & ~0x1F) === 0 && ((1 << (_la - 323)) & ((1 << (StarRocksSqlParser.SCHEMA - 323)) | (1 << (StarRocksSqlParser.SECOND - 323)) | (1 << (StarRocksSqlParser.SEMI - 323)) | (1 << (StarRocksSqlParser.SERIALIZABLE - 323)) | (1 << (StarRocksSqlParser.SESSION - 323)) | (1 << (StarRocksSqlParser.SETS - 323)) | (1 << (StarRocksSqlParser.SIGNED - 323)) | (1 << (StarRocksSqlParser.SKIP_HEADER - 323)) | (1 << (StarRocksSqlParser.SNAPSHOT - 323)) | (1 << (StarRocksSqlParser.SQLBLACKLIST - 323)) | (1 << (StarRocksSqlParser.START - 323)) | (1 << (StarRocksSqlParser.STATS - 323)) | (1 << (StarRocksSqlParser.STATUS - 323)) | (1 << (StarRocksSqlParser.STOP - 323)) | (1 << (StarRocksSqlParser.STORAGE - 323)) | (1 << (StarRocksSqlParser.STREAM - 323)) | (1 << (StarRocksSqlParser.STRING - 323)) | (1 << (StarRocksSqlParser.SUBMIT - 323)) | (1 << (StarRocksSqlParser.SUM - 323)) | (1 << (StarRocksSqlParser.SUSPEND - 323)) | (1 << (StarRocksSqlParser.SYNC - 323)) | (1 << (StarRocksSqlParser.SYSTEM_TIME - 323)) | (1 << (StarRocksSqlParser.SWAP - 323)))) !== 0) || ((((_la - 355)) & ~0x1F) === 0 && ((1 << (_la - 355)) & ((1 << (StarRocksSqlParser.STRUCT - 355)) | (1 << (StarRocksSqlParser.TABLES - 355)) | (1 << (StarRocksSqlParser.TABLET - 355)) | (1 << (StarRocksSqlParser.TASK - 355)) | (1 << (StarRocksSqlParser.TEMPORARY - 355)) | (1 << (StarRocksSqlParser.THAN - 355)) | (1 << (StarRocksSqlParser.TIME - 355)) | (1 << (StarRocksSqlParser.TIMESTAMP - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPADD - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPDIFF - 355)) | (1 << (StarRocksSqlParser.TRANSACTION - 355)) | (1 << (StarRocksSqlParser.TRACE - 355)) | (1 << (StarRocksSqlParser.TRIGGERS - 355)) | (1 << (StarRocksSqlParser.TRIM_SPACE - 355)) | (1 << (StarRocksSqlParser.TRUE - 355)) | (1 << (StarRocksSqlParser.TRUNCATE - 355)) | (1 << (StarRocksSqlParser.TYPE - 355)) | (1 << (StarRocksSqlParser.TYPES - 355)) | (1 << (StarRocksSqlParser.UNBOUNDED - 355)) | (1 << (StarRocksSqlParser.UNCOMMITTED - 355)) | (1 << (StarRocksSqlParser.UNINSTALL - 355)) | (1 << (StarRocksSqlParser.USAGE - 355)))) !== 0) || ((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & ((1 << (StarRocksSqlParser.USER - 388)) | (1 << (StarRocksSqlParser.USERS - 388)) | (1 << (StarRocksSqlParser.VALUE - 388)) | (1 << (StarRocksSqlParser.VARIABLES - 388)) | (1 << (StarRocksSqlParser.VERBOSE - 388)) | (1 << (StarRocksSqlParser.VIEW - 388)) | (1 << (StarRocksSqlParser.VIEWS - 388)) | (1 << (StarRocksSqlParser.WAREHOUSE - 388)) | (1 << (StarRocksSqlParser.WAREHOUSES - 388)) | (1 << (StarRocksSqlParser.WARNINGS - 388)) | (1 << (StarRocksSqlParser.WEEK - 388)) | (1 << (StarRocksSqlParser.WHITELIST - 388)) | (1 << (StarRocksSqlParser.WORK - 388)) | (1 << (StarRocksSqlParser.WRITE - 388)) | (1 << (StarRocksSqlParser.YEAR - 388)) | (1 << (StarRocksSqlParser.LOCK - 388)) | (1 << (StarRocksSqlParser.UNLOCK - 388)) | (1 << (StarRocksSqlParser.LOW_PRIORITY - 388)))) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (StarRocksSqlParser.PLUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.MINUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.LOGICAL_NOT - 422)) | (1 << (StarRocksSqlParser.BITNOT - 422)) | (1 << (StarRocksSqlParser.AT - 422)) | (1 << (StarRocksSqlParser.INTEGER_VALUE - 422)) | (1 << (StarRocksSqlParser.DECIMAL_VALUE - 422)) | (1 << (StarRocksSqlParser.DOUBLE_VALUE - 422)) | (1 << (StarRocksSqlParser.SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.LETTER_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.DIGIT_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.BACKQUOTED_IDENTIFIER - 422)))) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & ((1 << (StarRocksSqlParser.LEFT_PAREN - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACKET - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACE - 456)) | (1 << (StarRocksSqlParser.DOTDOTDOT - 456)))) !== 0)) {
					{
					this.state = 5681;
					this.expression(0);
					this.state = 5686;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === StarRocksSqlParser.COMMA) {
						{
						{
						this.state = 5682;
						this.match(StarRocksSqlParser.COMMA);
						this.state = 5683;
						this.expression(0);
						}
						}
						this.state = 5688;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 5691;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;

			case 4:
				_localctx = new InformationFunctionContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5692;
				this.informationFunctionExpression();
				}
				break;

			case 5:
				_localctx = new SpecialDateTimeContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5693;
				this.specialDateTimeExpression();
				}
				break;

			case 6:
				_localctx = new SpecialFunctionContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5694;
				this.specialFunctionExpression();
				}
				break;

			case 7:
				_localctx = new AggregationFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5695;
				this.aggregationFunction();
				this.state = 5697;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 645, this._ctx) ) {
				case 1:
					{
					this.state = 5696;
					this.over();
					}
					break;
				}
				}
				break;

			case 8:
				_localctx = new WindowFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5699;
				this.windowFunction();
				this.state = 5700;
				this.over();
				}
				break;

			case 9:
				_localctx = new SimpleFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5702;
				this.qualifiedName();
				this.state = 5703;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5712;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << StarRocksSqlParser.ACTIVE) | (1 << StarRocksSqlParser.ADMIN) | (1 << StarRocksSqlParser.AFTER) | (1 << StarRocksSqlParser.AGGREGATE) | (1 << StarRocksSqlParser.ANTI) | (1 << StarRocksSqlParser.ARRAY) | (1 << StarRocksSqlParser.ARRAY_AGG) | (1 << StarRocksSqlParser.ASYNC) | (1 << StarRocksSqlParser.AUTHORS) | (1 << StarRocksSqlParser.AUTHENTICATION) | (1 << StarRocksSqlParser.AUTO_INCREMENT) | (1 << StarRocksSqlParser.AVG) | (1 << StarRocksSqlParser.BACKEND) | (1 << StarRocksSqlParser.BACKENDS) | (1 << StarRocksSqlParser.BACKUP) | (1 << StarRocksSqlParser.BEGIN))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (StarRocksSqlParser.BITMAP_UNION - 32)) | (1 << (StarRocksSqlParser.BLACKLIST - 32)) | (1 << (StarRocksSqlParser.BOOLEAN - 32)) | (1 << (StarRocksSqlParser.BROKER - 32)) | (1 << (StarRocksSqlParser.BUCKETS - 32)) | (1 << (StarRocksSqlParser.BUILTIN - 32)) | (1 << (StarRocksSqlParser.CANCEL - 32)) | (1 << (StarRocksSqlParser.CASE - 32)) | (1 << (StarRocksSqlParser.CAST - 32)) | (1 << (StarRocksSqlParser.CATALOG - 32)) | (1 << (StarRocksSqlParser.CATALOGS - 32)) | (1 << (StarRocksSqlParser.CEIL - 32)) | (1 << (StarRocksSqlParser.CHAIN - 32)) | (1 << (StarRocksSqlParser.CHAR - 32)) | (1 << (StarRocksSqlParser.CHARSET - 32)) | (1 << (StarRocksSqlParser.CLEAN - 32)) | (1 << (StarRocksSqlParser.CLUSTER - 32)) | (1 << (StarRocksSqlParser.CLUSTERS - 32)) | (1 << (StarRocksSqlParser.COLLATION - 32)) | (1 << (StarRocksSqlParser.COLUMNS - 32)) | (1 << (StarRocksSqlParser.COMMENT - 32)) | (1 << (StarRocksSqlParser.COMMIT - 32)) | (1 << (StarRocksSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (StarRocksSqlParser.COMPUTE - 64)) | (1 << (StarRocksSqlParser.CONFIG - 64)) | (1 << (StarRocksSqlParser.CONNECTION - 64)) | (1 << (StarRocksSqlParser.CONSISTENT - 64)) | (1 << (StarRocksSqlParser.CONVERT - 64)) | (1 << (StarRocksSqlParser.COSTS - 64)) | (1 << (StarRocksSqlParser.COUNT - 64)) | (1 << (StarRocksSqlParser.CUME_DIST - 64)) | (1 << (StarRocksSqlParser.CURRENT - 64)) | (1 << (StarRocksSqlParser.CURRENT_DATE - 64)) | (1 << (StarRocksSqlParser.CURRENT_ROLE - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIME - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (StarRocksSqlParser.CURRENT_USER - 64)) | (1 << (StarRocksSqlParser.DATA - 64)) | (1 << (StarRocksSqlParser.DATABASE - 64)) | (1 << (StarRocksSqlParser.DATE - 64)) | (1 << (StarRocksSqlParser.DATETIME - 64)) | (1 << (StarRocksSqlParser.DAY - 64)) | (1 << (StarRocksSqlParser.DECOMMISSION - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (StarRocksSqlParser.DENSE_RANK - 96)) | (1 << (StarRocksSqlParser.NTILE - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTED - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTION - 96)) | (1 << (StarRocksSqlParser.DUPLICATE - 96)) | (1 << (StarRocksSqlParser.DYNAMIC - 96)) | (1 << (StarRocksSqlParser.ENCLOSE - 96)) | (1 << (StarRocksSqlParser.END - 96)) | (1 << (StarRocksSqlParser.ENGINE - 96)) | (1 << (StarRocksSqlParser.ENGINES - 96)) | (1 << (StarRocksSqlParser.ERRORS - 96)) | (1 << (StarRocksSqlParser.ESCAPE - 96)) | (1 << (StarRocksSqlParser.EVENTS - 96)) | (1 << (StarRocksSqlParser.EXECUTE - 96)) | (1 << (StarRocksSqlParser.EXISTS - 96)) | (1 << (StarRocksSqlParser.EXPORT - 96)) | (1 << (StarRocksSqlParser.EXTERNAL - 96)) | (1 << (StarRocksSqlParser.EXTRACT - 96)) | (1 << (StarRocksSqlParser.EVERY - 96)) | (1 << (StarRocksSqlParser.FALSE - 96)) | (1 << (StarRocksSqlParser.FIELDS - 96)) | (1 << (StarRocksSqlParser.FILE - 96)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (StarRocksSqlParser.FILTER - 129)) | (1 << (StarRocksSqlParser.FIRST - 129)) | (1 << (StarRocksSqlParser.FIRST_VALUE - 129)) | (1 << (StarRocksSqlParser.FLOOR - 129)) | (1 << (StarRocksSqlParser.FN - 129)) | (1 << (StarRocksSqlParser.FOLLOWING - 129)) | (1 << (StarRocksSqlParser.FOLLOWER - 129)) | (1 << (StarRocksSqlParser.FORMAT - 129)) | (1 << (StarRocksSqlParser.FREE - 129)) | (1 << (StarRocksSqlParser.FRONTEND - 129)) | (1 << (StarRocksSqlParser.FRONTENDS - 129)) | (1 << (StarRocksSqlParser.FUNCTIONS - 129)) | (1 << (StarRocksSqlParser.GLOBAL - 129)) | (1 << (StarRocksSqlParser.GRANTS - 129)) | (1 << (StarRocksSqlParser.GROUPING - 129)) | (1 << (StarRocksSqlParser.GROUPING_ID - 129)) | (1 << (StarRocksSqlParser.HASH - 129)) | (1 << (StarRocksSqlParser.HELP - 129)) | (1 << (StarRocksSqlParser.HISTOGRAM - 129)) | (1 << (StarRocksSqlParser.HLL_UNION - 129)) | (1 << (StarRocksSqlParser.HOST - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (StarRocksSqlParser.HOUR - 161)) | (1 << (StarRocksSqlParser.HUB - 161)) | (1 << (StarRocksSqlParser.IDENTIFIED - 161)) | (1 << (StarRocksSqlParser.IF - 161)) | (1 << (StarRocksSqlParser.IMPERSONATE - 161)) | (1 << (StarRocksSqlParser.IMAGE - 161)) | (1 << (StarRocksSqlParser.INACTIVE - 161)) | (1 << (StarRocksSqlParser.INCREMENTAL - 161)) | (1 << (StarRocksSqlParser.INDEXES - 161)) | (1 << (StarRocksSqlParser.INSTALL - 161)) | (1 << (StarRocksSqlParser.INTERMEDIATE - 161)) | (1 << (StarRocksSqlParser.INTERVAL - 161)) | (1 << (StarRocksSqlParser.OVERWRITE - 161)) | (1 << (StarRocksSqlParser.ISOLATION - 161)) | (1 << (StarRocksSqlParser.JOB - 161)))) !== 0) || ((((_la - 195)) & ~0x1F) === 0 && ((1 << (_la - 195)) & ((1 << (StarRocksSqlParser.LABEL - 195)) | (1 << (StarRocksSqlParser.LAG - 195)) | (1 << (StarRocksSqlParser.LAST - 195)) | (1 << (StarRocksSqlParser.LAST_VALUE - 195)) | (1 << (StarRocksSqlParser.LEAD - 195)) | (1 << (StarRocksSqlParser.LEFT - 195)) | (1 << (StarRocksSqlParser.LESS - 195)) | (1 << (StarRocksSqlParser.LEVEL - 195)) | (1 << (StarRocksSqlParser.LIKE - 195)) | (1 << (StarRocksSqlParser.LIST - 195)) | (1 << (StarRocksSqlParser.LOCAL - 195)) | (1 << (StarRocksSqlParser.LOCALTIME - 195)) | (1 << (StarRocksSqlParser.LOCALTIMESTAMP - 195)) | (1 << (StarRocksSqlParser.LOCATION - 195)) | (1 << (StarRocksSqlParser.LOGICAL - 195)) | (1 << (StarRocksSqlParser.MANUAL - 195)) | (1 << (StarRocksSqlParser.MAP - 195)) | (1 << (StarRocksSqlParser.MATERIALIZED - 195)) | (1 << (StarRocksSqlParser.MAX - 195)) | (1 << (StarRocksSqlParser.MERGE - 195)) | (1 << (StarRocksSqlParser.MIN - 195)) | (1 << (StarRocksSqlParser.MINUTE - 195)) | (1 << (StarRocksSqlParser.MINUS - 195)))) !== 0) || ((((_la - 227)) & ~0x1F) === 0 && ((1 << (_la - 227)) & ((1 << (StarRocksSqlParser.META - 227)) | (1 << (StarRocksSqlParser.MOD - 227)) | (1 << (StarRocksSqlParser.MODE - 227)) | (1 << (StarRocksSqlParser.MODIFY - 227)) | (1 << (StarRocksSqlParser.MONTH - 227)) | (1 << (StarRocksSqlParser.NAME - 227)) | (1 << (StarRocksSqlParser.NAMES - 227)) | (1 << (StarRocksSqlParser.NEGATIVE - 227)) | (1 << (StarRocksSqlParser.NO - 227)) | (1 << (StarRocksSqlParser.NODE - 227)) | (1 << (StarRocksSqlParser.NODES - 227)) | (1 << (StarRocksSqlParser.NONE - 227)) | (1 << (StarRocksSqlParser.NOT - 227)) | (1 << (StarRocksSqlParser.NULL - 227)) | (1 << (StarRocksSqlParser.NULLS - 227)) | (1 << (StarRocksSqlParser.NUMBER - 227)) | (1 << (StarRocksSqlParser.NUMERIC - 227)) | (1 << (StarRocksSqlParser.OBSERVER - 227)) | (1 << (StarRocksSqlParser.OF - 227)) | (1 << (StarRocksSqlParser.OFFSET - 227)) | (1 << (StarRocksSqlParser.ONLY - 227)) | (1 << (StarRocksSqlParser.OPEN - 227)) | (1 << (StarRocksSqlParser.OPERATE - 227)) | (1 << (StarRocksSqlParser.OPTIMIZER - 227)) | (1 << (StarRocksSqlParser.OPTION - 227)))) !== 0) || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (StarRocksSqlParser.PARTITIONS - 259)) | (1 << (StarRocksSqlParser.PASSWORD - 259)) | (1 << (StarRocksSqlParser.PATH - 259)) | (1 << (StarRocksSqlParser.PAUSE - 259)) | (1 << (StarRocksSqlParser.PENDING - 259)) | (1 << (StarRocksSqlParser.PERCENT_RANK - 259)) | (1 << (StarRocksSqlParser.PERCENTILE_UNION - 259)) | (1 << (StarRocksSqlParser.PLUGIN - 259)) | (1 << (StarRocksSqlParser.PLUGINS - 259)) | (1 << (StarRocksSqlParser.PRECEDING - 259)) | (1 << (StarRocksSqlParser.PRIVILEGES - 259)) | (1 << (StarRocksSqlParser.PROC - 259)) | (1 << (StarRocksSqlParser.PROCESSLIST - 259)) | (1 << (StarRocksSqlParser.PROFILE - 259)) | (1 << (StarRocksSqlParser.PROFILELIST - 259)) | (1 << (StarRocksSqlParser.PROPERTIES - 259)) | (1 << (StarRocksSqlParser.PROPERTY - 259)) | (1 << (StarRocksSqlParser.QUALIFY - 259)) | (1 << (StarRocksSqlParser.QUARTER - 259)) | (1 << (StarRocksSqlParser.QUERY - 259)) | (1 << (StarRocksSqlParser.QUEUE - 259)) | (1 << (StarRocksSqlParser.QUOTA - 259)) | (1 << (StarRocksSqlParser.RANDOM - 259)) | (1 << (StarRocksSqlParser.RANK - 259)) | (1 << (StarRocksSqlParser.RECOVER - 259)))) !== 0) || ((((_la - 291)) & ~0x1F) === 0 && ((1 << (_la - 291)) & ((1 << (StarRocksSqlParser.REFRESH - 291)) | (1 << (StarRocksSqlParser.REWRITE - 291)) | (1 << (StarRocksSqlParser.REGEXP - 291)) | (1 << (StarRocksSqlParser.REMOVE - 291)) | (1 << (StarRocksSqlParser.REPAIR - 291)) | (1 << (StarRocksSqlParser.REPEATABLE - 291)) | (1 << (StarRocksSqlParser.REPLACE - 291)) | (1 << (StarRocksSqlParser.REPLACE_IF_NOT_NULL - 291)) | (1 << (StarRocksSqlParser.REPLICA - 291)) | (1 << (StarRocksSqlParser.REPOSITORY - 291)) | (1 << (StarRocksSqlParser.REPOSITORIES - 291)) | (1 << (StarRocksSqlParser.RESOURCE - 291)) | (1 << (StarRocksSqlParser.RESOURCES - 291)) | (1 << (StarRocksSqlParser.RESTORE - 291)) | (1 << (StarRocksSqlParser.RESUME - 291)) | (1 << (StarRocksSqlParser.RETURNS - 291)) | (1 << (StarRocksSqlParser.REVERT - 291)) | (1 << (StarRocksSqlParser.RIGHT - 291)) | (1 << (StarRocksSqlParser.RLIKE - 291)) | (1 << (StarRocksSqlParser.ROLE - 291)) | (1 << (StarRocksSqlParser.ROLES - 291)) | (1 << (StarRocksSqlParser.ROLLBACK - 291)) | (1 << (StarRocksSqlParser.ROLLUP - 291)) | (1 << (StarRocksSqlParser.ROUTINE - 291)) | (1 << (StarRocksSqlParser.ROW - 291)) | (1 << (StarRocksSqlParser.ROW_NUMBER - 291)) | (1 << (StarRocksSqlParser.SAMPLE - 291)) | (1 << (StarRocksSqlParser.SCHEDULER - 291)))) !== 0) || ((((_la - 323)) & ~0x1F) === 0 && ((1 << (_la - 323)) & ((1 << (StarRocksSqlParser.SCHEMA - 323)) | (1 << (StarRocksSqlParser.SECOND - 323)) | (1 << (StarRocksSqlParser.SEMI - 323)) | (1 << (StarRocksSqlParser.SERIALIZABLE - 323)) | (1 << (StarRocksSqlParser.SESSION - 323)) | (1 << (StarRocksSqlParser.SETS - 323)) | (1 << (StarRocksSqlParser.SIGNED - 323)) | (1 << (StarRocksSqlParser.SKIP_HEADER - 323)) | (1 << (StarRocksSqlParser.SNAPSHOT - 323)) | (1 << (StarRocksSqlParser.SQLBLACKLIST - 323)) | (1 << (StarRocksSqlParser.START - 323)) | (1 << (StarRocksSqlParser.STATS - 323)) | (1 << (StarRocksSqlParser.STATUS - 323)) | (1 << (StarRocksSqlParser.STOP - 323)) | (1 << (StarRocksSqlParser.STORAGE - 323)) | (1 << (StarRocksSqlParser.STREAM - 323)) | (1 << (StarRocksSqlParser.STRING - 323)) | (1 << (StarRocksSqlParser.SUBMIT - 323)) | (1 << (StarRocksSqlParser.SUM - 323)) | (1 << (StarRocksSqlParser.SUSPEND - 323)) | (1 << (StarRocksSqlParser.SYNC - 323)) | (1 << (StarRocksSqlParser.SYSTEM_TIME - 323)) | (1 << (StarRocksSqlParser.SWAP - 323)))) !== 0) || ((((_la - 355)) & ~0x1F) === 0 && ((1 << (_la - 355)) & ((1 << (StarRocksSqlParser.STRUCT - 355)) | (1 << (StarRocksSqlParser.TABLES - 355)) | (1 << (StarRocksSqlParser.TABLET - 355)) | (1 << (StarRocksSqlParser.TASK - 355)) | (1 << (StarRocksSqlParser.TEMPORARY - 355)) | (1 << (StarRocksSqlParser.THAN - 355)) | (1 << (StarRocksSqlParser.TIME - 355)) | (1 << (StarRocksSqlParser.TIMESTAMP - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPADD - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPDIFF - 355)) | (1 << (StarRocksSqlParser.TRANSACTION - 355)) | (1 << (StarRocksSqlParser.TRACE - 355)) | (1 << (StarRocksSqlParser.TRIGGERS - 355)) | (1 << (StarRocksSqlParser.TRIM_SPACE - 355)) | (1 << (StarRocksSqlParser.TRUE - 355)) | (1 << (StarRocksSqlParser.TRUNCATE - 355)) | (1 << (StarRocksSqlParser.TYPE - 355)) | (1 << (StarRocksSqlParser.TYPES - 355)) | (1 << (StarRocksSqlParser.UNBOUNDED - 355)) | (1 << (StarRocksSqlParser.UNCOMMITTED - 355)) | (1 << (StarRocksSqlParser.UNINSTALL - 355)) | (1 << (StarRocksSqlParser.USAGE - 355)))) !== 0) || ((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & ((1 << (StarRocksSqlParser.USER - 388)) | (1 << (StarRocksSqlParser.USERS - 388)) | (1 << (StarRocksSqlParser.VALUE - 388)) | (1 << (StarRocksSqlParser.VARIABLES - 388)) | (1 << (StarRocksSqlParser.VERBOSE - 388)) | (1 << (StarRocksSqlParser.VIEW - 388)) | (1 << (StarRocksSqlParser.VIEWS - 388)) | (1 << (StarRocksSqlParser.WAREHOUSE - 388)) | (1 << (StarRocksSqlParser.WAREHOUSES - 388)) | (1 << (StarRocksSqlParser.WARNINGS - 388)) | (1 << (StarRocksSqlParser.WEEK - 388)) | (1 << (StarRocksSqlParser.WHITELIST - 388)) | (1 << (StarRocksSqlParser.WORK - 388)) | (1 << (StarRocksSqlParser.WRITE - 388)) | (1 << (StarRocksSqlParser.YEAR - 388)) | (1 << (StarRocksSqlParser.LOCK - 388)) | (1 << (StarRocksSqlParser.UNLOCK - 388)) | (1 << (StarRocksSqlParser.LOW_PRIORITY - 388)))) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (StarRocksSqlParser.PLUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.MINUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.LOGICAL_NOT - 422)) | (1 << (StarRocksSqlParser.BITNOT - 422)) | (1 << (StarRocksSqlParser.AT - 422)) | (1 << (StarRocksSqlParser.INTEGER_VALUE - 422)) | (1 << (StarRocksSqlParser.DECIMAL_VALUE - 422)) | (1 << (StarRocksSqlParser.DOUBLE_VALUE - 422)) | (1 << (StarRocksSqlParser.SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.LETTER_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.DIGIT_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.BACKQUOTED_IDENTIFIER - 422)))) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & ((1 << (StarRocksSqlParser.LEFT_PAREN - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACKET - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACE - 456)) | (1 << (StarRocksSqlParser.DOTDOTDOT - 456)))) !== 0)) {
					{
					this.state = 5704;
					this.expression(0);
					this.state = 5709;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === StarRocksSqlParser.COMMA) {
						{
						{
						this.state = 5705;
						this.match(StarRocksSqlParser.COMMA);
						this.state = 5706;
						this.expression(0);
						}
						}
						this.state = 5711;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 5714;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				this.state = 5716;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 648, this._ctx) ) {
				case 1:
					{
					this.state = 5715;
					this.over();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public aggregationFunction(): AggregationFunctionContext {
		let _localctx: AggregationFunctionContext = new AggregationFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 696, StarRocksSqlParser.RULE_aggregationFunction);
		let _la: number;
		try {
			this.state = 5794;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 661, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5720;
				this.match(StarRocksSqlParser.AVG);
				this.state = 5721;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5723;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.ALL || _la === StarRocksSqlParser.DISTINCT) {
					{
					this.state = 5722;
					this.setQuantifier();
					}
				}

				this.state = 5725;
				this.expression(0);
				this.state = 5726;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5728;
				this.match(StarRocksSqlParser.COUNT);
				this.state = 5729;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5731;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.ASTERISK_SYMBOL) {
					{
					this.state = 5730;
					this.match(StarRocksSqlParser.ASTERISK_SYMBOL);
					}
				}

				this.state = 5733;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5734;
				this.match(StarRocksSqlParser.COUNT);
				this.state = 5735;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5740;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.ALL || _la === StarRocksSqlParser.DISTINCT) {
					{
					this.state = 5736;
					this.setQuantifier();
					this.state = 5738;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 652, this._ctx) ) {
					case 1:
						{
						this.state = 5737;
						this.bracketHint();
						}
						break;
					}
					}
				}

				this.state = 5750;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << StarRocksSqlParser.ACTIVE) | (1 << StarRocksSqlParser.ADMIN) | (1 << StarRocksSqlParser.AFTER) | (1 << StarRocksSqlParser.AGGREGATE) | (1 << StarRocksSqlParser.ANTI) | (1 << StarRocksSqlParser.ARRAY) | (1 << StarRocksSqlParser.ARRAY_AGG) | (1 << StarRocksSqlParser.ASYNC) | (1 << StarRocksSqlParser.AUTHORS) | (1 << StarRocksSqlParser.AUTHENTICATION) | (1 << StarRocksSqlParser.AUTO_INCREMENT) | (1 << StarRocksSqlParser.AVG) | (1 << StarRocksSqlParser.BACKEND) | (1 << StarRocksSqlParser.BACKENDS) | (1 << StarRocksSqlParser.BACKUP) | (1 << StarRocksSqlParser.BEGIN))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (StarRocksSqlParser.BITMAP_UNION - 32)) | (1 << (StarRocksSqlParser.BLACKLIST - 32)) | (1 << (StarRocksSqlParser.BOOLEAN - 32)) | (1 << (StarRocksSqlParser.BROKER - 32)) | (1 << (StarRocksSqlParser.BUCKETS - 32)) | (1 << (StarRocksSqlParser.BUILTIN - 32)) | (1 << (StarRocksSqlParser.CANCEL - 32)) | (1 << (StarRocksSqlParser.CASE - 32)) | (1 << (StarRocksSqlParser.CAST - 32)) | (1 << (StarRocksSqlParser.CATALOG - 32)) | (1 << (StarRocksSqlParser.CATALOGS - 32)) | (1 << (StarRocksSqlParser.CEIL - 32)) | (1 << (StarRocksSqlParser.CHAIN - 32)) | (1 << (StarRocksSqlParser.CHAR - 32)) | (1 << (StarRocksSqlParser.CHARSET - 32)) | (1 << (StarRocksSqlParser.CLEAN - 32)) | (1 << (StarRocksSqlParser.CLUSTER - 32)) | (1 << (StarRocksSqlParser.CLUSTERS - 32)) | (1 << (StarRocksSqlParser.COLLATION - 32)) | (1 << (StarRocksSqlParser.COLUMNS - 32)) | (1 << (StarRocksSqlParser.COMMENT - 32)) | (1 << (StarRocksSqlParser.COMMIT - 32)) | (1 << (StarRocksSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (StarRocksSqlParser.COMPUTE - 64)) | (1 << (StarRocksSqlParser.CONFIG - 64)) | (1 << (StarRocksSqlParser.CONNECTION - 64)) | (1 << (StarRocksSqlParser.CONSISTENT - 64)) | (1 << (StarRocksSqlParser.CONVERT - 64)) | (1 << (StarRocksSqlParser.COSTS - 64)) | (1 << (StarRocksSqlParser.COUNT - 64)) | (1 << (StarRocksSqlParser.CUME_DIST - 64)) | (1 << (StarRocksSqlParser.CURRENT - 64)) | (1 << (StarRocksSqlParser.CURRENT_DATE - 64)) | (1 << (StarRocksSqlParser.CURRENT_ROLE - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIME - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (StarRocksSqlParser.CURRENT_USER - 64)) | (1 << (StarRocksSqlParser.DATA - 64)) | (1 << (StarRocksSqlParser.DATABASE - 64)) | (1 << (StarRocksSqlParser.DATE - 64)) | (1 << (StarRocksSqlParser.DATETIME - 64)) | (1 << (StarRocksSqlParser.DAY - 64)) | (1 << (StarRocksSqlParser.DECOMMISSION - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (StarRocksSqlParser.DENSE_RANK - 96)) | (1 << (StarRocksSqlParser.NTILE - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTED - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTION - 96)) | (1 << (StarRocksSqlParser.DUPLICATE - 96)) | (1 << (StarRocksSqlParser.DYNAMIC - 96)) | (1 << (StarRocksSqlParser.ENCLOSE - 96)) | (1 << (StarRocksSqlParser.END - 96)) | (1 << (StarRocksSqlParser.ENGINE - 96)) | (1 << (StarRocksSqlParser.ENGINES - 96)) | (1 << (StarRocksSqlParser.ERRORS - 96)) | (1 << (StarRocksSqlParser.ESCAPE - 96)) | (1 << (StarRocksSqlParser.EVENTS - 96)) | (1 << (StarRocksSqlParser.EXECUTE - 96)) | (1 << (StarRocksSqlParser.EXISTS - 96)) | (1 << (StarRocksSqlParser.EXPORT - 96)) | (1 << (StarRocksSqlParser.EXTERNAL - 96)) | (1 << (StarRocksSqlParser.EXTRACT - 96)) | (1 << (StarRocksSqlParser.EVERY - 96)) | (1 << (StarRocksSqlParser.FALSE - 96)) | (1 << (StarRocksSqlParser.FIELDS - 96)) | (1 << (StarRocksSqlParser.FILE - 96)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (StarRocksSqlParser.FILTER - 129)) | (1 << (StarRocksSqlParser.FIRST - 129)) | (1 << (StarRocksSqlParser.FIRST_VALUE - 129)) | (1 << (StarRocksSqlParser.FLOOR - 129)) | (1 << (StarRocksSqlParser.FN - 129)) | (1 << (StarRocksSqlParser.FOLLOWING - 129)) | (1 << (StarRocksSqlParser.FOLLOWER - 129)) | (1 << (StarRocksSqlParser.FORMAT - 129)) | (1 << (StarRocksSqlParser.FREE - 129)) | (1 << (StarRocksSqlParser.FRONTEND - 129)) | (1 << (StarRocksSqlParser.FRONTENDS - 129)) | (1 << (StarRocksSqlParser.FUNCTIONS - 129)) | (1 << (StarRocksSqlParser.GLOBAL - 129)) | (1 << (StarRocksSqlParser.GRANTS - 129)) | (1 << (StarRocksSqlParser.GROUPING - 129)) | (1 << (StarRocksSqlParser.GROUPING_ID - 129)) | (1 << (StarRocksSqlParser.HASH - 129)) | (1 << (StarRocksSqlParser.HELP - 129)) | (1 << (StarRocksSqlParser.HISTOGRAM - 129)) | (1 << (StarRocksSqlParser.HLL_UNION - 129)) | (1 << (StarRocksSqlParser.HOST - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (StarRocksSqlParser.HOUR - 161)) | (1 << (StarRocksSqlParser.HUB - 161)) | (1 << (StarRocksSqlParser.IDENTIFIED - 161)) | (1 << (StarRocksSqlParser.IF - 161)) | (1 << (StarRocksSqlParser.IMPERSONATE - 161)) | (1 << (StarRocksSqlParser.IMAGE - 161)) | (1 << (StarRocksSqlParser.INACTIVE - 161)) | (1 << (StarRocksSqlParser.INCREMENTAL - 161)) | (1 << (StarRocksSqlParser.INDEXES - 161)) | (1 << (StarRocksSqlParser.INSTALL - 161)) | (1 << (StarRocksSqlParser.INTERMEDIATE - 161)) | (1 << (StarRocksSqlParser.INTERVAL - 161)) | (1 << (StarRocksSqlParser.OVERWRITE - 161)) | (1 << (StarRocksSqlParser.ISOLATION - 161)) | (1 << (StarRocksSqlParser.JOB - 161)))) !== 0) || ((((_la - 195)) & ~0x1F) === 0 && ((1 << (_la - 195)) & ((1 << (StarRocksSqlParser.LABEL - 195)) | (1 << (StarRocksSqlParser.LAG - 195)) | (1 << (StarRocksSqlParser.LAST - 195)) | (1 << (StarRocksSqlParser.LAST_VALUE - 195)) | (1 << (StarRocksSqlParser.LEAD - 195)) | (1 << (StarRocksSqlParser.LEFT - 195)) | (1 << (StarRocksSqlParser.LESS - 195)) | (1 << (StarRocksSqlParser.LEVEL - 195)) | (1 << (StarRocksSqlParser.LIKE - 195)) | (1 << (StarRocksSqlParser.LIST - 195)) | (1 << (StarRocksSqlParser.LOCAL - 195)) | (1 << (StarRocksSqlParser.LOCALTIME - 195)) | (1 << (StarRocksSqlParser.LOCALTIMESTAMP - 195)) | (1 << (StarRocksSqlParser.LOCATION - 195)) | (1 << (StarRocksSqlParser.LOGICAL - 195)) | (1 << (StarRocksSqlParser.MANUAL - 195)) | (1 << (StarRocksSqlParser.MAP - 195)) | (1 << (StarRocksSqlParser.MATERIALIZED - 195)) | (1 << (StarRocksSqlParser.MAX - 195)) | (1 << (StarRocksSqlParser.MERGE - 195)) | (1 << (StarRocksSqlParser.MIN - 195)) | (1 << (StarRocksSqlParser.MINUTE - 195)) | (1 << (StarRocksSqlParser.MINUS - 195)))) !== 0) || ((((_la - 227)) & ~0x1F) === 0 && ((1 << (_la - 227)) & ((1 << (StarRocksSqlParser.META - 227)) | (1 << (StarRocksSqlParser.MOD - 227)) | (1 << (StarRocksSqlParser.MODE - 227)) | (1 << (StarRocksSqlParser.MODIFY - 227)) | (1 << (StarRocksSqlParser.MONTH - 227)) | (1 << (StarRocksSqlParser.NAME - 227)) | (1 << (StarRocksSqlParser.NAMES - 227)) | (1 << (StarRocksSqlParser.NEGATIVE - 227)) | (1 << (StarRocksSqlParser.NO - 227)) | (1 << (StarRocksSqlParser.NODE - 227)) | (1 << (StarRocksSqlParser.NODES - 227)) | (1 << (StarRocksSqlParser.NONE - 227)) | (1 << (StarRocksSqlParser.NOT - 227)) | (1 << (StarRocksSqlParser.NULL - 227)) | (1 << (StarRocksSqlParser.NULLS - 227)) | (1 << (StarRocksSqlParser.NUMBER - 227)) | (1 << (StarRocksSqlParser.NUMERIC - 227)) | (1 << (StarRocksSqlParser.OBSERVER - 227)) | (1 << (StarRocksSqlParser.OF - 227)) | (1 << (StarRocksSqlParser.OFFSET - 227)) | (1 << (StarRocksSqlParser.ONLY - 227)) | (1 << (StarRocksSqlParser.OPEN - 227)) | (1 << (StarRocksSqlParser.OPERATE - 227)) | (1 << (StarRocksSqlParser.OPTIMIZER - 227)) | (1 << (StarRocksSqlParser.OPTION - 227)))) !== 0) || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (StarRocksSqlParser.PARTITIONS - 259)) | (1 << (StarRocksSqlParser.PASSWORD - 259)) | (1 << (StarRocksSqlParser.PATH - 259)) | (1 << (StarRocksSqlParser.PAUSE - 259)) | (1 << (StarRocksSqlParser.PENDING - 259)) | (1 << (StarRocksSqlParser.PERCENT_RANK - 259)) | (1 << (StarRocksSqlParser.PERCENTILE_UNION - 259)) | (1 << (StarRocksSqlParser.PLUGIN - 259)) | (1 << (StarRocksSqlParser.PLUGINS - 259)) | (1 << (StarRocksSqlParser.PRECEDING - 259)) | (1 << (StarRocksSqlParser.PRIVILEGES - 259)) | (1 << (StarRocksSqlParser.PROC - 259)) | (1 << (StarRocksSqlParser.PROCESSLIST - 259)) | (1 << (StarRocksSqlParser.PROFILE - 259)) | (1 << (StarRocksSqlParser.PROFILELIST - 259)) | (1 << (StarRocksSqlParser.PROPERTIES - 259)) | (1 << (StarRocksSqlParser.PROPERTY - 259)) | (1 << (StarRocksSqlParser.QUALIFY - 259)) | (1 << (StarRocksSqlParser.QUARTER - 259)) | (1 << (StarRocksSqlParser.QUERY - 259)) | (1 << (StarRocksSqlParser.QUEUE - 259)) | (1 << (StarRocksSqlParser.QUOTA - 259)) | (1 << (StarRocksSqlParser.RANDOM - 259)) | (1 << (StarRocksSqlParser.RANK - 259)) | (1 << (StarRocksSqlParser.RECOVER - 259)))) !== 0) || ((((_la - 291)) & ~0x1F) === 0 && ((1 << (_la - 291)) & ((1 << (StarRocksSqlParser.REFRESH - 291)) | (1 << (StarRocksSqlParser.REWRITE - 291)) | (1 << (StarRocksSqlParser.REGEXP - 291)) | (1 << (StarRocksSqlParser.REMOVE - 291)) | (1 << (StarRocksSqlParser.REPAIR - 291)) | (1 << (StarRocksSqlParser.REPEATABLE - 291)) | (1 << (StarRocksSqlParser.REPLACE - 291)) | (1 << (StarRocksSqlParser.REPLACE_IF_NOT_NULL - 291)) | (1 << (StarRocksSqlParser.REPLICA - 291)) | (1 << (StarRocksSqlParser.REPOSITORY - 291)) | (1 << (StarRocksSqlParser.REPOSITORIES - 291)) | (1 << (StarRocksSqlParser.RESOURCE - 291)) | (1 << (StarRocksSqlParser.RESOURCES - 291)) | (1 << (StarRocksSqlParser.RESTORE - 291)) | (1 << (StarRocksSqlParser.RESUME - 291)) | (1 << (StarRocksSqlParser.RETURNS - 291)) | (1 << (StarRocksSqlParser.REVERT - 291)) | (1 << (StarRocksSqlParser.RIGHT - 291)) | (1 << (StarRocksSqlParser.RLIKE - 291)) | (1 << (StarRocksSqlParser.ROLE - 291)) | (1 << (StarRocksSqlParser.ROLES - 291)) | (1 << (StarRocksSqlParser.ROLLBACK - 291)) | (1 << (StarRocksSqlParser.ROLLUP - 291)) | (1 << (StarRocksSqlParser.ROUTINE - 291)) | (1 << (StarRocksSqlParser.ROW - 291)) | (1 << (StarRocksSqlParser.ROW_NUMBER - 291)) | (1 << (StarRocksSqlParser.SAMPLE - 291)) | (1 << (StarRocksSqlParser.SCHEDULER - 291)))) !== 0) || ((((_la - 323)) & ~0x1F) === 0 && ((1 << (_la - 323)) & ((1 << (StarRocksSqlParser.SCHEMA - 323)) | (1 << (StarRocksSqlParser.SECOND - 323)) | (1 << (StarRocksSqlParser.SEMI - 323)) | (1 << (StarRocksSqlParser.SERIALIZABLE - 323)) | (1 << (StarRocksSqlParser.SESSION - 323)) | (1 << (StarRocksSqlParser.SETS - 323)) | (1 << (StarRocksSqlParser.SIGNED - 323)) | (1 << (StarRocksSqlParser.SKIP_HEADER - 323)) | (1 << (StarRocksSqlParser.SNAPSHOT - 323)) | (1 << (StarRocksSqlParser.SQLBLACKLIST - 323)) | (1 << (StarRocksSqlParser.START - 323)) | (1 << (StarRocksSqlParser.STATS - 323)) | (1 << (StarRocksSqlParser.STATUS - 323)) | (1 << (StarRocksSqlParser.STOP - 323)) | (1 << (StarRocksSqlParser.STORAGE - 323)) | (1 << (StarRocksSqlParser.STREAM - 323)) | (1 << (StarRocksSqlParser.STRING - 323)) | (1 << (StarRocksSqlParser.SUBMIT - 323)) | (1 << (StarRocksSqlParser.SUM - 323)) | (1 << (StarRocksSqlParser.SUSPEND - 323)) | (1 << (StarRocksSqlParser.SYNC - 323)) | (1 << (StarRocksSqlParser.SYSTEM_TIME - 323)) | (1 << (StarRocksSqlParser.SWAP - 323)))) !== 0) || ((((_la - 355)) & ~0x1F) === 0 && ((1 << (_la - 355)) & ((1 << (StarRocksSqlParser.STRUCT - 355)) | (1 << (StarRocksSqlParser.TABLES - 355)) | (1 << (StarRocksSqlParser.TABLET - 355)) | (1 << (StarRocksSqlParser.TASK - 355)) | (1 << (StarRocksSqlParser.TEMPORARY - 355)) | (1 << (StarRocksSqlParser.THAN - 355)) | (1 << (StarRocksSqlParser.TIME - 355)) | (1 << (StarRocksSqlParser.TIMESTAMP - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPADD - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPDIFF - 355)) | (1 << (StarRocksSqlParser.TRANSACTION - 355)) | (1 << (StarRocksSqlParser.TRACE - 355)) | (1 << (StarRocksSqlParser.TRIGGERS - 355)) | (1 << (StarRocksSqlParser.TRIM_SPACE - 355)) | (1 << (StarRocksSqlParser.TRUE - 355)) | (1 << (StarRocksSqlParser.TRUNCATE - 355)) | (1 << (StarRocksSqlParser.TYPE - 355)) | (1 << (StarRocksSqlParser.TYPES - 355)) | (1 << (StarRocksSqlParser.UNBOUNDED - 355)) | (1 << (StarRocksSqlParser.UNCOMMITTED - 355)) | (1 << (StarRocksSqlParser.UNINSTALL - 355)) | (1 << (StarRocksSqlParser.USAGE - 355)))) !== 0) || ((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & ((1 << (StarRocksSqlParser.USER - 388)) | (1 << (StarRocksSqlParser.USERS - 388)) | (1 << (StarRocksSqlParser.VALUE - 388)) | (1 << (StarRocksSqlParser.VARIABLES - 388)) | (1 << (StarRocksSqlParser.VERBOSE - 388)) | (1 << (StarRocksSqlParser.VIEW - 388)) | (1 << (StarRocksSqlParser.VIEWS - 388)) | (1 << (StarRocksSqlParser.WAREHOUSE - 388)) | (1 << (StarRocksSqlParser.WAREHOUSES - 388)) | (1 << (StarRocksSqlParser.WARNINGS - 388)) | (1 << (StarRocksSqlParser.WEEK - 388)) | (1 << (StarRocksSqlParser.WHITELIST - 388)) | (1 << (StarRocksSqlParser.WORK - 388)) | (1 << (StarRocksSqlParser.WRITE - 388)) | (1 << (StarRocksSqlParser.YEAR - 388)) | (1 << (StarRocksSqlParser.LOCK - 388)) | (1 << (StarRocksSqlParser.UNLOCK - 388)) | (1 << (StarRocksSqlParser.LOW_PRIORITY - 388)))) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (StarRocksSqlParser.PLUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.MINUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.LOGICAL_NOT - 422)) | (1 << (StarRocksSqlParser.BITNOT - 422)) | (1 << (StarRocksSqlParser.AT - 422)) | (1 << (StarRocksSqlParser.INTEGER_VALUE - 422)) | (1 << (StarRocksSqlParser.DECIMAL_VALUE - 422)) | (1 << (StarRocksSqlParser.DOUBLE_VALUE - 422)) | (1 << (StarRocksSqlParser.SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.LETTER_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.DIGIT_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.BACKQUOTED_IDENTIFIER - 422)))) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & ((1 << (StarRocksSqlParser.LEFT_PAREN - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACKET - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACE - 456)) | (1 << (StarRocksSqlParser.DOTDOTDOT - 456)))) !== 0)) {
					{
					this.state = 5742;
					this.expression(0);
					this.state = 5747;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === StarRocksSqlParser.COMMA) {
						{
						{
						this.state = 5743;
						this.match(StarRocksSqlParser.COMMA);
						this.state = 5744;
						this.expression(0);
						}
						}
						this.state = 5749;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 5752;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5753;
				this.match(StarRocksSqlParser.MAX);
				this.state = 5754;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5756;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.ALL || _la === StarRocksSqlParser.DISTINCT) {
					{
					this.state = 5755;
					this.setQuantifier();
					}
				}

				this.state = 5758;
				this.expression(0);
				this.state = 5759;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5761;
				this.match(StarRocksSqlParser.MIN);
				this.state = 5762;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5764;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.ALL || _la === StarRocksSqlParser.DISTINCT) {
					{
					this.state = 5763;
					this.setQuantifier();
					}
				}

				this.state = 5766;
				this.expression(0);
				this.state = 5767;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5769;
				this.match(StarRocksSqlParser.SUM);
				this.state = 5770;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5772;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.ALL || _la === StarRocksSqlParser.DISTINCT) {
					{
					this.state = 5771;
					this.setQuantifier();
					}
				}

				this.state = 5774;
				this.expression(0);
				this.state = 5775;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5777;
				this.match(StarRocksSqlParser.ARRAY_AGG);
				this.state = 5778;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5779;
				this.expression(0);
				this.state = 5790;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.ORDER) {
					{
					this.state = 5780;
					this.match(StarRocksSqlParser.ORDER);
					this.state = 5781;
					this.match(StarRocksSqlParser.BY);
					this.state = 5782;
					this.sortItem();
					this.state = 5787;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === StarRocksSqlParser.COMMA) {
						{
						{
						this.state = 5783;
						this.match(StarRocksSqlParser.COMMA);
						this.state = 5784;
						this.sortItem();
						}
						}
						this.state = 5789;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 5792;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public userVariable(): UserVariableContext {
		let _localctx: UserVariableContext = new UserVariableContext(this._ctx, this.state);
		this.enterRule(_localctx, 698, StarRocksSqlParser.RULE_userVariable);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5796;
			this.match(StarRocksSqlParser.AT);
			this.state = 5797;
			this.identifierOrString();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public systemVariable(): SystemVariableContext {
		let _localctx: SystemVariableContext = new SystemVariableContext(this._ctx, this.state);
		this.enterRule(_localctx, 700, StarRocksSqlParser.RULE_systemVariable);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5799;
			this.match(StarRocksSqlParser.AT);
			this.state = 5800;
			this.match(StarRocksSqlParser.AT);
			this.state = 5804;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 662, this._ctx) ) {
			case 1:
				{
				this.state = 5801;
				this.varType();
				this.state = 5802;
				this.match(StarRocksSqlParser.DOT);
				}
				break;
			}
			this.state = 5806;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnReference(): ColumnReferenceContext {
		let _localctx: ColumnReferenceContext = new ColumnReferenceContext(this._ctx, this.state);
		this.enterRule(_localctx, 702, StarRocksSqlParser.RULE_columnReference);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5808;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public informationFunctionExpression(): InformationFunctionExpressionContext {
		let _localctx: InformationFunctionExpressionContext = new InformationFunctionExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 704, StarRocksSqlParser.RULE_informationFunctionExpression);
		try {
			this.state = 5832;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.CATALOG:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5810;
				_localctx._name = this.match(StarRocksSqlParser.CATALOG);
				this.state = 5811;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5812;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.DATABASE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5813;
				_localctx._name = this.match(StarRocksSqlParser.DATABASE);
				this.state = 5814;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5815;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.SCHEMA:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5816;
				_localctx._name = this.match(StarRocksSqlParser.SCHEMA);
				this.state = 5817;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5818;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.USER:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5819;
				_localctx._name = this.match(StarRocksSqlParser.USER);
				this.state = 5820;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5821;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.CURRENT_USER:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5822;
				_localctx._name = this.match(StarRocksSqlParser.CURRENT_USER);
				this.state = 5825;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 663, this._ctx) ) {
				case 1:
					{
					this.state = 5823;
					this.match(StarRocksSqlParser.LEFT_PAREN);
					this.state = 5824;
					this.match(StarRocksSqlParser.RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case StarRocksSqlParser.CURRENT_ROLE:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5827;
				_localctx._name = this.match(StarRocksSqlParser.CURRENT_ROLE);
				this.state = 5830;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 664, this._ctx) ) {
				case 1:
					{
					this.state = 5828;
					this.match(StarRocksSqlParser.LEFT_PAREN);
					this.state = 5829;
					this.match(StarRocksSqlParser.RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public specialDateTimeExpression(): SpecialDateTimeExpressionContext {
		let _localctx: SpecialDateTimeExpressionContext = new SpecialDateTimeExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 706, StarRocksSqlParser.RULE_specialDateTimeExpression);
		try {
			this.state = 5859;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.CURRENT_DATE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5834;
				_localctx._name = this.match(StarRocksSqlParser.CURRENT_DATE);
				this.state = 5837;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 666, this._ctx) ) {
				case 1:
					{
					this.state = 5835;
					this.match(StarRocksSqlParser.LEFT_PAREN);
					this.state = 5836;
					this.match(StarRocksSqlParser.RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case StarRocksSqlParser.CURRENT_TIME:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5839;
				_localctx._name = this.match(StarRocksSqlParser.CURRENT_TIME);
				this.state = 5842;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 667, this._ctx) ) {
				case 1:
					{
					this.state = 5840;
					this.match(StarRocksSqlParser.LEFT_PAREN);
					this.state = 5841;
					this.match(StarRocksSqlParser.RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case StarRocksSqlParser.CURRENT_TIMESTAMP:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5844;
				_localctx._name = this.match(StarRocksSqlParser.CURRENT_TIMESTAMP);
				this.state = 5847;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 668, this._ctx) ) {
				case 1:
					{
					this.state = 5845;
					this.match(StarRocksSqlParser.LEFT_PAREN);
					this.state = 5846;
					this.match(StarRocksSqlParser.RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case StarRocksSqlParser.LOCALTIME:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5849;
				_localctx._name = this.match(StarRocksSqlParser.LOCALTIME);
				this.state = 5852;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 669, this._ctx) ) {
				case 1:
					{
					this.state = 5850;
					this.match(StarRocksSqlParser.LEFT_PAREN);
					this.state = 5851;
					this.match(StarRocksSqlParser.RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case StarRocksSqlParser.LOCALTIMESTAMP:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5854;
				_localctx._name = this.match(StarRocksSqlParser.LOCALTIMESTAMP);
				this.state = 5857;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 670, this._ctx) ) {
				case 1:
					{
					this.state = 5855;
					this.match(StarRocksSqlParser.LEFT_PAREN);
					this.state = 5856;
					this.match(StarRocksSqlParser.RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public specialFunctionExpression(): SpecialFunctionExpressionContext {
		let _localctx: SpecialFunctionExpressionContext = new SpecialFunctionExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 708, StarRocksSqlParser.RULE_specialFunctionExpression);
		let _la: number;
		try {
			this.state = 6002;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.CHAR:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5861;
				this.match(StarRocksSqlParser.CHAR);
				this.state = 5862;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5863;
				this.expression(0);
				this.state = 5864;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.DAY:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5866;
				this.match(StarRocksSqlParser.DAY);
				this.state = 5867;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5868;
				this.expression(0);
				this.state = 5869;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.HOUR:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5871;
				this.match(StarRocksSqlParser.HOUR);
				this.state = 5872;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5873;
				this.expression(0);
				this.state = 5874;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.IF:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5876;
				this.match(StarRocksSqlParser.IF);
				this.state = 5877;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5886;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << StarRocksSqlParser.ACTIVE) | (1 << StarRocksSqlParser.ADMIN) | (1 << StarRocksSqlParser.AFTER) | (1 << StarRocksSqlParser.AGGREGATE) | (1 << StarRocksSqlParser.ANTI) | (1 << StarRocksSqlParser.ARRAY) | (1 << StarRocksSqlParser.ARRAY_AGG) | (1 << StarRocksSqlParser.ASYNC) | (1 << StarRocksSqlParser.AUTHORS) | (1 << StarRocksSqlParser.AUTHENTICATION) | (1 << StarRocksSqlParser.AUTO_INCREMENT) | (1 << StarRocksSqlParser.AVG) | (1 << StarRocksSqlParser.BACKEND) | (1 << StarRocksSqlParser.BACKENDS) | (1 << StarRocksSqlParser.BACKUP) | (1 << StarRocksSqlParser.BEGIN))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (StarRocksSqlParser.BITMAP_UNION - 32)) | (1 << (StarRocksSqlParser.BLACKLIST - 32)) | (1 << (StarRocksSqlParser.BOOLEAN - 32)) | (1 << (StarRocksSqlParser.BROKER - 32)) | (1 << (StarRocksSqlParser.BUCKETS - 32)) | (1 << (StarRocksSqlParser.BUILTIN - 32)) | (1 << (StarRocksSqlParser.CANCEL - 32)) | (1 << (StarRocksSqlParser.CASE - 32)) | (1 << (StarRocksSqlParser.CAST - 32)) | (1 << (StarRocksSqlParser.CATALOG - 32)) | (1 << (StarRocksSqlParser.CATALOGS - 32)) | (1 << (StarRocksSqlParser.CEIL - 32)) | (1 << (StarRocksSqlParser.CHAIN - 32)) | (1 << (StarRocksSqlParser.CHAR - 32)) | (1 << (StarRocksSqlParser.CHARSET - 32)) | (1 << (StarRocksSqlParser.CLEAN - 32)) | (1 << (StarRocksSqlParser.CLUSTER - 32)) | (1 << (StarRocksSqlParser.CLUSTERS - 32)) | (1 << (StarRocksSqlParser.COLLATION - 32)) | (1 << (StarRocksSqlParser.COLUMNS - 32)) | (1 << (StarRocksSqlParser.COMMENT - 32)) | (1 << (StarRocksSqlParser.COMMIT - 32)) | (1 << (StarRocksSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (StarRocksSqlParser.COMPUTE - 64)) | (1 << (StarRocksSqlParser.CONFIG - 64)) | (1 << (StarRocksSqlParser.CONNECTION - 64)) | (1 << (StarRocksSqlParser.CONSISTENT - 64)) | (1 << (StarRocksSqlParser.CONVERT - 64)) | (1 << (StarRocksSqlParser.COSTS - 64)) | (1 << (StarRocksSqlParser.COUNT - 64)) | (1 << (StarRocksSqlParser.CUME_DIST - 64)) | (1 << (StarRocksSqlParser.CURRENT - 64)) | (1 << (StarRocksSqlParser.CURRENT_DATE - 64)) | (1 << (StarRocksSqlParser.CURRENT_ROLE - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIME - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (StarRocksSqlParser.CURRENT_USER - 64)) | (1 << (StarRocksSqlParser.DATA - 64)) | (1 << (StarRocksSqlParser.DATABASE - 64)) | (1 << (StarRocksSqlParser.DATE - 64)) | (1 << (StarRocksSqlParser.DATETIME - 64)) | (1 << (StarRocksSqlParser.DAY - 64)) | (1 << (StarRocksSqlParser.DECOMMISSION - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (StarRocksSqlParser.DENSE_RANK - 96)) | (1 << (StarRocksSqlParser.NTILE - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTED - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTION - 96)) | (1 << (StarRocksSqlParser.DUPLICATE - 96)) | (1 << (StarRocksSqlParser.DYNAMIC - 96)) | (1 << (StarRocksSqlParser.ENCLOSE - 96)) | (1 << (StarRocksSqlParser.END - 96)) | (1 << (StarRocksSqlParser.ENGINE - 96)) | (1 << (StarRocksSqlParser.ENGINES - 96)) | (1 << (StarRocksSqlParser.ERRORS - 96)) | (1 << (StarRocksSqlParser.ESCAPE - 96)) | (1 << (StarRocksSqlParser.EVENTS - 96)) | (1 << (StarRocksSqlParser.EXECUTE - 96)) | (1 << (StarRocksSqlParser.EXISTS - 96)) | (1 << (StarRocksSqlParser.EXPORT - 96)) | (1 << (StarRocksSqlParser.EXTERNAL - 96)) | (1 << (StarRocksSqlParser.EXTRACT - 96)) | (1 << (StarRocksSqlParser.EVERY - 96)) | (1 << (StarRocksSqlParser.FALSE - 96)) | (1 << (StarRocksSqlParser.FIELDS - 96)) | (1 << (StarRocksSqlParser.FILE - 96)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (StarRocksSqlParser.FILTER - 129)) | (1 << (StarRocksSqlParser.FIRST - 129)) | (1 << (StarRocksSqlParser.FIRST_VALUE - 129)) | (1 << (StarRocksSqlParser.FLOOR - 129)) | (1 << (StarRocksSqlParser.FN - 129)) | (1 << (StarRocksSqlParser.FOLLOWING - 129)) | (1 << (StarRocksSqlParser.FOLLOWER - 129)) | (1 << (StarRocksSqlParser.FORMAT - 129)) | (1 << (StarRocksSqlParser.FREE - 129)) | (1 << (StarRocksSqlParser.FRONTEND - 129)) | (1 << (StarRocksSqlParser.FRONTENDS - 129)) | (1 << (StarRocksSqlParser.FUNCTIONS - 129)) | (1 << (StarRocksSqlParser.GLOBAL - 129)) | (1 << (StarRocksSqlParser.GRANTS - 129)) | (1 << (StarRocksSqlParser.GROUPING - 129)) | (1 << (StarRocksSqlParser.GROUPING_ID - 129)) | (1 << (StarRocksSqlParser.HASH - 129)) | (1 << (StarRocksSqlParser.HELP - 129)) | (1 << (StarRocksSqlParser.HISTOGRAM - 129)) | (1 << (StarRocksSqlParser.HLL_UNION - 129)) | (1 << (StarRocksSqlParser.HOST - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (StarRocksSqlParser.HOUR - 161)) | (1 << (StarRocksSqlParser.HUB - 161)) | (1 << (StarRocksSqlParser.IDENTIFIED - 161)) | (1 << (StarRocksSqlParser.IF - 161)) | (1 << (StarRocksSqlParser.IMPERSONATE - 161)) | (1 << (StarRocksSqlParser.IMAGE - 161)) | (1 << (StarRocksSqlParser.INACTIVE - 161)) | (1 << (StarRocksSqlParser.INCREMENTAL - 161)) | (1 << (StarRocksSqlParser.INDEXES - 161)) | (1 << (StarRocksSqlParser.INSTALL - 161)) | (1 << (StarRocksSqlParser.INTERMEDIATE - 161)) | (1 << (StarRocksSqlParser.INTERVAL - 161)) | (1 << (StarRocksSqlParser.OVERWRITE - 161)) | (1 << (StarRocksSqlParser.ISOLATION - 161)) | (1 << (StarRocksSqlParser.JOB - 161)))) !== 0) || ((((_la - 195)) & ~0x1F) === 0 && ((1 << (_la - 195)) & ((1 << (StarRocksSqlParser.LABEL - 195)) | (1 << (StarRocksSqlParser.LAG - 195)) | (1 << (StarRocksSqlParser.LAST - 195)) | (1 << (StarRocksSqlParser.LAST_VALUE - 195)) | (1 << (StarRocksSqlParser.LEAD - 195)) | (1 << (StarRocksSqlParser.LEFT - 195)) | (1 << (StarRocksSqlParser.LESS - 195)) | (1 << (StarRocksSqlParser.LEVEL - 195)) | (1 << (StarRocksSqlParser.LIKE - 195)) | (1 << (StarRocksSqlParser.LIST - 195)) | (1 << (StarRocksSqlParser.LOCAL - 195)) | (1 << (StarRocksSqlParser.LOCALTIME - 195)) | (1 << (StarRocksSqlParser.LOCALTIMESTAMP - 195)) | (1 << (StarRocksSqlParser.LOCATION - 195)) | (1 << (StarRocksSqlParser.LOGICAL - 195)) | (1 << (StarRocksSqlParser.MANUAL - 195)) | (1 << (StarRocksSqlParser.MAP - 195)) | (1 << (StarRocksSqlParser.MATERIALIZED - 195)) | (1 << (StarRocksSqlParser.MAX - 195)) | (1 << (StarRocksSqlParser.MERGE - 195)) | (1 << (StarRocksSqlParser.MIN - 195)) | (1 << (StarRocksSqlParser.MINUTE - 195)) | (1 << (StarRocksSqlParser.MINUS - 195)))) !== 0) || ((((_la - 227)) & ~0x1F) === 0 && ((1 << (_la - 227)) & ((1 << (StarRocksSqlParser.META - 227)) | (1 << (StarRocksSqlParser.MOD - 227)) | (1 << (StarRocksSqlParser.MODE - 227)) | (1 << (StarRocksSqlParser.MODIFY - 227)) | (1 << (StarRocksSqlParser.MONTH - 227)) | (1 << (StarRocksSqlParser.NAME - 227)) | (1 << (StarRocksSqlParser.NAMES - 227)) | (1 << (StarRocksSqlParser.NEGATIVE - 227)) | (1 << (StarRocksSqlParser.NO - 227)) | (1 << (StarRocksSqlParser.NODE - 227)) | (1 << (StarRocksSqlParser.NODES - 227)) | (1 << (StarRocksSqlParser.NONE - 227)) | (1 << (StarRocksSqlParser.NOT - 227)) | (1 << (StarRocksSqlParser.NULL - 227)) | (1 << (StarRocksSqlParser.NULLS - 227)) | (1 << (StarRocksSqlParser.NUMBER - 227)) | (1 << (StarRocksSqlParser.NUMERIC - 227)) | (1 << (StarRocksSqlParser.OBSERVER - 227)) | (1 << (StarRocksSqlParser.OF - 227)) | (1 << (StarRocksSqlParser.OFFSET - 227)) | (1 << (StarRocksSqlParser.ONLY - 227)) | (1 << (StarRocksSqlParser.OPEN - 227)) | (1 << (StarRocksSqlParser.OPERATE - 227)) | (1 << (StarRocksSqlParser.OPTIMIZER - 227)) | (1 << (StarRocksSqlParser.OPTION - 227)))) !== 0) || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (StarRocksSqlParser.PARTITIONS - 259)) | (1 << (StarRocksSqlParser.PASSWORD - 259)) | (1 << (StarRocksSqlParser.PATH - 259)) | (1 << (StarRocksSqlParser.PAUSE - 259)) | (1 << (StarRocksSqlParser.PENDING - 259)) | (1 << (StarRocksSqlParser.PERCENT_RANK - 259)) | (1 << (StarRocksSqlParser.PERCENTILE_UNION - 259)) | (1 << (StarRocksSqlParser.PLUGIN - 259)) | (1 << (StarRocksSqlParser.PLUGINS - 259)) | (1 << (StarRocksSqlParser.PRECEDING - 259)) | (1 << (StarRocksSqlParser.PRIVILEGES - 259)) | (1 << (StarRocksSqlParser.PROC - 259)) | (1 << (StarRocksSqlParser.PROCESSLIST - 259)) | (1 << (StarRocksSqlParser.PROFILE - 259)) | (1 << (StarRocksSqlParser.PROFILELIST - 259)) | (1 << (StarRocksSqlParser.PROPERTIES - 259)) | (1 << (StarRocksSqlParser.PROPERTY - 259)) | (1 << (StarRocksSqlParser.QUALIFY - 259)) | (1 << (StarRocksSqlParser.QUARTER - 259)) | (1 << (StarRocksSqlParser.QUERY - 259)) | (1 << (StarRocksSqlParser.QUEUE - 259)) | (1 << (StarRocksSqlParser.QUOTA - 259)) | (1 << (StarRocksSqlParser.RANDOM - 259)) | (1 << (StarRocksSqlParser.RANK - 259)) | (1 << (StarRocksSqlParser.RECOVER - 259)))) !== 0) || ((((_la - 291)) & ~0x1F) === 0 && ((1 << (_la - 291)) & ((1 << (StarRocksSqlParser.REFRESH - 291)) | (1 << (StarRocksSqlParser.REWRITE - 291)) | (1 << (StarRocksSqlParser.REGEXP - 291)) | (1 << (StarRocksSqlParser.REMOVE - 291)) | (1 << (StarRocksSqlParser.REPAIR - 291)) | (1 << (StarRocksSqlParser.REPEATABLE - 291)) | (1 << (StarRocksSqlParser.REPLACE - 291)) | (1 << (StarRocksSqlParser.REPLACE_IF_NOT_NULL - 291)) | (1 << (StarRocksSqlParser.REPLICA - 291)) | (1 << (StarRocksSqlParser.REPOSITORY - 291)) | (1 << (StarRocksSqlParser.REPOSITORIES - 291)) | (1 << (StarRocksSqlParser.RESOURCE - 291)) | (1 << (StarRocksSqlParser.RESOURCES - 291)) | (1 << (StarRocksSqlParser.RESTORE - 291)) | (1 << (StarRocksSqlParser.RESUME - 291)) | (1 << (StarRocksSqlParser.RETURNS - 291)) | (1 << (StarRocksSqlParser.REVERT - 291)) | (1 << (StarRocksSqlParser.RIGHT - 291)) | (1 << (StarRocksSqlParser.RLIKE - 291)) | (1 << (StarRocksSqlParser.ROLE - 291)) | (1 << (StarRocksSqlParser.ROLES - 291)) | (1 << (StarRocksSqlParser.ROLLBACK - 291)) | (1 << (StarRocksSqlParser.ROLLUP - 291)) | (1 << (StarRocksSqlParser.ROUTINE - 291)) | (1 << (StarRocksSqlParser.ROW - 291)) | (1 << (StarRocksSqlParser.ROW_NUMBER - 291)) | (1 << (StarRocksSqlParser.SAMPLE - 291)) | (1 << (StarRocksSqlParser.SCHEDULER - 291)))) !== 0) || ((((_la - 323)) & ~0x1F) === 0 && ((1 << (_la - 323)) & ((1 << (StarRocksSqlParser.SCHEMA - 323)) | (1 << (StarRocksSqlParser.SECOND - 323)) | (1 << (StarRocksSqlParser.SEMI - 323)) | (1 << (StarRocksSqlParser.SERIALIZABLE - 323)) | (1 << (StarRocksSqlParser.SESSION - 323)) | (1 << (StarRocksSqlParser.SETS - 323)) | (1 << (StarRocksSqlParser.SIGNED - 323)) | (1 << (StarRocksSqlParser.SKIP_HEADER - 323)) | (1 << (StarRocksSqlParser.SNAPSHOT - 323)) | (1 << (StarRocksSqlParser.SQLBLACKLIST - 323)) | (1 << (StarRocksSqlParser.START - 323)) | (1 << (StarRocksSqlParser.STATS - 323)) | (1 << (StarRocksSqlParser.STATUS - 323)) | (1 << (StarRocksSqlParser.STOP - 323)) | (1 << (StarRocksSqlParser.STORAGE - 323)) | (1 << (StarRocksSqlParser.STREAM - 323)) | (1 << (StarRocksSqlParser.STRING - 323)) | (1 << (StarRocksSqlParser.SUBMIT - 323)) | (1 << (StarRocksSqlParser.SUM - 323)) | (1 << (StarRocksSqlParser.SUSPEND - 323)) | (1 << (StarRocksSqlParser.SYNC - 323)) | (1 << (StarRocksSqlParser.SYSTEM_TIME - 323)) | (1 << (StarRocksSqlParser.SWAP - 323)))) !== 0) || ((((_la - 355)) & ~0x1F) === 0 && ((1 << (_la - 355)) & ((1 << (StarRocksSqlParser.STRUCT - 355)) | (1 << (StarRocksSqlParser.TABLES - 355)) | (1 << (StarRocksSqlParser.TABLET - 355)) | (1 << (StarRocksSqlParser.TASK - 355)) | (1 << (StarRocksSqlParser.TEMPORARY - 355)) | (1 << (StarRocksSqlParser.THAN - 355)) | (1 << (StarRocksSqlParser.TIME - 355)) | (1 << (StarRocksSqlParser.TIMESTAMP - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPADD - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPDIFF - 355)) | (1 << (StarRocksSqlParser.TRANSACTION - 355)) | (1 << (StarRocksSqlParser.TRACE - 355)) | (1 << (StarRocksSqlParser.TRIGGERS - 355)) | (1 << (StarRocksSqlParser.TRIM_SPACE - 355)) | (1 << (StarRocksSqlParser.TRUE - 355)) | (1 << (StarRocksSqlParser.TRUNCATE - 355)) | (1 << (StarRocksSqlParser.TYPE - 355)) | (1 << (StarRocksSqlParser.TYPES - 355)) | (1 << (StarRocksSqlParser.UNBOUNDED - 355)) | (1 << (StarRocksSqlParser.UNCOMMITTED - 355)) | (1 << (StarRocksSqlParser.UNINSTALL - 355)) | (1 << (StarRocksSqlParser.USAGE - 355)))) !== 0) || ((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & ((1 << (StarRocksSqlParser.USER - 388)) | (1 << (StarRocksSqlParser.USERS - 388)) | (1 << (StarRocksSqlParser.VALUE - 388)) | (1 << (StarRocksSqlParser.VARIABLES - 388)) | (1 << (StarRocksSqlParser.VERBOSE - 388)) | (1 << (StarRocksSqlParser.VIEW - 388)) | (1 << (StarRocksSqlParser.VIEWS - 388)) | (1 << (StarRocksSqlParser.WAREHOUSE - 388)) | (1 << (StarRocksSqlParser.WAREHOUSES - 388)) | (1 << (StarRocksSqlParser.WARNINGS - 388)) | (1 << (StarRocksSqlParser.WEEK - 388)) | (1 << (StarRocksSqlParser.WHITELIST - 388)) | (1 << (StarRocksSqlParser.WORK - 388)) | (1 << (StarRocksSqlParser.WRITE - 388)) | (1 << (StarRocksSqlParser.YEAR - 388)) | (1 << (StarRocksSqlParser.LOCK - 388)) | (1 << (StarRocksSqlParser.UNLOCK - 388)) | (1 << (StarRocksSqlParser.LOW_PRIORITY - 388)))) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (StarRocksSqlParser.PLUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.MINUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.LOGICAL_NOT - 422)) | (1 << (StarRocksSqlParser.BITNOT - 422)) | (1 << (StarRocksSqlParser.AT - 422)) | (1 << (StarRocksSqlParser.INTEGER_VALUE - 422)) | (1 << (StarRocksSqlParser.DECIMAL_VALUE - 422)) | (1 << (StarRocksSqlParser.DOUBLE_VALUE - 422)) | (1 << (StarRocksSqlParser.SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.LETTER_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.DIGIT_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.BACKQUOTED_IDENTIFIER - 422)))) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & ((1 << (StarRocksSqlParser.LEFT_PAREN - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACKET - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACE - 456)) | (1 << (StarRocksSqlParser.DOTDOTDOT - 456)))) !== 0)) {
					{
					this.state = 5878;
					this.expression(0);
					this.state = 5883;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === StarRocksSqlParser.COMMA) {
						{
						{
						this.state = 5879;
						this.match(StarRocksSqlParser.COMMA);
						this.state = 5880;
						this.expression(0);
						}
						}
						this.state = 5885;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 5888;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.LEFT:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5889;
				this.match(StarRocksSqlParser.LEFT);
				this.state = 5890;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5891;
				this.expression(0);
				this.state = 5892;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 5893;
				this.expression(0);
				this.state = 5894;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.LIKE:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5896;
				this.match(StarRocksSqlParser.LIKE);
				this.state = 5897;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5898;
				this.expression(0);
				this.state = 5899;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 5900;
				this.expression(0);
				this.state = 5901;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.MINUTE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5903;
				this.match(StarRocksSqlParser.MINUTE);
				this.state = 5904;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5905;
				this.expression(0);
				this.state = 5906;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.MOD:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5908;
				this.match(StarRocksSqlParser.MOD);
				this.state = 5909;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5910;
				this.expression(0);
				this.state = 5911;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 5912;
				this.expression(0);
				this.state = 5913;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.MONTH:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5915;
				this.match(StarRocksSqlParser.MONTH);
				this.state = 5916;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5917;
				this.expression(0);
				this.state = 5918;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.QUARTER:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 5920;
				this.match(StarRocksSqlParser.QUARTER);
				this.state = 5921;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5922;
				this.expression(0);
				this.state = 5923;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.REGEXP:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 5925;
				this.match(StarRocksSqlParser.REGEXP);
				this.state = 5926;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5927;
				this.expression(0);
				this.state = 5928;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 5929;
				this.expression(0);
				this.state = 5930;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.REPLACE:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 5932;
				this.match(StarRocksSqlParser.REPLACE);
				this.state = 5933;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5942;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << StarRocksSqlParser.ACTIVE) | (1 << StarRocksSqlParser.ADMIN) | (1 << StarRocksSqlParser.AFTER) | (1 << StarRocksSqlParser.AGGREGATE) | (1 << StarRocksSqlParser.ANTI) | (1 << StarRocksSqlParser.ARRAY) | (1 << StarRocksSqlParser.ARRAY_AGG) | (1 << StarRocksSqlParser.ASYNC) | (1 << StarRocksSqlParser.AUTHORS) | (1 << StarRocksSqlParser.AUTHENTICATION) | (1 << StarRocksSqlParser.AUTO_INCREMENT) | (1 << StarRocksSqlParser.AVG) | (1 << StarRocksSqlParser.BACKEND) | (1 << StarRocksSqlParser.BACKENDS) | (1 << StarRocksSqlParser.BACKUP) | (1 << StarRocksSqlParser.BEGIN))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (StarRocksSqlParser.BITMAP_UNION - 32)) | (1 << (StarRocksSqlParser.BLACKLIST - 32)) | (1 << (StarRocksSqlParser.BOOLEAN - 32)) | (1 << (StarRocksSqlParser.BROKER - 32)) | (1 << (StarRocksSqlParser.BUCKETS - 32)) | (1 << (StarRocksSqlParser.BUILTIN - 32)) | (1 << (StarRocksSqlParser.CANCEL - 32)) | (1 << (StarRocksSqlParser.CASE - 32)) | (1 << (StarRocksSqlParser.CAST - 32)) | (1 << (StarRocksSqlParser.CATALOG - 32)) | (1 << (StarRocksSqlParser.CATALOGS - 32)) | (1 << (StarRocksSqlParser.CEIL - 32)) | (1 << (StarRocksSqlParser.CHAIN - 32)) | (1 << (StarRocksSqlParser.CHAR - 32)) | (1 << (StarRocksSqlParser.CHARSET - 32)) | (1 << (StarRocksSqlParser.CLEAN - 32)) | (1 << (StarRocksSqlParser.CLUSTER - 32)) | (1 << (StarRocksSqlParser.CLUSTERS - 32)) | (1 << (StarRocksSqlParser.COLLATION - 32)) | (1 << (StarRocksSqlParser.COLUMNS - 32)) | (1 << (StarRocksSqlParser.COMMENT - 32)) | (1 << (StarRocksSqlParser.COMMIT - 32)) | (1 << (StarRocksSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (StarRocksSqlParser.COMPUTE - 64)) | (1 << (StarRocksSqlParser.CONFIG - 64)) | (1 << (StarRocksSqlParser.CONNECTION - 64)) | (1 << (StarRocksSqlParser.CONSISTENT - 64)) | (1 << (StarRocksSqlParser.CONVERT - 64)) | (1 << (StarRocksSqlParser.COSTS - 64)) | (1 << (StarRocksSqlParser.COUNT - 64)) | (1 << (StarRocksSqlParser.CUME_DIST - 64)) | (1 << (StarRocksSqlParser.CURRENT - 64)) | (1 << (StarRocksSqlParser.CURRENT_DATE - 64)) | (1 << (StarRocksSqlParser.CURRENT_ROLE - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIME - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (StarRocksSqlParser.CURRENT_USER - 64)) | (1 << (StarRocksSqlParser.DATA - 64)) | (1 << (StarRocksSqlParser.DATABASE - 64)) | (1 << (StarRocksSqlParser.DATE - 64)) | (1 << (StarRocksSqlParser.DATETIME - 64)) | (1 << (StarRocksSqlParser.DAY - 64)) | (1 << (StarRocksSqlParser.DECOMMISSION - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (StarRocksSqlParser.DENSE_RANK - 96)) | (1 << (StarRocksSqlParser.NTILE - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTED - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTION - 96)) | (1 << (StarRocksSqlParser.DUPLICATE - 96)) | (1 << (StarRocksSqlParser.DYNAMIC - 96)) | (1 << (StarRocksSqlParser.ENCLOSE - 96)) | (1 << (StarRocksSqlParser.END - 96)) | (1 << (StarRocksSqlParser.ENGINE - 96)) | (1 << (StarRocksSqlParser.ENGINES - 96)) | (1 << (StarRocksSqlParser.ERRORS - 96)) | (1 << (StarRocksSqlParser.ESCAPE - 96)) | (1 << (StarRocksSqlParser.EVENTS - 96)) | (1 << (StarRocksSqlParser.EXECUTE - 96)) | (1 << (StarRocksSqlParser.EXISTS - 96)) | (1 << (StarRocksSqlParser.EXPORT - 96)) | (1 << (StarRocksSqlParser.EXTERNAL - 96)) | (1 << (StarRocksSqlParser.EXTRACT - 96)) | (1 << (StarRocksSqlParser.EVERY - 96)) | (1 << (StarRocksSqlParser.FALSE - 96)) | (1 << (StarRocksSqlParser.FIELDS - 96)) | (1 << (StarRocksSqlParser.FILE - 96)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (StarRocksSqlParser.FILTER - 129)) | (1 << (StarRocksSqlParser.FIRST - 129)) | (1 << (StarRocksSqlParser.FIRST_VALUE - 129)) | (1 << (StarRocksSqlParser.FLOOR - 129)) | (1 << (StarRocksSqlParser.FN - 129)) | (1 << (StarRocksSqlParser.FOLLOWING - 129)) | (1 << (StarRocksSqlParser.FOLLOWER - 129)) | (1 << (StarRocksSqlParser.FORMAT - 129)) | (1 << (StarRocksSqlParser.FREE - 129)) | (1 << (StarRocksSqlParser.FRONTEND - 129)) | (1 << (StarRocksSqlParser.FRONTENDS - 129)) | (1 << (StarRocksSqlParser.FUNCTIONS - 129)) | (1 << (StarRocksSqlParser.GLOBAL - 129)) | (1 << (StarRocksSqlParser.GRANTS - 129)) | (1 << (StarRocksSqlParser.GROUPING - 129)) | (1 << (StarRocksSqlParser.GROUPING_ID - 129)) | (1 << (StarRocksSqlParser.HASH - 129)) | (1 << (StarRocksSqlParser.HELP - 129)) | (1 << (StarRocksSqlParser.HISTOGRAM - 129)) | (1 << (StarRocksSqlParser.HLL_UNION - 129)) | (1 << (StarRocksSqlParser.HOST - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (StarRocksSqlParser.HOUR - 161)) | (1 << (StarRocksSqlParser.HUB - 161)) | (1 << (StarRocksSqlParser.IDENTIFIED - 161)) | (1 << (StarRocksSqlParser.IF - 161)) | (1 << (StarRocksSqlParser.IMPERSONATE - 161)) | (1 << (StarRocksSqlParser.IMAGE - 161)) | (1 << (StarRocksSqlParser.INACTIVE - 161)) | (1 << (StarRocksSqlParser.INCREMENTAL - 161)) | (1 << (StarRocksSqlParser.INDEXES - 161)) | (1 << (StarRocksSqlParser.INSTALL - 161)) | (1 << (StarRocksSqlParser.INTERMEDIATE - 161)) | (1 << (StarRocksSqlParser.INTERVAL - 161)) | (1 << (StarRocksSqlParser.OVERWRITE - 161)) | (1 << (StarRocksSqlParser.ISOLATION - 161)) | (1 << (StarRocksSqlParser.JOB - 161)))) !== 0) || ((((_la - 195)) & ~0x1F) === 0 && ((1 << (_la - 195)) & ((1 << (StarRocksSqlParser.LABEL - 195)) | (1 << (StarRocksSqlParser.LAG - 195)) | (1 << (StarRocksSqlParser.LAST - 195)) | (1 << (StarRocksSqlParser.LAST_VALUE - 195)) | (1 << (StarRocksSqlParser.LEAD - 195)) | (1 << (StarRocksSqlParser.LEFT - 195)) | (1 << (StarRocksSqlParser.LESS - 195)) | (1 << (StarRocksSqlParser.LEVEL - 195)) | (1 << (StarRocksSqlParser.LIKE - 195)) | (1 << (StarRocksSqlParser.LIST - 195)) | (1 << (StarRocksSqlParser.LOCAL - 195)) | (1 << (StarRocksSqlParser.LOCALTIME - 195)) | (1 << (StarRocksSqlParser.LOCALTIMESTAMP - 195)) | (1 << (StarRocksSqlParser.LOCATION - 195)) | (1 << (StarRocksSqlParser.LOGICAL - 195)) | (1 << (StarRocksSqlParser.MANUAL - 195)) | (1 << (StarRocksSqlParser.MAP - 195)) | (1 << (StarRocksSqlParser.MATERIALIZED - 195)) | (1 << (StarRocksSqlParser.MAX - 195)) | (1 << (StarRocksSqlParser.MERGE - 195)) | (1 << (StarRocksSqlParser.MIN - 195)) | (1 << (StarRocksSqlParser.MINUTE - 195)) | (1 << (StarRocksSqlParser.MINUS - 195)))) !== 0) || ((((_la - 227)) & ~0x1F) === 0 && ((1 << (_la - 227)) & ((1 << (StarRocksSqlParser.META - 227)) | (1 << (StarRocksSqlParser.MOD - 227)) | (1 << (StarRocksSqlParser.MODE - 227)) | (1 << (StarRocksSqlParser.MODIFY - 227)) | (1 << (StarRocksSqlParser.MONTH - 227)) | (1 << (StarRocksSqlParser.NAME - 227)) | (1 << (StarRocksSqlParser.NAMES - 227)) | (1 << (StarRocksSqlParser.NEGATIVE - 227)) | (1 << (StarRocksSqlParser.NO - 227)) | (1 << (StarRocksSqlParser.NODE - 227)) | (1 << (StarRocksSqlParser.NODES - 227)) | (1 << (StarRocksSqlParser.NONE - 227)) | (1 << (StarRocksSqlParser.NOT - 227)) | (1 << (StarRocksSqlParser.NULL - 227)) | (1 << (StarRocksSqlParser.NULLS - 227)) | (1 << (StarRocksSqlParser.NUMBER - 227)) | (1 << (StarRocksSqlParser.NUMERIC - 227)) | (1 << (StarRocksSqlParser.OBSERVER - 227)) | (1 << (StarRocksSqlParser.OF - 227)) | (1 << (StarRocksSqlParser.OFFSET - 227)) | (1 << (StarRocksSqlParser.ONLY - 227)) | (1 << (StarRocksSqlParser.OPEN - 227)) | (1 << (StarRocksSqlParser.OPERATE - 227)) | (1 << (StarRocksSqlParser.OPTIMIZER - 227)) | (1 << (StarRocksSqlParser.OPTION - 227)))) !== 0) || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (StarRocksSqlParser.PARTITIONS - 259)) | (1 << (StarRocksSqlParser.PASSWORD - 259)) | (1 << (StarRocksSqlParser.PATH - 259)) | (1 << (StarRocksSqlParser.PAUSE - 259)) | (1 << (StarRocksSqlParser.PENDING - 259)) | (1 << (StarRocksSqlParser.PERCENT_RANK - 259)) | (1 << (StarRocksSqlParser.PERCENTILE_UNION - 259)) | (1 << (StarRocksSqlParser.PLUGIN - 259)) | (1 << (StarRocksSqlParser.PLUGINS - 259)) | (1 << (StarRocksSqlParser.PRECEDING - 259)) | (1 << (StarRocksSqlParser.PRIVILEGES - 259)) | (1 << (StarRocksSqlParser.PROC - 259)) | (1 << (StarRocksSqlParser.PROCESSLIST - 259)) | (1 << (StarRocksSqlParser.PROFILE - 259)) | (1 << (StarRocksSqlParser.PROFILELIST - 259)) | (1 << (StarRocksSqlParser.PROPERTIES - 259)) | (1 << (StarRocksSqlParser.PROPERTY - 259)) | (1 << (StarRocksSqlParser.QUALIFY - 259)) | (1 << (StarRocksSqlParser.QUARTER - 259)) | (1 << (StarRocksSqlParser.QUERY - 259)) | (1 << (StarRocksSqlParser.QUEUE - 259)) | (1 << (StarRocksSqlParser.QUOTA - 259)) | (1 << (StarRocksSqlParser.RANDOM - 259)) | (1 << (StarRocksSqlParser.RANK - 259)) | (1 << (StarRocksSqlParser.RECOVER - 259)))) !== 0) || ((((_la - 291)) & ~0x1F) === 0 && ((1 << (_la - 291)) & ((1 << (StarRocksSqlParser.REFRESH - 291)) | (1 << (StarRocksSqlParser.REWRITE - 291)) | (1 << (StarRocksSqlParser.REGEXP - 291)) | (1 << (StarRocksSqlParser.REMOVE - 291)) | (1 << (StarRocksSqlParser.REPAIR - 291)) | (1 << (StarRocksSqlParser.REPEATABLE - 291)) | (1 << (StarRocksSqlParser.REPLACE - 291)) | (1 << (StarRocksSqlParser.REPLACE_IF_NOT_NULL - 291)) | (1 << (StarRocksSqlParser.REPLICA - 291)) | (1 << (StarRocksSqlParser.REPOSITORY - 291)) | (1 << (StarRocksSqlParser.REPOSITORIES - 291)) | (1 << (StarRocksSqlParser.RESOURCE - 291)) | (1 << (StarRocksSqlParser.RESOURCES - 291)) | (1 << (StarRocksSqlParser.RESTORE - 291)) | (1 << (StarRocksSqlParser.RESUME - 291)) | (1 << (StarRocksSqlParser.RETURNS - 291)) | (1 << (StarRocksSqlParser.REVERT - 291)) | (1 << (StarRocksSqlParser.RIGHT - 291)) | (1 << (StarRocksSqlParser.RLIKE - 291)) | (1 << (StarRocksSqlParser.ROLE - 291)) | (1 << (StarRocksSqlParser.ROLES - 291)) | (1 << (StarRocksSqlParser.ROLLBACK - 291)) | (1 << (StarRocksSqlParser.ROLLUP - 291)) | (1 << (StarRocksSqlParser.ROUTINE - 291)) | (1 << (StarRocksSqlParser.ROW - 291)) | (1 << (StarRocksSqlParser.ROW_NUMBER - 291)) | (1 << (StarRocksSqlParser.SAMPLE - 291)) | (1 << (StarRocksSqlParser.SCHEDULER - 291)))) !== 0) || ((((_la - 323)) & ~0x1F) === 0 && ((1 << (_la - 323)) & ((1 << (StarRocksSqlParser.SCHEMA - 323)) | (1 << (StarRocksSqlParser.SECOND - 323)) | (1 << (StarRocksSqlParser.SEMI - 323)) | (1 << (StarRocksSqlParser.SERIALIZABLE - 323)) | (1 << (StarRocksSqlParser.SESSION - 323)) | (1 << (StarRocksSqlParser.SETS - 323)) | (1 << (StarRocksSqlParser.SIGNED - 323)) | (1 << (StarRocksSqlParser.SKIP_HEADER - 323)) | (1 << (StarRocksSqlParser.SNAPSHOT - 323)) | (1 << (StarRocksSqlParser.SQLBLACKLIST - 323)) | (1 << (StarRocksSqlParser.START - 323)) | (1 << (StarRocksSqlParser.STATS - 323)) | (1 << (StarRocksSqlParser.STATUS - 323)) | (1 << (StarRocksSqlParser.STOP - 323)) | (1 << (StarRocksSqlParser.STORAGE - 323)) | (1 << (StarRocksSqlParser.STREAM - 323)) | (1 << (StarRocksSqlParser.STRING - 323)) | (1 << (StarRocksSqlParser.SUBMIT - 323)) | (1 << (StarRocksSqlParser.SUM - 323)) | (1 << (StarRocksSqlParser.SUSPEND - 323)) | (1 << (StarRocksSqlParser.SYNC - 323)) | (1 << (StarRocksSqlParser.SYSTEM_TIME - 323)) | (1 << (StarRocksSqlParser.SWAP - 323)))) !== 0) || ((((_la - 355)) & ~0x1F) === 0 && ((1 << (_la - 355)) & ((1 << (StarRocksSqlParser.STRUCT - 355)) | (1 << (StarRocksSqlParser.TABLES - 355)) | (1 << (StarRocksSqlParser.TABLET - 355)) | (1 << (StarRocksSqlParser.TASK - 355)) | (1 << (StarRocksSqlParser.TEMPORARY - 355)) | (1 << (StarRocksSqlParser.THAN - 355)) | (1 << (StarRocksSqlParser.TIME - 355)) | (1 << (StarRocksSqlParser.TIMESTAMP - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPADD - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPDIFF - 355)) | (1 << (StarRocksSqlParser.TRANSACTION - 355)) | (1 << (StarRocksSqlParser.TRACE - 355)) | (1 << (StarRocksSqlParser.TRIGGERS - 355)) | (1 << (StarRocksSqlParser.TRIM_SPACE - 355)) | (1 << (StarRocksSqlParser.TRUE - 355)) | (1 << (StarRocksSqlParser.TRUNCATE - 355)) | (1 << (StarRocksSqlParser.TYPE - 355)) | (1 << (StarRocksSqlParser.TYPES - 355)) | (1 << (StarRocksSqlParser.UNBOUNDED - 355)) | (1 << (StarRocksSqlParser.UNCOMMITTED - 355)) | (1 << (StarRocksSqlParser.UNINSTALL - 355)) | (1 << (StarRocksSqlParser.USAGE - 355)))) !== 0) || ((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & ((1 << (StarRocksSqlParser.USER - 388)) | (1 << (StarRocksSqlParser.USERS - 388)) | (1 << (StarRocksSqlParser.VALUE - 388)) | (1 << (StarRocksSqlParser.VARIABLES - 388)) | (1 << (StarRocksSqlParser.VERBOSE - 388)) | (1 << (StarRocksSqlParser.VIEW - 388)) | (1 << (StarRocksSqlParser.VIEWS - 388)) | (1 << (StarRocksSqlParser.WAREHOUSE - 388)) | (1 << (StarRocksSqlParser.WAREHOUSES - 388)) | (1 << (StarRocksSqlParser.WARNINGS - 388)) | (1 << (StarRocksSqlParser.WEEK - 388)) | (1 << (StarRocksSqlParser.WHITELIST - 388)) | (1 << (StarRocksSqlParser.WORK - 388)) | (1 << (StarRocksSqlParser.WRITE - 388)) | (1 << (StarRocksSqlParser.YEAR - 388)) | (1 << (StarRocksSqlParser.LOCK - 388)) | (1 << (StarRocksSqlParser.UNLOCK - 388)) | (1 << (StarRocksSqlParser.LOW_PRIORITY - 388)))) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (StarRocksSqlParser.PLUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.MINUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.LOGICAL_NOT - 422)) | (1 << (StarRocksSqlParser.BITNOT - 422)) | (1 << (StarRocksSqlParser.AT - 422)) | (1 << (StarRocksSqlParser.INTEGER_VALUE - 422)) | (1 << (StarRocksSqlParser.DECIMAL_VALUE - 422)) | (1 << (StarRocksSqlParser.DOUBLE_VALUE - 422)) | (1 << (StarRocksSqlParser.SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.LETTER_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.DIGIT_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.BACKQUOTED_IDENTIFIER - 422)))) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & ((1 << (StarRocksSqlParser.LEFT_PAREN - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACKET - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACE - 456)) | (1 << (StarRocksSqlParser.DOTDOTDOT - 456)))) !== 0)) {
					{
					this.state = 5934;
					this.expression(0);
					this.state = 5939;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === StarRocksSqlParser.COMMA) {
						{
						{
						this.state = 5935;
						this.match(StarRocksSqlParser.COMMA);
						this.state = 5936;
						this.expression(0);
						}
						}
						this.state = 5941;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 5944;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.RIGHT:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 5945;
				this.match(StarRocksSqlParser.RIGHT);
				this.state = 5946;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5947;
				this.expression(0);
				this.state = 5948;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 5949;
				this.expression(0);
				this.state = 5950;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.RLIKE:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 5952;
				this.match(StarRocksSqlParser.RLIKE);
				this.state = 5953;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5954;
				this.expression(0);
				this.state = 5955;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 5956;
				this.expression(0);
				this.state = 5957;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.SECOND:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 5959;
				this.match(StarRocksSqlParser.SECOND);
				this.state = 5960;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5961;
				this.expression(0);
				this.state = 5962;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.TIMESTAMPADD:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 5964;
				this.match(StarRocksSqlParser.TIMESTAMPADD);
				this.state = 5965;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5966;
				this.unitIdentifier();
				this.state = 5967;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 5968;
				this.expression(0);
				this.state = 5969;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 5970;
				this.expression(0);
				this.state = 5971;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.TIMESTAMPDIFF:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 5973;
				this.match(StarRocksSqlParser.TIMESTAMPDIFF);
				this.state = 5974;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5975;
				this.unitIdentifier();
				this.state = 5976;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 5977;
				this.expression(0);
				this.state = 5978;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 5979;
				this.expression(0);
				this.state = 5980;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.YEAR:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 5982;
				this.match(StarRocksSqlParser.YEAR);
				this.state = 5983;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5984;
				this.expression(0);
				this.state = 5985;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.PASSWORD:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 5987;
				this.match(StarRocksSqlParser.PASSWORD);
				this.state = 5988;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5989;
				this.string();
				this.state = 5990;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.FLOOR:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 5992;
				this.match(StarRocksSqlParser.FLOOR);
				this.state = 5993;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5994;
				this.expression(0);
				this.state = 5995;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.CEIL:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 5997;
				this.match(StarRocksSqlParser.CEIL);
				this.state = 5998;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 5999;
				this.expression(0);
				this.state = 6000;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public windowFunction(): WindowFunctionContext {
		let _localctx: WindowFunctionContext = new WindowFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 710, StarRocksSqlParser.RULE_windowFunction);
		let _la: number;
		try {
			this.state = 6101;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.ROW_NUMBER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6004;
				_localctx._name = this.match(StarRocksSqlParser.ROW_NUMBER);
				this.state = 6005;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 6006;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.RANK:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6007;
				_localctx._name = this.match(StarRocksSqlParser.RANK);
				this.state = 6008;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 6009;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.DENSE_RANK:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6010;
				_localctx._name = this.match(StarRocksSqlParser.DENSE_RANK);
				this.state = 6011;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 6012;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.CUME_DIST:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6013;
				_localctx._name = this.match(StarRocksSqlParser.CUME_DIST);
				this.state = 6014;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 6015;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.PERCENT_RANK:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6016;
				_localctx._name = this.match(StarRocksSqlParser.PERCENT_RANK);
				this.state = 6017;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 6018;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.NTILE:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6019;
				_localctx._name = this.match(StarRocksSqlParser.NTILE);
				this.state = 6020;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 6022;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << StarRocksSqlParser.ACTIVE) | (1 << StarRocksSqlParser.ADMIN) | (1 << StarRocksSqlParser.AFTER) | (1 << StarRocksSqlParser.AGGREGATE) | (1 << StarRocksSqlParser.ANTI) | (1 << StarRocksSqlParser.ARRAY) | (1 << StarRocksSqlParser.ARRAY_AGG) | (1 << StarRocksSqlParser.ASYNC) | (1 << StarRocksSqlParser.AUTHORS) | (1 << StarRocksSqlParser.AUTHENTICATION) | (1 << StarRocksSqlParser.AUTO_INCREMENT) | (1 << StarRocksSqlParser.AVG) | (1 << StarRocksSqlParser.BACKEND) | (1 << StarRocksSqlParser.BACKENDS) | (1 << StarRocksSqlParser.BACKUP) | (1 << StarRocksSqlParser.BEGIN))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (StarRocksSqlParser.BITMAP_UNION - 32)) | (1 << (StarRocksSqlParser.BLACKLIST - 32)) | (1 << (StarRocksSqlParser.BOOLEAN - 32)) | (1 << (StarRocksSqlParser.BROKER - 32)) | (1 << (StarRocksSqlParser.BUCKETS - 32)) | (1 << (StarRocksSqlParser.BUILTIN - 32)) | (1 << (StarRocksSqlParser.CANCEL - 32)) | (1 << (StarRocksSqlParser.CASE - 32)) | (1 << (StarRocksSqlParser.CAST - 32)) | (1 << (StarRocksSqlParser.CATALOG - 32)) | (1 << (StarRocksSqlParser.CATALOGS - 32)) | (1 << (StarRocksSqlParser.CEIL - 32)) | (1 << (StarRocksSqlParser.CHAIN - 32)) | (1 << (StarRocksSqlParser.CHAR - 32)) | (1 << (StarRocksSqlParser.CHARSET - 32)) | (1 << (StarRocksSqlParser.CLEAN - 32)) | (1 << (StarRocksSqlParser.CLUSTER - 32)) | (1 << (StarRocksSqlParser.CLUSTERS - 32)) | (1 << (StarRocksSqlParser.COLLATION - 32)) | (1 << (StarRocksSqlParser.COLUMNS - 32)) | (1 << (StarRocksSqlParser.COMMENT - 32)) | (1 << (StarRocksSqlParser.COMMIT - 32)) | (1 << (StarRocksSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (StarRocksSqlParser.COMPUTE - 64)) | (1 << (StarRocksSqlParser.CONFIG - 64)) | (1 << (StarRocksSqlParser.CONNECTION - 64)) | (1 << (StarRocksSqlParser.CONSISTENT - 64)) | (1 << (StarRocksSqlParser.CONVERT - 64)) | (1 << (StarRocksSqlParser.COSTS - 64)) | (1 << (StarRocksSqlParser.COUNT - 64)) | (1 << (StarRocksSqlParser.CUME_DIST - 64)) | (1 << (StarRocksSqlParser.CURRENT - 64)) | (1 << (StarRocksSqlParser.CURRENT_DATE - 64)) | (1 << (StarRocksSqlParser.CURRENT_ROLE - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIME - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (StarRocksSqlParser.CURRENT_USER - 64)) | (1 << (StarRocksSqlParser.DATA - 64)) | (1 << (StarRocksSqlParser.DATABASE - 64)) | (1 << (StarRocksSqlParser.DATE - 64)) | (1 << (StarRocksSqlParser.DATETIME - 64)) | (1 << (StarRocksSqlParser.DAY - 64)) | (1 << (StarRocksSqlParser.DECOMMISSION - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (StarRocksSqlParser.DENSE_RANK - 96)) | (1 << (StarRocksSqlParser.NTILE - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTED - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTION - 96)) | (1 << (StarRocksSqlParser.DUPLICATE - 96)) | (1 << (StarRocksSqlParser.DYNAMIC - 96)) | (1 << (StarRocksSqlParser.ENCLOSE - 96)) | (1 << (StarRocksSqlParser.END - 96)) | (1 << (StarRocksSqlParser.ENGINE - 96)) | (1 << (StarRocksSqlParser.ENGINES - 96)) | (1 << (StarRocksSqlParser.ERRORS - 96)) | (1 << (StarRocksSqlParser.ESCAPE - 96)) | (1 << (StarRocksSqlParser.EVENTS - 96)) | (1 << (StarRocksSqlParser.EXECUTE - 96)) | (1 << (StarRocksSqlParser.EXISTS - 96)) | (1 << (StarRocksSqlParser.EXPORT - 96)) | (1 << (StarRocksSqlParser.EXTERNAL - 96)) | (1 << (StarRocksSqlParser.EXTRACT - 96)) | (1 << (StarRocksSqlParser.EVERY - 96)) | (1 << (StarRocksSqlParser.FALSE - 96)) | (1 << (StarRocksSqlParser.FIELDS - 96)) | (1 << (StarRocksSqlParser.FILE - 96)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (StarRocksSqlParser.FILTER - 129)) | (1 << (StarRocksSqlParser.FIRST - 129)) | (1 << (StarRocksSqlParser.FIRST_VALUE - 129)) | (1 << (StarRocksSqlParser.FLOOR - 129)) | (1 << (StarRocksSqlParser.FN - 129)) | (1 << (StarRocksSqlParser.FOLLOWING - 129)) | (1 << (StarRocksSqlParser.FOLLOWER - 129)) | (1 << (StarRocksSqlParser.FORMAT - 129)) | (1 << (StarRocksSqlParser.FREE - 129)) | (1 << (StarRocksSqlParser.FRONTEND - 129)) | (1 << (StarRocksSqlParser.FRONTENDS - 129)) | (1 << (StarRocksSqlParser.FUNCTIONS - 129)) | (1 << (StarRocksSqlParser.GLOBAL - 129)) | (1 << (StarRocksSqlParser.GRANTS - 129)) | (1 << (StarRocksSqlParser.GROUPING - 129)) | (1 << (StarRocksSqlParser.GROUPING_ID - 129)) | (1 << (StarRocksSqlParser.HASH - 129)) | (1 << (StarRocksSqlParser.HELP - 129)) | (1 << (StarRocksSqlParser.HISTOGRAM - 129)) | (1 << (StarRocksSqlParser.HLL_UNION - 129)) | (1 << (StarRocksSqlParser.HOST - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (StarRocksSqlParser.HOUR - 161)) | (1 << (StarRocksSqlParser.HUB - 161)) | (1 << (StarRocksSqlParser.IDENTIFIED - 161)) | (1 << (StarRocksSqlParser.IF - 161)) | (1 << (StarRocksSqlParser.IMPERSONATE - 161)) | (1 << (StarRocksSqlParser.IMAGE - 161)) | (1 << (StarRocksSqlParser.INACTIVE - 161)) | (1 << (StarRocksSqlParser.INCREMENTAL - 161)) | (1 << (StarRocksSqlParser.INDEXES - 161)) | (1 << (StarRocksSqlParser.INSTALL - 161)) | (1 << (StarRocksSqlParser.INTERMEDIATE - 161)) | (1 << (StarRocksSqlParser.INTERVAL - 161)) | (1 << (StarRocksSqlParser.OVERWRITE - 161)) | (1 << (StarRocksSqlParser.ISOLATION - 161)) | (1 << (StarRocksSqlParser.JOB - 161)))) !== 0) || ((((_la - 195)) & ~0x1F) === 0 && ((1 << (_la - 195)) & ((1 << (StarRocksSqlParser.LABEL - 195)) | (1 << (StarRocksSqlParser.LAG - 195)) | (1 << (StarRocksSqlParser.LAST - 195)) | (1 << (StarRocksSqlParser.LAST_VALUE - 195)) | (1 << (StarRocksSqlParser.LEAD - 195)) | (1 << (StarRocksSqlParser.LEFT - 195)) | (1 << (StarRocksSqlParser.LESS - 195)) | (1 << (StarRocksSqlParser.LEVEL - 195)) | (1 << (StarRocksSqlParser.LIKE - 195)) | (1 << (StarRocksSqlParser.LIST - 195)) | (1 << (StarRocksSqlParser.LOCAL - 195)) | (1 << (StarRocksSqlParser.LOCALTIME - 195)) | (1 << (StarRocksSqlParser.LOCALTIMESTAMP - 195)) | (1 << (StarRocksSqlParser.LOCATION - 195)) | (1 << (StarRocksSqlParser.LOGICAL - 195)) | (1 << (StarRocksSqlParser.MANUAL - 195)) | (1 << (StarRocksSqlParser.MAP - 195)) | (1 << (StarRocksSqlParser.MATERIALIZED - 195)) | (1 << (StarRocksSqlParser.MAX - 195)) | (1 << (StarRocksSqlParser.MERGE - 195)) | (1 << (StarRocksSqlParser.MIN - 195)) | (1 << (StarRocksSqlParser.MINUTE - 195)) | (1 << (StarRocksSqlParser.MINUS - 195)))) !== 0) || ((((_la - 227)) & ~0x1F) === 0 && ((1 << (_la - 227)) & ((1 << (StarRocksSqlParser.META - 227)) | (1 << (StarRocksSqlParser.MOD - 227)) | (1 << (StarRocksSqlParser.MODE - 227)) | (1 << (StarRocksSqlParser.MODIFY - 227)) | (1 << (StarRocksSqlParser.MONTH - 227)) | (1 << (StarRocksSqlParser.NAME - 227)) | (1 << (StarRocksSqlParser.NAMES - 227)) | (1 << (StarRocksSqlParser.NEGATIVE - 227)) | (1 << (StarRocksSqlParser.NO - 227)) | (1 << (StarRocksSqlParser.NODE - 227)) | (1 << (StarRocksSqlParser.NODES - 227)) | (1 << (StarRocksSqlParser.NONE - 227)) | (1 << (StarRocksSqlParser.NOT - 227)) | (1 << (StarRocksSqlParser.NULL - 227)) | (1 << (StarRocksSqlParser.NULLS - 227)) | (1 << (StarRocksSqlParser.NUMBER - 227)) | (1 << (StarRocksSqlParser.NUMERIC - 227)) | (1 << (StarRocksSqlParser.OBSERVER - 227)) | (1 << (StarRocksSqlParser.OF - 227)) | (1 << (StarRocksSqlParser.OFFSET - 227)) | (1 << (StarRocksSqlParser.ONLY - 227)) | (1 << (StarRocksSqlParser.OPEN - 227)) | (1 << (StarRocksSqlParser.OPERATE - 227)) | (1 << (StarRocksSqlParser.OPTIMIZER - 227)) | (1 << (StarRocksSqlParser.OPTION - 227)))) !== 0) || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (StarRocksSqlParser.PARTITIONS - 259)) | (1 << (StarRocksSqlParser.PASSWORD - 259)) | (1 << (StarRocksSqlParser.PATH - 259)) | (1 << (StarRocksSqlParser.PAUSE - 259)) | (1 << (StarRocksSqlParser.PENDING - 259)) | (1 << (StarRocksSqlParser.PERCENT_RANK - 259)) | (1 << (StarRocksSqlParser.PERCENTILE_UNION - 259)) | (1 << (StarRocksSqlParser.PLUGIN - 259)) | (1 << (StarRocksSqlParser.PLUGINS - 259)) | (1 << (StarRocksSqlParser.PRECEDING - 259)) | (1 << (StarRocksSqlParser.PRIVILEGES - 259)) | (1 << (StarRocksSqlParser.PROC - 259)) | (1 << (StarRocksSqlParser.PROCESSLIST - 259)) | (1 << (StarRocksSqlParser.PROFILE - 259)) | (1 << (StarRocksSqlParser.PROFILELIST - 259)) | (1 << (StarRocksSqlParser.PROPERTIES - 259)) | (1 << (StarRocksSqlParser.PROPERTY - 259)) | (1 << (StarRocksSqlParser.QUALIFY - 259)) | (1 << (StarRocksSqlParser.QUARTER - 259)) | (1 << (StarRocksSqlParser.QUERY - 259)) | (1 << (StarRocksSqlParser.QUEUE - 259)) | (1 << (StarRocksSqlParser.QUOTA - 259)) | (1 << (StarRocksSqlParser.RANDOM - 259)) | (1 << (StarRocksSqlParser.RANK - 259)) | (1 << (StarRocksSqlParser.RECOVER - 259)))) !== 0) || ((((_la - 291)) & ~0x1F) === 0 && ((1 << (_la - 291)) & ((1 << (StarRocksSqlParser.REFRESH - 291)) | (1 << (StarRocksSqlParser.REWRITE - 291)) | (1 << (StarRocksSqlParser.REGEXP - 291)) | (1 << (StarRocksSqlParser.REMOVE - 291)) | (1 << (StarRocksSqlParser.REPAIR - 291)) | (1 << (StarRocksSqlParser.REPEATABLE - 291)) | (1 << (StarRocksSqlParser.REPLACE - 291)) | (1 << (StarRocksSqlParser.REPLACE_IF_NOT_NULL - 291)) | (1 << (StarRocksSqlParser.REPLICA - 291)) | (1 << (StarRocksSqlParser.REPOSITORY - 291)) | (1 << (StarRocksSqlParser.REPOSITORIES - 291)) | (1 << (StarRocksSqlParser.RESOURCE - 291)) | (1 << (StarRocksSqlParser.RESOURCES - 291)) | (1 << (StarRocksSqlParser.RESTORE - 291)) | (1 << (StarRocksSqlParser.RESUME - 291)) | (1 << (StarRocksSqlParser.RETURNS - 291)) | (1 << (StarRocksSqlParser.REVERT - 291)) | (1 << (StarRocksSqlParser.RIGHT - 291)) | (1 << (StarRocksSqlParser.RLIKE - 291)) | (1 << (StarRocksSqlParser.ROLE - 291)) | (1 << (StarRocksSqlParser.ROLES - 291)) | (1 << (StarRocksSqlParser.ROLLBACK - 291)) | (1 << (StarRocksSqlParser.ROLLUP - 291)) | (1 << (StarRocksSqlParser.ROUTINE - 291)) | (1 << (StarRocksSqlParser.ROW - 291)) | (1 << (StarRocksSqlParser.ROW_NUMBER - 291)) | (1 << (StarRocksSqlParser.SAMPLE - 291)) | (1 << (StarRocksSqlParser.SCHEDULER - 291)))) !== 0) || ((((_la - 323)) & ~0x1F) === 0 && ((1 << (_la - 323)) & ((1 << (StarRocksSqlParser.SCHEMA - 323)) | (1 << (StarRocksSqlParser.SECOND - 323)) | (1 << (StarRocksSqlParser.SEMI - 323)) | (1 << (StarRocksSqlParser.SERIALIZABLE - 323)) | (1 << (StarRocksSqlParser.SESSION - 323)) | (1 << (StarRocksSqlParser.SETS - 323)) | (1 << (StarRocksSqlParser.SIGNED - 323)) | (1 << (StarRocksSqlParser.SKIP_HEADER - 323)) | (1 << (StarRocksSqlParser.SNAPSHOT - 323)) | (1 << (StarRocksSqlParser.SQLBLACKLIST - 323)) | (1 << (StarRocksSqlParser.START - 323)) | (1 << (StarRocksSqlParser.STATS - 323)) | (1 << (StarRocksSqlParser.STATUS - 323)) | (1 << (StarRocksSqlParser.STOP - 323)) | (1 << (StarRocksSqlParser.STORAGE - 323)) | (1 << (StarRocksSqlParser.STREAM - 323)) | (1 << (StarRocksSqlParser.STRING - 323)) | (1 << (StarRocksSqlParser.SUBMIT - 323)) | (1 << (StarRocksSqlParser.SUM - 323)) | (1 << (StarRocksSqlParser.SUSPEND - 323)) | (1 << (StarRocksSqlParser.SYNC - 323)) | (1 << (StarRocksSqlParser.SYSTEM_TIME - 323)) | (1 << (StarRocksSqlParser.SWAP - 323)))) !== 0) || ((((_la - 355)) & ~0x1F) === 0 && ((1 << (_la - 355)) & ((1 << (StarRocksSqlParser.STRUCT - 355)) | (1 << (StarRocksSqlParser.TABLES - 355)) | (1 << (StarRocksSqlParser.TABLET - 355)) | (1 << (StarRocksSqlParser.TASK - 355)) | (1 << (StarRocksSqlParser.TEMPORARY - 355)) | (1 << (StarRocksSqlParser.THAN - 355)) | (1 << (StarRocksSqlParser.TIME - 355)) | (1 << (StarRocksSqlParser.TIMESTAMP - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPADD - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPDIFF - 355)) | (1 << (StarRocksSqlParser.TRANSACTION - 355)) | (1 << (StarRocksSqlParser.TRACE - 355)) | (1 << (StarRocksSqlParser.TRIGGERS - 355)) | (1 << (StarRocksSqlParser.TRIM_SPACE - 355)) | (1 << (StarRocksSqlParser.TRUE - 355)) | (1 << (StarRocksSqlParser.TRUNCATE - 355)) | (1 << (StarRocksSqlParser.TYPE - 355)) | (1 << (StarRocksSqlParser.TYPES - 355)) | (1 << (StarRocksSqlParser.UNBOUNDED - 355)) | (1 << (StarRocksSqlParser.UNCOMMITTED - 355)) | (1 << (StarRocksSqlParser.UNINSTALL - 355)) | (1 << (StarRocksSqlParser.USAGE - 355)))) !== 0) || ((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & ((1 << (StarRocksSqlParser.USER - 388)) | (1 << (StarRocksSqlParser.USERS - 388)) | (1 << (StarRocksSqlParser.VALUE - 388)) | (1 << (StarRocksSqlParser.VARIABLES - 388)) | (1 << (StarRocksSqlParser.VERBOSE - 388)) | (1 << (StarRocksSqlParser.VIEW - 388)) | (1 << (StarRocksSqlParser.VIEWS - 388)) | (1 << (StarRocksSqlParser.WAREHOUSE - 388)) | (1 << (StarRocksSqlParser.WAREHOUSES - 388)) | (1 << (StarRocksSqlParser.WARNINGS - 388)) | (1 << (StarRocksSqlParser.WEEK - 388)) | (1 << (StarRocksSqlParser.WHITELIST - 388)) | (1 << (StarRocksSqlParser.WORK - 388)) | (1 << (StarRocksSqlParser.WRITE - 388)) | (1 << (StarRocksSqlParser.YEAR - 388)) | (1 << (StarRocksSqlParser.LOCK - 388)) | (1 << (StarRocksSqlParser.UNLOCK - 388)) | (1 << (StarRocksSqlParser.LOW_PRIORITY - 388)))) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (StarRocksSqlParser.PLUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.MINUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.LOGICAL_NOT - 422)) | (1 << (StarRocksSqlParser.BITNOT - 422)) | (1 << (StarRocksSqlParser.AT - 422)) | (1 << (StarRocksSqlParser.INTEGER_VALUE - 422)) | (1 << (StarRocksSqlParser.DECIMAL_VALUE - 422)) | (1 << (StarRocksSqlParser.DOUBLE_VALUE - 422)) | (1 << (StarRocksSqlParser.SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.LETTER_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.DIGIT_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.BACKQUOTED_IDENTIFIER - 422)))) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & ((1 << (StarRocksSqlParser.LEFT_PAREN - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACKET - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACE - 456)) | (1 << (StarRocksSqlParser.DOTDOTDOT - 456)))) !== 0)) {
					{
					this.state = 6021;
					this.expression(0);
					}
				}

				this.state = 6024;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			case StarRocksSqlParser.LEAD:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 6025;
				_localctx._name = this.match(StarRocksSqlParser.LEAD);
				this.state = 6026;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 6038;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << StarRocksSqlParser.ACTIVE) | (1 << StarRocksSqlParser.ADMIN) | (1 << StarRocksSqlParser.AFTER) | (1 << StarRocksSqlParser.AGGREGATE) | (1 << StarRocksSqlParser.ANTI) | (1 << StarRocksSqlParser.ARRAY) | (1 << StarRocksSqlParser.ARRAY_AGG) | (1 << StarRocksSqlParser.ASYNC) | (1 << StarRocksSqlParser.AUTHORS) | (1 << StarRocksSqlParser.AUTHENTICATION) | (1 << StarRocksSqlParser.AUTO_INCREMENT) | (1 << StarRocksSqlParser.AVG) | (1 << StarRocksSqlParser.BACKEND) | (1 << StarRocksSqlParser.BACKENDS) | (1 << StarRocksSqlParser.BACKUP) | (1 << StarRocksSqlParser.BEGIN))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (StarRocksSqlParser.BITMAP_UNION - 32)) | (1 << (StarRocksSqlParser.BLACKLIST - 32)) | (1 << (StarRocksSqlParser.BOOLEAN - 32)) | (1 << (StarRocksSqlParser.BROKER - 32)) | (1 << (StarRocksSqlParser.BUCKETS - 32)) | (1 << (StarRocksSqlParser.BUILTIN - 32)) | (1 << (StarRocksSqlParser.CANCEL - 32)) | (1 << (StarRocksSqlParser.CASE - 32)) | (1 << (StarRocksSqlParser.CAST - 32)) | (1 << (StarRocksSqlParser.CATALOG - 32)) | (1 << (StarRocksSqlParser.CATALOGS - 32)) | (1 << (StarRocksSqlParser.CEIL - 32)) | (1 << (StarRocksSqlParser.CHAIN - 32)) | (1 << (StarRocksSqlParser.CHAR - 32)) | (1 << (StarRocksSqlParser.CHARSET - 32)) | (1 << (StarRocksSqlParser.CLEAN - 32)) | (1 << (StarRocksSqlParser.CLUSTER - 32)) | (1 << (StarRocksSqlParser.CLUSTERS - 32)) | (1 << (StarRocksSqlParser.COLLATION - 32)) | (1 << (StarRocksSqlParser.COLUMNS - 32)) | (1 << (StarRocksSqlParser.COMMENT - 32)) | (1 << (StarRocksSqlParser.COMMIT - 32)) | (1 << (StarRocksSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (StarRocksSqlParser.COMPUTE - 64)) | (1 << (StarRocksSqlParser.CONFIG - 64)) | (1 << (StarRocksSqlParser.CONNECTION - 64)) | (1 << (StarRocksSqlParser.CONSISTENT - 64)) | (1 << (StarRocksSqlParser.CONVERT - 64)) | (1 << (StarRocksSqlParser.COSTS - 64)) | (1 << (StarRocksSqlParser.COUNT - 64)) | (1 << (StarRocksSqlParser.CUME_DIST - 64)) | (1 << (StarRocksSqlParser.CURRENT - 64)) | (1 << (StarRocksSqlParser.CURRENT_DATE - 64)) | (1 << (StarRocksSqlParser.CURRENT_ROLE - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIME - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (StarRocksSqlParser.CURRENT_USER - 64)) | (1 << (StarRocksSqlParser.DATA - 64)) | (1 << (StarRocksSqlParser.DATABASE - 64)) | (1 << (StarRocksSqlParser.DATE - 64)) | (1 << (StarRocksSqlParser.DATETIME - 64)) | (1 << (StarRocksSqlParser.DAY - 64)) | (1 << (StarRocksSqlParser.DECOMMISSION - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (StarRocksSqlParser.DENSE_RANK - 96)) | (1 << (StarRocksSqlParser.NTILE - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTED - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTION - 96)) | (1 << (StarRocksSqlParser.DUPLICATE - 96)) | (1 << (StarRocksSqlParser.DYNAMIC - 96)) | (1 << (StarRocksSqlParser.ENCLOSE - 96)) | (1 << (StarRocksSqlParser.END - 96)) | (1 << (StarRocksSqlParser.ENGINE - 96)) | (1 << (StarRocksSqlParser.ENGINES - 96)) | (1 << (StarRocksSqlParser.ERRORS - 96)) | (1 << (StarRocksSqlParser.ESCAPE - 96)) | (1 << (StarRocksSqlParser.EVENTS - 96)) | (1 << (StarRocksSqlParser.EXECUTE - 96)) | (1 << (StarRocksSqlParser.EXISTS - 96)) | (1 << (StarRocksSqlParser.EXPORT - 96)) | (1 << (StarRocksSqlParser.EXTERNAL - 96)) | (1 << (StarRocksSqlParser.EXTRACT - 96)) | (1 << (StarRocksSqlParser.EVERY - 96)) | (1 << (StarRocksSqlParser.FALSE - 96)) | (1 << (StarRocksSqlParser.FIELDS - 96)) | (1 << (StarRocksSqlParser.FILE - 96)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (StarRocksSqlParser.FILTER - 129)) | (1 << (StarRocksSqlParser.FIRST - 129)) | (1 << (StarRocksSqlParser.FIRST_VALUE - 129)) | (1 << (StarRocksSqlParser.FLOOR - 129)) | (1 << (StarRocksSqlParser.FN - 129)) | (1 << (StarRocksSqlParser.FOLLOWING - 129)) | (1 << (StarRocksSqlParser.FOLLOWER - 129)) | (1 << (StarRocksSqlParser.FORMAT - 129)) | (1 << (StarRocksSqlParser.FREE - 129)) | (1 << (StarRocksSqlParser.FRONTEND - 129)) | (1 << (StarRocksSqlParser.FRONTENDS - 129)) | (1 << (StarRocksSqlParser.FUNCTIONS - 129)) | (1 << (StarRocksSqlParser.GLOBAL - 129)) | (1 << (StarRocksSqlParser.GRANTS - 129)) | (1 << (StarRocksSqlParser.GROUPING - 129)) | (1 << (StarRocksSqlParser.GROUPING_ID - 129)) | (1 << (StarRocksSqlParser.HASH - 129)) | (1 << (StarRocksSqlParser.HELP - 129)) | (1 << (StarRocksSqlParser.HISTOGRAM - 129)) | (1 << (StarRocksSqlParser.HLL_UNION - 129)) | (1 << (StarRocksSqlParser.HOST - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (StarRocksSqlParser.HOUR - 161)) | (1 << (StarRocksSqlParser.HUB - 161)) | (1 << (StarRocksSqlParser.IDENTIFIED - 161)) | (1 << (StarRocksSqlParser.IF - 161)) | (1 << (StarRocksSqlParser.IMPERSONATE - 161)) | (1 << (StarRocksSqlParser.IMAGE - 161)) | (1 << (StarRocksSqlParser.INACTIVE - 161)) | (1 << (StarRocksSqlParser.INCREMENTAL - 161)) | (1 << (StarRocksSqlParser.INDEXES - 161)) | (1 << (StarRocksSqlParser.INSTALL - 161)) | (1 << (StarRocksSqlParser.INTERMEDIATE - 161)) | (1 << (StarRocksSqlParser.INTERVAL - 161)) | (1 << (StarRocksSqlParser.OVERWRITE - 161)) | (1 << (StarRocksSqlParser.ISOLATION - 161)) | (1 << (StarRocksSqlParser.JOB - 161)))) !== 0) || ((((_la - 195)) & ~0x1F) === 0 && ((1 << (_la - 195)) & ((1 << (StarRocksSqlParser.LABEL - 195)) | (1 << (StarRocksSqlParser.LAG - 195)) | (1 << (StarRocksSqlParser.LAST - 195)) | (1 << (StarRocksSqlParser.LAST_VALUE - 195)) | (1 << (StarRocksSqlParser.LEAD - 195)) | (1 << (StarRocksSqlParser.LEFT - 195)) | (1 << (StarRocksSqlParser.LESS - 195)) | (1 << (StarRocksSqlParser.LEVEL - 195)) | (1 << (StarRocksSqlParser.LIKE - 195)) | (1 << (StarRocksSqlParser.LIST - 195)) | (1 << (StarRocksSqlParser.LOCAL - 195)) | (1 << (StarRocksSqlParser.LOCALTIME - 195)) | (1 << (StarRocksSqlParser.LOCALTIMESTAMP - 195)) | (1 << (StarRocksSqlParser.LOCATION - 195)) | (1 << (StarRocksSqlParser.LOGICAL - 195)) | (1 << (StarRocksSqlParser.MANUAL - 195)) | (1 << (StarRocksSqlParser.MAP - 195)) | (1 << (StarRocksSqlParser.MATERIALIZED - 195)) | (1 << (StarRocksSqlParser.MAX - 195)) | (1 << (StarRocksSqlParser.MERGE - 195)) | (1 << (StarRocksSqlParser.MIN - 195)) | (1 << (StarRocksSqlParser.MINUTE - 195)) | (1 << (StarRocksSqlParser.MINUS - 195)))) !== 0) || ((((_la - 227)) & ~0x1F) === 0 && ((1 << (_la - 227)) & ((1 << (StarRocksSqlParser.META - 227)) | (1 << (StarRocksSqlParser.MOD - 227)) | (1 << (StarRocksSqlParser.MODE - 227)) | (1 << (StarRocksSqlParser.MODIFY - 227)) | (1 << (StarRocksSqlParser.MONTH - 227)) | (1 << (StarRocksSqlParser.NAME - 227)) | (1 << (StarRocksSqlParser.NAMES - 227)) | (1 << (StarRocksSqlParser.NEGATIVE - 227)) | (1 << (StarRocksSqlParser.NO - 227)) | (1 << (StarRocksSqlParser.NODE - 227)) | (1 << (StarRocksSqlParser.NODES - 227)) | (1 << (StarRocksSqlParser.NONE - 227)) | (1 << (StarRocksSqlParser.NOT - 227)) | (1 << (StarRocksSqlParser.NULL - 227)) | (1 << (StarRocksSqlParser.NULLS - 227)) | (1 << (StarRocksSqlParser.NUMBER - 227)) | (1 << (StarRocksSqlParser.NUMERIC - 227)) | (1 << (StarRocksSqlParser.OBSERVER - 227)) | (1 << (StarRocksSqlParser.OF - 227)) | (1 << (StarRocksSqlParser.OFFSET - 227)) | (1 << (StarRocksSqlParser.ONLY - 227)) | (1 << (StarRocksSqlParser.OPEN - 227)) | (1 << (StarRocksSqlParser.OPERATE - 227)) | (1 << (StarRocksSqlParser.OPTIMIZER - 227)) | (1 << (StarRocksSqlParser.OPTION - 227)))) !== 0) || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (StarRocksSqlParser.PARTITIONS - 259)) | (1 << (StarRocksSqlParser.PASSWORD - 259)) | (1 << (StarRocksSqlParser.PATH - 259)) | (1 << (StarRocksSqlParser.PAUSE - 259)) | (1 << (StarRocksSqlParser.PENDING - 259)) | (1 << (StarRocksSqlParser.PERCENT_RANK - 259)) | (1 << (StarRocksSqlParser.PERCENTILE_UNION - 259)) | (1 << (StarRocksSqlParser.PLUGIN - 259)) | (1 << (StarRocksSqlParser.PLUGINS - 259)) | (1 << (StarRocksSqlParser.PRECEDING - 259)) | (1 << (StarRocksSqlParser.PRIVILEGES - 259)) | (1 << (StarRocksSqlParser.PROC - 259)) | (1 << (StarRocksSqlParser.PROCESSLIST - 259)) | (1 << (StarRocksSqlParser.PROFILE - 259)) | (1 << (StarRocksSqlParser.PROFILELIST - 259)) | (1 << (StarRocksSqlParser.PROPERTIES - 259)) | (1 << (StarRocksSqlParser.PROPERTY - 259)) | (1 << (StarRocksSqlParser.QUALIFY - 259)) | (1 << (StarRocksSqlParser.QUARTER - 259)) | (1 << (StarRocksSqlParser.QUERY - 259)) | (1 << (StarRocksSqlParser.QUEUE - 259)) | (1 << (StarRocksSqlParser.QUOTA - 259)) | (1 << (StarRocksSqlParser.RANDOM - 259)) | (1 << (StarRocksSqlParser.RANK - 259)) | (1 << (StarRocksSqlParser.RECOVER - 259)))) !== 0) || ((((_la - 291)) & ~0x1F) === 0 && ((1 << (_la - 291)) & ((1 << (StarRocksSqlParser.REFRESH - 291)) | (1 << (StarRocksSqlParser.REWRITE - 291)) | (1 << (StarRocksSqlParser.REGEXP - 291)) | (1 << (StarRocksSqlParser.REMOVE - 291)) | (1 << (StarRocksSqlParser.REPAIR - 291)) | (1 << (StarRocksSqlParser.REPEATABLE - 291)) | (1 << (StarRocksSqlParser.REPLACE - 291)) | (1 << (StarRocksSqlParser.REPLACE_IF_NOT_NULL - 291)) | (1 << (StarRocksSqlParser.REPLICA - 291)) | (1 << (StarRocksSqlParser.REPOSITORY - 291)) | (1 << (StarRocksSqlParser.REPOSITORIES - 291)) | (1 << (StarRocksSqlParser.RESOURCE - 291)) | (1 << (StarRocksSqlParser.RESOURCES - 291)) | (1 << (StarRocksSqlParser.RESTORE - 291)) | (1 << (StarRocksSqlParser.RESUME - 291)) | (1 << (StarRocksSqlParser.RETURNS - 291)) | (1 << (StarRocksSqlParser.REVERT - 291)) | (1 << (StarRocksSqlParser.RIGHT - 291)) | (1 << (StarRocksSqlParser.RLIKE - 291)) | (1 << (StarRocksSqlParser.ROLE - 291)) | (1 << (StarRocksSqlParser.ROLES - 291)) | (1 << (StarRocksSqlParser.ROLLBACK - 291)) | (1 << (StarRocksSqlParser.ROLLUP - 291)) | (1 << (StarRocksSqlParser.ROUTINE - 291)) | (1 << (StarRocksSqlParser.ROW - 291)) | (1 << (StarRocksSqlParser.ROW_NUMBER - 291)) | (1 << (StarRocksSqlParser.SAMPLE - 291)) | (1 << (StarRocksSqlParser.SCHEDULER - 291)))) !== 0) || ((((_la - 323)) & ~0x1F) === 0 && ((1 << (_la - 323)) & ((1 << (StarRocksSqlParser.SCHEMA - 323)) | (1 << (StarRocksSqlParser.SECOND - 323)) | (1 << (StarRocksSqlParser.SEMI - 323)) | (1 << (StarRocksSqlParser.SERIALIZABLE - 323)) | (1 << (StarRocksSqlParser.SESSION - 323)) | (1 << (StarRocksSqlParser.SETS - 323)) | (1 << (StarRocksSqlParser.SIGNED - 323)) | (1 << (StarRocksSqlParser.SKIP_HEADER - 323)) | (1 << (StarRocksSqlParser.SNAPSHOT - 323)) | (1 << (StarRocksSqlParser.SQLBLACKLIST - 323)) | (1 << (StarRocksSqlParser.START - 323)) | (1 << (StarRocksSqlParser.STATS - 323)) | (1 << (StarRocksSqlParser.STATUS - 323)) | (1 << (StarRocksSqlParser.STOP - 323)) | (1 << (StarRocksSqlParser.STORAGE - 323)) | (1 << (StarRocksSqlParser.STREAM - 323)) | (1 << (StarRocksSqlParser.STRING - 323)) | (1 << (StarRocksSqlParser.SUBMIT - 323)) | (1 << (StarRocksSqlParser.SUM - 323)) | (1 << (StarRocksSqlParser.SUSPEND - 323)) | (1 << (StarRocksSqlParser.SYNC - 323)) | (1 << (StarRocksSqlParser.SYSTEM_TIME - 323)) | (1 << (StarRocksSqlParser.SWAP - 323)))) !== 0) || ((((_la - 355)) & ~0x1F) === 0 && ((1 << (_la - 355)) & ((1 << (StarRocksSqlParser.STRUCT - 355)) | (1 << (StarRocksSqlParser.TABLES - 355)) | (1 << (StarRocksSqlParser.TABLET - 355)) | (1 << (StarRocksSqlParser.TASK - 355)) | (1 << (StarRocksSqlParser.TEMPORARY - 355)) | (1 << (StarRocksSqlParser.THAN - 355)) | (1 << (StarRocksSqlParser.TIME - 355)) | (1 << (StarRocksSqlParser.TIMESTAMP - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPADD - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPDIFF - 355)) | (1 << (StarRocksSqlParser.TRANSACTION - 355)) | (1 << (StarRocksSqlParser.TRACE - 355)) | (1 << (StarRocksSqlParser.TRIGGERS - 355)) | (1 << (StarRocksSqlParser.TRIM_SPACE - 355)) | (1 << (StarRocksSqlParser.TRUE - 355)) | (1 << (StarRocksSqlParser.TRUNCATE - 355)) | (1 << (StarRocksSqlParser.TYPE - 355)) | (1 << (StarRocksSqlParser.TYPES - 355)) | (1 << (StarRocksSqlParser.UNBOUNDED - 355)) | (1 << (StarRocksSqlParser.UNCOMMITTED - 355)) | (1 << (StarRocksSqlParser.UNINSTALL - 355)) | (1 << (StarRocksSqlParser.USAGE - 355)))) !== 0) || ((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & ((1 << (StarRocksSqlParser.USER - 388)) | (1 << (StarRocksSqlParser.USERS - 388)) | (1 << (StarRocksSqlParser.VALUE - 388)) | (1 << (StarRocksSqlParser.VARIABLES - 388)) | (1 << (StarRocksSqlParser.VERBOSE - 388)) | (1 << (StarRocksSqlParser.VIEW - 388)) | (1 << (StarRocksSqlParser.VIEWS - 388)) | (1 << (StarRocksSqlParser.WAREHOUSE - 388)) | (1 << (StarRocksSqlParser.WAREHOUSES - 388)) | (1 << (StarRocksSqlParser.WARNINGS - 388)) | (1 << (StarRocksSqlParser.WEEK - 388)) | (1 << (StarRocksSqlParser.WHITELIST - 388)) | (1 << (StarRocksSqlParser.WORK - 388)) | (1 << (StarRocksSqlParser.WRITE - 388)) | (1 << (StarRocksSqlParser.YEAR - 388)) | (1 << (StarRocksSqlParser.LOCK - 388)) | (1 << (StarRocksSqlParser.UNLOCK - 388)) | (1 << (StarRocksSqlParser.LOW_PRIORITY - 388)))) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (StarRocksSqlParser.PLUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.MINUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.LOGICAL_NOT - 422)) | (1 << (StarRocksSqlParser.BITNOT - 422)) | (1 << (StarRocksSqlParser.AT - 422)) | (1 << (StarRocksSqlParser.INTEGER_VALUE - 422)) | (1 << (StarRocksSqlParser.DECIMAL_VALUE - 422)) | (1 << (StarRocksSqlParser.DOUBLE_VALUE - 422)) | (1 << (StarRocksSqlParser.SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.LETTER_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.DIGIT_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.BACKQUOTED_IDENTIFIER - 422)))) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & ((1 << (StarRocksSqlParser.LEFT_PAREN - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACKET - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACE - 456)) | (1 << (StarRocksSqlParser.DOTDOTDOT - 456)))) !== 0)) {
					{
					this.state = 6027;
					this.expression(0);
					this.state = 6029;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === StarRocksSqlParser.IGNORE) {
						{
						this.state = 6028;
						this.ignoreNulls();
						}
					}

					this.state = 6035;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === StarRocksSqlParser.COMMA) {
						{
						{
						this.state = 6031;
						this.match(StarRocksSqlParser.COMMA);
						this.state = 6032;
						this.expression(0);
						}
						}
						this.state = 6037;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 6040;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				this.state = 6042;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.IGNORE) {
					{
					this.state = 6041;
					this.ignoreNulls();
					}
				}

				}
				break;
			case StarRocksSqlParser.LAG:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 6044;
				_localctx._name = this.match(StarRocksSqlParser.LAG);
				this.state = 6045;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 6057;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << StarRocksSqlParser.ACTIVE) | (1 << StarRocksSqlParser.ADMIN) | (1 << StarRocksSqlParser.AFTER) | (1 << StarRocksSqlParser.AGGREGATE) | (1 << StarRocksSqlParser.ANTI) | (1 << StarRocksSqlParser.ARRAY) | (1 << StarRocksSqlParser.ARRAY_AGG) | (1 << StarRocksSqlParser.ASYNC) | (1 << StarRocksSqlParser.AUTHORS) | (1 << StarRocksSqlParser.AUTHENTICATION) | (1 << StarRocksSqlParser.AUTO_INCREMENT) | (1 << StarRocksSqlParser.AVG) | (1 << StarRocksSqlParser.BACKEND) | (1 << StarRocksSqlParser.BACKENDS) | (1 << StarRocksSqlParser.BACKUP) | (1 << StarRocksSqlParser.BEGIN))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (StarRocksSqlParser.BITMAP_UNION - 32)) | (1 << (StarRocksSqlParser.BLACKLIST - 32)) | (1 << (StarRocksSqlParser.BOOLEAN - 32)) | (1 << (StarRocksSqlParser.BROKER - 32)) | (1 << (StarRocksSqlParser.BUCKETS - 32)) | (1 << (StarRocksSqlParser.BUILTIN - 32)) | (1 << (StarRocksSqlParser.CANCEL - 32)) | (1 << (StarRocksSqlParser.CASE - 32)) | (1 << (StarRocksSqlParser.CAST - 32)) | (1 << (StarRocksSqlParser.CATALOG - 32)) | (1 << (StarRocksSqlParser.CATALOGS - 32)) | (1 << (StarRocksSqlParser.CEIL - 32)) | (1 << (StarRocksSqlParser.CHAIN - 32)) | (1 << (StarRocksSqlParser.CHAR - 32)) | (1 << (StarRocksSqlParser.CHARSET - 32)) | (1 << (StarRocksSqlParser.CLEAN - 32)) | (1 << (StarRocksSqlParser.CLUSTER - 32)) | (1 << (StarRocksSqlParser.CLUSTERS - 32)) | (1 << (StarRocksSqlParser.COLLATION - 32)) | (1 << (StarRocksSqlParser.COLUMNS - 32)) | (1 << (StarRocksSqlParser.COMMENT - 32)) | (1 << (StarRocksSqlParser.COMMIT - 32)) | (1 << (StarRocksSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (StarRocksSqlParser.COMPUTE - 64)) | (1 << (StarRocksSqlParser.CONFIG - 64)) | (1 << (StarRocksSqlParser.CONNECTION - 64)) | (1 << (StarRocksSqlParser.CONSISTENT - 64)) | (1 << (StarRocksSqlParser.CONVERT - 64)) | (1 << (StarRocksSqlParser.COSTS - 64)) | (1 << (StarRocksSqlParser.COUNT - 64)) | (1 << (StarRocksSqlParser.CUME_DIST - 64)) | (1 << (StarRocksSqlParser.CURRENT - 64)) | (1 << (StarRocksSqlParser.CURRENT_DATE - 64)) | (1 << (StarRocksSqlParser.CURRENT_ROLE - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIME - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (StarRocksSqlParser.CURRENT_USER - 64)) | (1 << (StarRocksSqlParser.DATA - 64)) | (1 << (StarRocksSqlParser.DATABASE - 64)) | (1 << (StarRocksSqlParser.DATE - 64)) | (1 << (StarRocksSqlParser.DATETIME - 64)) | (1 << (StarRocksSqlParser.DAY - 64)) | (1 << (StarRocksSqlParser.DECOMMISSION - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (StarRocksSqlParser.DENSE_RANK - 96)) | (1 << (StarRocksSqlParser.NTILE - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTED - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTION - 96)) | (1 << (StarRocksSqlParser.DUPLICATE - 96)) | (1 << (StarRocksSqlParser.DYNAMIC - 96)) | (1 << (StarRocksSqlParser.ENCLOSE - 96)) | (1 << (StarRocksSqlParser.END - 96)) | (1 << (StarRocksSqlParser.ENGINE - 96)) | (1 << (StarRocksSqlParser.ENGINES - 96)) | (1 << (StarRocksSqlParser.ERRORS - 96)) | (1 << (StarRocksSqlParser.ESCAPE - 96)) | (1 << (StarRocksSqlParser.EVENTS - 96)) | (1 << (StarRocksSqlParser.EXECUTE - 96)) | (1 << (StarRocksSqlParser.EXISTS - 96)) | (1 << (StarRocksSqlParser.EXPORT - 96)) | (1 << (StarRocksSqlParser.EXTERNAL - 96)) | (1 << (StarRocksSqlParser.EXTRACT - 96)) | (1 << (StarRocksSqlParser.EVERY - 96)) | (1 << (StarRocksSqlParser.FALSE - 96)) | (1 << (StarRocksSqlParser.FIELDS - 96)) | (1 << (StarRocksSqlParser.FILE - 96)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (StarRocksSqlParser.FILTER - 129)) | (1 << (StarRocksSqlParser.FIRST - 129)) | (1 << (StarRocksSqlParser.FIRST_VALUE - 129)) | (1 << (StarRocksSqlParser.FLOOR - 129)) | (1 << (StarRocksSqlParser.FN - 129)) | (1 << (StarRocksSqlParser.FOLLOWING - 129)) | (1 << (StarRocksSqlParser.FOLLOWER - 129)) | (1 << (StarRocksSqlParser.FORMAT - 129)) | (1 << (StarRocksSqlParser.FREE - 129)) | (1 << (StarRocksSqlParser.FRONTEND - 129)) | (1 << (StarRocksSqlParser.FRONTENDS - 129)) | (1 << (StarRocksSqlParser.FUNCTIONS - 129)) | (1 << (StarRocksSqlParser.GLOBAL - 129)) | (1 << (StarRocksSqlParser.GRANTS - 129)) | (1 << (StarRocksSqlParser.GROUPING - 129)) | (1 << (StarRocksSqlParser.GROUPING_ID - 129)) | (1 << (StarRocksSqlParser.HASH - 129)) | (1 << (StarRocksSqlParser.HELP - 129)) | (1 << (StarRocksSqlParser.HISTOGRAM - 129)) | (1 << (StarRocksSqlParser.HLL_UNION - 129)) | (1 << (StarRocksSqlParser.HOST - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (StarRocksSqlParser.HOUR - 161)) | (1 << (StarRocksSqlParser.HUB - 161)) | (1 << (StarRocksSqlParser.IDENTIFIED - 161)) | (1 << (StarRocksSqlParser.IF - 161)) | (1 << (StarRocksSqlParser.IMPERSONATE - 161)) | (1 << (StarRocksSqlParser.IMAGE - 161)) | (1 << (StarRocksSqlParser.INACTIVE - 161)) | (1 << (StarRocksSqlParser.INCREMENTAL - 161)) | (1 << (StarRocksSqlParser.INDEXES - 161)) | (1 << (StarRocksSqlParser.INSTALL - 161)) | (1 << (StarRocksSqlParser.INTERMEDIATE - 161)) | (1 << (StarRocksSqlParser.INTERVAL - 161)) | (1 << (StarRocksSqlParser.OVERWRITE - 161)) | (1 << (StarRocksSqlParser.ISOLATION - 161)) | (1 << (StarRocksSqlParser.JOB - 161)))) !== 0) || ((((_la - 195)) & ~0x1F) === 0 && ((1 << (_la - 195)) & ((1 << (StarRocksSqlParser.LABEL - 195)) | (1 << (StarRocksSqlParser.LAG - 195)) | (1 << (StarRocksSqlParser.LAST - 195)) | (1 << (StarRocksSqlParser.LAST_VALUE - 195)) | (1 << (StarRocksSqlParser.LEAD - 195)) | (1 << (StarRocksSqlParser.LEFT - 195)) | (1 << (StarRocksSqlParser.LESS - 195)) | (1 << (StarRocksSqlParser.LEVEL - 195)) | (1 << (StarRocksSqlParser.LIKE - 195)) | (1 << (StarRocksSqlParser.LIST - 195)) | (1 << (StarRocksSqlParser.LOCAL - 195)) | (1 << (StarRocksSqlParser.LOCALTIME - 195)) | (1 << (StarRocksSqlParser.LOCALTIMESTAMP - 195)) | (1 << (StarRocksSqlParser.LOCATION - 195)) | (1 << (StarRocksSqlParser.LOGICAL - 195)) | (1 << (StarRocksSqlParser.MANUAL - 195)) | (1 << (StarRocksSqlParser.MAP - 195)) | (1 << (StarRocksSqlParser.MATERIALIZED - 195)) | (1 << (StarRocksSqlParser.MAX - 195)) | (1 << (StarRocksSqlParser.MERGE - 195)) | (1 << (StarRocksSqlParser.MIN - 195)) | (1 << (StarRocksSqlParser.MINUTE - 195)) | (1 << (StarRocksSqlParser.MINUS - 195)))) !== 0) || ((((_la - 227)) & ~0x1F) === 0 && ((1 << (_la - 227)) & ((1 << (StarRocksSqlParser.META - 227)) | (1 << (StarRocksSqlParser.MOD - 227)) | (1 << (StarRocksSqlParser.MODE - 227)) | (1 << (StarRocksSqlParser.MODIFY - 227)) | (1 << (StarRocksSqlParser.MONTH - 227)) | (1 << (StarRocksSqlParser.NAME - 227)) | (1 << (StarRocksSqlParser.NAMES - 227)) | (1 << (StarRocksSqlParser.NEGATIVE - 227)) | (1 << (StarRocksSqlParser.NO - 227)) | (1 << (StarRocksSqlParser.NODE - 227)) | (1 << (StarRocksSqlParser.NODES - 227)) | (1 << (StarRocksSqlParser.NONE - 227)) | (1 << (StarRocksSqlParser.NOT - 227)) | (1 << (StarRocksSqlParser.NULL - 227)) | (1 << (StarRocksSqlParser.NULLS - 227)) | (1 << (StarRocksSqlParser.NUMBER - 227)) | (1 << (StarRocksSqlParser.NUMERIC - 227)) | (1 << (StarRocksSqlParser.OBSERVER - 227)) | (1 << (StarRocksSqlParser.OF - 227)) | (1 << (StarRocksSqlParser.OFFSET - 227)) | (1 << (StarRocksSqlParser.ONLY - 227)) | (1 << (StarRocksSqlParser.OPEN - 227)) | (1 << (StarRocksSqlParser.OPERATE - 227)) | (1 << (StarRocksSqlParser.OPTIMIZER - 227)) | (1 << (StarRocksSqlParser.OPTION - 227)))) !== 0) || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (StarRocksSqlParser.PARTITIONS - 259)) | (1 << (StarRocksSqlParser.PASSWORD - 259)) | (1 << (StarRocksSqlParser.PATH - 259)) | (1 << (StarRocksSqlParser.PAUSE - 259)) | (1 << (StarRocksSqlParser.PENDING - 259)) | (1 << (StarRocksSqlParser.PERCENT_RANK - 259)) | (1 << (StarRocksSqlParser.PERCENTILE_UNION - 259)) | (1 << (StarRocksSqlParser.PLUGIN - 259)) | (1 << (StarRocksSqlParser.PLUGINS - 259)) | (1 << (StarRocksSqlParser.PRECEDING - 259)) | (1 << (StarRocksSqlParser.PRIVILEGES - 259)) | (1 << (StarRocksSqlParser.PROC - 259)) | (1 << (StarRocksSqlParser.PROCESSLIST - 259)) | (1 << (StarRocksSqlParser.PROFILE - 259)) | (1 << (StarRocksSqlParser.PROFILELIST - 259)) | (1 << (StarRocksSqlParser.PROPERTIES - 259)) | (1 << (StarRocksSqlParser.PROPERTY - 259)) | (1 << (StarRocksSqlParser.QUALIFY - 259)) | (1 << (StarRocksSqlParser.QUARTER - 259)) | (1 << (StarRocksSqlParser.QUERY - 259)) | (1 << (StarRocksSqlParser.QUEUE - 259)) | (1 << (StarRocksSqlParser.QUOTA - 259)) | (1 << (StarRocksSqlParser.RANDOM - 259)) | (1 << (StarRocksSqlParser.RANK - 259)) | (1 << (StarRocksSqlParser.RECOVER - 259)))) !== 0) || ((((_la - 291)) & ~0x1F) === 0 && ((1 << (_la - 291)) & ((1 << (StarRocksSqlParser.REFRESH - 291)) | (1 << (StarRocksSqlParser.REWRITE - 291)) | (1 << (StarRocksSqlParser.REGEXP - 291)) | (1 << (StarRocksSqlParser.REMOVE - 291)) | (1 << (StarRocksSqlParser.REPAIR - 291)) | (1 << (StarRocksSqlParser.REPEATABLE - 291)) | (1 << (StarRocksSqlParser.REPLACE - 291)) | (1 << (StarRocksSqlParser.REPLACE_IF_NOT_NULL - 291)) | (1 << (StarRocksSqlParser.REPLICA - 291)) | (1 << (StarRocksSqlParser.REPOSITORY - 291)) | (1 << (StarRocksSqlParser.REPOSITORIES - 291)) | (1 << (StarRocksSqlParser.RESOURCE - 291)) | (1 << (StarRocksSqlParser.RESOURCES - 291)) | (1 << (StarRocksSqlParser.RESTORE - 291)) | (1 << (StarRocksSqlParser.RESUME - 291)) | (1 << (StarRocksSqlParser.RETURNS - 291)) | (1 << (StarRocksSqlParser.REVERT - 291)) | (1 << (StarRocksSqlParser.RIGHT - 291)) | (1 << (StarRocksSqlParser.RLIKE - 291)) | (1 << (StarRocksSqlParser.ROLE - 291)) | (1 << (StarRocksSqlParser.ROLES - 291)) | (1 << (StarRocksSqlParser.ROLLBACK - 291)) | (1 << (StarRocksSqlParser.ROLLUP - 291)) | (1 << (StarRocksSqlParser.ROUTINE - 291)) | (1 << (StarRocksSqlParser.ROW - 291)) | (1 << (StarRocksSqlParser.ROW_NUMBER - 291)) | (1 << (StarRocksSqlParser.SAMPLE - 291)) | (1 << (StarRocksSqlParser.SCHEDULER - 291)))) !== 0) || ((((_la - 323)) & ~0x1F) === 0 && ((1 << (_la - 323)) & ((1 << (StarRocksSqlParser.SCHEMA - 323)) | (1 << (StarRocksSqlParser.SECOND - 323)) | (1 << (StarRocksSqlParser.SEMI - 323)) | (1 << (StarRocksSqlParser.SERIALIZABLE - 323)) | (1 << (StarRocksSqlParser.SESSION - 323)) | (1 << (StarRocksSqlParser.SETS - 323)) | (1 << (StarRocksSqlParser.SIGNED - 323)) | (1 << (StarRocksSqlParser.SKIP_HEADER - 323)) | (1 << (StarRocksSqlParser.SNAPSHOT - 323)) | (1 << (StarRocksSqlParser.SQLBLACKLIST - 323)) | (1 << (StarRocksSqlParser.START - 323)) | (1 << (StarRocksSqlParser.STATS - 323)) | (1 << (StarRocksSqlParser.STATUS - 323)) | (1 << (StarRocksSqlParser.STOP - 323)) | (1 << (StarRocksSqlParser.STORAGE - 323)) | (1 << (StarRocksSqlParser.STREAM - 323)) | (1 << (StarRocksSqlParser.STRING - 323)) | (1 << (StarRocksSqlParser.SUBMIT - 323)) | (1 << (StarRocksSqlParser.SUM - 323)) | (1 << (StarRocksSqlParser.SUSPEND - 323)) | (1 << (StarRocksSqlParser.SYNC - 323)) | (1 << (StarRocksSqlParser.SYSTEM_TIME - 323)) | (1 << (StarRocksSqlParser.SWAP - 323)))) !== 0) || ((((_la - 355)) & ~0x1F) === 0 && ((1 << (_la - 355)) & ((1 << (StarRocksSqlParser.STRUCT - 355)) | (1 << (StarRocksSqlParser.TABLES - 355)) | (1 << (StarRocksSqlParser.TABLET - 355)) | (1 << (StarRocksSqlParser.TASK - 355)) | (1 << (StarRocksSqlParser.TEMPORARY - 355)) | (1 << (StarRocksSqlParser.THAN - 355)) | (1 << (StarRocksSqlParser.TIME - 355)) | (1 << (StarRocksSqlParser.TIMESTAMP - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPADD - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPDIFF - 355)) | (1 << (StarRocksSqlParser.TRANSACTION - 355)) | (1 << (StarRocksSqlParser.TRACE - 355)) | (1 << (StarRocksSqlParser.TRIGGERS - 355)) | (1 << (StarRocksSqlParser.TRIM_SPACE - 355)) | (1 << (StarRocksSqlParser.TRUE - 355)) | (1 << (StarRocksSqlParser.TRUNCATE - 355)) | (1 << (StarRocksSqlParser.TYPE - 355)) | (1 << (StarRocksSqlParser.TYPES - 355)) | (1 << (StarRocksSqlParser.UNBOUNDED - 355)) | (1 << (StarRocksSqlParser.UNCOMMITTED - 355)) | (1 << (StarRocksSqlParser.UNINSTALL - 355)) | (1 << (StarRocksSqlParser.USAGE - 355)))) !== 0) || ((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & ((1 << (StarRocksSqlParser.USER - 388)) | (1 << (StarRocksSqlParser.USERS - 388)) | (1 << (StarRocksSqlParser.VALUE - 388)) | (1 << (StarRocksSqlParser.VARIABLES - 388)) | (1 << (StarRocksSqlParser.VERBOSE - 388)) | (1 << (StarRocksSqlParser.VIEW - 388)) | (1 << (StarRocksSqlParser.VIEWS - 388)) | (1 << (StarRocksSqlParser.WAREHOUSE - 388)) | (1 << (StarRocksSqlParser.WAREHOUSES - 388)) | (1 << (StarRocksSqlParser.WARNINGS - 388)) | (1 << (StarRocksSqlParser.WEEK - 388)) | (1 << (StarRocksSqlParser.WHITELIST - 388)) | (1 << (StarRocksSqlParser.WORK - 388)) | (1 << (StarRocksSqlParser.WRITE - 388)) | (1 << (StarRocksSqlParser.YEAR - 388)) | (1 << (StarRocksSqlParser.LOCK - 388)) | (1 << (StarRocksSqlParser.UNLOCK - 388)) | (1 << (StarRocksSqlParser.LOW_PRIORITY - 388)))) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (StarRocksSqlParser.PLUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.MINUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.LOGICAL_NOT - 422)) | (1 << (StarRocksSqlParser.BITNOT - 422)) | (1 << (StarRocksSqlParser.AT - 422)) | (1 << (StarRocksSqlParser.INTEGER_VALUE - 422)) | (1 << (StarRocksSqlParser.DECIMAL_VALUE - 422)) | (1 << (StarRocksSqlParser.DOUBLE_VALUE - 422)) | (1 << (StarRocksSqlParser.SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.LETTER_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.DIGIT_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.BACKQUOTED_IDENTIFIER - 422)))) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & ((1 << (StarRocksSqlParser.LEFT_PAREN - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACKET - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACE - 456)) | (1 << (StarRocksSqlParser.DOTDOTDOT - 456)))) !== 0)) {
					{
					this.state = 6046;
					this.expression(0);
					this.state = 6048;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === StarRocksSqlParser.IGNORE) {
						{
						this.state = 6047;
						this.ignoreNulls();
						}
					}

					this.state = 6054;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === StarRocksSqlParser.COMMA) {
						{
						{
						this.state = 6050;
						this.match(StarRocksSqlParser.COMMA);
						this.state = 6051;
						this.expression(0);
						}
						}
						this.state = 6056;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 6059;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				this.state = 6061;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.IGNORE) {
					{
					this.state = 6060;
					this.ignoreNulls();
					}
				}

				}
				break;
			case StarRocksSqlParser.FIRST_VALUE:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 6063;
				_localctx._name = this.match(StarRocksSqlParser.FIRST_VALUE);
				this.state = 6064;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 6076;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << StarRocksSqlParser.ACTIVE) | (1 << StarRocksSqlParser.ADMIN) | (1 << StarRocksSqlParser.AFTER) | (1 << StarRocksSqlParser.AGGREGATE) | (1 << StarRocksSqlParser.ANTI) | (1 << StarRocksSqlParser.ARRAY) | (1 << StarRocksSqlParser.ARRAY_AGG) | (1 << StarRocksSqlParser.ASYNC) | (1 << StarRocksSqlParser.AUTHORS) | (1 << StarRocksSqlParser.AUTHENTICATION) | (1 << StarRocksSqlParser.AUTO_INCREMENT) | (1 << StarRocksSqlParser.AVG) | (1 << StarRocksSqlParser.BACKEND) | (1 << StarRocksSqlParser.BACKENDS) | (1 << StarRocksSqlParser.BACKUP) | (1 << StarRocksSqlParser.BEGIN))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (StarRocksSqlParser.BITMAP_UNION - 32)) | (1 << (StarRocksSqlParser.BLACKLIST - 32)) | (1 << (StarRocksSqlParser.BOOLEAN - 32)) | (1 << (StarRocksSqlParser.BROKER - 32)) | (1 << (StarRocksSqlParser.BUCKETS - 32)) | (1 << (StarRocksSqlParser.BUILTIN - 32)) | (1 << (StarRocksSqlParser.CANCEL - 32)) | (1 << (StarRocksSqlParser.CASE - 32)) | (1 << (StarRocksSqlParser.CAST - 32)) | (1 << (StarRocksSqlParser.CATALOG - 32)) | (1 << (StarRocksSqlParser.CATALOGS - 32)) | (1 << (StarRocksSqlParser.CEIL - 32)) | (1 << (StarRocksSqlParser.CHAIN - 32)) | (1 << (StarRocksSqlParser.CHAR - 32)) | (1 << (StarRocksSqlParser.CHARSET - 32)) | (1 << (StarRocksSqlParser.CLEAN - 32)) | (1 << (StarRocksSqlParser.CLUSTER - 32)) | (1 << (StarRocksSqlParser.CLUSTERS - 32)) | (1 << (StarRocksSqlParser.COLLATION - 32)) | (1 << (StarRocksSqlParser.COLUMNS - 32)) | (1 << (StarRocksSqlParser.COMMENT - 32)) | (1 << (StarRocksSqlParser.COMMIT - 32)) | (1 << (StarRocksSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (StarRocksSqlParser.COMPUTE - 64)) | (1 << (StarRocksSqlParser.CONFIG - 64)) | (1 << (StarRocksSqlParser.CONNECTION - 64)) | (1 << (StarRocksSqlParser.CONSISTENT - 64)) | (1 << (StarRocksSqlParser.CONVERT - 64)) | (1 << (StarRocksSqlParser.COSTS - 64)) | (1 << (StarRocksSqlParser.COUNT - 64)) | (1 << (StarRocksSqlParser.CUME_DIST - 64)) | (1 << (StarRocksSqlParser.CURRENT - 64)) | (1 << (StarRocksSqlParser.CURRENT_DATE - 64)) | (1 << (StarRocksSqlParser.CURRENT_ROLE - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIME - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (StarRocksSqlParser.CURRENT_USER - 64)) | (1 << (StarRocksSqlParser.DATA - 64)) | (1 << (StarRocksSqlParser.DATABASE - 64)) | (1 << (StarRocksSqlParser.DATE - 64)) | (1 << (StarRocksSqlParser.DATETIME - 64)) | (1 << (StarRocksSqlParser.DAY - 64)) | (1 << (StarRocksSqlParser.DECOMMISSION - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (StarRocksSqlParser.DENSE_RANK - 96)) | (1 << (StarRocksSqlParser.NTILE - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTED - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTION - 96)) | (1 << (StarRocksSqlParser.DUPLICATE - 96)) | (1 << (StarRocksSqlParser.DYNAMIC - 96)) | (1 << (StarRocksSqlParser.ENCLOSE - 96)) | (1 << (StarRocksSqlParser.END - 96)) | (1 << (StarRocksSqlParser.ENGINE - 96)) | (1 << (StarRocksSqlParser.ENGINES - 96)) | (1 << (StarRocksSqlParser.ERRORS - 96)) | (1 << (StarRocksSqlParser.ESCAPE - 96)) | (1 << (StarRocksSqlParser.EVENTS - 96)) | (1 << (StarRocksSqlParser.EXECUTE - 96)) | (1 << (StarRocksSqlParser.EXISTS - 96)) | (1 << (StarRocksSqlParser.EXPORT - 96)) | (1 << (StarRocksSqlParser.EXTERNAL - 96)) | (1 << (StarRocksSqlParser.EXTRACT - 96)) | (1 << (StarRocksSqlParser.EVERY - 96)) | (1 << (StarRocksSqlParser.FALSE - 96)) | (1 << (StarRocksSqlParser.FIELDS - 96)) | (1 << (StarRocksSqlParser.FILE - 96)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (StarRocksSqlParser.FILTER - 129)) | (1 << (StarRocksSqlParser.FIRST - 129)) | (1 << (StarRocksSqlParser.FIRST_VALUE - 129)) | (1 << (StarRocksSqlParser.FLOOR - 129)) | (1 << (StarRocksSqlParser.FN - 129)) | (1 << (StarRocksSqlParser.FOLLOWING - 129)) | (1 << (StarRocksSqlParser.FOLLOWER - 129)) | (1 << (StarRocksSqlParser.FORMAT - 129)) | (1 << (StarRocksSqlParser.FREE - 129)) | (1 << (StarRocksSqlParser.FRONTEND - 129)) | (1 << (StarRocksSqlParser.FRONTENDS - 129)) | (1 << (StarRocksSqlParser.FUNCTIONS - 129)) | (1 << (StarRocksSqlParser.GLOBAL - 129)) | (1 << (StarRocksSqlParser.GRANTS - 129)) | (1 << (StarRocksSqlParser.GROUPING - 129)) | (1 << (StarRocksSqlParser.GROUPING_ID - 129)) | (1 << (StarRocksSqlParser.HASH - 129)) | (1 << (StarRocksSqlParser.HELP - 129)) | (1 << (StarRocksSqlParser.HISTOGRAM - 129)) | (1 << (StarRocksSqlParser.HLL_UNION - 129)) | (1 << (StarRocksSqlParser.HOST - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (StarRocksSqlParser.HOUR - 161)) | (1 << (StarRocksSqlParser.HUB - 161)) | (1 << (StarRocksSqlParser.IDENTIFIED - 161)) | (1 << (StarRocksSqlParser.IF - 161)) | (1 << (StarRocksSqlParser.IMPERSONATE - 161)) | (1 << (StarRocksSqlParser.IMAGE - 161)) | (1 << (StarRocksSqlParser.INACTIVE - 161)) | (1 << (StarRocksSqlParser.INCREMENTAL - 161)) | (1 << (StarRocksSqlParser.INDEXES - 161)) | (1 << (StarRocksSqlParser.INSTALL - 161)) | (1 << (StarRocksSqlParser.INTERMEDIATE - 161)) | (1 << (StarRocksSqlParser.INTERVAL - 161)) | (1 << (StarRocksSqlParser.OVERWRITE - 161)) | (1 << (StarRocksSqlParser.ISOLATION - 161)) | (1 << (StarRocksSqlParser.JOB - 161)))) !== 0) || ((((_la - 195)) & ~0x1F) === 0 && ((1 << (_la - 195)) & ((1 << (StarRocksSqlParser.LABEL - 195)) | (1 << (StarRocksSqlParser.LAG - 195)) | (1 << (StarRocksSqlParser.LAST - 195)) | (1 << (StarRocksSqlParser.LAST_VALUE - 195)) | (1 << (StarRocksSqlParser.LEAD - 195)) | (1 << (StarRocksSqlParser.LEFT - 195)) | (1 << (StarRocksSqlParser.LESS - 195)) | (1 << (StarRocksSqlParser.LEVEL - 195)) | (1 << (StarRocksSqlParser.LIKE - 195)) | (1 << (StarRocksSqlParser.LIST - 195)) | (1 << (StarRocksSqlParser.LOCAL - 195)) | (1 << (StarRocksSqlParser.LOCALTIME - 195)) | (1 << (StarRocksSqlParser.LOCALTIMESTAMP - 195)) | (1 << (StarRocksSqlParser.LOCATION - 195)) | (1 << (StarRocksSqlParser.LOGICAL - 195)) | (1 << (StarRocksSqlParser.MANUAL - 195)) | (1 << (StarRocksSqlParser.MAP - 195)) | (1 << (StarRocksSqlParser.MATERIALIZED - 195)) | (1 << (StarRocksSqlParser.MAX - 195)) | (1 << (StarRocksSqlParser.MERGE - 195)) | (1 << (StarRocksSqlParser.MIN - 195)) | (1 << (StarRocksSqlParser.MINUTE - 195)) | (1 << (StarRocksSqlParser.MINUS - 195)))) !== 0) || ((((_la - 227)) & ~0x1F) === 0 && ((1 << (_la - 227)) & ((1 << (StarRocksSqlParser.META - 227)) | (1 << (StarRocksSqlParser.MOD - 227)) | (1 << (StarRocksSqlParser.MODE - 227)) | (1 << (StarRocksSqlParser.MODIFY - 227)) | (1 << (StarRocksSqlParser.MONTH - 227)) | (1 << (StarRocksSqlParser.NAME - 227)) | (1 << (StarRocksSqlParser.NAMES - 227)) | (1 << (StarRocksSqlParser.NEGATIVE - 227)) | (1 << (StarRocksSqlParser.NO - 227)) | (1 << (StarRocksSqlParser.NODE - 227)) | (1 << (StarRocksSqlParser.NODES - 227)) | (1 << (StarRocksSqlParser.NONE - 227)) | (1 << (StarRocksSqlParser.NOT - 227)) | (1 << (StarRocksSqlParser.NULL - 227)) | (1 << (StarRocksSqlParser.NULLS - 227)) | (1 << (StarRocksSqlParser.NUMBER - 227)) | (1 << (StarRocksSqlParser.NUMERIC - 227)) | (1 << (StarRocksSqlParser.OBSERVER - 227)) | (1 << (StarRocksSqlParser.OF - 227)) | (1 << (StarRocksSqlParser.OFFSET - 227)) | (1 << (StarRocksSqlParser.ONLY - 227)) | (1 << (StarRocksSqlParser.OPEN - 227)) | (1 << (StarRocksSqlParser.OPERATE - 227)) | (1 << (StarRocksSqlParser.OPTIMIZER - 227)) | (1 << (StarRocksSqlParser.OPTION - 227)))) !== 0) || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (StarRocksSqlParser.PARTITIONS - 259)) | (1 << (StarRocksSqlParser.PASSWORD - 259)) | (1 << (StarRocksSqlParser.PATH - 259)) | (1 << (StarRocksSqlParser.PAUSE - 259)) | (1 << (StarRocksSqlParser.PENDING - 259)) | (1 << (StarRocksSqlParser.PERCENT_RANK - 259)) | (1 << (StarRocksSqlParser.PERCENTILE_UNION - 259)) | (1 << (StarRocksSqlParser.PLUGIN - 259)) | (1 << (StarRocksSqlParser.PLUGINS - 259)) | (1 << (StarRocksSqlParser.PRECEDING - 259)) | (1 << (StarRocksSqlParser.PRIVILEGES - 259)) | (1 << (StarRocksSqlParser.PROC - 259)) | (1 << (StarRocksSqlParser.PROCESSLIST - 259)) | (1 << (StarRocksSqlParser.PROFILE - 259)) | (1 << (StarRocksSqlParser.PROFILELIST - 259)) | (1 << (StarRocksSqlParser.PROPERTIES - 259)) | (1 << (StarRocksSqlParser.PROPERTY - 259)) | (1 << (StarRocksSqlParser.QUALIFY - 259)) | (1 << (StarRocksSqlParser.QUARTER - 259)) | (1 << (StarRocksSqlParser.QUERY - 259)) | (1 << (StarRocksSqlParser.QUEUE - 259)) | (1 << (StarRocksSqlParser.QUOTA - 259)) | (1 << (StarRocksSqlParser.RANDOM - 259)) | (1 << (StarRocksSqlParser.RANK - 259)) | (1 << (StarRocksSqlParser.RECOVER - 259)))) !== 0) || ((((_la - 291)) & ~0x1F) === 0 && ((1 << (_la - 291)) & ((1 << (StarRocksSqlParser.REFRESH - 291)) | (1 << (StarRocksSqlParser.REWRITE - 291)) | (1 << (StarRocksSqlParser.REGEXP - 291)) | (1 << (StarRocksSqlParser.REMOVE - 291)) | (1 << (StarRocksSqlParser.REPAIR - 291)) | (1 << (StarRocksSqlParser.REPEATABLE - 291)) | (1 << (StarRocksSqlParser.REPLACE - 291)) | (1 << (StarRocksSqlParser.REPLACE_IF_NOT_NULL - 291)) | (1 << (StarRocksSqlParser.REPLICA - 291)) | (1 << (StarRocksSqlParser.REPOSITORY - 291)) | (1 << (StarRocksSqlParser.REPOSITORIES - 291)) | (1 << (StarRocksSqlParser.RESOURCE - 291)) | (1 << (StarRocksSqlParser.RESOURCES - 291)) | (1 << (StarRocksSqlParser.RESTORE - 291)) | (1 << (StarRocksSqlParser.RESUME - 291)) | (1 << (StarRocksSqlParser.RETURNS - 291)) | (1 << (StarRocksSqlParser.REVERT - 291)) | (1 << (StarRocksSqlParser.RIGHT - 291)) | (1 << (StarRocksSqlParser.RLIKE - 291)) | (1 << (StarRocksSqlParser.ROLE - 291)) | (1 << (StarRocksSqlParser.ROLES - 291)) | (1 << (StarRocksSqlParser.ROLLBACK - 291)) | (1 << (StarRocksSqlParser.ROLLUP - 291)) | (1 << (StarRocksSqlParser.ROUTINE - 291)) | (1 << (StarRocksSqlParser.ROW - 291)) | (1 << (StarRocksSqlParser.ROW_NUMBER - 291)) | (1 << (StarRocksSqlParser.SAMPLE - 291)) | (1 << (StarRocksSqlParser.SCHEDULER - 291)))) !== 0) || ((((_la - 323)) & ~0x1F) === 0 && ((1 << (_la - 323)) & ((1 << (StarRocksSqlParser.SCHEMA - 323)) | (1 << (StarRocksSqlParser.SECOND - 323)) | (1 << (StarRocksSqlParser.SEMI - 323)) | (1 << (StarRocksSqlParser.SERIALIZABLE - 323)) | (1 << (StarRocksSqlParser.SESSION - 323)) | (1 << (StarRocksSqlParser.SETS - 323)) | (1 << (StarRocksSqlParser.SIGNED - 323)) | (1 << (StarRocksSqlParser.SKIP_HEADER - 323)) | (1 << (StarRocksSqlParser.SNAPSHOT - 323)) | (1 << (StarRocksSqlParser.SQLBLACKLIST - 323)) | (1 << (StarRocksSqlParser.START - 323)) | (1 << (StarRocksSqlParser.STATS - 323)) | (1 << (StarRocksSqlParser.STATUS - 323)) | (1 << (StarRocksSqlParser.STOP - 323)) | (1 << (StarRocksSqlParser.STORAGE - 323)) | (1 << (StarRocksSqlParser.STREAM - 323)) | (1 << (StarRocksSqlParser.STRING - 323)) | (1 << (StarRocksSqlParser.SUBMIT - 323)) | (1 << (StarRocksSqlParser.SUM - 323)) | (1 << (StarRocksSqlParser.SUSPEND - 323)) | (1 << (StarRocksSqlParser.SYNC - 323)) | (1 << (StarRocksSqlParser.SYSTEM_TIME - 323)) | (1 << (StarRocksSqlParser.SWAP - 323)))) !== 0) || ((((_la - 355)) & ~0x1F) === 0 && ((1 << (_la - 355)) & ((1 << (StarRocksSqlParser.STRUCT - 355)) | (1 << (StarRocksSqlParser.TABLES - 355)) | (1 << (StarRocksSqlParser.TABLET - 355)) | (1 << (StarRocksSqlParser.TASK - 355)) | (1 << (StarRocksSqlParser.TEMPORARY - 355)) | (1 << (StarRocksSqlParser.THAN - 355)) | (1 << (StarRocksSqlParser.TIME - 355)) | (1 << (StarRocksSqlParser.TIMESTAMP - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPADD - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPDIFF - 355)) | (1 << (StarRocksSqlParser.TRANSACTION - 355)) | (1 << (StarRocksSqlParser.TRACE - 355)) | (1 << (StarRocksSqlParser.TRIGGERS - 355)) | (1 << (StarRocksSqlParser.TRIM_SPACE - 355)) | (1 << (StarRocksSqlParser.TRUE - 355)) | (1 << (StarRocksSqlParser.TRUNCATE - 355)) | (1 << (StarRocksSqlParser.TYPE - 355)) | (1 << (StarRocksSqlParser.TYPES - 355)) | (1 << (StarRocksSqlParser.UNBOUNDED - 355)) | (1 << (StarRocksSqlParser.UNCOMMITTED - 355)) | (1 << (StarRocksSqlParser.UNINSTALL - 355)) | (1 << (StarRocksSqlParser.USAGE - 355)))) !== 0) || ((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & ((1 << (StarRocksSqlParser.USER - 388)) | (1 << (StarRocksSqlParser.USERS - 388)) | (1 << (StarRocksSqlParser.VALUE - 388)) | (1 << (StarRocksSqlParser.VARIABLES - 388)) | (1 << (StarRocksSqlParser.VERBOSE - 388)) | (1 << (StarRocksSqlParser.VIEW - 388)) | (1 << (StarRocksSqlParser.VIEWS - 388)) | (1 << (StarRocksSqlParser.WAREHOUSE - 388)) | (1 << (StarRocksSqlParser.WAREHOUSES - 388)) | (1 << (StarRocksSqlParser.WARNINGS - 388)) | (1 << (StarRocksSqlParser.WEEK - 388)) | (1 << (StarRocksSqlParser.WHITELIST - 388)) | (1 << (StarRocksSqlParser.WORK - 388)) | (1 << (StarRocksSqlParser.WRITE - 388)) | (1 << (StarRocksSqlParser.YEAR - 388)) | (1 << (StarRocksSqlParser.LOCK - 388)) | (1 << (StarRocksSqlParser.UNLOCK - 388)) | (1 << (StarRocksSqlParser.LOW_PRIORITY - 388)))) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (StarRocksSqlParser.PLUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.MINUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.LOGICAL_NOT - 422)) | (1 << (StarRocksSqlParser.BITNOT - 422)) | (1 << (StarRocksSqlParser.AT - 422)) | (1 << (StarRocksSqlParser.INTEGER_VALUE - 422)) | (1 << (StarRocksSqlParser.DECIMAL_VALUE - 422)) | (1 << (StarRocksSqlParser.DOUBLE_VALUE - 422)) | (1 << (StarRocksSqlParser.SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.LETTER_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.DIGIT_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.BACKQUOTED_IDENTIFIER - 422)))) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & ((1 << (StarRocksSqlParser.LEFT_PAREN - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACKET - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACE - 456)) | (1 << (StarRocksSqlParser.DOTDOTDOT - 456)))) !== 0)) {
					{
					this.state = 6065;
					this.expression(0);
					this.state = 6067;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === StarRocksSqlParser.IGNORE) {
						{
						this.state = 6066;
						this.ignoreNulls();
						}
					}

					this.state = 6073;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === StarRocksSqlParser.COMMA) {
						{
						{
						this.state = 6069;
						this.match(StarRocksSqlParser.COMMA);
						this.state = 6070;
						this.expression(0);
						}
						}
						this.state = 6075;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 6078;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				this.state = 6080;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.IGNORE) {
					{
					this.state = 6079;
					this.ignoreNulls();
					}
				}

				}
				break;
			case StarRocksSqlParser.LAST_VALUE:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 6082;
				_localctx._name = this.match(StarRocksSqlParser.LAST_VALUE);
				this.state = 6083;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 6095;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << StarRocksSqlParser.ACTIVE) | (1 << StarRocksSqlParser.ADMIN) | (1 << StarRocksSqlParser.AFTER) | (1 << StarRocksSqlParser.AGGREGATE) | (1 << StarRocksSqlParser.ANTI) | (1 << StarRocksSqlParser.ARRAY) | (1 << StarRocksSqlParser.ARRAY_AGG) | (1 << StarRocksSqlParser.ASYNC) | (1 << StarRocksSqlParser.AUTHORS) | (1 << StarRocksSqlParser.AUTHENTICATION) | (1 << StarRocksSqlParser.AUTO_INCREMENT) | (1 << StarRocksSqlParser.AVG) | (1 << StarRocksSqlParser.BACKEND) | (1 << StarRocksSqlParser.BACKENDS) | (1 << StarRocksSqlParser.BACKUP) | (1 << StarRocksSqlParser.BEGIN))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (StarRocksSqlParser.BITMAP_UNION - 32)) | (1 << (StarRocksSqlParser.BLACKLIST - 32)) | (1 << (StarRocksSqlParser.BOOLEAN - 32)) | (1 << (StarRocksSqlParser.BROKER - 32)) | (1 << (StarRocksSqlParser.BUCKETS - 32)) | (1 << (StarRocksSqlParser.BUILTIN - 32)) | (1 << (StarRocksSqlParser.CANCEL - 32)) | (1 << (StarRocksSqlParser.CASE - 32)) | (1 << (StarRocksSqlParser.CAST - 32)) | (1 << (StarRocksSqlParser.CATALOG - 32)) | (1 << (StarRocksSqlParser.CATALOGS - 32)) | (1 << (StarRocksSqlParser.CEIL - 32)) | (1 << (StarRocksSqlParser.CHAIN - 32)) | (1 << (StarRocksSqlParser.CHAR - 32)) | (1 << (StarRocksSqlParser.CHARSET - 32)) | (1 << (StarRocksSqlParser.CLEAN - 32)) | (1 << (StarRocksSqlParser.CLUSTER - 32)) | (1 << (StarRocksSqlParser.CLUSTERS - 32)) | (1 << (StarRocksSqlParser.COLLATION - 32)) | (1 << (StarRocksSqlParser.COLUMNS - 32)) | (1 << (StarRocksSqlParser.COMMENT - 32)) | (1 << (StarRocksSqlParser.COMMIT - 32)) | (1 << (StarRocksSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (StarRocksSqlParser.COMPUTE - 64)) | (1 << (StarRocksSqlParser.CONFIG - 64)) | (1 << (StarRocksSqlParser.CONNECTION - 64)) | (1 << (StarRocksSqlParser.CONSISTENT - 64)) | (1 << (StarRocksSqlParser.CONVERT - 64)) | (1 << (StarRocksSqlParser.COSTS - 64)) | (1 << (StarRocksSqlParser.COUNT - 64)) | (1 << (StarRocksSqlParser.CUME_DIST - 64)) | (1 << (StarRocksSqlParser.CURRENT - 64)) | (1 << (StarRocksSqlParser.CURRENT_DATE - 64)) | (1 << (StarRocksSqlParser.CURRENT_ROLE - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIME - 64)) | (1 << (StarRocksSqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (StarRocksSqlParser.CURRENT_USER - 64)) | (1 << (StarRocksSqlParser.DATA - 64)) | (1 << (StarRocksSqlParser.DATABASE - 64)) | (1 << (StarRocksSqlParser.DATE - 64)) | (1 << (StarRocksSqlParser.DATETIME - 64)) | (1 << (StarRocksSqlParser.DAY - 64)) | (1 << (StarRocksSqlParser.DECOMMISSION - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (StarRocksSqlParser.DENSE_RANK - 96)) | (1 << (StarRocksSqlParser.NTILE - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTED - 96)) | (1 << (StarRocksSqlParser.DISTRIBUTION - 96)) | (1 << (StarRocksSqlParser.DUPLICATE - 96)) | (1 << (StarRocksSqlParser.DYNAMIC - 96)) | (1 << (StarRocksSqlParser.ENCLOSE - 96)) | (1 << (StarRocksSqlParser.END - 96)) | (1 << (StarRocksSqlParser.ENGINE - 96)) | (1 << (StarRocksSqlParser.ENGINES - 96)) | (1 << (StarRocksSqlParser.ERRORS - 96)) | (1 << (StarRocksSqlParser.ESCAPE - 96)) | (1 << (StarRocksSqlParser.EVENTS - 96)) | (1 << (StarRocksSqlParser.EXECUTE - 96)) | (1 << (StarRocksSqlParser.EXISTS - 96)) | (1 << (StarRocksSqlParser.EXPORT - 96)) | (1 << (StarRocksSqlParser.EXTERNAL - 96)) | (1 << (StarRocksSqlParser.EXTRACT - 96)) | (1 << (StarRocksSqlParser.EVERY - 96)) | (1 << (StarRocksSqlParser.FALSE - 96)) | (1 << (StarRocksSqlParser.FIELDS - 96)) | (1 << (StarRocksSqlParser.FILE - 96)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (StarRocksSqlParser.FILTER - 129)) | (1 << (StarRocksSqlParser.FIRST - 129)) | (1 << (StarRocksSqlParser.FIRST_VALUE - 129)) | (1 << (StarRocksSqlParser.FLOOR - 129)) | (1 << (StarRocksSqlParser.FN - 129)) | (1 << (StarRocksSqlParser.FOLLOWING - 129)) | (1 << (StarRocksSqlParser.FOLLOWER - 129)) | (1 << (StarRocksSqlParser.FORMAT - 129)) | (1 << (StarRocksSqlParser.FREE - 129)) | (1 << (StarRocksSqlParser.FRONTEND - 129)) | (1 << (StarRocksSqlParser.FRONTENDS - 129)) | (1 << (StarRocksSqlParser.FUNCTIONS - 129)) | (1 << (StarRocksSqlParser.GLOBAL - 129)) | (1 << (StarRocksSqlParser.GRANTS - 129)) | (1 << (StarRocksSqlParser.GROUPING - 129)) | (1 << (StarRocksSqlParser.GROUPING_ID - 129)) | (1 << (StarRocksSqlParser.HASH - 129)) | (1 << (StarRocksSqlParser.HELP - 129)) | (1 << (StarRocksSqlParser.HISTOGRAM - 129)) | (1 << (StarRocksSqlParser.HLL_UNION - 129)) | (1 << (StarRocksSqlParser.HOST - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (StarRocksSqlParser.HOUR - 161)) | (1 << (StarRocksSqlParser.HUB - 161)) | (1 << (StarRocksSqlParser.IDENTIFIED - 161)) | (1 << (StarRocksSqlParser.IF - 161)) | (1 << (StarRocksSqlParser.IMPERSONATE - 161)) | (1 << (StarRocksSqlParser.IMAGE - 161)) | (1 << (StarRocksSqlParser.INACTIVE - 161)) | (1 << (StarRocksSqlParser.INCREMENTAL - 161)) | (1 << (StarRocksSqlParser.INDEXES - 161)) | (1 << (StarRocksSqlParser.INSTALL - 161)) | (1 << (StarRocksSqlParser.INTERMEDIATE - 161)) | (1 << (StarRocksSqlParser.INTERVAL - 161)) | (1 << (StarRocksSqlParser.OVERWRITE - 161)) | (1 << (StarRocksSqlParser.ISOLATION - 161)) | (1 << (StarRocksSqlParser.JOB - 161)))) !== 0) || ((((_la - 195)) & ~0x1F) === 0 && ((1 << (_la - 195)) & ((1 << (StarRocksSqlParser.LABEL - 195)) | (1 << (StarRocksSqlParser.LAG - 195)) | (1 << (StarRocksSqlParser.LAST - 195)) | (1 << (StarRocksSqlParser.LAST_VALUE - 195)) | (1 << (StarRocksSqlParser.LEAD - 195)) | (1 << (StarRocksSqlParser.LEFT - 195)) | (1 << (StarRocksSqlParser.LESS - 195)) | (1 << (StarRocksSqlParser.LEVEL - 195)) | (1 << (StarRocksSqlParser.LIKE - 195)) | (1 << (StarRocksSqlParser.LIST - 195)) | (1 << (StarRocksSqlParser.LOCAL - 195)) | (1 << (StarRocksSqlParser.LOCALTIME - 195)) | (1 << (StarRocksSqlParser.LOCALTIMESTAMP - 195)) | (1 << (StarRocksSqlParser.LOCATION - 195)) | (1 << (StarRocksSqlParser.LOGICAL - 195)) | (1 << (StarRocksSqlParser.MANUAL - 195)) | (1 << (StarRocksSqlParser.MAP - 195)) | (1 << (StarRocksSqlParser.MATERIALIZED - 195)) | (1 << (StarRocksSqlParser.MAX - 195)) | (1 << (StarRocksSqlParser.MERGE - 195)) | (1 << (StarRocksSqlParser.MIN - 195)) | (1 << (StarRocksSqlParser.MINUTE - 195)) | (1 << (StarRocksSqlParser.MINUS - 195)))) !== 0) || ((((_la - 227)) & ~0x1F) === 0 && ((1 << (_la - 227)) & ((1 << (StarRocksSqlParser.META - 227)) | (1 << (StarRocksSqlParser.MOD - 227)) | (1 << (StarRocksSqlParser.MODE - 227)) | (1 << (StarRocksSqlParser.MODIFY - 227)) | (1 << (StarRocksSqlParser.MONTH - 227)) | (1 << (StarRocksSqlParser.NAME - 227)) | (1 << (StarRocksSqlParser.NAMES - 227)) | (1 << (StarRocksSqlParser.NEGATIVE - 227)) | (1 << (StarRocksSqlParser.NO - 227)) | (1 << (StarRocksSqlParser.NODE - 227)) | (1 << (StarRocksSqlParser.NODES - 227)) | (1 << (StarRocksSqlParser.NONE - 227)) | (1 << (StarRocksSqlParser.NOT - 227)) | (1 << (StarRocksSqlParser.NULL - 227)) | (1 << (StarRocksSqlParser.NULLS - 227)) | (1 << (StarRocksSqlParser.NUMBER - 227)) | (1 << (StarRocksSqlParser.NUMERIC - 227)) | (1 << (StarRocksSqlParser.OBSERVER - 227)) | (1 << (StarRocksSqlParser.OF - 227)) | (1 << (StarRocksSqlParser.OFFSET - 227)) | (1 << (StarRocksSqlParser.ONLY - 227)) | (1 << (StarRocksSqlParser.OPEN - 227)) | (1 << (StarRocksSqlParser.OPERATE - 227)) | (1 << (StarRocksSqlParser.OPTIMIZER - 227)) | (1 << (StarRocksSqlParser.OPTION - 227)))) !== 0) || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & ((1 << (StarRocksSqlParser.PARTITIONS - 259)) | (1 << (StarRocksSqlParser.PASSWORD - 259)) | (1 << (StarRocksSqlParser.PATH - 259)) | (1 << (StarRocksSqlParser.PAUSE - 259)) | (1 << (StarRocksSqlParser.PENDING - 259)) | (1 << (StarRocksSqlParser.PERCENT_RANK - 259)) | (1 << (StarRocksSqlParser.PERCENTILE_UNION - 259)) | (1 << (StarRocksSqlParser.PLUGIN - 259)) | (1 << (StarRocksSqlParser.PLUGINS - 259)) | (1 << (StarRocksSqlParser.PRECEDING - 259)) | (1 << (StarRocksSqlParser.PRIVILEGES - 259)) | (1 << (StarRocksSqlParser.PROC - 259)) | (1 << (StarRocksSqlParser.PROCESSLIST - 259)) | (1 << (StarRocksSqlParser.PROFILE - 259)) | (1 << (StarRocksSqlParser.PROFILELIST - 259)) | (1 << (StarRocksSqlParser.PROPERTIES - 259)) | (1 << (StarRocksSqlParser.PROPERTY - 259)) | (1 << (StarRocksSqlParser.QUALIFY - 259)) | (1 << (StarRocksSqlParser.QUARTER - 259)) | (1 << (StarRocksSqlParser.QUERY - 259)) | (1 << (StarRocksSqlParser.QUEUE - 259)) | (1 << (StarRocksSqlParser.QUOTA - 259)) | (1 << (StarRocksSqlParser.RANDOM - 259)) | (1 << (StarRocksSqlParser.RANK - 259)) | (1 << (StarRocksSqlParser.RECOVER - 259)))) !== 0) || ((((_la - 291)) & ~0x1F) === 0 && ((1 << (_la - 291)) & ((1 << (StarRocksSqlParser.REFRESH - 291)) | (1 << (StarRocksSqlParser.REWRITE - 291)) | (1 << (StarRocksSqlParser.REGEXP - 291)) | (1 << (StarRocksSqlParser.REMOVE - 291)) | (1 << (StarRocksSqlParser.REPAIR - 291)) | (1 << (StarRocksSqlParser.REPEATABLE - 291)) | (1 << (StarRocksSqlParser.REPLACE - 291)) | (1 << (StarRocksSqlParser.REPLACE_IF_NOT_NULL - 291)) | (1 << (StarRocksSqlParser.REPLICA - 291)) | (1 << (StarRocksSqlParser.REPOSITORY - 291)) | (1 << (StarRocksSqlParser.REPOSITORIES - 291)) | (1 << (StarRocksSqlParser.RESOURCE - 291)) | (1 << (StarRocksSqlParser.RESOURCES - 291)) | (1 << (StarRocksSqlParser.RESTORE - 291)) | (1 << (StarRocksSqlParser.RESUME - 291)) | (1 << (StarRocksSqlParser.RETURNS - 291)) | (1 << (StarRocksSqlParser.REVERT - 291)) | (1 << (StarRocksSqlParser.RIGHT - 291)) | (1 << (StarRocksSqlParser.RLIKE - 291)) | (1 << (StarRocksSqlParser.ROLE - 291)) | (1 << (StarRocksSqlParser.ROLES - 291)) | (1 << (StarRocksSqlParser.ROLLBACK - 291)) | (1 << (StarRocksSqlParser.ROLLUP - 291)) | (1 << (StarRocksSqlParser.ROUTINE - 291)) | (1 << (StarRocksSqlParser.ROW - 291)) | (1 << (StarRocksSqlParser.ROW_NUMBER - 291)) | (1 << (StarRocksSqlParser.SAMPLE - 291)) | (1 << (StarRocksSqlParser.SCHEDULER - 291)))) !== 0) || ((((_la - 323)) & ~0x1F) === 0 && ((1 << (_la - 323)) & ((1 << (StarRocksSqlParser.SCHEMA - 323)) | (1 << (StarRocksSqlParser.SECOND - 323)) | (1 << (StarRocksSqlParser.SEMI - 323)) | (1 << (StarRocksSqlParser.SERIALIZABLE - 323)) | (1 << (StarRocksSqlParser.SESSION - 323)) | (1 << (StarRocksSqlParser.SETS - 323)) | (1 << (StarRocksSqlParser.SIGNED - 323)) | (1 << (StarRocksSqlParser.SKIP_HEADER - 323)) | (1 << (StarRocksSqlParser.SNAPSHOT - 323)) | (1 << (StarRocksSqlParser.SQLBLACKLIST - 323)) | (1 << (StarRocksSqlParser.START - 323)) | (1 << (StarRocksSqlParser.STATS - 323)) | (1 << (StarRocksSqlParser.STATUS - 323)) | (1 << (StarRocksSqlParser.STOP - 323)) | (1 << (StarRocksSqlParser.STORAGE - 323)) | (1 << (StarRocksSqlParser.STREAM - 323)) | (1 << (StarRocksSqlParser.STRING - 323)) | (1 << (StarRocksSqlParser.SUBMIT - 323)) | (1 << (StarRocksSqlParser.SUM - 323)) | (1 << (StarRocksSqlParser.SUSPEND - 323)) | (1 << (StarRocksSqlParser.SYNC - 323)) | (1 << (StarRocksSqlParser.SYSTEM_TIME - 323)) | (1 << (StarRocksSqlParser.SWAP - 323)))) !== 0) || ((((_la - 355)) & ~0x1F) === 0 && ((1 << (_la - 355)) & ((1 << (StarRocksSqlParser.STRUCT - 355)) | (1 << (StarRocksSqlParser.TABLES - 355)) | (1 << (StarRocksSqlParser.TABLET - 355)) | (1 << (StarRocksSqlParser.TASK - 355)) | (1 << (StarRocksSqlParser.TEMPORARY - 355)) | (1 << (StarRocksSqlParser.THAN - 355)) | (1 << (StarRocksSqlParser.TIME - 355)) | (1 << (StarRocksSqlParser.TIMESTAMP - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPADD - 355)) | (1 << (StarRocksSqlParser.TIMESTAMPDIFF - 355)) | (1 << (StarRocksSqlParser.TRANSACTION - 355)) | (1 << (StarRocksSqlParser.TRACE - 355)) | (1 << (StarRocksSqlParser.TRIGGERS - 355)) | (1 << (StarRocksSqlParser.TRIM_SPACE - 355)) | (1 << (StarRocksSqlParser.TRUE - 355)) | (1 << (StarRocksSqlParser.TRUNCATE - 355)) | (1 << (StarRocksSqlParser.TYPE - 355)) | (1 << (StarRocksSqlParser.TYPES - 355)) | (1 << (StarRocksSqlParser.UNBOUNDED - 355)) | (1 << (StarRocksSqlParser.UNCOMMITTED - 355)) | (1 << (StarRocksSqlParser.UNINSTALL - 355)) | (1 << (StarRocksSqlParser.USAGE - 355)))) !== 0) || ((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & ((1 << (StarRocksSqlParser.USER - 388)) | (1 << (StarRocksSqlParser.USERS - 388)) | (1 << (StarRocksSqlParser.VALUE - 388)) | (1 << (StarRocksSqlParser.VARIABLES - 388)) | (1 << (StarRocksSqlParser.VERBOSE - 388)) | (1 << (StarRocksSqlParser.VIEW - 388)) | (1 << (StarRocksSqlParser.VIEWS - 388)) | (1 << (StarRocksSqlParser.WAREHOUSE - 388)) | (1 << (StarRocksSqlParser.WAREHOUSES - 388)) | (1 << (StarRocksSqlParser.WARNINGS - 388)) | (1 << (StarRocksSqlParser.WEEK - 388)) | (1 << (StarRocksSqlParser.WHITELIST - 388)) | (1 << (StarRocksSqlParser.WORK - 388)) | (1 << (StarRocksSqlParser.WRITE - 388)) | (1 << (StarRocksSqlParser.YEAR - 388)) | (1 << (StarRocksSqlParser.LOCK - 388)) | (1 << (StarRocksSqlParser.UNLOCK - 388)) | (1 << (StarRocksSqlParser.LOW_PRIORITY - 388)))) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (StarRocksSqlParser.PLUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.MINUS_SYMBOL - 422)) | (1 << (StarRocksSqlParser.LOGICAL_NOT - 422)) | (1 << (StarRocksSqlParser.BITNOT - 422)) | (1 << (StarRocksSqlParser.AT - 422)) | (1 << (StarRocksSqlParser.INTEGER_VALUE - 422)) | (1 << (StarRocksSqlParser.DECIMAL_VALUE - 422)) | (1 << (StarRocksSqlParser.DOUBLE_VALUE - 422)) | (1 << (StarRocksSqlParser.SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_SINGLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.BINARY_DOUBLE_QUOTED_TEXT - 422)) | (1 << (StarRocksSqlParser.LETTER_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.DIGIT_IDENTIFIER - 422)) | (1 << (StarRocksSqlParser.BACKQUOTED_IDENTIFIER - 422)))) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & ((1 << (StarRocksSqlParser.LEFT_PAREN - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACKET - 456)) | (1 << (StarRocksSqlParser.LEFT_BRACE - 456)) | (1 << (StarRocksSqlParser.DOTDOTDOT - 456)))) !== 0)) {
					{
					this.state = 6084;
					this.expression(0);
					this.state = 6086;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === StarRocksSqlParser.IGNORE) {
						{
						this.state = 6085;
						this.ignoreNulls();
						}
					}

					this.state = 6092;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === StarRocksSqlParser.COMMA) {
						{
						{
						this.state = 6088;
						this.match(StarRocksSqlParser.COMMA);
						this.state = 6089;
						this.expression(0);
						}
						}
						this.state = 6094;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 6097;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				this.state = 6099;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.IGNORE) {
					{
					this.state = 6098;
					this.ignoreNulls();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public whenClause(): WhenClauseContext {
		let _localctx: WhenClauseContext = new WhenClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 712, StarRocksSqlParser.RULE_whenClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6103;
			this.match(StarRocksSqlParser.WHEN);
			this.state = 6104;
			_localctx._condition = this.expression(0);
			this.state = 6105;
			this.match(StarRocksSqlParser.THEN);
			this.state = 6106;
			_localctx._result = this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public over(): OverContext {
		let _localctx: OverContext = new OverContext(this._ctx, this.state);
		this.enterRule(_localctx, 714, StarRocksSqlParser.RULE_over);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6108;
			this.match(StarRocksSqlParser.OVER);
			this.state = 6109;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 6123;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PARTITION || _la === StarRocksSqlParser.LEFT_BRACKET) {
				{
				this.state = 6111;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.LEFT_BRACKET) {
					{
					this.state = 6110;
					this.bracketHint();
					}
				}

				this.state = 6113;
				this.match(StarRocksSqlParser.PARTITION);
				this.state = 6114;
				this.match(StarRocksSqlParser.BY);
				this.state = 6115;
				_localctx._expression = this.expression(0);
				_localctx._partition.push(_localctx._expression);
				this.state = 6120;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 6116;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 6117;
					_localctx._expression = this.expression(0);
					_localctx._partition.push(_localctx._expression);
					}
					}
					this.state = 6122;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 6135;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.ORDER) {
				{
				this.state = 6125;
				this.match(StarRocksSqlParser.ORDER);
				this.state = 6126;
				this.match(StarRocksSqlParser.BY);
				this.state = 6127;
				this.sortItem();
				this.state = 6132;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === StarRocksSqlParser.COMMA) {
					{
					{
					this.state = 6128;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 6129;
					this.sortItem();
					}
					}
					this.state = 6134;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 6137;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ignoreNulls(): IgnoreNullsContext {
		let _localctx: IgnoreNullsContext = new IgnoreNullsContext(this._ctx, this.state);
		this.enterRule(_localctx, 716, StarRocksSqlParser.RULE_ignoreNulls);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6139;
			this.match(StarRocksSqlParser.IGNORE);
			this.state = 6140;
			this.match(StarRocksSqlParser.NULLS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableDesc(): TableDescContext {
		let _localctx: TableDescContext = new TableDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 718, StarRocksSqlParser.RULE_tableDesc);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6142;
			this.qualifiedName();
			this.state = 6144;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PARTITION || _la === StarRocksSqlParser.PARTITIONS || _la === StarRocksSqlParser.TEMPORARY) {
				{
				this.state = 6143;
				this.partitionNames();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public restoreTableDesc(): RestoreTableDescContext {
		let _localctx: RestoreTableDescContext = new RestoreTableDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 720, StarRocksSqlParser.RULE_restoreTableDesc);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6146;
			this.qualifiedName();
			this.state = 6148;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PARTITION || _la === StarRocksSqlParser.PARTITIONS || _la === StarRocksSqlParser.TEMPORARY) {
				{
				this.state = 6147;
				this.partitionNames();
				}
			}

			this.state = 6152;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.AS) {
				{
				this.state = 6150;
				this.match(StarRocksSqlParser.AS);
				this.state = 6151;
				this.identifier();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public explainDesc(): ExplainDescContext {
		let _localctx: ExplainDescContext = new ExplainDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 722, StarRocksSqlParser.RULE_explainDesc);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6154;
			_la = this._input.LA(1);
			if (!(((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & ((1 << (StarRocksSqlParser.DESC - 99)) | (1 << (StarRocksSqlParser.DESCRIBE - 99)) | (1 << (StarRocksSqlParser.EXPLAIN - 99)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 6156;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.ANALYZE || _la === StarRocksSqlParser.COSTS || _la === StarRocksSqlParser.LOGICAL || _la === StarRocksSqlParser.VERBOSE) {
				{
				this.state = 6155;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.ANALYZE || _la === StarRocksSqlParser.COSTS || _la === StarRocksSqlParser.LOGICAL || _la === StarRocksSqlParser.VERBOSE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public optimizerTrace(): OptimizerTraceContext {
		let _localctx: OptimizerTraceContext = new OptimizerTraceContext(this._ctx, this.state);
		this.enterRule(_localctx, 724, StarRocksSqlParser.RULE_optimizerTrace);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6158;
			this.match(StarRocksSqlParser.TRACE);
			this.state = 6159;
			_la = this._input.LA(1);
			if (!(_la === StarRocksSqlParser.OPTIMIZER || _la === StarRocksSqlParser.REWRITE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionDesc(): PartitionDescContext {
		let _localctx: PartitionDescContext = new PartitionDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 726, StarRocksSqlParser.RULE_partitionDesc);
		let _la: number;
		try {
			this.state = 6239;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 714, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6161;
				this.match(StarRocksSqlParser.PARTITION);
				this.state = 6162;
				this.match(StarRocksSqlParser.BY);
				this.state = 6163;
				this.match(StarRocksSqlParser.RANGE);
				this.state = 6164;
				this.identifierList();
				this.state = 6165;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 6174;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.PARTITION || _la === StarRocksSqlParser.START) {
					{
					this.state = 6166;
					this.rangePartitionDesc();
					this.state = 6171;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === StarRocksSqlParser.COMMA) {
						{
						{
						this.state = 6167;
						this.match(StarRocksSqlParser.COMMA);
						this.state = 6168;
						this.rangePartitionDesc();
						}
						}
						this.state = 6173;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 6176;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6178;
				this.match(StarRocksSqlParser.PARTITION);
				this.state = 6179;
				this.match(StarRocksSqlParser.BY);
				this.state = 6180;
				this.match(StarRocksSqlParser.RANGE);
				this.state = 6181;
				this.primaryExpression(0);
				this.state = 6182;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 6191;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.PARTITION || _la === StarRocksSqlParser.START) {
					{
					this.state = 6183;
					this.rangePartitionDesc();
					this.state = 6188;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === StarRocksSqlParser.COMMA) {
						{
						{
						this.state = 6184;
						this.match(StarRocksSqlParser.COMMA);
						this.state = 6185;
						this.rangePartitionDesc();
						}
						}
						this.state = 6190;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 6193;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6195;
				this.match(StarRocksSqlParser.PARTITION);
				this.state = 6196;
				this.match(StarRocksSqlParser.BY);
				this.state = 6198;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.LIST) {
					{
					this.state = 6197;
					this.match(StarRocksSqlParser.LIST);
					}
				}

				this.state = 6200;
				this.identifierList();
				this.state = 6201;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 6210;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.PARTITION) {
					{
					this.state = 6202;
					this.listPartitionDesc();
					this.state = 6207;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === StarRocksSqlParser.COMMA) {
						{
						{
						this.state = 6203;
						this.match(StarRocksSqlParser.COMMA);
						this.state = 6204;
						this.listPartitionDesc();
						}
						}
						this.state = 6209;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 6212;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6214;
				this.match(StarRocksSqlParser.PARTITION);
				this.state = 6215;
				this.match(StarRocksSqlParser.BY);
				this.state = 6217;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.LIST) {
					{
					this.state = 6216;
					this.match(StarRocksSqlParser.LIST);
					}
				}

				this.state = 6219;
				this.identifierList();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6220;
				this.match(StarRocksSqlParser.PARTITION);
				this.state = 6221;
				this.match(StarRocksSqlParser.BY);
				this.state = 6222;
				this.functionCall();
				this.state = 6223;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 6232;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.PARTITION || _la === StarRocksSqlParser.START) {
					{
					this.state = 6224;
					this.rangePartitionDesc();
					this.state = 6229;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === StarRocksSqlParser.COMMA) {
						{
						{
						this.state = 6225;
						this.match(StarRocksSqlParser.COMMA);
						this.state = 6226;
						this.rangePartitionDesc();
						}
						}
						this.state = 6231;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 6234;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6236;
				this.match(StarRocksSqlParser.PARTITION);
				this.state = 6237;
				this.match(StarRocksSqlParser.BY);
				this.state = 6238;
				this.functionCall();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public listPartitionDesc(): ListPartitionDescContext {
		let _localctx: ListPartitionDescContext = new ListPartitionDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 728, StarRocksSqlParser.RULE_listPartitionDesc);
		try {
			this.state = 6243;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 715, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6241;
				this.singleItemListPartitionDesc();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6242;
				this.multiItemListPartitionDesc();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public singleItemListPartitionDesc(): SingleItemListPartitionDescContext {
		let _localctx: SingleItemListPartitionDescContext = new SingleItemListPartitionDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 730, StarRocksSqlParser.RULE_singleItemListPartitionDesc);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6245;
			this.match(StarRocksSqlParser.PARTITION);
			this.state = 6249;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 6246;
				this.match(StarRocksSqlParser.IF);
				this.state = 6247;
				this.match(StarRocksSqlParser.NOT);
				this.state = 6248;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 6251;
			this.identifier();
			this.state = 6252;
			this.match(StarRocksSqlParser.VALUES);
			this.state = 6253;
			this.match(StarRocksSqlParser.IN);
			this.state = 6254;
			this.stringList();
			this.state = 6256;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 717, this._ctx) ) {
			case 1:
				{
				this.state = 6255;
				this.propertyList();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiItemListPartitionDesc(): MultiItemListPartitionDescContext {
		let _localctx: MultiItemListPartitionDescContext = new MultiItemListPartitionDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 732, StarRocksSqlParser.RULE_multiItemListPartitionDesc);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6258;
			this.match(StarRocksSqlParser.PARTITION);
			this.state = 6262;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 6259;
				this.match(StarRocksSqlParser.IF);
				this.state = 6260;
				this.match(StarRocksSqlParser.NOT);
				this.state = 6261;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 6264;
			this.identifier();
			this.state = 6265;
			this.match(StarRocksSqlParser.VALUES);
			this.state = 6266;
			this.match(StarRocksSqlParser.IN);
			this.state = 6267;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 6268;
			this.stringList();
			this.state = 6273;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 6269;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 6270;
				this.stringList();
				}
				}
				this.state = 6275;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6276;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			this.state = 6278;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 720, this._ctx) ) {
			case 1:
				{
				this.state = 6277;
				this.propertyList();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stringList(): StringListContext {
		let _localctx: StringListContext = new StringListContext(this._ctx, this.state);
		this.enterRule(_localctx, 734, StarRocksSqlParser.RULE_stringList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6280;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 6281;
			this.string();
			this.state = 6286;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 6282;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 6283;
				this.string();
				}
				}
				this.state = 6288;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6289;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rangePartitionDesc(): RangePartitionDescContext {
		let _localctx: RangePartitionDescContext = new RangePartitionDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 736, StarRocksSqlParser.RULE_rangePartitionDesc);
		try {
			this.state = 6293;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.PARTITION:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6291;
				this.singleRangePartition();
				}
				break;
			case StarRocksSqlParser.START:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6292;
				this.multiRangePartition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public singleRangePartition(): SingleRangePartitionContext {
		let _localctx: SingleRangePartitionContext = new SingleRangePartitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 738, StarRocksSqlParser.RULE_singleRangePartition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6295;
			this.match(StarRocksSqlParser.PARTITION);
			this.state = 6299;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.IF) {
				{
				this.state = 6296;
				this.match(StarRocksSqlParser.IF);
				this.state = 6297;
				this.match(StarRocksSqlParser.NOT);
				this.state = 6298;
				this.match(StarRocksSqlParser.EXISTS);
				}
			}

			this.state = 6301;
			this.identifier();
			this.state = 6302;
			this.match(StarRocksSqlParser.VALUES);
			this.state = 6303;
			this.partitionKeyDesc();
			this.state = 6305;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 724, this._ctx) ) {
			case 1:
				{
				this.state = 6304;
				this.propertyList();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiRangePartition(): MultiRangePartitionContext {
		let _localctx: MultiRangePartitionContext = new MultiRangePartitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 740, StarRocksSqlParser.RULE_multiRangePartition);
		try {
			this.state = 6333;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 725, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6307;
				this.match(StarRocksSqlParser.START);
				this.state = 6308;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 6309;
				this.string();
				this.state = 6310;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				this.state = 6311;
				this.match(StarRocksSqlParser.END);
				this.state = 6312;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 6313;
				this.string();
				this.state = 6314;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				this.state = 6315;
				this.match(StarRocksSqlParser.EVERY);
				this.state = 6316;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 6317;
				this.interval();
				this.state = 6318;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6320;
				this.match(StarRocksSqlParser.START);
				this.state = 6321;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 6322;
				this.string();
				this.state = 6323;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				this.state = 6324;
				this.match(StarRocksSqlParser.END);
				this.state = 6325;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 6326;
				this.string();
				this.state = 6327;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				this.state = 6328;
				this.match(StarRocksSqlParser.EVERY);
				this.state = 6329;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 6330;
				this.match(StarRocksSqlParser.INTEGER_VALUE);
				this.state = 6331;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionRangeDesc(): PartitionRangeDescContext {
		let _localctx: PartitionRangeDescContext = new PartitionRangeDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 742, StarRocksSqlParser.RULE_partitionRangeDesc);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6335;
			this.match(StarRocksSqlParser.START);
			this.state = 6336;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 6337;
			this.string();
			this.state = 6338;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			this.state = 6339;
			this.match(StarRocksSqlParser.END);
			this.state = 6340;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 6341;
			this.string();
			this.state = 6342;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionKeyDesc(): PartitionKeyDescContext {
		let _localctx: PartitionKeyDescContext = new PartitionKeyDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 744, StarRocksSqlParser.RULE_partitionKeyDesc);
		try {
			this.state = 6356;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.LESS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6344;
				this.match(StarRocksSqlParser.LESS);
				this.state = 6345;
				this.match(StarRocksSqlParser.THAN);
				this.state = 6348;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case StarRocksSqlParser.MAXVALUE:
					{
					this.state = 6346;
					this.match(StarRocksSqlParser.MAXVALUE);
					}
					break;
				case StarRocksSqlParser.LEFT_PAREN:
					{
					this.state = 6347;
					this.partitionValueList();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case StarRocksSqlParser.LEFT_BRACKET:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6350;
				this.match(StarRocksSqlParser.LEFT_BRACKET);
				this.state = 6351;
				this.partitionValueList();
				this.state = 6352;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 6353;
				this.partitionValueList();
				this.state = 6354;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionValueList(): PartitionValueListContext {
		let _localctx: PartitionValueListContext = new PartitionValueListContext(this._ctx, this.state);
		this.enterRule(_localctx, 746, StarRocksSqlParser.RULE_partitionValueList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6358;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 6359;
			this.partitionValue();
			this.state = 6364;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 6360;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 6361;
				this.partitionValue();
				}
				}
				this.state = 6366;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6367;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public keyPartition(): KeyPartitionContext {
		let _localctx: KeyPartitionContext = new KeyPartitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 748, StarRocksSqlParser.RULE_keyPartition);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6369;
			_localctx._partitionColName = this.identifier();
			this.state = 6370;
			this.match(StarRocksSqlParser.EQ);
			this.state = 6371;
			_localctx._partitionColValue = this.literalExpression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionValue(): PartitionValueContext {
		let _localctx: PartitionValueContext = new PartitionValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 750, StarRocksSqlParser.RULE_partitionValue);
		try {
			this.state = 6375;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.MAXVALUE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6373;
				this.match(StarRocksSqlParser.MAXVALUE);
				}
				break;
			case StarRocksSqlParser.SINGLE_QUOTED_TEXT:
			case StarRocksSqlParser.DOUBLE_QUOTED_TEXT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6374;
				this.string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public distributionClause(): DistributionClauseContext {
		let _localctx: DistributionClauseContext = new DistributionClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 752, StarRocksSqlParser.RULE_distributionClause);
		let _la: number;
		try {
			this.state = 6389;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 731, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6377;
				this.match(StarRocksSqlParser.DISTRIBUTED);
				this.state = 6378;
				this.match(StarRocksSqlParser.BY);
				this.state = 6379;
				this.match(StarRocksSqlParser.HASH);
				this.state = 6380;
				this.identifierList();
				this.state = 6383;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.BUCKETS) {
					{
					this.state = 6381;
					this.match(StarRocksSqlParser.BUCKETS);
					this.state = 6382;
					this.match(StarRocksSqlParser.INTEGER_VALUE);
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6385;
				this.match(StarRocksSqlParser.DISTRIBUTED);
				this.state = 6386;
				this.match(StarRocksSqlParser.BY);
				this.state = 6387;
				this.match(StarRocksSqlParser.HASH);
				this.state = 6388;
				this.identifierList();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public distributionDesc(): DistributionDescContext {
		let _localctx: DistributionDescContext = new DistributionDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 754, StarRocksSqlParser.RULE_distributionDesc);
		let _la: number;
		try {
			this.state = 6410;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 734, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6391;
				this.match(StarRocksSqlParser.DISTRIBUTED);
				this.state = 6392;
				this.match(StarRocksSqlParser.BY);
				this.state = 6393;
				this.match(StarRocksSqlParser.HASH);
				this.state = 6394;
				this.identifierList();
				this.state = 6397;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.BUCKETS) {
					{
					this.state = 6395;
					this.match(StarRocksSqlParser.BUCKETS);
					this.state = 6396;
					this.match(StarRocksSqlParser.INTEGER_VALUE);
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6399;
				this.match(StarRocksSqlParser.DISTRIBUTED);
				this.state = 6400;
				this.match(StarRocksSqlParser.BY);
				this.state = 6401;
				this.match(StarRocksSqlParser.HASH);
				this.state = 6402;
				this.identifierList();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6403;
				this.match(StarRocksSqlParser.DISTRIBUTED);
				this.state = 6404;
				this.match(StarRocksSqlParser.BY);
				this.state = 6405;
				this.match(StarRocksSqlParser.RANDOM);
				this.state = 6408;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.BUCKETS) {
					{
					this.state = 6406;
					this.match(StarRocksSqlParser.BUCKETS);
					this.state = 6407;
					this.match(StarRocksSqlParser.INTEGER_VALUE);
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public refreshSchemeDesc(): RefreshSchemeDescContext {
		let _localctx: RefreshSchemeDescContext = new RefreshSchemeDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 756, StarRocksSqlParser.RULE_refreshSchemeDesc);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6412;
			this.match(StarRocksSqlParser.REFRESH);
			this.state = 6414;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.DEFERRED || _la === StarRocksSqlParser.IMMEDIATE) {
				{
				this.state = 6413;
				_la = this._input.LA(1);
				if (!(_la === StarRocksSqlParser.DEFERRED || _la === StarRocksSqlParser.IMMEDIATE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 6432;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 737, this._ctx) ) {
			case 1:
				{
				this.state = 6416;
				this.match(StarRocksSqlParser.ASYNC);
				}
				break;

			case 2:
				{
				this.state = 6417;
				this.match(StarRocksSqlParser.ASYNC);
				this.state = 6423;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.START) {
					{
					this.state = 6418;
					this.match(StarRocksSqlParser.START);
					this.state = 6419;
					this.match(StarRocksSqlParser.LEFT_PAREN);
					this.state = 6420;
					this.string();
					this.state = 6421;
					this.match(StarRocksSqlParser.RIGHT_PAREN);
					}
				}

				this.state = 6425;
				this.match(StarRocksSqlParser.EVERY);
				this.state = 6426;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 6427;
				this.interval();
				this.state = 6428;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;

			case 3:
				{
				this.state = 6430;
				this.match(StarRocksSqlParser.INCREMENTAL);
				}
				break;

			case 4:
				{
				this.state = 6431;
				this.match(StarRocksSqlParser.MANUAL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public statusDesc(): StatusDescContext {
		let _localctx: StatusDescContext = new StatusDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 758, StarRocksSqlParser.RULE_statusDesc);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6434;
			_la = this._input.LA(1);
			if (!(_la === StarRocksSqlParser.ACTIVE || _la === StarRocksSqlParser.INACTIVE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public properties(): PropertiesContext {
		let _localctx: PropertiesContext = new PropertiesContext(this._ctx, this.state);
		this.enterRule(_localctx, 760, StarRocksSqlParser.RULE_properties);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6436;
			this.match(StarRocksSqlParser.PROPERTIES);
			this.state = 6437;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 6438;
			this.property();
			this.state = 6443;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 6439;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 6440;
				this.property();
				}
				}
				this.state = 6445;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6446;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public extProperties(): ExtPropertiesContext {
		let _localctx: ExtPropertiesContext = new ExtPropertiesContext(this._ctx, this.state);
		this.enterRule(_localctx, 762, StarRocksSqlParser.RULE_extProperties);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6448;
			this.match(StarRocksSqlParser.BROKER);
			this.state = 6449;
			this.properties();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public propertyList(): PropertyListContext {
		let _localctx: PropertyListContext = new PropertyListContext(this._ctx, this.state);
		this.enterRule(_localctx, 764, StarRocksSqlParser.RULE_propertyList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6451;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 6452;
			this.property();
			this.state = 6457;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 6453;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 6454;
				this.property();
				}
				}
				this.state = 6459;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6460;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public userPropertyList(): UserPropertyListContext {
		let _localctx: UserPropertyListContext = new UserPropertyListContext(this._ctx, this.state);
		this.enterRule(_localctx, 766, StarRocksSqlParser.RULE_userPropertyList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6462;
			this.property();
			this.state = 6467;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 6463;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 6464;
				this.property();
				}
				}
				this.state = 6469;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public property(): PropertyContext {
		let _localctx: PropertyContext = new PropertyContext(this._ctx, this.state);
		this.enterRule(_localctx, 768, StarRocksSqlParser.RULE_property);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6470;
			_localctx._key = this.string();
			this.state = 6471;
			this.match(StarRocksSqlParser.EQ);
			this.state = 6472;
			_localctx._value = this.string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public varType(): VarTypeContext {
		let _localctx: VarTypeContext = new VarTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 770, StarRocksSqlParser.RULE_varType);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6474;
			_la = this._input.LA(1);
			if (!(_la === StarRocksSqlParser.GLOBAL || _la === StarRocksSqlParser.LOCAL || _la === StarRocksSqlParser.SESSION || _la === StarRocksSqlParser.VERBOSE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public comment(): CommentContext {
		let _localctx: CommentContext = new CommentContext(this._ctx, this.state);
		this.enterRule(_localctx, 772, StarRocksSqlParser.RULE_comment);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6476;
			this.match(StarRocksSqlParser.COMMENT);
			this.state = 6477;
			this.string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public outfile(): OutfileContext {
		let _localctx: OutfileContext = new OutfileContext(this._ctx, this.state);
		this.enterRule(_localctx, 774, StarRocksSqlParser.RULE_outfile);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6479;
			this.match(StarRocksSqlParser.INTO);
			this.state = 6480;
			this.match(StarRocksSqlParser.OUTFILE);
			this.state = 6481;
			_localctx._file = this.string();
			this.state = 6483;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.FORMAT) {
				{
				this.state = 6482;
				this.fileFormat();
				}
			}

			this.state = 6486;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === StarRocksSqlParser.PROPERTIES) {
				{
				this.state = 6485;
				this.properties();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fileFormat(): FileFormatContext {
		let _localctx: FileFormatContext = new FileFormatContext(this._ctx, this.state);
		this.enterRule(_localctx, 776, StarRocksSqlParser.RULE_fileFormat);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6488;
			this.match(StarRocksSqlParser.FORMAT);
			this.state = 6489;
			this.match(StarRocksSqlParser.AS);
			this.state = 6492;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.ACTIVE:
			case StarRocksSqlParser.ADMIN:
			case StarRocksSqlParser.AFTER:
			case StarRocksSqlParser.AGGREGATE:
			case StarRocksSqlParser.ANTI:
			case StarRocksSqlParser.ASYNC:
			case StarRocksSqlParser.AUTHORS:
			case StarRocksSqlParser.AUTHENTICATION:
			case StarRocksSqlParser.AUTO_INCREMENT:
			case StarRocksSqlParser.AVG:
			case StarRocksSqlParser.BACKEND:
			case StarRocksSqlParser.BACKENDS:
			case StarRocksSqlParser.BACKUP:
			case StarRocksSqlParser.BEGIN:
			case StarRocksSqlParser.BITMAP_UNION:
			case StarRocksSqlParser.BLACKLIST:
			case StarRocksSqlParser.BOOLEAN:
			case StarRocksSqlParser.BROKER:
			case StarRocksSqlParser.BUCKETS:
			case StarRocksSqlParser.BUILTIN:
			case StarRocksSqlParser.CANCEL:
			case StarRocksSqlParser.CAST:
			case StarRocksSqlParser.CATALOG:
			case StarRocksSqlParser.CATALOGS:
			case StarRocksSqlParser.CEIL:
			case StarRocksSqlParser.CHAIN:
			case StarRocksSqlParser.CHARSET:
			case StarRocksSqlParser.CLEAN:
			case StarRocksSqlParser.CLUSTER:
			case StarRocksSqlParser.CLUSTERS:
			case StarRocksSqlParser.COLLATION:
			case StarRocksSqlParser.COLUMNS:
			case StarRocksSqlParser.COMMENT:
			case StarRocksSqlParser.COMMIT:
			case StarRocksSqlParser.COMMITTED:
			case StarRocksSqlParser.COMPUTE:
			case StarRocksSqlParser.CONFIG:
			case StarRocksSqlParser.CONNECTION:
			case StarRocksSqlParser.CONSISTENT:
			case StarRocksSqlParser.COSTS:
			case StarRocksSqlParser.COUNT:
			case StarRocksSqlParser.CUME_DIST:
			case StarRocksSqlParser.CURRENT:
			case StarRocksSqlParser.DATA:
			case StarRocksSqlParser.DATE:
			case StarRocksSqlParser.DATETIME:
			case StarRocksSqlParser.DAY:
			case StarRocksSqlParser.DECOMMISSION:
			case StarRocksSqlParser.DISTRIBUTED:
			case StarRocksSqlParser.DISTRIBUTION:
			case StarRocksSqlParser.DUPLICATE:
			case StarRocksSqlParser.DYNAMIC:
			case StarRocksSqlParser.ENCLOSE:
			case StarRocksSqlParser.END:
			case StarRocksSqlParser.ENGINE:
			case StarRocksSqlParser.ENGINES:
			case StarRocksSqlParser.ERRORS:
			case StarRocksSqlParser.ESCAPE:
			case StarRocksSqlParser.EVENTS:
			case StarRocksSqlParser.EXECUTE:
			case StarRocksSqlParser.EXPORT:
			case StarRocksSqlParser.EXTERNAL:
			case StarRocksSqlParser.EXTRACT:
			case StarRocksSqlParser.EVERY:
			case StarRocksSqlParser.FIELDS:
			case StarRocksSqlParser.FILE:
			case StarRocksSqlParser.FILTER:
			case StarRocksSqlParser.FIRST:
			case StarRocksSqlParser.FLOOR:
			case StarRocksSqlParser.FN:
			case StarRocksSqlParser.FOLLOWING:
			case StarRocksSqlParser.FOLLOWER:
			case StarRocksSqlParser.FORMAT:
			case StarRocksSqlParser.FREE:
			case StarRocksSqlParser.FRONTEND:
			case StarRocksSqlParser.FRONTENDS:
			case StarRocksSqlParser.FUNCTIONS:
			case StarRocksSqlParser.GLOBAL:
			case StarRocksSqlParser.GRANTS:
			case StarRocksSqlParser.HASH:
			case StarRocksSqlParser.HELP:
			case StarRocksSqlParser.HISTOGRAM:
			case StarRocksSqlParser.HLL_UNION:
			case StarRocksSqlParser.HOST:
			case StarRocksSqlParser.HOUR:
			case StarRocksSqlParser.HUB:
			case StarRocksSqlParser.IDENTIFIED:
			case StarRocksSqlParser.IMPERSONATE:
			case StarRocksSqlParser.IMAGE:
			case StarRocksSqlParser.INACTIVE:
			case StarRocksSqlParser.INCREMENTAL:
			case StarRocksSqlParser.INDEXES:
			case StarRocksSqlParser.INSTALL:
			case StarRocksSqlParser.INTERMEDIATE:
			case StarRocksSqlParser.INTERVAL:
			case StarRocksSqlParser.OVERWRITE:
			case StarRocksSqlParser.ISOLATION:
			case StarRocksSqlParser.JOB:
			case StarRocksSqlParser.LABEL:
			case StarRocksSqlParser.LAST:
			case StarRocksSqlParser.LESS:
			case StarRocksSqlParser.LEVEL:
			case StarRocksSqlParser.LIST:
			case StarRocksSqlParser.LOCAL:
			case StarRocksSqlParser.LOCATION:
			case StarRocksSqlParser.LOGICAL:
			case StarRocksSqlParser.MANUAL:
			case StarRocksSqlParser.MAP:
			case StarRocksSqlParser.MATERIALIZED:
			case StarRocksSqlParser.MAX:
			case StarRocksSqlParser.MERGE:
			case StarRocksSqlParser.MIN:
			case StarRocksSqlParser.MINUTE:
			case StarRocksSqlParser.MINUS:
			case StarRocksSqlParser.META:
			case StarRocksSqlParser.MODE:
			case StarRocksSqlParser.MODIFY:
			case StarRocksSqlParser.MONTH:
			case StarRocksSqlParser.NAME:
			case StarRocksSqlParser.NAMES:
			case StarRocksSqlParser.NEGATIVE:
			case StarRocksSqlParser.NO:
			case StarRocksSqlParser.NODE:
			case StarRocksSqlParser.NODES:
			case StarRocksSqlParser.NONE:
			case StarRocksSqlParser.NULLS:
			case StarRocksSqlParser.NUMBER:
			case StarRocksSqlParser.NUMERIC:
			case StarRocksSqlParser.OBSERVER:
			case StarRocksSqlParser.OF:
			case StarRocksSqlParser.OFFSET:
			case StarRocksSqlParser.ONLY:
			case StarRocksSqlParser.OPEN:
			case StarRocksSqlParser.OPERATE:
			case StarRocksSqlParser.OPTIMIZER:
			case StarRocksSqlParser.OPTION:
			case StarRocksSqlParser.PARTITIONS:
			case StarRocksSqlParser.PASSWORD:
			case StarRocksSqlParser.PATH:
			case StarRocksSqlParser.PAUSE:
			case StarRocksSqlParser.PENDING:
			case StarRocksSqlParser.PERCENT_RANK:
			case StarRocksSqlParser.PERCENTILE_UNION:
			case StarRocksSqlParser.PLUGIN:
			case StarRocksSqlParser.PLUGINS:
			case StarRocksSqlParser.PRECEDING:
			case StarRocksSqlParser.PRIVILEGES:
			case StarRocksSqlParser.PROC:
			case StarRocksSqlParser.PROCESSLIST:
			case StarRocksSqlParser.PROFILE:
			case StarRocksSqlParser.PROFILELIST:
			case StarRocksSqlParser.PROPERTIES:
			case StarRocksSqlParser.PROPERTY:
			case StarRocksSqlParser.QUALIFY:
			case StarRocksSqlParser.QUARTER:
			case StarRocksSqlParser.QUERY:
			case StarRocksSqlParser.QUEUE:
			case StarRocksSqlParser.QUOTA:
			case StarRocksSqlParser.RANDOM:
			case StarRocksSqlParser.RANK:
			case StarRocksSqlParser.RECOVER:
			case StarRocksSqlParser.REFRESH:
			case StarRocksSqlParser.REWRITE:
			case StarRocksSqlParser.REMOVE:
			case StarRocksSqlParser.REPAIR:
			case StarRocksSqlParser.REPEATABLE:
			case StarRocksSqlParser.REPLACE_IF_NOT_NULL:
			case StarRocksSqlParser.REPLICA:
			case StarRocksSqlParser.REPOSITORY:
			case StarRocksSqlParser.REPOSITORIES:
			case StarRocksSqlParser.RESOURCE:
			case StarRocksSqlParser.RESOURCES:
			case StarRocksSqlParser.RESTORE:
			case StarRocksSqlParser.RESUME:
			case StarRocksSqlParser.RETURNS:
			case StarRocksSqlParser.REVERT:
			case StarRocksSqlParser.ROLE:
			case StarRocksSqlParser.ROLES:
			case StarRocksSqlParser.ROLLBACK:
			case StarRocksSqlParser.ROLLUP:
			case StarRocksSqlParser.ROUTINE:
			case StarRocksSqlParser.ROW:
			case StarRocksSqlParser.SAMPLE:
			case StarRocksSqlParser.SCHEDULER:
			case StarRocksSqlParser.SECOND:
			case StarRocksSqlParser.SEMI:
			case StarRocksSqlParser.SERIALIZABLE:
			case StarRocksSqlParser.SESSION:
			case StarRocksSqlParser.SETS:
			case StarRocksSqlParser.SIGNED:
			case StarRocksSqlParser.SKIP_HEADER:
			case StarRocksSqlParser.SNAPSHOT:
			case StarRocksSqlParser.SQLBLACKLIST:
			case StarRocksSqlParser.START:
			case StarRocksSqlParser.STATS:
			case StarRocksSqlParser.STATUS:
			case StarRocksSqlParser.STOP:
			case StarRocksSqlParser.STORAGE:
			case StarRocksSqlParser.STREAM:
			case StarRocksSqlParser.STRING:
			case StarRocksSqlParser.SUBMIT:
			case StarRocksSqlParser.SUM:
			case StarRocksSqlParser.SUSPEND:
			case StarRocksSqlParser.SYNC:
			case StarRocksSqlParser.SYSTEM_TIME:
			case StarRocksSqlParser.SWAP:
			case StarRocksSqlParser.STRUCT:
			case StarRocksSqlParser.TABLES:
			case StarRocksSqlParser.TABLET:
			case StarRocksSqlParser.TASK:
			case StarRocksSqlParser.TEMPORARY:
			case StarRocksSqlParser.THAN:
			case StarRocksSqlParser.TIME:
			case StarRocksSqlParser.TIMESTAMP:
			case StarRocksSqlParser.TIMESTAMPADD:
			case StarRocksSqlParser.TIMESTAMPDIFF:
			case StarRocksSqlParser.TRANSACTION:
			case StarRocksSqlParser.TRACE:
			case StarRocksSqlParser.TRIGGERS:
			case StarRocksSqlParser.TRIM_SPACE:
			case StarRocksSqlParser.TRUNCATE:
			case StarRocksSqlParser.TYPE:
			case StarRocksSqlParser.TYPES:
			case StarRocksSqlParser.UNBOUNDED:
			case StarRocksSqlParser.UNCOMMITTED:
			case StarRocksSqlParser.UNINSTALL:
			case StarRocksSqlParser.USAGE:
			case StarRocksSqlParser.USER:
			case StarRocksSqlParser.USERS:
			case StarRocksSqlParser.VALUE:
			case StarRocksSqlParser.VARIABLES:
			case StarRocksSqlParser.VERBOSE:
			case StarRocksSqlParser.VIEW:
			case StarRocksSqlParser.VIEWS:
			case StarRocksSqlParser.WAREHOUSE:
			case StarRocksSqlParser.WAREHOUSES:
			case StarRocksSqlParser.WARNINGS:
			case StarRocksSqlParser.WEEK:
			case StarRocksSqlParser.WHITELIST:
			case StarRocksSqlParser.WORK:
			case StarRocksSqlParser.WRITE:
			case StarRocksSqlParser.YEAR:
			case StarRocksSqlParser.LOCK:
			case StarRocksSqlParser.UNLOCK:
			case StarRocksSqlParser.LOW_PRIORITY:
			case StarRocksSqlParser.LETTER_IDENTIFIER:
			case StarRocksSqlParser.DIGIT_IDENTIFIER:
			case StarRocksSqlParser.BACKQUOTED_IDENTIFIER:
			case StarRocksSqlParser.DOTDOTDOT:
				{
				this.state = 6490;
				this.identifier();
				}
				break;
			case StarRocksSqlParser.SINGLE_QUOTED_TEXT:
			case StarRocksSqlParser.DOUBLE_QUOTED_TEXT:
				{
				this.state = 6491;
				this.string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public string(): StringContext {
		let _localctx: StringContext = new StringContext(this._ctx, this.state);
		this.enterRule(_localctx, 778, StarRocksSqlParser.RULE_string);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6494;
			_la = this._input.LA(1);
			if (!(_la === StarRocksSqlParser.SINGLE_QUOTED_TEXT || _la === StarRocksSqlParser.DOUBLE_QUOTED_TEXT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public binary(): BinaryContext {
		let _localctx: BinaryContext = new BinaryContext(this._ctx, this.state);
		this.enterRule(_localctx, 780, StarRocksSqlParser.RULE_binary);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6496;
			_la = this._input.LA(1);
			if (!(_la === StarRocksSqlParser.BINARY_SINGLE_QUOTED_TEXT || _la === StarRocksSqlParser.BINARY_DOUBLE_QUOTED_TEXT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public comparisonOperator(): ComparisonOperatorContext {
		let _localctx: ComparisonOperatorContext = new ComparisonOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 782, StarRocksSqlParser.RULE_comparisonOperator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6498;
			_la = this._input.LA(1);
			if (!(((((_la - 415)) & ~0x1F) === 0 && ((1 << (_la - 415)) & ((1 << (StarRocksSqlParser.EQ - 415)) | (1 << (StarRocksSqlParser.NEQ - 415)) | (1 << (StarRocksSqlParser.LT - 415)) | (1 << (StarRocksSqlParser.LTE - 415)) | (1 << (StarRocksSqlParser.GT - 415)) | (1 << (StarRocksSqlParser.GTE - 415)) | (1 << (StarRocksSqlParser.EQ_FOR_NULL - 415)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public booleanValue(): BooleanValueContext {
		let _localctx: BooleanValueContext = new BooleanValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 784, StarRocksSqlParser.RULE_booleanValue);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6500;
			_la = this._input.LA(1);
			if (!(_la === StarRocksSqlParser.FALSE || _la === StarRocksSqlParser.TRUE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public interval(): IntervalContext {
		let _localctx: IntervalContext = new IntervalContext(this._ctx, this.state);
		this.enterRule(_localctx, 786, StarRocksSqlParser.RULE_interval);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6502;
			this.match(StarRocksSqlParser.INTERVAL);
			this.state = 6503;
			_localctx._value = this.expression(0);
			this.state = 6504;
			_localctx._from = this.unitIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unitIdentifier(): UnitIdentifierContext {
		let _localctx: UnitIdentifierContext = new UnitIdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 788, StarRocksSqlParser.RULE_unitIdentifier);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6506;
			_la = this._input.LA(1);
			if (!(_la === StarRocksSqlParser.DAY || _la === StarRocksSqlParser.HOUR || _la === StarRocksSqlParser.MINUTE || _la === StarRocksSqlParser.MONTH || _la === StarRocksSqlParser.QUARTER || _la === StarRocksSqlParser.SECOND || _la === StarRocksSqlParser.WEEK || _la === StarRocksSqlParser.YEAR)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unitBoundary(): UnitBoundaryContext {
		let _localctx: UnitBoundaryContext = new UnitBoundaryContext(this._ctx, this.state);
		this.enterRule(_localctx, 790, StarRocksSqlParser.RULE_unitBoundary);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6508;
			_la = this._input.LA(1);
			if (!(_la === StarRocksSqlParser.CEIL || _la === StarRocksSqlParser.FLOOR)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public type(): TypeContext {
		let _localctx: TypeContext = new TypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 792, StarRocksSqlParser.RULE_type);
		try {
			this.state = 6515;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.BIGINT:
			case StarRocksSqlParser.BINARY:
			case StarRocksSqlParser.BITMAP:
			case StarRocksSqlParser.BOOLEAN:
			case StarRocksSqlParser.CHAR:
			case StarRocksSqlParser.DATE:
			case StarRocksSqlParser.DATETIME:
			case StarRocksSqlParser.DOUBLE:
			case StarRocksSqlParser.FLOAT:
			case StarRocksSqlParser.HLL:
			case StarRocksSqlParser.INT:
			case StarRocksSqlParser.INTEGER:
			case StarRocksSqlParser.JSON:
			case StarRocksSqlParser.LARGEINT:
			case StarRocksSqlParser.PERCENTILE:
			case StarRocksSqlParser.SIGNED:
			case StarRocksSqlParser.SMALLINT:
			case StarRocksSqlParser.STRING:
			case StarRocksSqlParser.TEXT:
			case StarRocksSqlParser.TIME:
			case StarRocksSqlParser.TINYINT:
			case StarRocksSqlParser.UNSIGNED:
			case StarRocksSqlParser.VARBINARY:
			case StarRocksSqlParser.VARCHAR:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6510;
				this.baseType();
				}
				break;
			case StarRocksSqlParser.DECIMAL:
			case StarRocksSqlParser.DECIMALV2:
			case StarRocksSqlParser.DECIMAL32:
			case StarRocksSqlParser.DECIMAL64:
			case StarRocksSqlParser.DECIMAL128:
			case StarRocksSqlParser.NUMBER:
			case StarRocksSqlParser.NUMERIC:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6511;
				this.decimalType();
				}
				break;
			case StarRocksSqlParser.ARRAY:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6512;
				this.arrayType();
				}
				break;
			case StarRocksSqlParser.STRUCT:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6513;
				this.structType();
				}
				break;
			case StarRocksSqlParser.MAP:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6514;
				this.mapType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arrayType(): ArrayTypeContext {
		let _localctx: ArrayTypeContext = new ArrayTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 794, StarRocksSqlParser.RULE_arrayType);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6517;
			this.match(StarRocksSqlParser.ARRAY);
			this.state = 6518;
			this.match(StarRocksSqlParser.LT);
			this.state = 6519;
			this.type();
			this.state = 6520;
			this.match(StarRocksSqlParser.GT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mapType(): MapTypeContext {
		let _localctx: MapTypeContext = new MapTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 796, StarRocksSqlParser.RULE_mapType);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6522;
			this.match(StarRocksSqlParser.MAP);
			this.state = 6523;
			this.match(StarRocksSqlParser.LT);
			this.state = 6524;
			this.type();
			this.state = 6525;
			this.match(StarRocksSqlParser.COMMA);
			this.state = 6526;
			this.type();
			this.state = 6527;
			this.match(StarRocksSqlParser.GT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subfieldDesc(): SubfieldDescContext {
		let _localctx: SubfieldDescContext = new SubfieldDescContext(this._ctx, this.state);
		this.enterRule(_localctx, 798, StarRocksSqlParser.RULE_subfieldDesc);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6529;
			this.identifier();
			this.state = 6530;
			this.type();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subfieldDescs(): SubfieldDescsContext {
		let _localctx: SubfieldDescsContext = new SubfieldDescsContext(this._ctx, this.state);
		this.enterRule(_localctx, 800, StarRocksSqlParser.RULE_subfieldDescs);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6532;
			this.subfieldDesc();
			this.state = 6537;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 6533;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 6534;
				this.subfieldDesc();
				}
				}
				this.state = 6539;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public structType(): StructTypeContext {
		let _localctx: StructTypeContext = new StructTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 802, StarRocksSqlParser.RULE_structType);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6540;
			this.match(StarRocksSqlParser.STRUCT);
			this.state = 6541;
			this.match(StarRocksSqlParser.LT);
			this.state = 6542;
			this.subfieldDescs();
			this.state = 6543;
			this.match(StarRocksSqlParser.GT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public typeParameter(): TypeParameterContext {
		let _localctx: TypeParameterContext = new TypeParameterContext(this._ctx, this.state);
		this.enterRule(_localctx, 804, StarRocksSqlParser.RULE_typeParameter);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6545;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 6546;
			this.match(StarRocksSqlParser.INTEGER_VALUE);
			this.state = 6547;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public baseType(): BaseTypeContext {
		let _localctx: BaseTypeContext = new BaseTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 806, StarRocksSqlParser.RULE_baseType);
		let _la: number;
		try {
			this.state = 6617;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 760, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6549;
				this.match(StarRocksSqlParser.BOOLEAN);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6550;
				this.match(StarRocksSqlParser.TINYINT);
				this.state = 6552;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 746, this._ctx) ) {
				case 1:
					{
					this.state = 6551;
					this.typeParameter();
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6554;
				this.match(StarRocksSqlParser.SMALLINT);
				this.state = 6556;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 747, this._ctx) ) {
				case 1:
					{
					this.state = 6555;
					this.typeParameter();
					}
					break;
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6558;
				this.match(StarRocksSqlParser.SIGNED);
				this.state = 6560;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.INT) {
					{
					this.state = 6559;
					this.match(StarRocksSqlParser.INT);
					}
				}

				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6562;
				this.match(StarRocksSqlParser.SIGNED);
				this.state = 6564;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.INTEGER) {
					{
					this.state = 6563;
					this.match(StarRocksSqlParser.INTEGER);
					}
				}

				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6566;
				this.match(StarRocksSqlParser.UNSIGNED);
				this.state = 6568;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.INT) {
					{
					this.state = 6567;
					this.match(StarRocksSqlParser.INT);
					}
				}

				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 6570;
				this.match(StarRocksSqlParser.UNSIGNED);
				this.state = 6572;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.INTEGER) {
					{
					this.state = 6571;
					this.match(StarRocksSqlParser.INTEGER);
					}
				}

				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 6574;
				this.match(StarRocksSqlParser.INT);
				this.state = 6576;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 752, this._ctx) ) {
				case 1:
					{
					this.state = 6575;
					this.typeParameter();
					}
					break;
				}
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 6578;
				this.match(StarRocksSqlParser.INTEGER);
				this.state = 6580;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 753, this._ctx) ) {
				case 1:
					{
					this.state = 6579;
					this.typeParameter();
					}
					break;
				}
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 6582;
				this.match(StarRocksSqlParser.BIGINT);
				this.state = 6584;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 754, this._ctx) ) {
				case 1:
					{
					this.state = 6583;
					this.typeParameter();
					}
					break;
				}
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 6586;
				this.match(StarRocksSqlParser.LARGEINT);
				this.state = 6588;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 755, this._ctx) ) {
				case 1:
					{
					this.state = 6587;
					this.typeParameter();
					}
					break;
				}
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 6590;
				this.match(StarRocksSqlParser.FLOAT);
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 6591;
				this.match(StarRocksSqlParser.DOUBLE);
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 6592;
				this.match(StarRocksSqlParser.DATE);
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 6593;
				this.match(StarRocksSqlParser.DATETIME);
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 6594;
				this.match(StarRocksSqlParser.TIME);
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 6595;
				this.match(StarRocksSqlParser.CHAR);
				this.state = 6597;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 756, this._ctx) ) {
				case 1:
					{
					this.state = 6596;
					this.typeParameter();
					}
					break;
				}
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 6599;
				this.match(StarRocksSqlParser.VARCHAR);
				this.state = 6601;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 757, this._ctx) ) {
				case 1:
					{
					this.state = 6600;
					this.typeParameter();
					}
					break;
				}
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 6603;
				this.match(StarRocksSqlParser.STRING);
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 6604;
				this.match(StarRocksSqlParser.TEXT);
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 6605;
				this.match(StarRocksSqlParser.BITMAP);
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 6606;
				this.match(StarRocksSqlParser.HLL);
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 6607;
				this.match(StarRocksSqlParser.PERCENTILE);
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 6608;
				this.match(StarRocksSqlParser.JSON);
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 6609;
				this.match(StarRocksSqlParser.VARBINARY);
				this.state = 6611;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 758, this._ctx) ) {
				case 1:
					{
					this.state = 6610;
					this.typeParameter();
					}
					break;
				}
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 6613;
				this.match(StarRocksSqlParser.BINARY);
				this.state = 6615;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 759, this._ctx) ) {
				case 1:
					{
					this.state = 6614;
					this.typeParameter();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decimalType(): DecimalTypeContext {
		let _localctx: DecimalTypeContext = new DecimalTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 808, StarRocksSqlParser.RULE_decimalType);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6619;
			_la = this._input.LA(1);
			if (!(((((_la - 88)) & ~0x1F) === 0 && ((1 << (_la - 88)) & ((1 << (StarRocksSqlParser.DECIMAL - 88)) | (1 << (StarRocksSqlParser.DECIMALV2 - 88)) | (1 << (StarRocksSqlParser.DECIMAL32 - 88)) | (1 << (StarRocksSqlParser.DECIMAL64 - 88)) | (1 << (StarRocksSqlParser.DECIMAL128 - 88)))) !== 0) || _la === StarRocksSqlParser.NUMBER || _la === StarRocksSqlParser.NUMERIC)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 6627;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 762, this._ctx) ) {
			case 1:
				{
				this.state = 6620;
				this.match(StarRocksSqlParser.LEFT_PAREN);
				this.state = 6621;
				_localctx._precision = this.match(StarRocksSqlParser.INTEGER_VALUE);
				this.state = 6624;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === StarRocksSqlParser.COMMA) {
					{
					this.state = 6622;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 6623;
					_localctx._scale = this.match(StarRocksSqlParser.INTEGER_VALUE);
					}
				}

				this.state = 6626;
				this.match(StarRocksSqlParser.RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public qualifiedName(): QualifiedNameContext {
		let _localctx: QualifiedNameContext = new QualifiedNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 810, StarRocksSqlParser.RULE_qualifiedName);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6629;
			this.identifier();
			this.state = 6635;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 764, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 6633;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case StarRocksSqlParser.DOT_IDENTIFIER:
						{
						this.state = 6630;
						this.match(StarRocksSqlParser.DOT_IDENTIFIER);
						}
						break;
					case StarRocksSqlParser.DOT:
						{
						this.state = 6631;
						this.match(StarRocksSqlParser.DOT);
						this.state = 6632;
						this.identifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}
				this.state = 6637;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 764, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifier(): IdentifierContext {
		let _localctx: IdentifierContext = new IdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 812, StarRocksSqlParser.RULE_identifier);
		try {
			this.state = 6642;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.LETTER_IDENTIFIER:
				_localctx = new UnquotedIdentifierContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6638;
				this.match(StarRocksSqlParser.LETTER_IDENTIFIER);
				}
				break;
			case StarRocksSqlParser.ACTIVE:
			case StarRocksSqlParser.ADMIN:
			case StarRocksSqlParser.AFTER:
			case StarRocksSqlParser.AGGREGATE:
			case StarRocksSqlParser.ANTI:
			case StarRocksSqlParser.ASYNC:
			case StarRocksSqlParser.AUTHORS:
			case StarRocksSqlParser.AUTHENTICATION:
			case StarRocksSqlParser.AUTO_INCREMENT:
			case StarRocksSqlParser.AVG:
			case StarRocksSqlParser.BACKEND:
			case StarRocksSqlParser.BACKENDS:
			case StarRocksSqlParser.BACKUP:
			case StarRocksSqlParser.BEGIN:
			case StarRocksSqlParser.BITMAP_UNION:
			case StarRocksSqlParser.BLACKLIST:
			case StarRocksSqlParser.BOOLEAN:
			case StarRocksSqlParser.BROKER:
			case StarRocksSqlParser.BUCKETS:
			case StarRocksSqlParser.BUILTIN:
			case StarRocksSqlParser.CANCEL:
			case StarRocksSqlParser.CAST:
			case StarRocksSqlParser.CATALOG:
			case StarRocksSqlParser.CATALOGS:
			case StarRocksSqlParser.CEIL:
			case StarRocksSqlParser.CHAIN:
			case StarRocksSqlParser.CHARSET:
			case StarRocksSqlParser.CLEAN:
			case StarRocksSqlParser.CLUSTER:
			case StarRocksSqlParser.CLUSTERS:
			case StarRocksSqlParser.COLLATION:
			case StarRocksSqlParser.COLUMNS:
			case StarRocksSqlParser.COMMENT:
			case StarRocksSqlParser.COMMIT:
			case StarRocksSqlParser.COMMITTED:
			case StarRocksSqlParser.COMPUTE:
			case StarRocksSqlParser.CONFIG:
			case StarRocksSqlParser.CONNECTION:
			case StarRocksSqlParser.CONSISTENT:
			case StarRocksSqlParser.COSTS:
			case StarRocksSqlParser.COUNT:
			case StarRocksSqlParser.CUME_DIST:
			case StarRocksSqlParser.CURRENT:
			case StarRocksSqlParser.DATA:
			case StarRocksSqlParser.DATE:
			case StarRocksSqlParser.DATETIME:
			case StarRocksSqlParser.DAY:
			case StarRocksSqlParser.DECOMMISSION:
			case StarRocksSqlParser.DISTRIBUTED:
			case StarRocksSqlParser.DISTRIBUTION:
			case StarRocksSqlParser.DUPLICATE:
			case StarRocksSqlParser.DYNAMIC:
			case StarRocksSqlParser.ENCLOSE:
			case StarRocksSqlParser.END:
			case StarRocksSqlParser.ENGINE:
			case StarRocksSqlParser.ENGINES:
			case StarRocksSqlParser.ERRORS:
			case StarRocksSqlParser.ESCAPE:
			case StarRocksSqlParser.EVENTS:
			case StarRocksSqlParser.EXECUTE:
			case StarRocksSqlParser.EXPORT:
			case StarRocksSqlParser.EXTERNAL:
			case StarRocksSqlParser.EXTRACT:
			case StarRocksSqlParser.EVERY:
			case StarRocksSqlParser.FIELDS:
			case StarRocksSqlParser.FILE:
			case StarRocksSqlParser.FILTER:
			case StarRocksSqlParser.FIRST:
			case StarRocksSqlParser.FLOOR:
			case StarRocksSqlParser.FN:
			case StarRocksSqlParser.FOLLOWING:
			case StarRocksSqlParser.FOLLOWER:
			case StarRocksSqlParser.FORMAT:
			case StarRocksSqlParser.FREE:
			case StarRocksSqlParser.FRONTEND:
			case StarRocksSqlParser.FRONTENDS:
			case StarRocksSqlParser.FUNCTIONS:
			case StarRocksSqlParser.GLOBAL:
			case StarRocksSqlParser.GRANTS:
			case StarRocksSqlParser.HASH:
			case StarRocksSqlParser.HELP:
			case StarRocksSqlParser.HISTOGRAM:
			case StarRocksSqlParser.HLL_UNION:
			case StarRocksSqlParser.HOST:
			case StarRocksSqlParser.HOUR:
			case StarRocksSqlParser.HUB:
			case StarRocksSqlParser.IDENTIFIED:
			case StarRocksSqlParser.IMPERSONATE:
			case StarRocksSqlParser.IMAGE:
			case StarRocksSqlParser.INACTIVE:
			case StarRocksSqlParser.INCREMENTAL:
			case StarRocksSqlParser.INDEXES:
			case StarRocksSqlParser.INSTALL:
			case StarRocksSqlParser.INTERMEDIATE:
			case StarRocksSqlParser.INTERVAL:
			case StarRocksSqlParser.OVERWRITE:
			case StarRocksSqlParser.ISOLATION:
			case StarRocksSqlParser.JOB:
			case StarRocksSqlParser.LABEL:
			case StarRocksSqlParser.LAST:
			case StarRocksSqlParser.LESS:
			case StarRocksSqlParser.LEVEL:
			case StarRocksSqlParser.LIST:
			case StarRocksSqlParser.LOCAL:
			case StarRocksSqlParser.LOCATION:
			case StarRocksSqlParser.LOGICAL:
			case StarRocksSqlParser.MANUAL:
			case StarRocksSqlParser.MAP:
			case StarRocksSqlParser.MATERIALIZED:
			case StarRocksSqlParser.MAX:
			case StarRocksSqlParser.MERGE:
			case StarRocksSqlParser.MIN:
			case StarRocksSqlParser.MINUTE:
			case StarRocksSqlParser.MINUS:
			case StarRocksSqlParser.META:
			case StarRocksSqlParser.MODE:
			case StarRocksSqlParser.MODIFY:
			case StarRocksSqlParser.MONTH:
			case StarRocksSqlParser.NAME:
			case StarRocksSqlParser.NAMES:
			case StarRocksSqlParser.NEGATIVE:
			case StarRocksSqlParser.NO:
			case StarRocksSqlParser.NODE:
			case StarRocksSqlParser.NODES:
			case StarRocksSqlParser.NONE:
			case StarRocksSqlParser.NULLS:
			case StarRocksSqlParser.NUMBER:
			case StarRocksSqlParser.NUMERIC:
			case StarRocksSqlParser.OBSERVER:
			case StarRocksSqlParser.OF:
			case StarRocksSqlParser.OFFSET:
			case StarRocksSqlParser.ONLY:
			case StarRocksSqlParser.OPEN:
			case StarRocksSqlParser.OPERATE:
			case StarRocksSqlParser.OPTIMIZER:
			case StarRocksSqlParser.OPTION:
			case StarRocksSqlParser.PARTITIONS:
			case StarRocksSqlParser.PASSWORD:
			case StarRocksSqlParser.PATH:
			case StarRocksSqlParser.PAUSE:
			case StarRocksSqlParser.PENDING:
			case StarRocksSqlParser.PERCENT_RANK:
			case StarRocksSqlParser.PERCENTILE_UNION:
			case StarRocksSqlParser.PLUGIN:
			case StarRocksSqlParser.PLUGINS:
			case StarRocksSqlParser.PRECEDING:
			case StarRocksSqlParser.PRIVILEGES:
			case StarRocksSqlParser.PROC:
			case StarRocksSqlParser.PROCESSLIST:
			case StarRocksSqlParser.PROFILE:
			case StarRocksSqlParser.PROFILELIST:
			case StarRocksSqlParser.PROPERTIES:
			case StarRocksSqlParser.PROPERTY:
			case StarRocksSqlParser.QUALIFY:
			case StarRocksSqlParser.QUARTER:
			case StarRocksSqlParser.QUERY:
			case StarRocksSqlParser.QUEUE:
			case StarRocksSqlParser.QUOTA:
			case StarRocksSqlParser.RANDOM:
			case StarRocksSqlParser.RANK:
			case StarRocksSqlParser.RECOVER:
			case StarRocksSqlParser.REFRESH:
			case StarRocksSqlParser.REWRITE:
			case StarRocksSqlParser.REMOVE:
			case StarRocksSqlParser.REPAIR:
			case StarRocksSqlParser.REPEATABLE:
			case StarRocksSqlParser.REPLACE_IF_NOT_NULL:
			case StarRocksSqlParser.REPLICA:
			case StarRocksSqlParser.REPOSITORY:
			case StarRocksSqlParser.REPOSITORIES:
			case StarRocksSqlParser.RESOURCE:
			case StarRocksSqlParser.RESOURCES:
			case StarRocksSqlParser.RESTORE:
			case StarRocksSqlParser.RESUME:
			case StarRocksSqlParser.RETURNS:
			case StarRocksSqlParser.REVERT:
			case StarRocksSqlParser.ROLE:
			case StarRocksSqlParser.ROLES:
			case StarRocksSqlParser.ROLLBACK:
			case StarRocksSqlParser.ROLLUP:
			case StarRocksSqlParser.ROUTINE:
			case StarRocksSqlParser.ROW:
			case StarRocksSqlParser.SAMPLE:
			case StarRocksSqlParser.SCHEDULER:
			case StarRocksSqlParser.SECOND:
			case StarRocksSqlParser.SEMI:
			case StarRocksSqlParser.SERIALIZABLE:
			case StarRocksSqlParser.SESSION:
			case StarRocksSqlParser.SETS:
			case StarRocksSqlParser.SIGNED:
			case StarRocksSqlParser.SKIP_HEADER:
			case StarRocksSqlParser.SNAPSHOT:
			case StarRocksSqlParser.SQLBLACKLIST:
			case StarRocksSqlParser.START:
			case StarRocksSqlParser.STATS:
			case StarRocksSqlParser.STATUS:
			case StarRocksSqlParser.STOP:
			case StarRocksSqlParser.STORAGE:
			case StarRocksSqlParser.STREAM:
			case StarRocksSqlParser.STRING:
			case StarRocksSqlParser.SUBMIT:
			case StarRocksSqlParser.SUM:
			case StarRocksSqlParser.SUSPEND:
			case StarRocksSqlParser.SYNC:
			case StarRocksSqlParser.SYSTEM_TIME:
			case StarRocksSqlParser.SWAP:
			case StarRocksSqlParser.STRUCT:
			case StarRocksSqlParser.TABLES:
			case StarRocksSqlParser.TABLET:
			case StarRocksSqlParser.TASK:
			case StarRocksSqlParser.TEMPORARY:
			case StarRocksSqlParser.THAN:
			case StarRocksSqlParser.TIME:
			case StarRocksSqlParser.TIMESTAMP:
			case StarRocksSqlParser.TIMESTAMPADD:
			case StarRocksSqlParser.TIMESTAMPDIFF:
			case StarRocksSqlParser.TRANSACTION:
			case StarRocksSqlParser.TRACE:
			case StarRocksSqlParser.TRIGGERS:
			case StarRocksSqlParser.TRIM_SPACE:
			case StarRocksSqlParser.TRUNCATE:
			case StarRocksSqlParser.TYPE:
			case StarRocksSqlParser.TYPES:
			case StarRocksSqlParser.UNBOUNDED:
			case StarRocksSqlParser.UNCOMMITTED:
			case StarRocksSqlParser.UNINSTALL:
			case StarRocksSqlParser.USAGE:
			case StarRocksSqlParser.USER:
			case StarRocksSqlParser.USERS:
			case StarRocksSqlParser.VALUE:
			case StarRocksSqlParser.VARIABLES:
			case StarRocksSqlParser.VERBOSE:
			case StarRocksSqlParser.VIEW:
			case StarRocksSqlParser.VIEWS:
			case StarRocksSqlParser.WAREHOUSE:
			case StarRocksSqlParser.WAREHOUSES:
			case StarRocksSqlParser.WARNINGS:
			case StarRocksSqlParser.WEEK:
			case StarRocksSqlParser.WHITELIST:
			case StarRocksSqlParser.WORK:
			case StarRocksSqlParser.WRITE:
			case StarRocksSqlParser.YEAR:
			case StarRocksSqlParser.LOCK:
			case StarRocksSqlParser.UNLOCK:
			case StarRocksSqlParser.LOW_PRIORITY:
			case StarRocksSqlParser.DOTDOTDOT:
				_localctx = new UnquotedIdentifierContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6639;
				this.nonReserved();
				}
				break;
			case StarRocksSqlParser.DIGIT_IDENTIFIER:
				_localctx = new DigitIdentifierContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6640;
				this.match(StarRocksSqlParser.DIGIT_IDENTIFIER);
				}
				break;
			case StarRocksSqlParser.BACKQUOTED_IDENTIFIER:
				_localctx = new BackQuotedIdentifierContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6641;
				this.match(StarRocksSqlParser.BACKQUOTED_IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifierList(): IdentifierListContext {
		let _localctx: IdentifierListContext = new IdentifierListContext(this._ctx, this.state);
		this.enterRule(_localctx, 814, StarRocksSqlParser.RULE_identifierList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6644;
			this.match(StarRocksSqlParser.LEFT_PAREN);
			this.state = 6645;
			this.identifier();
			this.state = 6650;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 6646;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 6647;
				this.identifier();
				}
				}
				this.state = 6652;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6653;
			this.match(StarRocksSqlParser.RIGHT_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifierOrString(): IdentifierOrStringContext {
		let _localctx: IdentifierOrStringContext = new IdentifierOrStringContext(this._ctx, this.state);
		this.enterRule(_localctx, 816, StarRocksSqlParser.RULE_identifierOrString);
		try {
			this.state = 6657;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.ACTIVE:
			case StarRocksSqlParser.ADMIN:
			case StarRocksSqlParser.AFTER:
			case StarRocksSqlParser.AGGREGATE:
			case StarRocksSqlParser.ANTI:
			case StarRocksSqlParser.ASYNC:
			case StarRocksSqlParser.AUTHORS:
			case StarRocksSqlParser.AUTHENTICATION:
			case StarRocksSqlParser.AUTO_INCREMENT:
			case StarRocksSqlParser.AVG:
			case StarRocksSqlParser.BACKEND:
			case StarRocksSqlParser.BACKENDS:
			case StarRocksSqlParser.BACKUP:
			case StarRocksSqlParser.BEGIN:
			case StarRocksSqlParser.BITMAP_UNION:
			case StarRocksSqlParser.BLACKLIST:
			case StarRocksSqlParser.BOOLEAN:
			case StarRocksSqlParser.BROKER:
			case StarRocksSqlParser.BUCKETS:
			case StarRocksSqlParser.BUILTIN:
			case StarRocksSqlParser.CANCEL:
			case StarRocksSqlParser.CAST:
			case StarRocksSqlParser.CATALOG:
			case StarRocksSqlParser.CATALOGS:
			case StarRocksSqlParser.CEIL:
			case StarRocksSqlParser.CHAIN:
			case StarRocksSqlParser.CHARSET:
			case StarRocksSqlParser.CLEAN:
			case StarRocksSqlParser.CLUSTER:
			case StarRocksSqlParser.CLUSTERS:
			case StarRocksSqlParser.COLLATION:
			case StarRocksSqlParser.COLUMNS:
			case StarRocksSqlParser.COMMENT:
			case StarRocksSqlParser.COMMIT:
			case StarRocksSqlParser.COMMITTED:
			case StarRocksSqlParser.COMPUTE:
			case StarRocksSqlParser.CONFIG:
			case StarRocksSqlParser.CONNECTION:
			case StarRocksSqlParser.CONSISTENT:
			case StarRocksSqlParser.COSTS:
			case StarRocksSqlParser.COUNT:
			case StarRocksSqlParser.CUME_DIST:
			case StarRocksSqlParser.CURRENT:
			case StarRocksSqlParser.DATA:
			case StarRocksSqlParser.DATE:
			case StarRocksSqlParser.DATETIME:
			case StarRocksSqlParser.DAY:
			case StarRocksSqlParser.DECOMMISSION:
			case StarRocksSqlParser.DISTRIBUTED:
			case StarRocksSqlParser.DISTRIBUTION:
			case StarRocksSqlParser.DUPLICATE:
			case StarRocksSqlParser.DYNAMIC:
			case StarRocksSqlParser.ENCLOSE:
			case StarRocksSqlParser.END:
			case StarRocksSqlParser.ENGINE:
			case StarRocksSqlParser.ENGINES:
			case StarRocksSqlParser.ERRORS:
			case StarRocksSqlParser.ESCAPE:
			case StarRocksSqlParser.EVENTS:
			case StarRocksSqlParser.EXECUTE:
			case StarRocksSqlParser.EXPORT:
			case StarRocksSqlParser.EXTERNAL:
			case StarRocksSqlParser.EXTRACT:
			case StarRocksSqlParser.EVERY:
			case StarRocksSqlParser.FIELDS:
			case StarRocksSqlParser.FILE:
			case StarRocksSqlParser.FILTER:
			case StarRocksSqlParser.FIRST:
			case StarRocksSqlParser.FLOOR:
			case StarRocksSqlParser.FN:
			case StarRocksSqlParser.FOLLOWING:
			case StarRocksSqlParser.FOLLOWER:
			case StarRocksSqlParser.FORMAT:
			case StarRocksSqlParser.FREE:
			case StarRocksSqlParser.FRONTEND:
			case StarRocksSqlParser.FRONTENDS:
			case StarRocksSqlParser.FUNCTIONS:
			case StarRocksSqlParser.GLOBAL:
			case StarRocksSqlParser.GRANTS:
			case StarRocksSqlParser.HASH:
			case StarRocksSqlParser.HELP:
			case StarRocksSqlParser.HISTOGRAM:
			case StarRocksSqlParser.HLL_UNION:
			case StarRocksSqlParser.HOST:
			case StarRocksSqlParser.HOUR:
			case StarRocksSqlParser.HUB:
			case StarRocksSqlParser.IDENTIFIED:
			case StarRocksSqlParser.IMPERSONATE:
			case StarRocksSqlParser.IMAGE:
			case StarRocksSqlParser.INACTIVE:
			case StarRocksSqlParser.INCREMENTAL:
			case StarRocksSqlParser.INDEXES:
			case StarRocksSqlParser.INSTALL:
			case StarRocksSqlParser.INTERMEDIATE:
			case StarRocksSqlParser.INTERVAL:
			case StarRocksSqlParser.OVERWRITE:
			case StarRocksSqlParser.ISOLATION:
			case StarRocksSqlParser.JOB:
			case StarRocksSqlParser.LABEL:
			case StarRocksSqlParser.LAST:
			case StarRocksSqlParser.LESS:
			case StarRocksSqlParser.LEVEL:
			case StarRocksSqlParser.LIST:
			case StarRocksSqlParser.LOCAL:
			case StarRocksSqlParser.LOCATION:
			case StarRocksSqlParser.LOGICAL:
			case StarRocksSqlParser.MANUAL:
			case StarRocksSqlParser.MAP:
			case StarRocksSqlParser.MATERIALIZED:
			case StarRocksSqlParser.MAX:
			case StarRocksSqlParser.MERGE:
			case StarRocksSqlParser.MIN:
			case StarRocksSqlParser.MINUTE:
			case StarRocksSqlParser.MINUS:
			case StarRocksSqlParser.META:
			case StarRocksSqlParser.MODE:
			case StarRocksSqlParser.MODIFY:
			case StarRocksSqlParser.MONTH:
			case StarRocksSqlParser.NAME:
			case StarRocksSqlParser.NAMES:
			case StarRocksSqlParser.NEGATIVE:
			case StarRocksSqlParser.NO:
			case StarRocksSqlParser.NODE:
			case StarRocksSqlParser.NODES:
			case StarRocksSqlParser.NONE:
			case StarRocksSqlParser.NULLS:
			case StarRocksSqlParser.NUMBER:
			case StarRocksSqlParser.NUMERIC:
			case StarRocksSqlParser.OBSERVER:
			case StarRocksSqlParser.OF:
			case StarRocksSqlParser.OFFSET:
			case StarRocksSqlParser.ONLY:
			case StarRocksSqlParser.OPEN:
			case StarRocksSqlParser.OPERATE:
			case StarRocksSqlParser.OPTIMIZER:
			case StarRocksSqlParser.OPTION:
			case StarRocksSqlParser.PARTITIONS:
			case StarRocksSqlParser.PASSWORD:
			case StarRocksSqlParser.PATH:
			case StarRocksSqlParser.PAUSE:
			case StarRocksSqlParser.PENDING:
			case StarRocksSqlParser.PERCENT_RANK:
			case StarRocksSqlParser.PERCENTILE_UNION:
			case StarRocksSqlParser.PLUGIN:
			case StarRocksSqlParser.PLUGINS:
			case StarRocksSqlParser.PRECEDING:
			case StarRocksSqlParser.PRIVILEGES:
			case StarRocksSqlParser.PROC:
			case StarRocksSqlParser.PROCESSLIST:
			case StarRocksSqlParser.PROFILE:
			case StarRocksSqlParser.PROFILELIST:
			case StarRocksSqlParser.PROPERTIES:
			case StarRocksSqlParser.PROPERTY:
			case StarRocksSqlParser.QUALIFY:
			case StarRocksSqlParser.QUARTER:
			case StarRocksSqlParser.QUERY:
			case StarRocksSqlParser.QUEUE:
			case StarRocksSqlParser.QUOTA:
			case StarRocksSqlParser.RANDOM:
			case StarRocksSqlParser.RANK:
			case StarRocksSqlParser.RECOVER:
			case StarRocksSqlParser.REFRESH:
			case StarRocksSqlParser.REWRITE:
			case StarRocksSqlParser.REMOVE:
			case StarRocksSqlParser.REPAIR:
			case StarRocksSqlParser.REPEATABLE:
			case StarRocksSqlParser.REPLACE_IF_NOT_NULL:
			case StarRocksSqlParser.REPLICA:
			case StarRocksSqlParser.REPOSITORY:
			case StarRocksSqlParser.REPOSITORIES:
			case StarRocksSqlParser.RESOURCE:
			case StarRocksSqlParser.RESOURCES:
			case StarRocksSqlParser.RESTORE:
			case StarRocksSqlParser.RESUME:
			case StarRocksSqlParser.RETURNS:
			case StarRocksSqlParser.REVERT:
			case StarRocksSqlParser.ROLE:
			case StarRocksSqlParser.ROLES:
			case StarRocksSqlParser.ROLLBACK:
			case StarRocksSqlParser.ROLLUP:
			case StarRocksSqlParser.ROUTINE:
			case StarRocksSqlParser.ROW:
			case StarRocksSqlParser.SAMPLE:
			case StarRocksSqlParser.SCHEDULER:
			case StarRocksSqlParser.SECOND:
			case StarRocksSqlParser.SEMI:
			case StarRocksSqlParser.SERIALIZABLE:
			case StarRocksSqlParser.SESSION:
			case StarRocksSqlParser.SETS:
			case StarRocksSqlParser.SIGNED:
			case StarRocksSqlParser.SKIP_HEADER:
			case StarRocksSqlParser.SNAPSHOT:
			case StarRocksSqlParser.SQLBLACKLIST:
			case StarRocksSqlParser.START:
			case StarRocksSqlParser.STATS:
			case StarRocksSqlParser.STATUS:
			case StarRocksSqlParser.STOP:
			case StarRocksSqlParser.STORAGE:
			case StarRocksSqlParser.STREAM:
			case StarRocksSqlParser.STRING:
			case StarRocksSqlParser.SUBMIT:
			case StarRocksSqlParser.SUM:
			case StarRocksSqlParser.SUSPEND:
			case StarRocksSqlParser.SYNC:
			case StarRocksSqlParser.SYSTEM_TIME:
			case StarRocksSqlParser.SWAP:
			case StarRocksSqlParser.STRUCT:
			case StarRocksSqlParser.TABLES:
			case StarRocksSqlParser.TABLET:
			case StarRocksSqlParser.TASK:
			case StarRocksSqlParser.TEMPORARY:
			case StarRocksSqlParser.THAN:
			case StarRocksSqlParser.TIME:
			case StarRocksSqlParser.TIMESTAMP:
			case StarRocksSqlParser.TIMESTAMPADD:
			case StarRocksSqlParser.TIMESTAMPDIFF:
			case StarRocksSqlParser.TRANSACTION:
			case StarRocksSqlParser.TRACE:
			case StarRocksSqlParser.TRIGGERS:
			case StarRocksSqlParser.TRIM_SPACE:
			case StarRocksSqlParser.TRUNCATE:
			case StarRocksSqlParser.TYPE:
			case StarRocksSqlParser.TYPES:
			case StarRocksSqlParser.UNBOUNDED:
			case StarRocksSqlParser.UNCOMMITTED:
			case StarRocksSqlParser.UNINSTALL:
			case StarRocksSqlParser.USAGE:
			case StarRocksSqlParser.USER:
			case StarRocksSqlParser.USERS:
			case StarRocksSqlParser.VALUE:
			case StarRocksSqlParser.VARIABLES:
			case StarRocksSqlParser.VERBOSE:
			case StarRocksSqlParser.VIEW:
			case StarRocksSqlParser.VIEWS:
			case StarRocksSqlParser.WAREHOUSE:
			case StarRocksSqlParser.WAREHOUSES:
			case StarRocksSqlParser.WARNINGS:
			case StarRocksSqlParser.WEEK:
			case StarRocksSqlParser.WHITELIST:
			case StarRocksSqlParser.WORK:
			case StarRocksSqlParser.WRITE:
			case StarRocksSqlParser.YEAR:
			case StarRocksSqlParser.LOCK:
			case StarRocksSqlParser.UNLOCK:
			case StarRocksSqlParser.LOW_PRIORITY:
			case StarRocksSqlParser.LETTER_IDENTIFIER:
			case StarRocksSqlParser.DIGIT_IDENTIFIER:
			case StarRocksSqlParser.BACKQUOTED_IDENTIFIER:
			case StarRocksSqlParser.DOTDOTDOT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6655;
				this.identifier();
				}
				break;
			case StarRocksSqlParser.SINGLE_QUOTED_TEXT:
			case StarRocksSqlParser.DOUBLE_QUOTED_TEXT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6656;
				this.string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifierOrStringList(): IdentifierOrStringListContext {
		let _localctx: IdentifierOrStringListContext = new IdentifierOrStringListContext(this._ctx, this.state);
		this.enterRule(_localctx, 818, StarRocksSqlParser.RULE_identifierOrStringList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6659;
			this.identifierOrString();
			this.state = 6664;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === StarRocksSqlParser.COMMA) {
				{
				{
				this.state = 6660;
				this.match(StarRocksSqlParser.COMMA);
				this.state = 6661;
				this.identifierOrString();
				}
				}
				this.state = 6666;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifierOrStringOrStar(): IdentifierOrStringOrStarContext {
		let _localctx: IdentifierOrStringOrStarContext = new IdentifierOrStringOrStarContext(this._ctx, this.state);
		this.enterRule(_localctx, 820, StarRocksSqlParser.RULE_identifierOrStringOrStar);
		try {
			this.state = 6670;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.ASTERISK_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6667;
				this.match(StarRocksSqlParser.ASTERISK_SYMBOL);
				}
				break;
			case StarRocksSqlParser.ACTIVE:
			case StarRocksSqlParser.ADMIN:
			case StarRocksSqlParser.AFTER:
			case StarRocksSqlParser.AGGREGATE:
			case StarRocksSqlParser.ANTI:
			case StarRocksSqlParser.ASYNC:
			case StarRocksSqlParser.AUTHORS:
			case StarRocksSqlParser.AUTHENTICATION:
			case StarRocksSqlParser.AUTO_INCREMENT:
			case StarRocksSqlParser.AVG:
			case StarRocksSqlParser.BACKEND:
			case StarRocksSqlParser.BACKENDS:
			case StarRocksSqlParser.BACKUP:
			case StarRocksSqlParser.BEGIN:
			case StarRocksSqlParser.BITMAP_UNION:
			case StarRocksSqlParser.BLACKLIST:
			case StarRocksSqlParser.BOOLEAN:
			case StarRocksSqlParser.BROKER:
			case StarRocksSqlParser.BUCKETS:
			case StarRocksSqlParser.BUILTIN:
			case StarRocksSqlParser.CANCEL:
			case StarRocksSqlParser.CAST:
			case StarRocksSqlParser.CATALOG:
			case StarRocksSqlParser.CATALOGS:
			case StarRocksSqlParser.CEIL:
			case StarRocksSqlParser.CHAIN:
			case StarRocksSqlParser.CHARSET:
			case StarRocksSqlParser.CLEAN:
			case StarRocksSqlParser.CLUSTER:
			case StarRocksSqlParser.CLUSTERS:
			case StarRocksSqlParser.COLLATION:
			case StarRocksSqlParser.COLUMNS:
			case StarRocksSqlParser.COMMENT:
			case StarRocksSqlParser.COMMIT:
			case StarRocksSqlParser.COMMITTED:
			case StarRocksSqlParser.COMPUTE:
			case StarRocksSqlParser.CONFIG:
			case StarRocksSqlParser.CONNECTION:
			case StarRocksSqlParser.CONSISTENT:
			case StarRocksSqlParser.COSTS:
			case StarRocksSqlParser.COUNT:
			case StarRocksSqlParser.CUME_DIST:
			case StarRocksSqlParser.CURRENT:
			case StarRocksSqlParser.DATA:
			case StarRocksSqlParser.DATE:
			case StarRocksSqlParser.DATETIME:
			case StarRocksSqlParser.DAY:
			case StarRocksSqlParser.DECOMMISSION:
			case StarRocksSqlParser.DISTRIBUTED:
			case StarRocksSqlParser.DISTRIBUTION:
			case StarRocksSqlParser.DUPLICATE:
			case StarRocksSqlParser.DYNAMIC:
			case StarRocksSqlParser.ENCLOSE:
			case StarRocksSqlParser.END:
			case StarRocksSqlParser.ENGINE:
			case StarRocksSqlParser.ENGINES:
			case StarRocksSqlParser.ERRORS:
			case StarRocksSqlParser.ESCAPE:
			case StarRocksSqlParser.EVENTS:
			case StarRocksSqlParser.EXECUTE:
			case StarRocksSqlParser.EXPORT:
			case StarRocksSqlParser.EXTERNAL:
			case StarRocksSqlParser.EXTRACT:
			case StarRocksSqlParser.EVERY:
			case StarRocksSqlParser.FIELDS:
			case StarRocksSqlParser.FILE:
			case StarRocksSqlParser.FILTER:
			case StarRocksSqlParser.FIRST:
			case StarRocksSqlParser.FLOOR:
			case StarRocksSqlParser.FN:
			case StarRocksSqlParser.FOLLOWING:
			case StarRocksSqlParser.FOLLOWER:
			case StarRocksSqlParser.FORMAT:
			case StarRocksSqlParser.FREE:
			case StarRocksSqlParser.FRONTEND:
			case StarRocksSqlParser.FRONTENDS:
			case StarRocksSqlParser.FUNCTIONS:
			case StarRocksSqlParser.GLOBAL:
			case StarRocksSqlParser.GRANTS:
			case StarRocksSqlParser.HASH:
			case StarRocksSqlParser.HELP:
			case StarRocksSqlParser.HISTOGRAM:
			case StarRocksSqlParser.HLL_UNION:
			case StarRocksSqlParser.HOST:
			case StarRocksSqlParser.HOUR:
			case StarRocksSqlParser.HUB:
			case StarRocksSqlParser.IDENTIFIED:
			case StarRocksSqlParser.IMPERSONATE:
			case StarRocksSqlParser.IMAGE:
			case StarRocksSqlParser.INACTIVE:
			case StarRocksSqlParser.INCREMENTAL:
			case StarRocksSqlParser.INDEXES:
			case StarRocksSqlParser.INSTALL:
			case StarRocksSqlParser.INTERMEDIATE:
			case StarRocksSqlParser.INTERVAL:
			case StarRocksSqlParser.OVERWRITE:
			case StarRocksSqlParser.ISOLATION:
			case StarRocksSqlParser.JOB:
			case StarRocksSqlParser.LABEL:
			case StarRocksSqlParser.LAST:
			case StarRocksSqlParser.LESS:
			case StarRocksSqlParser.LEVEL:
			case StarRocksSqlParser.LIST:
			case StarRocksSqlParser.LOCAL:
			case StarRocksSqlParser.LOCATION:
			case StarRocksSqlParser.LOGICAL:
			case StarRocksSqlParser.MANUAL:
			case StarRocksSqlParser.MAP:
			case StarRocksSqlParser.MATERIALIZED:
			case StarRocksSqlParser.MAX:
			case StarRocksSqlParser.MERGE:
			case StarRocksSqlParser.MIN:
			case StarRocksSqlParser.MINUTE:
			case StarRocksSqlParser.MINUS:
			case StarRocksSqlParser.META:
			case StarRocksSqlParser.MODE:
			case StarRocksSqlParser.MODIFY:
			case StarRocksSqlParser.MONTH:
			case StarRocksSqlParser.NAME:
			case StarRocksSqlParser.NAMES:
			case StarRocksSqlParser.NEGATIVE:
			case StarRocksSqlParser.NO:
			case StarRocksSqlParser.NODE:
			case StarRocksSqlParser.NODES:
			case StarRocksSqlParser.NONE:
			case StarRocksSqlParser.NULLS:
			case StarRocksSqlParser.NUMBER:
			case StarRocksSqlParser.NUMERIC:
			case StarRocksSqlParser.OBSERVER:
			case StarRocksSqlParser.OF:
			case StarRocksSqlParser.OFFSET:
			case StarRocksSqlParser.ONLY:
			case StarRocksSqlParser.OPEN:
			case StarRocksSqlParser.OPERATE:
			case StarRocksSqlParser.OPTIMIZER:
			case StarRocksSqlParser.OPTION:
			case StarRocksSqlParser.PARTITIONS:
			case StarRocksSqlParser.PASSWORD:
			case StarRocksSqlParser.PATH:
			case StarRocksSqlParser.PAUSE:
			case StarRocksSqlParser.PENDING:
			case StarRocksSqlParser.PERCENT_RANK:
			case StarRocksSqlParser.PERCENTILE_UNION:
			case StarRocksSqlParser.PLUGIN:
			case StarRocksSqlParser.PLUGINS:
			case StarRocksSqlParser.PRECEDING:
			case StarRocksSqlParser.PRIVILEGES:
			case StarRocksSqlParser.PROC:
			case StarRocksSqlParser.PROCESSLIST:
			case StarRocksSqlParser.PROFILE:
			case StarRocksSqlParser.PROFILELIST:
			case StarRocksSqlParser.PROPERTIES:
			case StarRocksSqlParser.PROPERTY:
			case StarRocksSqlParser.QUALIFY:
			case StarRocksSqlParser.QUARTER:
			case StarRocksSqlParser.QUERY:
			case StarRocksSqlParser.QUEUE:
			case StarRocksSqlParser.QUOTA:
			case StarRocksSqlParser.RANDOM:
			case StarRocksSqlParser.RANK:
			case StarRocksSqlParser.RECOVER:
			case StarRocksSqlParser.REFRESH:
			case StarRocksSqlParser.REWRITE:
			case StarRocksSqlParser.REMOVE:
			case StarRocksSqlParser.REPAIR:
			case StarRocksSqlParser.REPEATABLE:
			case StarRocksSqlParser.REPLACE_IF_NOT_NULL:
			case StarRocksSqlParser.REPLICA:
			case StarRocksSqlParser.REPOSITORY:
			case StarRocksSqlParser.REPOSITORIES:
			case StarRocksSqlParser.RESOURCE:
			case StarRocksSqlParser.RESOURCES:
			case StarRocksSqlParser.RESTORE:
			case StarRocksSqlParser.RESUME:
			case StarRocksSqlParser.RETURNS:
			case StarRocksSqlParser.REVERT:
			case StarRocksSqlParser.ROLE:
			case StarRocksSqlParser.ROLES:
			case StarRocksSqlParser.ROLLBACK:
			case StarRocksSqlParser.ROLLUP:
			case StarRocksSqlParser.ROUTINE:
			case StarRocksSqlParser.ROW:
			case StarRocksSqlParser.SAMPLE:
			case StarRocksSqlParser.SCHEDULER:
			case StarRocksSqlParser.SECOND:
			case StarRocksSqlParser.SEMI:
			case StarRocksSqlParser.SERIALIZABLE:
			case StarRocksSqlParser.SESSION:
			case StarRocksSqlParser.SETS:
			case StarRocksSqlParser.SIGNED:
			case StarRocksSqlParser.SKIP_HEADER:
			case StarRocksSqlParser.SNAPSHOT:
			case StarRocksSqlParser.SQLBLACKLIST:
			case StarRocksSqlParser.START:
			case StarRocksSqlParser.STATS:
			case StarRocksSqlParser.STATUS:
			case StarRocksSqlParser.STOP:
			case StarRocksSqlParser.STORAGE:
			case StarRocksSqlParser.STREAM:
			case StarRocksSqlParser.STRING:
			case StarRocksSqlParser.SUBMIT:
			case StarRocksSqlParser.SUM:
			case StarRocksSqlParser.SUSPEND:
			case StarRocksSqlParser.SYNC:
			case StarRocksSqlParser.SYSTEM_TIME:
			case StarRocksSqlParser.SWAP:
			case StarRocksSqlParser.STRUCT:
			case StarRocksSqlParser.TABLES:
			case StarRocksSqlParser.TABLET:
			case StarRocksSqlParser.TASK:
			case StarRocksSqlParser.TEMPORARY:
			case StarRocksSqlParser.THAN:
			case StarRocksSqlParser.TIME:
			case StarRocksSqlParser.TIMESTAMP:
			case StarRocksSqlParser.TIMESTAMPADD:
			case StarRocksSqlParser.TIMESTAMPDIFF:
			case StarRocksSqlParser.TRANSACTION:
			case StarRocksSqlParser.TRACE:
			case StarRocksSqlParser.TRIGGERS:
			case StarRocksSqlParser.TRIM_SPACE:
			case StarRocksSqlParser.TRUNCATE:
			case StarRocksSqlParser.TYPE:
			case StarRocksSqlParser.TYPES:
			case StarRocksSqlParser.UNBOUNDED:
			case StarRocksSqlParser.UNCOMMITTED:
			case StarRocksSqlParser.UNINSTALL:
			case StarRocksSqlParser.USAGE:
			case StarRocksSqlParser.USER:
			case StarRocksSqlParser.USERS:
			case StarRocksSqlParser.VALUE:
			case StarRocksSqlParser.VARIABLES:
			case StarRocksSqlParser.VERBOSE:
			case StarRocksSqlParser.VIEW:
			case StarRocksSqlParser.VIEWS:
			case StarRocksSqlParser.WAREHOUSE:
			case StarRocksSqlParser.WAREHOUSES:
			case StarRocksSqlParser.WARNINGS:
			case StarRocksSqlParser.WEEK:
			case StarRocksSqlParser.WHITELIST:
			case StarRocksSqlParser.WORK:
			case StarRocksSqlParser.WRITE:
			case StarRocksSqlParser.YEAR:
			case StarRocksSqlParser.LOCK:
			case StarRocksSqlParser.UNLOCK:
			case StarRocksSqlParser.LOW_PRIORITY:
			case StarRocksSqlParser.LETTER_IDENTIFIER:
			case StarRocksSqlParser.DIGIT_IDENTIFIER:
			case StarRocksSqlParser.BACKQUOTED_IDENTIFIER:
			case StarRocksSqlParser.DOTDOTDOT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6668;
				this.identifier();
				}
				break;
			case StarRocksSqlParser.SINGLE_QUOTED_TEXT:
			case StarRocksSqlParser.DOUBLE_QUOTED_TEXT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6669;
				this.string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public user(): UserContext {
		let _localctx: UserContext = new UserContext(this._ctx, this.state);
		this.enterRule(_localctx, 822, StarRocksSqlParser.RULE_user);
		try {
			this.state = 6683;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 770, this._ctx) ) {
			case 1:
				_localctx = new UserWithoutHostContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6672;
				this.identifierOrString();
				}
				break;

			case 2:
				_localctx = new UserWithHostContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6673;
				this.identifierOrString();
				this.state = 6674;
				this.match(StarRocksSqlParser.AT);
				this.state = 6675;
				this.identifierOrString();
				}
				break;

			case 3:
				_localctx = new UserWithHostAndBlanketContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6677;
				this.identifierOrString();
				this.state = 6678;
				this.match(StarRocksSqlParser.AT);
				this.state = 6679;
				this.match(StarRocksSqlParser.LEFT_BRACKET);
				this.state = 6680;
				this.identifierOrString();
				this.state = 6681;
				this.match(StarRocksSqlParser.RIGHT_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assignment(): AssignmentContext {
		let _localctx: AssignmentContext = new AssignmentContext(this._ctx, this.state);
		this.enterRule(_localctx, 824, StarRocksSqlParser.RULE_assignment);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6685;
			this.identifier();
			this.state = 6686;
			this.match(StarRocksSqlParser.EQ);
			this.state = 6687;
			this.expressionOrDefault();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assignmentList(): AssignmentListContext {
		let _localctx: AssignmentListContext = new AssignmentListContext(this._ctx, this.state);
		this.enterRule(_localctx, 826, StarRocksSqlParser.RULE_assignmentList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6689;
			this.assignment();
			this.state = 6694;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 771, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6690;
					this.match(StarRocksSqlParser.COMMA);
					this.state = 6691;
					this.assignment();
					}
					}
				}
				this.state = 6696;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 771, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public number(): NumberContext {
		let _localctx: NumberContext = new NumberContext(this._ctx, this.state);
		this.enterRule(_localctx, 828, StarRocksSqlParser.RULE_number);
		try {
			this.state = 6700;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case StarRocksSqlParser.DECIMAL_VALUE:
				_localctx = new DecimalValueContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6697;
				this.match(StarRocksSqlParser.DECIMAL_VALUE);
				}
				break;
			case StarRocksSqlParser.DOUBLE_VALUE:
				_localctx = new DoubleValueContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6698;
				this.match(StarRocksSqlParser.DOUBLE_VALUE);
				}
				break;
			case StarRocksSqlParser.INTEGER_VALUE:
				_localctx = new IntegerValueContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6699;
				this.match(StarRocksSqlParser.INTEGER_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nonReserved(): NonReservedContext {
		let _localctx: NonReservedContext = new NonReservedContext(this._ctx, this.state);
		this.enterRule(_localctx, 830, StarRocksSqlParser.RULE_nonReserved);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6702;
			_la = this._input.LA(1);
			if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << StarRocksSqlParser.ACTIVE) | (1 << StarRocksSqlParser.ADMIN) | (1 << StarRocksSqlParser.AFTER) | (1 << StarRocksSqlParser.AGGREGATE) | (1 << StarRocksSqlParser.ANTI) | (1 << StarRocksSqlParser.ASYNC) | (1 << StarRocksSqlParser.AUTHORS) | (1 << StarRocksSqlParser.AUTHENTICATION) | (1 << StarRocksSqlParser.AUTO_INCREMENT) | (1 << StarRocksSqlParser.AVG) | (1 << StarRocksSqlParser.BACKEND) | (1 << StarRocksSqlParser.BACKENDS) | (1 << StarRocksSqlParser.BACKUP) | (1 << StarRocksSqlParser.BEGIN))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (StarRocksSqlParser.BITMAP_UNION - 32)) | (1 << (StarRocksSqlParser.BLACKLIST - 32)) | (1 << (StarRocksSqlParser.BOOLEAN - 32)) | (1 << (StarRocksSqlParser.BROKER - 32)) | (1 << (StarRocksSqlParser.BUCKETS - 32)) | (1 << (StarRocksSqlParser.BUILTIN - 32)) | (1 << (StarRocksSqlParser.CANCEL - 32)) | (1 << (StarRocksSqlParser.CAST - 32)) | (1 << (StarRocksSqlParser.CATALOG - 32)) | (1 << (StarRocksSqlParser.CATALOGS - 32)) | (1 << (StarRocksSqlParser.CEIL - 32)) | (1 << (StarRocksSqlParser.CHAIN - 32)) | (1 << (StarRocksSqlParser.CHARSET - 32)) | (1 << (StarRocksSqlParser.CLEAN - 32)) | (1 << (StarRocksSqlParser.CLUSTER - 32)) | (1 << (StarRocksSqlParser.CLUSTERS - 32)) | (1 << (StarRocksSqlParser.COLLATION - 32)) | (1 << (StarRocksSqlParser.COLUMNS - 32)) | (1 << (StarRocksSqlParser.COMMENT - 32)) | (1 << (StarRocksSqlParser.COMMIT - 32)) | (1 << (StarRocksSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (StarRocksSqlParser.COMPUTE - 64)) | (1 << (StarRocksSqlParser.CONFIG - 64)) | (1 << (StarRocksSqlParser.CONNECTION - 64)) | (1 << (StarRocksSqlParser.CONSISTENT - 64)) | (1 << (StarRocksSqlParser.COSTS - 64)) | (1 << (StarRocksSqlParser.COUNT - 64)) | (1 << (StarRocksSqlParser.CUME_DIST - 64)) | (1 << (StarRocksSqlParser.CURRENT - 64)) | (1 << (StarRocksSqlParser.DATA - 64)) | (1 << (StarRocksSqlParser.DATE - 64)) | (1 << (StarRocksSqlParser.DATETIME - 64)) | (1 << (StarRocksSqlParser.DAY - 64)) | (1 << (StarRocksSqlParser.DECOMMISSION - 64)))) !== 0) || ((((_la - 102)) & ~0x1F) === 0 && ((1 << (_la - 102)) & ((1 << (StarRocksSqlParser.DISTRIBUTED - 102)) | (1 << (StarRocksSqlParser.DISTRIBUTION - 102)) | (1 << (StarRocksSqlParser.DUPLICATE - 102)) | (1 << (StarRocksSqlParser.DYNAMIC - 102)) | (1 << (StarRocksSqlParser.ENCLOSE - 102)) | (1 << (StarRocksSqlParser.END - 102)) | (1 << (StarRocksSqlParser.ENGINE - 102)) | (1 << (StarRocksSqlParser.ENGINES - 102)) | (1 << (StarRocksSqlParser.ERRORS - 102)) | (1 << (StarRocksSqlParser.ESCAPE - 102)) | (1 << (StarRocksSqlParser.EVENTS - 102)) | (1 << (StarRocksSqlParser.EXECUTE - 102)) | (1 << (StarRocksSqlParser.EXPORT - 102)) | (1 << (StarRocksSqlParser.EXTERNAL - 102)) | (1 << (StarRocksSqlParser.EXTRACT - 102)) | (1 << (StarRocksSqlParser.EVERY - 102)) | (1 << (StarRocksSqlParser.FIELDS - 102)) | (1 << (StarRocksSqlParser.FILE - 102)) | (1 << (StarRocksSqlParser.FILTER - 102)) | (1 << (StarRocksSqlParser.FIRST - 102)) | (1 << (StarRocksSqlParser.FLOOR - 102)))) !== 0) || ((((_la - 134)) & ~0x1F) === 0 && ((1 << (_la - 134)) & ((1 << (StarRocksSqlParser.FN - 134)) | (1 << (StarRocksSqlParser.FOLLOWING - 134)) | (1 << (StarRocksSqlParser.FOLLOWER - 134)) | (1 << (StarRocksSqlParser.FORMAT - 134)) | (1 << (StarRocksSqlParser.FREE - 134)) | (1 << (StarRocksSqlParser.FRONTEND - 134)) | (1 << (StarRocksSqlParser.FRONTENDS - 134)) | (1 << (StarRocksSqlParser.FUNCTIONS - 134)) | (1 << (StarRocksSqlParser.GLOBAL - 134)) | (1 << (StarRocksSqlParser.GRANTS - 134)) | (1 << (StarRocksSqlParser.HASH - 134)) | (1 << (StarRocksSqlParser.HELP - 134)) | (1 << (StarRocksSqlParser.HISTOGRAM - 134)) | (1 << (StarRocksSqlParser.HLL_UNION - 134)) | (1 << (StarRocksSqlParser.HOST - 134)) | (1 << (StarRocksSqlParser.HOUR - 134)) | (1 << (StarRocksSqlParser.HUB - 134)) | (1 << (StarRocksSqlParser.IDENTIFIED - 134)) | (1 << (StarRocksSqlParser.IMPERSONATE - 134)))) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & ((1 << (StarRocksSqlParser.IMAGE - 168)) | (1 << (StarRocksSqlParser.INACTIVE - 168)) | (1 << (StarRocksSqlParser.INCREMENTAL - 168)) | (1 << (StarRocksSqlParser.INDEXES - 168)) | (1 << (StarRocksSqlParser.INSTALL - 168)) | (1 << (StarRocksSqlParser.INTERMEDIATE - 168)) | (1 << (StarRocksSqlParser.INTERVAL - 168)) | (1 << (StarRocksSqlParser.OVERWRITE - 168)) | (1 << (StarRocksSqlParser.ISOLATION - 168)) | (1 << (StarRocksSqlParser.JOB - 168)) | (1 << (StarRocksSqlParser.LABEL - 168)) | (1 << (StarRocksSqlParser.LAST - 168)))) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & ((1 << (StarRocksSqlParser.LESS - 203)) | (1 << (StarRocksSqlParser.LEVEL - 203)) | (1 << (StarRocksSqlParser.LIST - 203)) | (1 << (StarRocksSqlParser.LOCAL - 203)) | (1 << (StarRocksSqlParser.LOCATION - 203)) | (1 << (StarRocksSqlParser.LOGICAL - 203)) | (1 << (StarRocksSqlParser.MANUAL - 203)) | (1 << (StarRocksSqlParser.MAP - 203)) | (1 << (StarRocksSqlParser.MATERIALIZED - 203)) | (1 << (StarRocksSqlParser.MAX - 203)) | (1 << (StarRocksSqlParser.MERGE - 203)) | (1 << (StarRocksSqlParser.MIN - 203)) | (1 << (StarRocksSqlParser.MINUTE - 203)) | (1 << (StarRocksSqlParser.MINUS - 203)) | (1 << (StarRocksSqlParser.META - 203)) | (1 << (StarRocksSqlParser.MODE - 203)) | (1 << (StarRocksSqlParser.MODIFY - 203)) | (1 << (StarRocksSqlParser.MONTH - 203)) | (1 << (StarRocksSqlParser.NAME - 203)) | (1 << (StarRocksSqlParser.NAMES - 203)) | (1 << (StarRocksSqlParser.NEGATIVE - 203)))) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & ((1 << (StarRocksSqlParser.NO - 235)) | (1 << (StarRocksSqlParser.NODE - 235)) | (1 << (StarRocksSqlParser.NODES - 235)) | (1 << (StarRocksSqlParser.NONE - 235)) | (1 << (StarRocksSqlParser.NULLS - 235)) | (1 << (StarRocksSqlParser.NUMBER - 235)) | (1 << (StarRocksSqlParser.NUMERIC - 235)) | (1 << (StarRocksSqlParser.OBSERVER - 235)) | (1 << (StarRocksSqlParser.OF - 235)) | (1 << (StarRocksSqlParser.OFFSET - 235)) | (1 << (StarRocksSqlParser.ONLY - 235)) | (1 << (StarRocksSqlParser.OPEN - 235)) | (1 << (StarRocksSqlParser.OPERATE - 235)) | (1 << (StarRocksSqlParser.OPTIMIZER - 235)) | (1 << (StarRocksSqlParser.OPTION - 235)) | (1 << (StarRocksSqlParser.PARTITIONS - 235)) | (1 << (StarRocksSqlParser.PASSWORD - 235)) | (1 << (StarRocksSqlParser.PATH - 235)) | (1 << (StarRocksSqlParser.PAUSE - 235)) | (1 << (StarRocksSqlParser.PENDING - 235)) | (1 << (StarRocksSqlParser.PERCENT_RANK - 235)) | (1 << (StarRocksSqlParser.PERCENTILE_UNION - 235)))) !== 0) || ((((_la - 267)) & ~0x1F) === 0 && ((1 << (_la - 267)) & ((1 << (StarRocksSqlParser.PLUGIN - 267)) | (1 << (StarRocksSqlParser.PLUGINS - 267)) | (1 << (StarRocksSqlParser.PRECEDING - 267)) | (1 << (StarRocksSqlParser.PRIVILEGES - 267)) | (1 << (StarRocksSqlParser.PROC - 267)) | (1 << (StarRocksSqlParser.PROCESSLIST - 267)) | (1 << (StarRocksSqlParser.PROFILE - 267)) | (1 << (StarRocksSqlParser.PROFILELIST - 267)) | (1 << (StarRocksSqlParser.PROPERTIES - 267)) | (1 << (StarRocksSqlParser.PROPERTY - 267)) | (1 << (StarRocksSqlParser.QUALIFY - 267)) | (1 << (StarRocksSqlParser.QUARTER - 267)) | (1 << (StarRocksSqlParser.QUERY - 267)) | (1 << (StarRocksSqlParser.QUEUE - 267)) | (1 << (StarRocksSqlParser.QUOTA - 267)) | (1 << (StarRocksSqlParser.RANDOM - 267)) | (1 << (StarRocksSqlParser.RANK - 267)) | (1 << (StarRocksSqlParser.RECOVER - 267)) | (1 << (StarRocksSqlParser.REFRESH - 267)) | (1 << (StarRocksSqlParser.REWRITE - 267)) | (1 << (StarRocksSqlParser.REMOVE - 267)) | (1 << (StarRocksSqlParser.REPAIR - 267)) | (1 << (StarRocksSqlParser.REPEATABLE - 267)))) !== 0) || ((((_la - 300)) & ~0x1F) === 0 && ((1 << (_la - 300)) & ((1 << (StarRocksSqlParser.REPLACE_IF_NOT_NULL - 300)) | (1 << (StarRocksSqlParser.REPLICA - 300)) | (1 << (StarRocksSqlParser.REPOSITORY - 300)) | (1 << (StarRocksSqlParser.REPOSITORIES - 300)) | (1 << (StarRocksSqlParser.RESOURCE - 300)) | (1 << (StarRocksSqlParser.RESOURCES - 300)) | (1 << (StarRocksSqlParser.RESTORE - 300)) | (1 << (StarRocksSqlParser.RESUME - 300)) | (1 << (StarRocksSqlParser.RETURNS - 300)) | (1 << (StarRocksSqlParser.REVERT - 300)) | (1 << (StarRocksSqlParser.ROLE - 300)) | (1 << (StarRocksSqlParser.ROLES - 300)) | (1 << (StarRocksSqlParser.ROLLBACK - 300)) | (1 << (StarRocksSqlParser.ROLLUP - 300)) | (1 << (StarRocksSqlParser.ROUTINE - 300)) | (1 << (StarRocksSqlParser.ROW - 300)) | (1 << (StarRocksSqlParser.SAMPLE - 300)) | (1 << (StarRocksSqlParser.SCHEDULER - 300)) | (1 << (StarRocksSqlParser.SECOND - 300)) | (1 << (StarRocksSqlParser.SEMI - 300)) | (1 << (StarRocksSqlParser.SERIALIZABLE - 300)) | (1 << (StarRocksSqlParser.SESSION - 300)))) !== 0) || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & ((1 << (StarRocksSqlParser.SETS - 332)) | (1 << (StarRocksSqlParser.SIGNED - 332)) | (1 << (StarRocksSqlParser.SKIP_HEADER - 332)) | (1 << (StarRocksSqlParser.SNAPSHOT - 332)) | (1 << (StarRocksSqlParser.SQLBLACKLIST - 332)) | (1 << (StarRocksSqlParser.START - 332)) | (1 << (StarRocksSqlParser.STATS - 332)) | (1 << (StarRocksSqlParser.STATUS - 332)) | (1 << (StarRocksSqlParser.STOP - 332)) | (1 << (StarRocksSqlParser.STORAGE - 332)) | (1 << (StarRocksSqlParser.STREAM - 332)) | (1 << (StarRocksSqlParser.STRING - 332)) | (1 << (StarRocksSqlParser.SUBMIT - 332)) | (1 << (StarRocksSqlParser.SUM - 332)) | (1 << (StarRocksSqlParser.SUSPEND - 332)) | (1 << (StarRocksSqlParser.SYNC - 332)) | (1 << (StarRocksSqlParser.SYSTEM_TIME - 332)) | (1 << (StarRocksSqlParser.SWAP - 332)) | (1 << (StarRocksSqlParser.STRUCT - 332)) | (1 << (StarRocksSqlParser.TABLES - 332)) | (1 << (StarRocksSqlParser.TABLET - 332)) | (1 << (StarRocksSqlParser.TASK - 332)) | (1 << (StarRocksSqlParser.TEMPORARY - 332)) | (1 << (StarRocksSqlParser.THAN - 332)))) !== 0) || ((((_la - 364)) & ~0x1F) === 0 && ((1 << (_la - 364)) & ((1 << (StarRocksSqlParser.TIME - 364)) | (1 << (StarRocksSqlParser.TIMESTAMP - 364)) | (1 << (StarRocksSqlParser.TIMESTAMPADD - 364)) | (1 << (StarRocksSqlParser.TIMESTAMPDIFF - 364)) | (1 << (StarRocksSqlParser.TRANSACTION - 364)) | (1 << (StarRocksSqlParser.TRACE - 364)) | (1 << (StarRocksSqlParser.TRIGGERS - 364)) | (1 << (StarRocksSqlParser.TRIM_SPACE - 364)) | (1 << (StarRocksSqlParser.TRUNCATE - 364)) | (1 << (StarRocksSqlParser.TYPE - 364)) | (1 << (StarRocksSqlParser.TYPES - 364)) | (1 << (StarRocksSqlParser.UNBOUNDED - 364)) | (1 << (StarRocksSqlParser.UNCOMMITTED - 364)) | (1 << (StarRocksSqlParser.UNINSTALL - 364)) | (1 << (StarRocksSqlParser.USAGE - 364)) | (1 << (StarRocksSqlParser.USER - 364)) | (1 << (StarRocksSqlParser.USERS - 364)) | (1 << (StarRocksSqlParser.VALUE - 364)) | (1 << (StarRocksSqlParser.VARIABLES - 364)))) !== 0) || ((((_la - 396)) & ~0x1F) === 0 && ((1 << (_la - 396)) & ((1 << (StarRocksSqlParser.VERBOSE - 396)) | (1 << (StarRocksSqlParser.VIEW - 396)) | (1 << (StarRocksSqlParser.VIEWS - 396)) | (1 << (StarRocksSqlParser.WAREHOUSE - 396)) | (1 << (StarRocksSqlParser.WAREHOUSES - 396)) | (1 << (StarRocksSqlParser.WARNINGS - 396)) | (1 << (StarRocksSqlParser.WEEK - 396)) | (1 << (StarRocksSqlParser.WHITELIST - 396)) | (1 << (StarRocksSqlParser.WORK - 396)) | (1 << (StarRocksSqlParser.WRITE - 396)) | (1 << (StarRocksSqlParser.YEAR - 396)) | (1 << (StarRocksSqlParser.LOCK - 396)) | (1 << (StarRocksSqlParser.UNLOCK - 396)) | (1 << (StarRocksSqlParser.LOW_PRIORITY - 396)))) !== 0) || _la === StarRocksSqlParser.DOTDOTDOT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 307:
			return this.queryPrimary_sempred(_localctx as QueryPrimaryContext, predIndex);

		case 338:
			return this.expression_sempred(_localctx as ExpressionContext, predIndex);

		case 340:
			return this.booleanExpression_sempred(_localctx as BooleanExpressionContext, predIndex);

		case 344:
			return this.valueExpression_sempred(_localctx as ValueExpressionContext, predIndex);

		case 345:
			return this.primaryExpression_sempred(_localctx as PrimaryExpressionContext, predIndex);
		}
		return true;
	}
	private queryPrimary_sempred(_localctx: QueryPrimaryContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.precpred(this._ctx, 2);

		case 1:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private expression_sempred(_localctx: ExpressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 2:
			return this.precpred(this._ctx, 2);

		case 3:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private booleanExpression_sempred(_localctx: BooleanExpressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 4:
			return this.precpred(this._ctx, 3);

		case 5:
			return this.precpred(this._ctx, 2);

		case 6:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private valueExpression_sempred(_localctx: ValueExpressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 7:
			return this.precpred(this._ctx, 8);

		case 8:
			return this.precpred(this._ctx, 7);

		case 9:
			return this.precpred(this._ctx, 6);

		case 10:
			return this.precpred(this._ctx, 5);

		case 11:
			return this.precpred(this._ctx, 4);

		case 12:
			return this.precpred(this._ctx, 3);

		case 13:
			return this.precpred(this._ctx, 2);

		case 14:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private primaryExpression_sempred(_localctx: PrimaryExpressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 15:
			return this.precpred(this._ctx, 18);

		case 16:
			return this.precpred(this._ctx, 22);

		case 17:
			return this.precpred(this._ctx, 19);

		case 18:
			return this.precpred(this._ctx, 5);

		case 19:
			return this.precpred(this._ctx, 4);

		case 20:
			return this.precpred(this._ctx, 3);
		}
		return true;
	}

	private static readonly _serializedATNSegments: number = 13;
	private static readonly _serializedATNSegment0: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u01D6\u1A33\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
		"F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
		"O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
		"X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
		"`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
		"i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
		"r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
		"{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
		"\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
		"\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
		"\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
		"\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
		"\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
		"\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
		"\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
		"\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
		"\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
		"\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
		"\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
		"\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
		"\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
		"\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
		"\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
		"\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
		"\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
		"\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
		"\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
		"\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x04\xE4\t\xE4\x04\xE5\t\xE5" +
		"\x04\xE6\t\xE6\x04\xE7\t\xE7\x04\xE8\t\xE8\x04\xE9\t\xE9\x04\xEA\t\xEA" +
		"\x04\xEB\t\xEB\x04\xEC\t\xEC\x04\xED\t\xED\x04\xEE\t\xEE\x04\xEF\t\xEF" +
		"\x04\xF0\t\xF0\x04\xF1\t\xF1\x04\xF2\t\xF2\x04\xF3\t\xF3\x04\xF4\t\xF4" +
		"\x04\xF5\t\xF5\x04\xF6\t\xF6\x04\xF7\t\xF7\x04\xF8\t\xF8\x04\xF9\t\xF9" +
		"\x04\xFA\t\xFA\x04\xFB\t\xFB\x04\xFC\t\xFC\x04\xFD\t\xFD\x04\xFE\t\xFE" +
		"\x04\xFF\t\xFF\x04\u0100\t\u0100\x04\u0101\t\u0101\x04\u0102\t\u0102\x04" +
		"\u0103\t\u0103\x04\u0104\t\u0104\x04\u0105\t\u0105\x04\u0106\t\u0106\x04" +
		"\u0107\t\u0107\x04\u0108\t\u0108\x04\u0109\t\u0109\x04\u010A\t\u010A\x04" +
		"\u010B\t\u010B\x04\u010C\t\u010C\x04\u010D\t\u010D\x04\u010E\t\u010E\x04" +
		"\u010F\t\u010F\x04\u0110\t\u0110\x04\u0111\t\u0111\x04\u0112\t\u0112\x04" +
		"\u0113\t\u0113\x04\u0114\t\u0114\x04\u0115\t\u0115\x04\u0116\t\u0116\x04" +
		"\u0117\t\u0117\x04\u0118\t\u0118\x04\u0119\t\u0119\x04\u011A\t\u011A\x04" +
		"\u011B\t\u011B\x04\u011C\t\u011C\x04\u011D\t\u011D\x04\u011E\t\u011E\x04" +
		"\u011F\t\u011F\x04\u0120\t\u0120\x04\u0121\t\u0121\x04\u0122\t\u0122\x04" +
		"\u0123\t\u0123\x04\u0124\t\u0124\x04\u0125\t\u0125\x04\u0126\t\u0126\x04" +
		"\u0127\t\u0127\x04\u0128\t\u0128\x04\u0129\t\u0129\x04\u012A\t\u012A\x04" +
		"\u012B\t\u012B\x04\u012C\t\u012C\x04\u012D\t\u012D\x04\u012E\t\u012E\x04" +
		"\u012F\t\u012F\x04\u0130\t\u0130\x04\u0131\t\u0131\x04\u0132\t\u0132\x04" +
		"\u0133\t\u0133\x04\u0134\t\u0134\x04\u0135\t\u0135\x04\u0136\t\u0136\x04" +
		"\u0137\t\u0137\x04\u0138\t\u0138\x04\u0139\t\u0139\x04\u013A\t\u013A\x04" +
		"\u013B\t\u013B\x04\u013C\t\u013C\x04\u013D\t\u013D\x04\u013E\t\u013E\x04" +
		"\u013F\t\u013F\x04\u0140\t\u0140\x04\u0141\t\u0141\x04\u0142\t\u0142\x04" +
		"\u0143\t\u0143\x04\u0144\t\u0144\x04\u0145\t\u0145\x04\u0146\t\u0146\x04" +
		"\u0147\t\u0147\x04\u0148\t\u0148\x04\u0149\t\u0149\x04\u014A\t\u014A\x04" +
		"\u014B\t\u014B\x04\u014C\t\u014C\x04\u014D\t\u014D\x04\u014E\t\u014E\x04" +
		"\u014F\t\u014F\x04\u0150\t\u0150\x04\u0151\t\u0151\x04\u0152\t\u0152\x04" +
		"\u0153\t\u0153\x04\u0154\t\u0154\x04\u0155\t\u0155\x04\u0156\t\u0156\x04" +
		"\u0157\t\u0157\x04\u0158\t\u0158\x04\u0159\t\u0159\x04\u015A\t\u015A\x04" +
		"\u015B\t\u015B\x04\u015C\t\u015C\x04\u015D\t\u015D\x04\u015E\t\u015E\x04" +
		"\u015F\t\u015F\x04\u0160\t\u0160\x04\u0161\t\u0161\x04\u0162\t\u0162\x04" +
		"\u0163\t\u0163\x04\u0164\t\u0164\x04\u0165\t\u0165\x04\u0166\t\u0166\x04" +
		"\u0167\t\u0167\x04\u0168\t\u0168\x04\u0169\t\u0169\x04\u016A\t\u016A\x04" +
		"\u016B\t\u016B\x04\u016C\t\u016C\x04\u016D\t\u016D\x04\u016E\t\u016E\x04" +
		"\u016F\t\u016F\x04\u0170\t\u0170\x04\u0171\t\u0171\x04\u0172\t\u0172\x04" +
		"\u0173\t\u0173\x04\u0174\t\u0174\x04\u0175\t\u0175\x04\u0176\t\u0176\x04" +
		"\u0177\t\u0177\x04\u0178\t\u0178\x04\u0179\t\u0179\x04\u017A\t\u017A\x04" +
		"\u017B\t\u017B\x04\u017C\t\u017C\x04\u017D\t\u017D\x04\u017E\t\u017E\x04" +
		"\u017F\t\u017F\x04\u0180\t\u0180\x04\u0181\t\u0181\x04\u0182\t\u0182\x04" +
		"\u0183\t\u0183\x04\u0184\t\u0184\x04\u0185\t\u0185\x04\u0186\t\u0186\x04" +
		"\u0187\t\u0187\x04\u0188\t\u0188\x04\u0189\t\u0189\x04\u018A\t\u018A\x04" +
		"\u018B\t\u018B\x04\u018C\t\u018C\x04\u018D\t\u018D\x04\u018E\t\u018E\x04" +
		"\u018F\t\u018F\x04\u0190\t\u0190\x04\u0191\t\u0191\x04\u0192\t\u0192\x04" +
		"\u0193\t\u0193\x04\u0194\t\u0194\x04\u0195\t\u0195\x04\u0196\t\u0196\x04" +
		"\u0197\t\u0197\x04\u0198\t\u0198\x04\u0199\t\u0199\x04\u019A\t\u019A\x04" +
		"\u019B\t\u019B\x04\u019C\t\u019C\x04\u019D\t\u019D\x04\u019E\t\u019E\x04" +
		"\u019F\t\u019F\x04\u01A0\t\u01A0\x04\u01A1\t\u01A1\x03\x02\x05\x02\u0344" +
		"\n\x02\x03\x02\x03\x02\x03\x03\x07\x03\u0349\n\x03\f\x03\x0E\x03\u034C" +
		"\v\x03\x03\x03\x03\x03\x03\x04\x03\x04\x05\x04\u0352\n\x04\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x05\x05\u041D\n\x05\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07" +
		"\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x05\t\u042D\n" +
		"\t\x03\t\x03\t\x03\t\x03\t\x05\t\u0433\n\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x03\t\x05\t\u043B\n\t\x05\t\u043D\n\t\x03\n\x03\n\x03\n\x03\n\x03\n" +
		"\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x05" +
		"\n\u044F\n\n\x03\v\x03\v\x03\v\x03\v\x03\v\x05\v\u0456\n\v\x03\v\x03\v" +
		"\x03\v\x05\v\u045B\n\v\x03\v\x03\v\x05\v\u045F\n\v\x03\v\x05\v\u0462\n" +
		"\v\x03\v\x05\v\u0465\n\v\x03\f\x03\f\x03\f\x03\f\x05\f\u046B\n\f\x03\f" +
		"\x03\f\x03\f\x05\f\u0470\n\f\x03\f\x03\f\x05\f\u0474\n\f\x03\r\x03\r\x03" +
		"\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F" +
		"\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10" +
		"\x05\x10\u048B\n\x10\x03\x11\x03\x11\x05\x11\u048F\n\x11\x03\x11\x03\x11" +
		"\x03\x11\x03\x11\x05\x11\u0495\n\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03" +
		"\x11\x07\x11\u049C\n\x11\f\x11\x0E\x11\u049F\v\x11\x03\x11\x03\x11\x07" +
		"\x11\u04A3\n\x11\f\x11\x0E\x11\u04A6\v\x11\x03\x11\x03\x11\x05\x11\u04AA" +
		"\n\x11\x03\x11\x05\x11\u04AD\n\x11\x03\x11\x05\x11\u04B0\n\x11\x03\x11" +
		"\x07\x11\u04B3\n\x11\f\x11\x0E\x11\u04B6\v\x11\x03\x11\x05\x11\u04B9\n" +
		"\x11\x03\x11\x05\x11\u04BC\n\x11\x03\x11\x05\x11\u04BF\n\x11\x03\x11\x05" +
		"\x11\u04C2\n\x11\x03\x11\x05\x11\u04C5\n\x11\x03\x11\x05\x11\u04C8\n\x11" +
		"\x03\x11\x05\x11\u04CB\n\x11\x03\x12\x03\x12\x03\x12\x05\x12\u04D0\n\x12" +
		"\x03\x12\x05\x12\u04D3\n\x12\x03\x12\x05\x12\u04D6\n\x12\x03\x12\x03\x12" +
		"\x03\x12\x05\x12\u04DB\n\x12\x03\x12\x03\x12\x03\x12\x05\x12\u04E0\n\x12" +
		"\x03\x12\x05\x12\u04E3\n\x12\x03\x12\x05\x12\u04E6\n\x12\x03\x13\x03\x13" +
		"\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x05\x13\u04F0\n\x13\x03" +
		"\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03" +
		"\x14\x05\x14\u04FC\n\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16" +
		"\x03\x16\x05\x16\u0505\n\x16\x03\x16\x05\x16\u0508\n\x16\x03\x17\x03\x17" +
		"\x03\x17\x03\x17\x03\x18\x05\x18\u050F\n\x18\x03\x18\x03\x18\x03\x18\x03" +
		"\x18\x03\x18\x05\x18\u0516\n\x18\x03\x18\x05\x18\u0519\n\x18\x03\x18\x03" +
		"\x18\x03\x19\x05\x19\u051E\n\x19\x03\x19\x03\x19\x05\x19\u0522\n\x19\x03" +
		"\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1B\x03" +
		"\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x07\x1D\u0535" +
		"\n\x1D\f\x1D\x0E\x1D\u0538\v\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1E" +
		"\x05\x1E\u053F\n\x1E\x03\x1E\x05\x1E\u0542\n\x1E\x03\x1E\x05\x1E\u0545" +
		"\n\x1E\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03 \x03 \x03 \x03!\x03!\x03!\x03" +
		"!\x03!\x03!\x05!\u0554\n!\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x05" +
		"\"\u055D\n\"\x03#\x03#\x03#\x03#\x03#\x03#\x03$\x03$\x03$\x03$\x03$\x05" +
		"$\u056A\n$\x03$\x03$\x03$\x03$\x03$\x07$\u0571\n$\f$\x0E$\u0574\v$\x03" +
		"$\x03$\x05$\u0578\n$\x03$\x05$\u057B\n$\x03$\x05$\u057E\n$\x03$\x05$\u0581" +
		"\n$\x03$\x05$\u0584\n$\x03$\x05$\u0587\n$\x03$\x03$\x03$\x03%\x03%\x05" +
		"%\u058E\n%\x03%\x03%\x03%\x05%\u0593\n%\x03%\x03%\x05%\u0597\n%\x03&\x03" +
		"&\x03&\x03&\x03&\x03&\x07&\u059F\n&\f&\x0E&\u05A2\v&\x03&\x03&\x03&\x03" +
		"&\x03&\x03&\x03&\x03&\x07&\u05AC\n&\f&\x0E&\u05AF\v&\x03&\x03&\x03&\x03" +
		"&\x03&\x03&\x03&\x03&\x07&\u05B9\n&\f&\x0E&\u05BC\v&\x05&\u05BE\n&\x03" +
		"\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x05\'\u05C7\n\'\x03\'\x05\'\u05CA" +
		"\n\'\x03(\x03(\x03(\x03(\x03(\x03(\x03)\x03)\x03)\x03*\x03*\x05*\u05D7" +
		"\n*\x03*\x03*\x03*\x05*\u05DC\n*\x03*\x03*\x03*\x03*\x05*\u05E2\n*\x03" +
		"+\x03+\x03+\x03+\x03+\x03+\x05+\u05EA\n+\x03+\x03+\x03,\x03,\x05,\u05F0" +
		"\n,\x03,\x03,\x03,\x03,\x03,\x03,\x05,\u05F8\n,\x03,\x03,\x03,\x03,\x05" +
		",\u05FE\n,\x03-\x03-\x03-\x03-\x03-\x05-\u0605\n-\x03-\x03-\x03-\x03-" +
		"\x05-\u060B\n-\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x07.\u0616" +
		"\n.\f.\x0E.\u0619\v.\x03.\x03.\x05.\u061D\n.\x03/\x03/\x03/\x03/\x03/" +
		"\x03/\x05/\u0625\n/\x03/\x03/\x05/\u0629\n/\x03/\x03/\x03/\x03/\x03/\x07" +
		"/\u0630\n/\f/\x0E/\u0633\v/\x05/\u0635\n/\x03/\x05/\u0638\n/\x03/\x03" +
		"/\x03/\x03/\x03/\x03/\x05/\u0640\n/\x03/\x03/\x05/\u0644\n/\x03/\x03/" +
		"\x03/\x03/\x03/\x07/\u064B\n/\f/\x0E/\u064E\v/\x05/\u0650\n/\x03/\x05" +
		"/\u0653\n/\x05/\u0655\n/\x030\x030\x030\x050\u065A\n0\x031\x031\x051\u065E" +
		"\n1\x031\x031\x031\x031\x051\u0664\n1\x031\x031\x031\x031\x032\x032\x03" +
		"2\x032\x032\x032\x032\x052\u0671\n2\x033\x033\x033\x033\x034\x034\x03" +
		"4\x034\x054\u067B\n4\x035\x035\x035\x035\x055\u0681\n5\x035\x035\x035" +
		"\x035\x035\x035\x075\u0689\n5\f5\x0E5\u068C\v5\x035\x055\u068F\n5\x03" +
		"5\x035\x035\x035\x035\x035\x055\u0697\n5\x036\x036\x056\u069B\n6\x036" +
		"\x036\x036\x036\x036\x056\u06A2\n6\x036\x036\x036\x036\x036\x076\u06A9" +
		"\n6\f6\x0E6\u06AC\v6\x056\u06AE\n6\x036\x056\u06B1\n6\x037\x037\x037\x03" +
		"7\x037\x037\x038\x038\x038\x058\u06BC\n8\x038\x038\x038\x038\x058\u06C2" +
		"\n8\x038\x038\x038\x038\x038\x078\u06C9\n8\f8\x0E8\u06CC\v8\x038\x038" +
		"\x058\u06D0\n8\x038\x078\u06D3\n8\f8\x0E8\u06D6\v8\x038\x058\u06D9\n8" +
		"\x038\x038\x038\x039\x039\x039\x039\x039\x039\x039\x079\u06E5\n9\f9\x0E" +
		"9\u06E8\v9\x039\x039\x059\u06EC\n9\x039\x039\x039\x039\x039\x039\x039" +
		"\x039\x039\x039\x039\x039\x039\x059\u06FB\n9\x03:\x03:\x03:\x03:\x05:" +
		"\u0701\n:\x03:\x03:\x03;\x03;\x05;\u0707\n;\x03;\x05;\u070A\n;\x03<\x03" +
		"<\x07<\u070E\n<\f<\x0E<\u0711\v<\x03<\x03<\x05<\u0715\n<\x03<\x03<\x03" +
		"<\x03=\x03=\x05=\u071C\n=\x03>\x03>\x03>\x03>\x03?\x03?\x03?\x03?\x03" +
		"?\x03?\x05?\u0728\n?\x03?\x03?\x03?\x03?\x03?\x07?\u072F\n?\f?\x0E?\u0732" +
		"\v?\x03?\x03?\x05?\u0736\n?\x03?\x07?\u0739\n?\f?\x0E?\u073C\v?\x03?\x05" +
		"?\u073F\n?\x03?\x07?\u0742\n?\f?\x0E?\u0745\v?\x03?\x03?\x03?\x03@\x03" +
		"@\x03@\x03@\x03@\x03@\x03@\x05@\u0751\n@\x03A\x03A\x03A\x03A\x03A\x05" +
		"A\u0758\nA\x03A\x03A\x03A\x03A\x05A\u075E\nA\x03B\x03B\x03B\x03B\x03B" +
		"\x05B\u0765\nB\x03B\x03B\x03C\x03C\x03C\x03C\x03C\x03C\x03C\x03C\x05C" +
		"\u0771\nC\x03C\x03C\x03C\x03C\x03C\x03C\x03C\x03C\x03C\x03C\x03C\x03C" +
		"\x03C\x03C\x03C\x03C\x03C\x03C\x05C\u0785\nC\x03D\x03D\x03D\x03D\x03D" +
		"\x03D\x05D\u078D\nD\x03D\x05D\u0790\nD\x03D\x03D\x03D\x05D\u0795\nD\x03" +
		"E\x03E\x03E\x03E\x03E\x03E\x03F\x03F\x03F\x03F\x03F\x03F\x03F\x03F\x03" +
		"G\x03G\x03G\x03G\x03G\x03G\x03H\x03H\x03H\x03H\x03H\x03H\x05H\u07B1\n" +
		"H\x03I\x03I\x03I\x03I\x03I\x03I\x03I\x05I\u07BA\nI\x03J\x03J\x03J\x03" +
		"J\x03J\x03J\x03J\x05J\u07C3\nJ\x03J\x03J\x05J\u07C7\nJ\x03K\x03K\x03K" +
		"\x03K\x03K\x05K\u07CE\nK\x03L\x03L\x03L\x03L\x03L\x03L\x05L\u07D6\nL\x03" +
		"M\x03M\x03M\x03M\x03M\x03M\x03N\x03N\x05N\u07E0\nN\x03N\x05N\u07E3\nN" +
		"\x03N\x03N\x03O\x03O\x03P\x03P\x03P\x03P\x03Q\x03Q\x03Q\x03Q\x03Q\x03" +
		"Q\x07Q\u07F3\nQ\fQ\x0EQ\u07F6\vQ\x03R\x03R\x03R\x03R\x03S\x03S\x03S\x03" +
		"S\x03S\x05S\u0801\nS\x03S\x03S\x03T\x03T\x03T\x03T\x03T\x03U\x03U\x03" +
		"U\x03U\x03V\x03V\x03V\x03W\x03W\x03W\x03W\x03W\x05W\u0816\nW\x03W\x03" +
		"W\x05W\u081A\nW\x03X\x03X\x03X\x03X\x03X\x03X\x05X\u0822\nX\x03Y\x03Y" +
		"\x03Y\x03Y\x05Y\u0828\nY\x03Y\x03Y\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z" +
		"\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x05Z\u083E\nZ" +
		"\x03[\x03[\x03[\x03[\x03[\x03[\x03\\\x03\\\x03\\\x03\\\x05\\\u084A\n\\" +
		"\x03\\\x03\\\x03]\x03]\x03]\x03]\x05]\u0852\n]\x03]\x03]\x03^\x03^\x03" +
		"^\x03^\x03^\x03^\x05^\u085C\n^\x03^\x03^\x03^\x03^\x05^\u0862\n^\x03^" +
		"\x03^\x03_\x03_\x03_\x03_\x03`\x03`\x03`\x03`\x03a\x03a\x03a\x03a\x03" +
		"a\x05a\u0873\na\x03b\x03b\x03b\x03b\x03b\x05b\u087A\nb\x03b\x03b\x03c" +
		"\x03c\x03c\x03c\x03c\x03c\x03c\x07c\u0885\nc\fc\x0Ec\u0888\vc\x03d\x03" +
		"d\x05d\u088C\nd\x03e\x03e\x03e\x03f\x03f\x03f\x03f\x03g\x03g\x03g\x03" +
		"g\x03g\x03h\x03h\x03h\x03h\x03h\x03h\x03h\x03i\x03i\x03i\x03i\x03i\x03" +
		"i\x03i\x03i\x03i\x03i\x03i\x03i\x03i\x03i\x03i\x03i\x03i\x03i\x03i\x03" +
		"i\x03i\x03i\x03i\x03i\x03i\x03i\x03i\x03i\x03i\x03i\x03i\x03i\x03i\x03" +
		"i\x03i\x03i\x05i\u08C5\ni\x03j\x03j\x03j\x03j\x03k\x03k\x03k\x03k\x03" +
		"l\x03l\x03l\x03l\x03l\x03l\x03l\x03m\x03m\x03m\x03m\x03m\x07m\u08DB\n" +
		"m\fm\x0Em\u08DE\vm\x03n\x03n\x03n\x03n\x03n\x07n\u08E5\nn\fn\x0En\u08E8" +
		"\vn\x03n\x05n\u08EB\nn\x03o\x03o\x03o\x03o\x03o\x07o\u08F2\no\fo\x0Eo" +
		"\u08F5\vo\x03p\x03p\x03p\x03p\x03p\x03p\x03p\x03q\x03q\x03q\x03q\x03q" +
		"\x03q\x07q\u0904\nq\fq\x0Eq\u0907\vq\x03r\x03r\x03r\x03r\x03r\x03r\x07" +
		"r\u090F\nr\fr\x0Er\u0912\vr\x03s\x03s\x03s\x03s\x03s\x03s\x07s\u091A\n" +
		"s\fs\x0Es\u091D\vs\x03s\x03s\x03s\x03s\x03s\x03s\x07s\u0925\ns\fs\x0E" +
		"s\u0928\vs\x03s\x03s\x03s\x03s\x05s\u092E\ns\x03t\x03t\x03t\x03t\x03t" +
		"\x05t\u0935\nt\x03u\x03u\x03u\x03v\x03v\x03v\x03v\x03v\x03w\x03w\x03w" +
		"\x03w\x03w\x05w\u0944\nw\x03w\x05w\u0947\nw\x03x\x03x\x03x\x03x\x03y\x03" +
		"y\x03y\x03z\x03z\x03z\x03z\x03{\x03{\x03{\x03|\x03|\x03|\x03|";
	private static readonly _serializedATNSegment1: string =
		"\x03}\x03}\x03}\x03}\x03}\x03}\x05}\u0961\n}\x03}\x03}\x05}\u0965\n}\x03" +
		"}\x05}\u0968\n}\x03~\x03~\x03~\x03~\x03~\x03~\x07~\u0970\n~\f~\x0E~\u0973" +
		"\v~\x03~\x03~\x03~\x05~\u0978\n~\x03~\x05~\u097B\n~\x03\x7F\x03\x7F\x03" +
		"\x7F\x03\x7F\x03\x7F\x05\x7F\u0982\n\x7F\x03\x7F\x05\x7F\u0985\n\x7F\x03" +
		"\x80\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80\x05\x80\u098D\n\x80\x03\x80" +
		"\x03\x80\x05\x80\u0991\n\x80\x03\x80\x05\x80\u0994\n\x80\x03\x81\x03\x81" +
		"\x03\x81\x03\x81\x03\x81\x03\x82\x03\x82\x03\x82\x03\x82\x03\x82\x05\x82" +
		"\u09A0\n\x82\x03\x82\x05\x82\u09A3\n\x82\x03\x83\x03\x83\x03\x83\x03\x83" +
		"\x03\x83\x03\x84\x05\x84\u09AB\n\x84\x03\x84\x03\x84\x03\x84\x05\x84\u09B0" +
		"\n\x84\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85" +
		"\x03\x85\x05\x85\u09BB\n\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03" +
		"\x85\x03\x85\x05\x85\u09C4\n\x85\x03\x86\x03\x86\x03\x86\x03\x86\x03\x86" +
		"\x03\x86\x03\x86\x05\x86\u09CD\n\x86\x03\x86\x03\x86\x03\x86\x03\x86\x03" +
		"\x86\x03\x86\x03\x86\x03\x86\x03\x86\x03\x86\x05\x86\u09D9\n\x86\x03\x87" +
		"\x03\x87\x05\x87\u09DD\n\x87\x03\x87\x03\x87\x03\x87\x05\x87\u09E2\n\x87" +
		"\x03\x87\x05\x87\u09E5\n\x87\x03\x87\x05\x87\u09E8\n\x87\x03\x87\x03\x87" +
		"\x05\x87\u09EC\n\x87\x03\x87\x03\x87\x05\x87\u09F0\n\x87\x03\x87\x05\x87" +
		"\u09F3\n\x87\x03\x87\x05\x87\u09F6\n\x87\x05\x87\u09F8\n\x87\x03\x88\x03" +
		"\x88\x05\x88\u09FC\n\x88\x03\x88\x03\x88\x03\x88\x05\x88\u0A01\n\x88\x03" +
		"\x88\x03\x88\x05\x88\u0A05\n\x88\x03\x89\x03\x89\x03\x89\x03\x8A\x03\x8A" +
		"\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x05\x8A\u0A11\n\x8A\x03\x8A\x03" +
		"\x8A\x03\x8A\x03\x8A\x03\x8A\x05\x8A\u0A18\n\x8A\x03\x8B\x03\x8B\x03\x8B" +
		"\x03\x8B\x03\x8B\x05\x8B\u0A1F\n\x8B\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03" +
		"\x8C\x03\x8D\x05\x8D\u0A27\n\x8D\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x05\x8D" +
		"\u0A2D\n\x8D\x03\x8D\x03\x8D\x03\x8D\x05\x8D\u0A32\n\x8D\x03\x8D\x05\x8D" +
		"\u0A35\n\x8D\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x07\x8D\u0A3C\n\x8D" +
		"\f\x8D\x0E\x8D\u0A3F\v\x8D\x05\x8D\u0A41\n\x8D\x03\x8E\x05\x8E\u0A44\n" +
		"\x8E\x03\x8E\x05\x8E\u0A47\n\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E" +
		"\x03\x8E\x03\x8E\x05\x8E\u0A50\n\x8E\x03\x8F\x05\x8F\u0A53\n\x8F\x03\x8F" +
		"\x05\x8F\u0A56\n\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x05\x8F\u0A5C\n\x8F" +
		"\x03\x8F\x03\x8F\x05\x8F\u0A60\n\x8F\x03\x8F\x03\x8F\x05\x8F\u0A64\n\x8F" +
		"\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x05\x90\u0A6C\n\x90\x03" +
		"\x90\x03\x90\x03\x90\x03\x90\x03\x90\x05\x90\u0A73\n\x90\x03\x90\x03\x90" +
		"\x03\x90\x05\x90\u0A78\n\x90\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03" +
		"\x91\x03\x91\x05\x91\u0A81\n\x91\x03\x91\x03\x91\x03\x91\x05\x91\u0A86" +
		"\n\x91\x03\x91\x05\x91\u0A89\n\x91\x03\x92\x03\x92\x03\x92\x03\x92\x03" +
		"\x93\x03\x93\x03\x93\x07\x93\u0A92\n\x93\f\x93\x0E\x93\u0A95\v\x93\x05" +
		"\x93\u0A97\n\x93\x03\x94\x03\x94\x03\x94\x03\x94\x03\x94\x03\x94\x05\x94" +
		"\u0A9F\n\x94\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95\x03\x96\x03\x96\x03" +
		"\x96\x03\x96\x03\x96\x03\x97\x03\x97\x03\x97\x03\x98\x03\x98\x03\x98\x05" +
		"\x98\u0AB1\n\x98\x03\x98\x03\x98\x03\x98\x05\x98\u0AB6\n\x98\x07\x98\u0AB8" +
		"\n\x98\f\x98\x0E\x98\u0ABB\v\x98\x03\x98\x03\x98\x03\x99\x03\x99\x03\x9A" +
		"\x03\x9A\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x05\x9B" +
		"\u0ACA\n\x9B\x03\x9B\x03\x9B\x03\x9C\x03\x9C\x03\x9C\x03\x9C\x03\x9C\x03" +
		"\x9C\x03\x9C\x05\x9C\u0AD5\n\x9C\x03\x9C\x03\x9C\x03\x9D\x03\x9D\x03\x9D" +
		"\x03\x9D\x03\x9D\x03\x9D\x03\x9D\x05\x9D\u0AE0\n\x9D\x03\x9D\x03\x9D\x03" +
		"\x9E\x03\x9E\x05\x9E\u0AE6\n\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E" +
		"\x03\x9E\x05\x9E\u0AEE\n\x9E\x03\x9E\x05\x9E\u0AF1\n\x9E\x03\x9E\x03\x9E" +
		"\x05\x9E\u0AF5\n\x9E\x03\x9E\x03\x9E\x05\x9E\u0AF9\n\x9E\x03\x9E\x03\x9E" +
		"\x03\x9E\x03\x9E\x03\x9E\x07\x9E\u0B00\n\x9E\f\x9E\x0E\x9E\u0B03\v\x9E" +
		"\x05\x9E\u0B05\n\x9E\x03\x9E\x05\x9E\u0B08\n\x9E\x03\x9F\x03\x9F\x03\x9F" +
		"\x03\x9F\x03\x9F\x03\x9F\x05\x9F\u0B10\n\x9F\x03\x9F\x03\x9F\x03\x9F\x03" +
		"\xA0\x03\xA0\x05\xA0\u0B17\n\xA0\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x03\xA0" +
		"\x03\xA0\x05\xA0\u0B1F\n\xA0\x03\xA0\x05\xA0\u0B22\n\xA0\x03\xA0\x03\xA0" +
		"\x05\xA0\u0B26\n\xA0\x03\xA0\x03\xA0\x05\xA0\u0B2A\n\xA0\x03\xA0\x03\xA0" +
		"\x03\xA0\x03\xA0\x03\xA0\x07\xA0\u0B31\n\xA0\f\xA0\x0E\xA0\u0B34\v\xA0" +
		"\x05\xA0\u0B36\n\xA0\x03\xA0\x05\xA0\u0B39\n\xA0\x03\xA1\x03\xA1\x05\xA1" +
		"\u0B3D\n\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x07\xA1\u0B45" +
		"\n\xA1\f\xA1\x0E\xA1\u0B48\v\xA1\x03\xA1\x03\xA1\x05\xA1\u0B4C\n\xA1\x03" +
		"\xA1\x03\xA1\x03\xA1\x05\xA1\u0B51\n\xA1\x03\xA1\x05\xA1\u0B54\n\xA1\x03" +
		"\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03" +
		"\xA3\x03\xA3\x03\xA3\x03\xA3\x07\xA3\u0B63\n\xA3\f\xA3\x0E\xA3\u0B66\v" +
		"\xA3\x03\xA3\x03\xA3\x03\xA3\x05\xA3\u0B6B\n\xA3\x03\xA3\x03\xA3\x03\xA3" +
		"\x05\xA3\u0B70\n\xA3\x03\xA3\x05\xA3\u0B73\n\xA3\x03\xA4\x03\xA4\x03\xA4" +
		"\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x07\xA4\u0B7E\n\xA4\f" +
		"\xA4\x0E\xA4\u0B81\v\xA4\x03\xA5\x03\xA5\x03\xA5\x05\xA5\u0B86\n\xA5\x03" +
		"\xA5\x03\xA5\x05\xA5\u0B8A\n\xA5\x03\xA5\x03\xA5\x03\xA5\x05\xA5\u0B8F" +
		"\n\xA5\x03\xA5\x03\xA5\x03\xA5\x05\xA5\u0B94\n\xA5\x03\xA5\x03\xA5\x03" +
		"\xA5\x05\xA5\u0B99\n\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA5" +
		"\x07\xA5\u0BA1\n\xA5\f\xA5\x0E\xA5\u0BA4\v\xA5\x03\xA5\x03\xA5\x05\xA5" +
		"\u0BA8\n\xA5\x03\xA5\x05\xA5\u0BAB\n\xA5\x05\xA5\u0BAD\n\xA5\x03\xA6\x03" +
		"\xA6\x03\xA6\x03\xA6\x03\xA7\x03\xA7\x03\xA7\x05\xA7\u0BB6\n\xA7\x03\xA7" +
		"\x03\xA7\x05\xA7\u0BBA\n\xA7\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x05" +
		"\xA8\u0BC1\n\xA8\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x05\xA9\u0BC8" +
		"\n\xA9\x03\xAA\x03\xAA\x03\xAA\x03\xAA\x03\xAB\x03\xAB\x03\xAB\x03\xAB" +
		"\x03\xAB\x03\xAB\x03\xAB\x03\xAB\x03\xAB\x03\xAB\x03\xAB\x03\xAB\x07\xAB" +
		"\u0BDA\n\xAB\f\xAB\x0E\xAB\u0BDD\v\xAB\x05\xAB\u0BDF\n\xAB\x03\xAC\x03" +
		"\xAC\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x05\xAC\u0BE7\n\xAC\x03\xAC\x03\xAC" +
		"\x05\xAC\u0BEB\n\xAC\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x07\xAC\u0BF2" +
		"\n\xAC\f\xAC\x0E\xAC\u0BF5\v\xAC\x05\xAC\u0BF7\n\xAC\x03\xAC\x03\xAC\x03" +
		"\xAC\x03\xAC\x03\xAC\x07\xAC\u0BFE\n\xAC\f\xAC\x0E\xAC\u0C01\v\xAC\x03" +
		"\xAC\x03\xAC\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAE\x03\xAE\x03" +
		"\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x07\xAE\u0C12\n\xAE\f\xAE" +
		"\x0E\xAE\u0C15\v\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03" +
		"\xAE\x03\xAE\x03\xAE\x07\xAE\u0C20\n\xAE\f\xAE\x0E\xAE\u0C23\v\xAE\x03" +
		"\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03" +
		"\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x07" +
		"\xAE\u0C37\n\xAE\f\xAE\x0E\xAE\u0C3A\v\xAE\x03\xAE\x03\xAE\x05\xAE\u0C3E" +
		"\n\xAE\x03\xAF\x03\xAF\x03\xAF\x03\xAF\x03\xAF\x03\xAF\x03\xAF\x03\xAF" +
		"\x05\xAF\u0C48\n\xAF\x05\xAF\u0C4A\n\xAF\x03\xB0\x03\xB0\x05\xB0\u0C4E" +
		"\n\xB0\x03\xB0\x03\xB0\x03\xB0\x05\xB0\u0C53\n\xB0\x03\xB1\x03\xB1\x03" +
		"\xB1\x03\xB1\x03\xB1\x03\xB1\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x03\xB3\x03" +
		"\xB3\x03\xB3\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB5\x03\xB5\x05\xB5\u0C68" +
		"\n\xB5\x03\xB5\x05\xB5\u0C6B\n\xB5\x03\xB5\x03\xB5\x03\xB5\x05\xB5\u0C70" +
		"\n\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x05\xB5\u0C76\n\xB5\x03\xB6\x03" +
		"\xB6\x05\xB6\u0C7A\n\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB6" +
		"\x03\xB7\x03\xB7\x05\xB7\u0C84\n\xB7\x03\xB7\x05\xB7\u0C87\n\xB7\x03\xB7" +
		"\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x05\xB7" +
		"\u0C92\n\xB7\x03\xB7\x05\xB7\u0C95\n\xB7\x03\xB8\x05\xB8\u0C98\n\xB8\x03" +
		"\xB8\x03\xB8\x07\xB8\u0C9C\n\xB8\f\xB8\x0E\xB8\u0C9F\v\xB8\x03\xB8\x03" +
		"\xB8\x05\xB8\u0CA3\n\xB8\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x05\xB9\u0CA9" +
		"\n\xB9\x03\xB9\x05\xB9\u0CAC\n\xB9\x03\xB9\x03\xB9\x05\xB9\u0CB0\n\xB9" +
		"\x03\xB9\x03\xB9\x05\xB9\u0CB4\n\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x05" +
		"\xB9\u0CBA\n\xB9\x03\xB9\x03\xB9\x03\xB9\x05\xB9\u0CBF\n\xB9\x05\xB9\u0CC1" +
		"\n\xB9\x03\xBA\x03\xBA\x03\xBA\x05\xBA\u0CC6\n\xBA\x03\xBA\x03\xBA\x03" +
		"\xBB\x03\xBB\x03\xBB\x03\xBB\x07\xBB\u0CCE\n\xBB\f\xBB\x0E\xBB\u0CD1\v" +
		"\xBB\x03\xBB\x03\xBB\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x05\xBC\u0CD9\n\xBC" +
		"\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x05\xBC\u0CDF\n\xBC\x03\xBC\x03\xBC\x03" +
		"\xBC\x03\xBC\x05\xBC\u0CE5\n\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x05\xBC" +
		"\u0CEB\n\xBC\x03\xBC\x05\xBC\u0CEE\n\xBC\x03\xBC\x05\xBC\u0CF1\n\xBC\x03" +
		"\xBC\x05\xBC\u0CF4\n\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x05\xBC" +
		"\u0CFB\n\xBC\x03\xBC\x03\xBC\x05\xBC\u0CFF\n\xBC\x03\xBC\x03\xBC\x05\xBC" +
		"\u0D03\n\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x05\xBC\u0D0A\n\xBC" +
		"\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x05\xBC\u0D10\n\xBC\x03\xBC\x03\xBC\x05" +
		"\xBC\u0D14\n\xBC\x03\xBC\x03\xBC\x05\xBC\u0D18\n\xBC\x05\xBC\u0D1A\n\xBC" +
		"\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x05\xBD\u0D20\n\xBD\x03\xBD\x03\xBD\x03" +
		"\xBD\x05\xBD\u0D25\n\xBD\x03\xBD\x03\xBD\x03\xBD\x05\xBD\u0D2A\n\xBD\x03" +
		"\xBD\x03\xBD\x03\xBD\x05\xBD\u0D2F\n\xBD\x03\xBD\x03\xBD\x03\xBE\x03\xBE" +
		"\x03\xBE\x05\xBE\u0D36\n\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x05\xBE\u0D3C" +
		"\n\xBE\x05\xBE\u0D3E\n\xBE\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x05\xBF\u0D44" +
		"\n\xBF\x03\xC0\x03\xC0\x03\xC0\x05\xC0\u0D49\n\xC0\x03\xC0\x03\xC0\x05" +
		"\xC0\u0D4D\n\xC0\x03\xC0\x03\xC0\x05\xC0\u0D51\n\xC0\x03\xC0\x03\xC0\x03" +
		"\xC0\x03\xC0\x03\xC0\x07\xC0\u0D58\n\xC0\f\xC0\x0E\xC0\u0D5B\v\xC0\x05" +
		"\xC0\u0D5D\n\xC0\x03\xC0\x05\xC0\u0D60\n\xC0\x03\xC1\x03\xC1\x03\xC1\x03" +
		"\xC1\x03\xC1\x05\xC1\u0D67\n\xC1\x03\xC1\x03\xC1\x05\xC1\u0D6B\n\xC1\x03" +
		"\xC1\x05\xC1\u0D6E\n\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x05\xC1" +
		"\u0D75\n\xC1\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x05\xC2\u0D7B\n\xC2\x03\xC2" +
		"\x03\xC2\x05\xC2\u0D7F\n\xC2\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03" +
		"\xC3\x05\xC3\u0D87\n\xC3\x03\xC3\x03\xC3\x05\xC3\u0D8B\n\xC3\x03\xC4\x03" +
		"\xC4\x03\xC4\x03\xC4\x03\xC4\x03\xC5\x03\xC5\x03\xC5\x03\xC6\x03\xC6\x03" +
		"\xC6\x03\xC7\x03\xC7\x03\xC7\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03" +
		"\xC8\x05\xC8\u0DA1\n\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x05\xC8\u0DA7" +
		"\n\xC8\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x05\xC9\u0DAF\n" +
		"\xC9\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x05\xCA\u0DB5\n\xCA\x03\xCB\x03\xCB" +
		"\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x05\xCB\u0DBD\n\xCB\x03\xCC\x03\xCC\x03" +
		"\xCC\x03\xCC\x05\xCC\u0DC3\n\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x05\xCC" +
		"\u0DC9\n\xCC\x03\xCD\x03\xCD\x03\xCD\x03\xCE\x03\xCE\x03\xCE\x03\xCF\x03" +
		"\xCF\x03\xCF\x03\xD0\x03\xD0\x03\xD0\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03" +
		"\xD2\x03\xD2\x03\xD2\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x03" +
		"\xD3\x05\xD3\u0DE5\n\xD3\x03\xD4\x03\xD4\x03\xD4\x03\xD4\x03\xD5\x03\xD5" +
		"\x05\xD5\u0DED\n\xD5\x03\xD5\x03\xD5\x03\xD6\x03\xD6\x03\xD6\x03\xD6\x05" +
		"\xD6\u0DF5\n\xD6\x03\xD7\x03\xD7\x05\xD7\u0DF9\n\xD7\x03\xD7\x03\xD7\x03" +
		"\xD7\x03\xD7\x03\xD7\x05\xD7\u0E00\n\xD7\x03\xD8\x03\xD8\x03\xD8\x03\xD8" +
		"\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x05\xD8\u0E0A\n\xD8\x03\xD8\x03\xD8\x05" +
		"\xD8\u0E0E\n\xD8\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x07\xD8\u0E15" +
		"\n\xD8\f\xD8\x0E\xD8\u0E18\v\xD8\x05\xD8\u0E1A\n\xD8\x03\xD8\x05\xD8\u0E1D" +
		"\n\xD8\x05\xD8\u0E1F\n\xD8\x03\xD9\x03\xD9\x03\xD9\x03\xD9\x05\xD9\u0E25" +
		"\n\xD9\x03\xD9\x03\xD9\x05\xD9\u0E29\n\xD9\x03\xDA\x03\xDA\x05\xDA\u0E2D" +
		"\n\xDA\x03\xDA\x03\xDA\x03\xDA\x05\xDA\u0E32\n\xDA\x03\xDA\x03\xDA\x03" +
		"\xDA\x03\xDA\x05\xDA\u0E38\n\xDA\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x05\xDB" +
		"\u0E3E\n\xDB\x03\xDB\x03\xDB\x05\xDB\u0E42\n\xDB\x03\xDC\x03\xDC\x05\xDC" +
		"\u0E46\n\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x05\xDC\u0E4D\n\xDC" +
		"\x03\xDD\x03\xDD\x03\xDD\x05\xDD\u0E52\n\xDD\x03\xDE\x03\xDE\x03\xDE\x03" +
		"\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x05\xDF\u0E5C\n\xDF\x03\xDF\x03\xDF" +
		"\x05\xDF\u0E60\n\xDF\x03\xDF\x03\xDF\x03\xDF\x05\xDF\u0E65\n\xDF\x03\xE0" +
		"\x03\xE0\x03\xE0\x03\xE0\x05\xE0\u0E6B\n\xE0\x03\xE0\x03\xE0\x03\xE1\x03" +
		"\xE1\x03\xE1\x03\xE1\x05\xE1\u0E73\n\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1" +
		"\x03\xE1\x03\xE1\x03\xE1\x05\xE1\u0E7C\n\xE1\x03\xE1\x03\xE1\x03\xE1\x03" +
		"\xE1\x03\xE1\x03\xE1\x05\xE1\u0E84\n\xE1\x05\xE1\u0E86\n\xE1\x03\xE2\x03" +
		"\xE2\x03\xE2\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x05" +
		"\xE3\u0E92\n\xE3\x05\xE3\u0E94\n\xE3\x03\xE4\x03\xE4\x03\xE4\x03\xE4\x03" +
		"\xE4\x03\xE4\x05\xE4\u0E9C\n\xE4\x03\xE5\x03\xE5\x03\xE5\x03\xE5\x03\xE5" +
		"\x05\xE5\u0EA3\n\xE5\x03\xE5\x03\xE5\x05\xE5\u0EA7\n\xE5\x03\xE6\x03\xE6" +
		"\x03\xE6\x03\xE6\x05\xE6\u0EAD\n\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03" +
		"\xE6\x03\xE6\x03\xE7\x03\xE7\x03\xE7\x03\xE7\x05\xE7\u0EB9\n\xE7\x03\xE7" +
		"\x03\xE7\x03\xE8\x03\xE8\x03\xE8\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x05\xE9" +
		"\u0EC4\n\xE9\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x03" +
		"\xE9\x05\xE9\u0ECE\n\xE9\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x05\xEA\u0ED4" +
		"\n\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA" +
		"\x05\xEA\u0EDE\n\xEA\x03\xEB\x03\xEB\x03\xEB\x03\xEB\x03\xEB\x03\xEB\x03" +
		"\xEB\x03\xEB\x03\xEB\x03\xEB\x03\xEB\x05\xEB\u0EEB\n\xEB\x03\xEB\x03\xEB" +
		"\x03\xEB\x05\xEB\u0EF0\n\xEB\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03" +
		"\xEC\x05\xEC\u0EF8\n\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xED\x05\xED\u0EFE" +
		"\n\xED\x03\xED\x03\xED\x03\xED\x05\xED\u0F03\n\xED\x03\xEE\x03\xEE\x03" +
		"\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x07\xEE\u0F0C\n\xEE\f\xEE\x0E\xEE" +
		"\u0F0F\v\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x05\xEE\u0F16\n\xEE" +
		"\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE" +
		"\x05\xEE\u0F21\n\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x05\xEE\u0F27\n\xEE" +
		"\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x05\xEE\u0F30" +
		"\n\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE" +
		"\x03\xEE\x05\xEE\u0F3B\n\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03" +
		"\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x05\xEE\u0F47\n\xEE\x03\xEE\x03\xEE" +
		"\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE" +
		"\x05\xEE\u0F54\n\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x05\xEE\u0F5B" +
		"\n\xEE\x05\xEE\u0F5D\n\xEE\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03" +
		"\xEF\x03\xEF\x07\xEF\u0F66\n\xEF\f\xEF\x0E\xEF\u0F69\v\xEF\x03\xEF\x03" +
		"\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03" +
		"\xEF\x03\xEF\x03\xEF\x03\xEF\x05\xEF\u0F79\n\xEF\x03\xEF\x03\xEF\x03\xEF" +
		"\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF" +
		"\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF" +
		"\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF" +
		"\x03\xEF\x05\xEF\u0F9A\n\xEF\x03\xEF\x03\xEF\x03\xEF\x05\xEF\u0F9F\n\xEF" +
		"\x03\xF0\x03\xF0\x03\xF0\x03\xF0\x03\xF0\x03\xF0\x05\xF0\u0FA7\n\xF0\x03" +
		"\xF0\x03\xF0\x03\xF0\x03\xF0\x03\xF0\x03\xF0\x05\xF0\u0FAF\n\xF0\x03\xF1" +
		"\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x03\xF2\x03\xF2\x03\xF2\x03\xF2" +
		"\x03\xF2\x03\xF2\x03\xF2\x03\xF3\x03\xF3\x03\xF3\x03\xF3\x03\xF3\x03\xF4" +
		"\x03\xF4\x03\xF4\x03\xF4\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5" +
		"\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF7\x03\xF7\x03\xF7" +
		"\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8" +
		"\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA" +
		"\x03\xFB\x03\xFB\x03\xFB\x05\xFB\u0FEB\n\xFB\x03\xFB\x03\xFB\x03\xFB\x03" +
		"\xFB\x03\xFB\x03\xFB\x05\xFB\u0FF3\n\xFB\x05\xFB\u0FF5\n\xFB\x03\xFC\x03" +
		"\xFC\x03\xFC\x05\xFC\u0FFA\n\xFC\x03\xFD\x03\xFD\x03\xFD\x07\xFD\u0FFF" +
		"\n\xFD\f\xFD\x0E\xFD\u1002\v\xFD\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE" +
		"\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x07\xFE\u100E\n\xFE\f\xFE\x0E" +
		"\xFE\u1011\v\xFE\x03\xFF\x03\xFF\x03\xFF\x07\xFF\u1016\n\xFF\f\xFF\x0E" +
		"\xFF\u1019\v\xFF\x03\u0100\x03\u0100\x05\u0100\u101D\n\u0100\x03\u0100" +
		"\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03\u0100" +
		"\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03\u0100" +
		"\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x05\u0100\u1033\n\u0100" +
		"\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03\u0100" +
		"\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03\u0100" +
		"\x03\u0100\x05\u0100\u1044\n\u0100\x03\u0101\x03\u0101\x03\u0101\x03\u0101" +
		"\x03\u0101\x03\u0101\x03\u0101\x03\u0101\x03\u0101\x03\u0101\x03\u0101" +
		"\x03\u0101\x03\u0101\x05\u0101\u1053\n\u0101\x03\u0102\x03\u0102\x03\u0102" +
		"\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x03\u0102" +
		"\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x05\u0102" +
		"\u1065\n\u0102\x03\u0103\x03\u0103\x03\u0103\x05\u0103\u106A\n\u0103\x03" +
		"\u0103\x03\u0103\x03\u0103\x03\u0103\x03\u0103\x05\u0103\u1071\n\u0103" +
		"\x03\u0103\x03\u0103\x03\u0103\x03\u0103\x03\u0103\x03\u0103\x07\u0103" +
		"\u1079\n\u0103\f\u0103\x0E\u0103\u107C\v\u0103\x03\u0103\x03\u0103\x03" +
		"\u0103\x03\u0103\x03\u0103\x03\u0103\x05\u0103\u1084\n\u0103\x03\u0104" +
		"\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x05\u0104\u108B\n\u0104\x03\u0104" +
		"\x03\u0104\x05\u0104\u108F\n\u0104\x03\u0105\x03\u0105\x03\u0105\x03\u0105" +
		"\x03\u0105\x05\u0105\u1096\n\u0105\x03\u0105\x03\u0105\x03\u0105\x03\u0105" +
		"\x03\u0105\x03\u0105\x03\u0105\x03\u0105\x03\u0105\x03\u0105\x03\u0105" +
		"\x05\u0105\u10A3\n\u0105\x03\u0105\x03\u0105\x03\u0105\x03\u0105\x03\u0105" +
		"\x03\u0105\x03\u0105\x03\u0105\x03\u0105\x03\u0105\x03\u0105\x05\u0105" +
		"\u10B0\n\u0105\x03\u0105\x03\u0105\x03\u0105\x03\u0105\x03\u0105\x05\u0105" +
		"\u10B7\n\u0105\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x05\u0106" +
		"\u10BE\n\u0106\x03\u0107\x03\u0107\x03\u0107\x03\u0107\x03\u0107\x03\u0107" +
		"\x03\u0108\x03\u0108\x03\u0108\x05\u0108\u10C9\n\u0108\x03\u0108\x03\u0108" +
		"\x03\u0108\x03\u0108\x03\u0108\x03\u0108\x05\u0108\u10D1\n\u0108\x03\u0108" +
		"\x03\u0108\x03\u0108\x03\u0108\x03\u0108\x03\u0108\x07\u0108\u10D9\n\u0108" +
		"\f\u0108\x0E\u0108\u10DC\v\u0108\x03\u0108\x03\u0108\x03\u0108\x03\u0108" +
		"\x03\u0108\x03\u0108\x05\u0108\u10E4\n\u0108\x03\u0109\x03\u0109\x03\u0109" +
		"\x03\u0109\x03\u0109\x03\u0109\x05\u0109\u10EC\n\u0109\x03\u0109\x03\u0109" +
		"\x05\u0109\u10F0\n\u0109\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010A" +
		"\x03\u010A\x05\u010A\u10F8\n\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010A" +
		"\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010A" +
		"\x03\u010A\x05\u010A\u1106\n\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010A" +
		"\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010A" +
		"\x03\u010A\x05\u010A\u1114\n\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010A" +
		"\x03\u010A\x05\u010A\u111B\n\u010A\x03\u010B\x03\u010B\x03\u010B\x03\u010B" +
		"\x03\u010B\x03\u010B\x05\u010B\u1123\n\u010B\x03\u010C\x03\u010C\x03\u010C" +
		"\x03\u010C\x03\u010C\x03\u010C\x03\u010C\x03\u010D\x03\u010D\x03\u010D" +
		"\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E" +
		"\x03\u010E\x03\u010E\x03\u010E\x07\u010E\u1139\n\u010E\f\u010E\x0E\u010E" +
		"\u113C\v\u010E\x03\u010E\x03\u010E\x05\u010E\u1140\n\u010E\x03\u010E\x03" +
		"\u010E\x05\u010E\u1144\n\u010E\x03\u010F\x03\u010F\x03\u010F\x03\u010F" +
		"\x05\u010F\u114A\n\u010F\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x05\u0110" +
		"\u1150\n\u0110\x03\u0111\x03\u0111\x03\u0111\x03\u0111\x03\u0111\x03\u0111" +
		"\x03\u0111\x03\u0111\x03\u0111\x03\u0111\x07\u0111\u115C\n\u0111\f\u0111" +
		"\x0E\u0111\u115F\v\u0111\x03\u0111\x03\u0111\x05\u0111\u1163\n\u0111\x03" +
		"\u0111\x03\u0111\x05\u0111\u1167\n\u0111\x03\u0112\x03\u0112\x03\u0112" +
		"\x03\u0112\x05\u0112\u116D\n\u0112\x03\u0113\x03\u0113\x03\u0113\x03\u0113" +
		"\x05\u0113\u1173\n\u0113\x03\u0113\x03\u0113\x05\u0113\u1177\n\u0113\x03" +
		"\u0114\x03\u0114\x03\u0114\x03\u0114\x03\u0114\x03\u0114\x05\u0114\u117F" +
		"\n\u0114\x03\u0115\x03\u0115\x03\u0115\x05\u0115\u1184\n\u0115\x03\u0115" +
		"\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x05\u0115\u118B\n\u0115\x03\u0115" +
		"\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x05\u0115\u1192\n\u0115\x03\u0116" +
		"\x03\u0116\x03\u0116\x03\u0116\x03\u0117\x03\u0117\x03\u0117\x03\u0117" +
		"\x03\u0118\x03\u0118\x03\u0118\x03\u0118\x03\u0118\x07\u0118\u11A1\n\u0118" +
		"\f\u0118\x0E\u0118\u11A4\v\u0118\x03\u0119\x03\u0119\x03\u0119\x03\u011A" +
		"\x03\u011A\x03\u011A\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x05\u011B" +
		"\u11B0\n\u011B\x03\u011B\x03\u011B\x03\u011B\x05\u011B\u11B5\n\u011B\x03" +
		"\u011B\x05\u011B\u11B8\n\u011B\x03\u011C\x03\u011C\x03\u011C\x03\u011C" +
		"\x05\u011C\u11BE\n\u011C\x03\u011C\x03\u011C\x03\u011C\x03\u011C\x05\u011C" +
		"\u11C4\n\u011C\x03\u011D\x03\u011D\x03\u011D\x03\u011D\x05\u011D\u11CA" +
		"\n\u011D\x03\u011D\x03\u011D\x03\u011D\x03\u011D\x05\u011D\u11D0\n\u011D" +
		"\x03\u011D\x03\u011D\x03\u011D\x03\u011D\x03\u011D\x07\u011D\u11D7\n\u011D" +
		"\f\u011D\x0E\u011D\u11DA\v\u011D\x05\u011D\u11DC\n\u011D\x03\u011D\x05" +
		"\u011D\u11DF\n\u011D\x03\u011E\x03\u011E\x03\u011E\x03\u011E\x03\u011E" +
		"\x05\u011E\u11E6\n\u011E\x03\u011F\x03\u011F\x03\u011F\x03\u011F\x03\u0120" +
		"\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x05\u0120\u11F1\n\u0120\x03\u0120" +
		"\x03\u0120\x03\u0121\x03\u0121\x03\u0121\x03\u0121\x03\u0121\x05\u0121" +
		"\u11FA\n\u0121\x03\u0121\x03\u0121\x03\u0122\x03\u0122\x03\u0122\x03\u0122" +
		"\x05\u0122\u1202\n\u0122\x03\u0123\x03\u0123\x03\u0123\x03\u0123\x07\u0123" +
		"\u1208\n\u0123\f\u0123\x0E\u0123\u120B\v\u0123\x03\u0124\x03\u0124\x03" +
		"\u0124\x03\u0124\x03\u0124\x05\u0124\u1212\n\u0124\x03\u0124\x03\u0124" +
		"\x05\u0124\u1216\n\u0124\x03\u0124\x03\u0124\x03\u0124\x05\u0124\u121B" +
		"\n\u0124\x03\u0124\x03\u0124\x03\u0124\x05\u0124\u1220\n\u0124\x05\u0124" +
		"\u1222\n\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124" +
		"\x03\u0124\x03\u0124\x05\u0124\u122C\n\u0124\x03\u0124\x03\u0124\x03\u0124" +
		"\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124" +
		"\x05\u0124\u1238\n\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124" +
		"\x05\u0124\u123F\n\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124" +
		"\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x05\u0124\u124A\n\u0124\x03\u0124" +
		"\x03\u0124\x05\u0124\u124E\n\u0124\x03\u0125\x03\u0125\x03\u0125\x03\u0125" +
		"\x03\u0125\x03\u0125\x03\u0125\x03\u0125\x03\u0125\x03\u0125\x05\u0125" +
		"\u125A\n\u0125\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x05\u0126\u1260" +
		"\n\u0126\x03\u0127\x03\u0127\x03\u0127\x03\u0127\x03\u0128\x03\u0128\x03" +
		"\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x05\u0128\u126D";
	private static readonly _serializedATNSegment2: string =
		"\n\u0128\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x05\u0129\u1273\n\u0129" +
		"\x03\u012A\x03\u012A\x03\u012A\x03\u012A\x05\u012A\u1279\n\u012A\x03\u012A" +
		"\x03\u012A\x03\u012B\x03\u012B\x03\u012B\x07\u012B\u1280\n\u012B\f\u012B" +
		"\x0E\u012B\u1283\v\u012B\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C" +
		"\x03\u012C\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x05\u012D" +
		"\u1290\n\u012D\x03\u012D\x03\u012D\x05\u012D\u1294\n\u012D\x03\u012D\x03" +
		"\u012D\x05\u012D\u1298\n\u012D\x03\u012D\x03\u012D\x05\u012D\u129C\n\u012D" +
		"\x03\u012D\x05\u012D\u129F\n\u012D\x03\u012D\x05\u012D\u12A2\n\u012D\x03" +
		"\u012D\x05\u012D\u12A5\n\u012D\x03\u012D\x03\u012D\x05\u012D\u12A9\n\u012D" +
		"\x03\u012D\x03\u012D\x05\u012D\u12AD\n\u012D\x03\u012D\x05\u012D\u12B0" +
		"\n\u012D\x03\u012D\x05\u012D\u12B3\n\u012D\x03\u012D\x05\u012D\u12B6\n" +
		"\u012D\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x07\u012D\u12BD" +
		"\n\u012D\f\u012D\x0E\u012D\u12C0\v\u012D\x03\u012D\x03\u012D\x05\u012D" +
		"\u12C4\n\u012D\x03\u012E\x03\u012E\x05\u012E\u12C8\n\u012E\x03\u012E\x05" +
		"\u012E\u12CB\n\u012E\x03\u012E\x03\u012E\x03\u012F\x03\u012F\x05\u012F" +
		"\u12D1\n\u012F\x03\u012F\x05\u012F\u12D4\n\u012F\x03\u012F\x05\u012F\u12D7" +
		"\n\u012F\x03\u0130\x03\u0130\x05\u0130\u12DB\n\u0130\x03\u0130\x03\u0130" +
		"\x05\u0130\u12DF\n\u0130\x03\u0131\x05\u0131\u12E2\n\u0131\x03\u0131\x03" +
		"\u0131\x03\u0132\x03\u0132\x03\u0132\x03\u0132\x07\u0132\u12EA\n\u0132" +
		"\f\u0132\x0E\u0132\u12ED\v\u0132\x03\u0133\x03\u0133\x03\u0133\x03\u0133" +
		"\x03\u0133\x03\u0133\x07\u0133\u12F5\n\u0133\f\u0133\x0E\u0133\u12F8\v" +
		"\u0133\x05\u0133\u12FA\n\u0133\x03\u0133\x05\u0133\u12FD\n\u0133\x03\u0134" +
		"\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134" +
		"\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134" +
		"\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134" +
		"\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x05\u0134\u1319\n\u0134\x03\u0135" +
		"\x03\u0135\x03\u0135\x05\u0135\u131E\n\u0135\x03\u0135\x03\u0135\x03\u0135" +
		"\x05\u0135\u1323\n\u0135\x03\u0135\x03\u0135\x03\u0135\x03\u0135\x05\u0135" +
		"\u1329\n\u0135\x03\u0135\x07\u0135\u132C\n\u0135\f\u0135\x0E\u0135\u132F" +
		"\v\u0135\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x03\u0137\x03\u0137\x03" +
		"\u0137\x03\u0137\x03\u0138\x03\u0138\x05\u0138\u133B\n\u0138\x03\u0138" +
		"\x03\u0138\x05\u0138\u133F\n\u0138\x03\u0139\x03\u0139\x03\u0139\x03\u0139" +
		"\x05\u0139\u1345\n\u0139\x03\u0139\x03\u0139\x03\u0139\x03\u0139\x05\u0139" +
		"\u134B\n\u0139\x03\u013A\x03\u013A\x07\u013A\u134F\n\u013A\f\u013A\x0E" +
		"\u013A\u1352\v\u013A\x03\u013A\x05\u013A\u1355\n\u013A\x03\u013A\x03\u013A" +
		"\x03\u013A\x07\u013A\u135A\n\u013A\f\u013A\x0E\u013A\u135D\v\u013A\x03" +
		"\u013A\x03\u013A\x03\u013A\x05\u013A\u1362\n\u013A\x03\u013A\x03\u013A" +
		"\x03\u013A\x05\u013A\u1367\n\u013A\x03\u013A\x03\u013A\x05\u013A\u136B" +
		"\n\u013A\x03\u013A\x03\u013A\x03\u013A\x03\u013A\x03\u013A\x05\u013A\u1372" +
		"\n\u013A\x03\u013B\x03\u013B\x05\u013B\u1376\n\u013B\x03\u013B\x03\u013B" +
		"\x05\u013B\u137A\n\u013B\x03\u013C\x03\u013C\x03\u013C\x05\u013C\u137F" +
		"\n\u013C\x03\u013C\x03\u013C\x03\u013C\x03\u013C\x05\u013C\u1385\n\u013C" +
		"\x03\u013C\x03\u013C\x03\u013C\x03\u013C\x03\u013C\x03\u013C\x03\u013C" +
		"\x07\u013C\u138E\n\u013C\f\u013C\x0E\u013C\u1391\v\u013C\x03\u013C\x03" +
		"\u013C\x03\u013C\x05\u013C\u1396\n\u013C\x03\u013D\x03\u013D\x05\u013D" +
		"\u139A\n\u013D\x03\u013D\x03\u013D\x07\u013D\u139E\n\u013D\f\u013D\x0E" +
		"\u013D\u13A1\v\u013D\x03\u013D\x03\u013D\x03\u013E\x03\u013E\x05\u013E" +
		"\u13A7\n\u013E\x03\u013E\x03\u013E\x03\u013E\x03\u013E\x03\u013E\x03\u013F" +
		"\x03\u013F\x03\u0140\x03\u0140\x05\u0140\u13B2\n\u0140\x03\u0140\x03\u0140" +
		"\x05\u0140\u13B6\n\u0140\x05\u0140\u13B8\n\u0140\x03\u0140\x03\u0140\x03" +
		"\u0140\x03\u0140\x03\u0140\x05\u0140\u13BF\n\u0140\x03\u0141\x03\u0141" +
		"\x03\u0141\x05\u0141\u13C4\n\u0141\x03\u0141\x07\u0141\u13C7\n\u0141\f" +
		"\u0141\x0E\u0141\u13CA\v\u0141\x03\u0142\x03\u0142\x07\u0142\u13CE\n\u0142" +
		"\f\u0142\x0E\u0142\u13D1\v\u0142\x03\u0142\x03\u0142\x03\u0142\x07\u0142" +
		"\u13D6\n\u0142\f\u0142\x0E\u0142\u13D9\v\u0142\x03\u0142\x03\u0142\x05" +
		"\u0142\u13DD\n\u0142\x03\u0143\x03\u0143\x05\u0143\u13E1\n\u0143\x03\u0143" +
		"\x05\u0143\u13E4\n\u0143\x03\u0143\x05\u0143\u13E7\n\u0143\x03\u0143\x05" +
		"\u0143\u13EA\n\u0143\x03\u0143\x05\u0143\u13ED\n\u0143\x03\u0143\x05\u0143" +
		"\u13F0\n\u0143\x03\u0143\x03\u0143\x03\u0143\x03\u0143\x03\u0143\x07\u0143" +
		"\u13F7\n\u0143\f\u0143\x0E\u0143\u13FA\v\u0143\x03\u0143\x03\u0143\x05" +
		"\u0143\u13FE\n\u0143\x03\u0143\x03\u0143\x05\u0143\u1402\n\u0143\x05\u0143" +
		"\u1404\n\u0143\x03\u0143\x03\u0143\x05\u0143\u1408\n\u0143\x03\u0143\x03" +
		"\u0143\x05\u0143\u140C\n\u0143\x05\u0143\u140E\n\u0143\x03\u0143\x03\u0143" +
		"\x03\u0143\x03\u0143\x03\u0143\x05\u0143\u1415\n\u0143\x03\u0143\x03\u0143" +
		"\x05\u0143\u1419\n\u0143\x05\u0143\u141B\n\u0143\x03\u0143\x03\u0143\x03" +
		"\u0143\x03\u0143\x03\u0143\x03\u0143\x03\u0143\x03\u0143\x05\u0143\u1425" +
		"\n\u0143\x03\u0143\x03\u0143\x05\u0143\u1429\n\u0143\x05\u0143\u142B\n" +
		"\u0143\x03\u0143\x03\u0143\x03\u0143\x05\u0143\u1430\n\u0143\x03\u0143" +
		"\x03\u0143\x05\u0143\u1434\n\u0143\x05\u0143\u1436\n\u0143\x03\u0143\x03" +
		"\u0143\x03\u0143\x03\u0143\x05\u0143\u143C\n\u0143\x03\u0144\x03\u0144" +
		"\x05\u0144\u1440\n\u0144\x03\u0144\x05\u0144\u1443\n\u0144\x03\u0144\x03" +
		"\u0144\x05\u0144\u1447\n\u0144\x03\u0144\x03\u0144\x05\u0144\u144B\n\u0144" +
		"\x03\u0144\x05\u0144\u144E\n\u0144\x03\u0144\x03\u0144\x03\u0144\x05\u0144" +
		"\u1453\n\u0144\x03\u0145\x03\u0145\x03\u0145\x03\u0145\x03\u0145\x03\u0145" +
		"\x05\u0145\u145B\n\u0145\x03\u0146\x03\u0146\x03\u0146\x03\u0146\x03\u0146" +
		"\x03\u0146\x03\u0146\x03\u0146\x03\u0146\x03\u0146\x03\u0146\x03\u0146" +
		"\x03\u0146\x03\u0146\x03\u0146\x03\u0146\x03\u0146\x03\u0146\x03\u0146" +
		"\x03\u0146\x03\u0146\x03\u0146\x03\u0146\x03\u0146\x03\u0146\x03\u0146" +
		"\x03\u0146\x05\u0146\u1478\n\u0146\x03\u0147\x03\u0147\x03\u0147\x03\u0147" +
		"\x07\u0147\u147E\n\u0147\f\u0147\x0E\u0147\u1481\v\u0147\x03\u0147\x03" +
		"\u0147\x03\u0148\x03\u0148\x03\u0148\x03\u0148\x03\u0148\x03\u0148\x07" +
		"\u0148\u148B\n\u0148\f\u0148\x0E\u0148\u148E\v\u0148\x03\u0148\x03\u0148" +
		"\x03\u0148\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u014A\x03\u014A" +
		"\x03\u014A\x03\u014A\x03\u014A\x03\u014A\x03\u014A\x07\u014A\u149E\n\u014A" +
		"\f\u014A\x0E\u014A\u14A1\v\u014A\x03\u014A\x03\u014A\x05\u014A\u14A5\n" +
		"\u014A\x03\u014B\x03\u014B\x03\u014B\x03\u014B\x07\u014B\u14AB\n\u014B" +
		"\f\u014B\x0E\u014B\u14AE\v\u014B\x03\u014B\x03\u014B\x03\u014C\x05\u014C" +
		"\u14B3\n\u014C\x03\u014C\x03\u014C\x03\u014C\x03\u014C\x03\u014C\x07\u014C" +
		"\u14BA\n\u014C\f\u014C\x0E\u014C\u14BD\v\u014C\x03\u014C\x03\u014C\x03" +
		"\u014C\x05\u014C\u14C2\n\u014C\x03\u014C\x03\u014C\x03\u014C\x05\u014C" +
		"\u14C7\n\u014C\x03\u014D\x03\u014D\x03\u014D\x03\u014D\x03\u014D\x07\u014D" +
		"\u14CE\n\u014D\f\u014D\x0E\u014D\u14D1\v\u014D\x03\u014D\x03\u014D\x03" +
		"\u014E\x03\u014E\x03\u014E\x03\u014E\x03\u014E\x07\u014E\u14DA\n\u014E" +
		"\f\u014E\x0E\u014E\u14DD\v\u014E\x03\u014E\x03\u014E\x03\u014F\x03\u014F" +
		"\x03\u014F\x03\u014F\x07\u014F\u14E5\n\u014F\f\u014F\x0E\u014F\u14E8\v" +
		"\u014F\x03\u014F\x03\u014F\x03\u0150\x03\u0150\x05\u0150\u14EE\n\u0150" +
		"\x03\u0151\x03\u0151\x03\u0151\x07\u0151\u14F3\n\u0151\f\u0151\x0E\u0151" +
		"\u14F6\v\u0151\x03\u0152\x03\u0152\x03\u0152\x03\u0152\x03\u0153\x03\u0153" +
		"\x03\u0153\x03\u0154\x03\u0154\x03\u0154\x03\u0154\x05\u0154\u1503\n\u0154" +
		"\x03\u0154\x03\u0154\x03\u0154\x03\u0154\x03\u0154\x03\u0154\x07\u0154" +
		"\u150B\n\u0154\f\u0154\x0E\u0154\u150E\v\u0154\x03\u0155\x03\u0155\x03" +
		"\u0155\x07\u0155\u1513\n\u0155\f\u0155\x0E\u0155\u1516\v\u0155\x03\u0156" +
		"\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x05\u0156\u151E\n\u0156" +
		"\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156" +
		"\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x07\u0156\u152B\n\u0156\f\u0156" +
		"\x0E\u0156\u152E\v\u0156\x03\u0157\x03\u0157\x05\u0157\u1532\n\u0157\x03" +
		"\u0157\x05\u0157\u1535\n\u0157\x03\u0158\x03\u0158\x03\u0158\x03\u0158" +
		"\x06\u0158\u153B\n\u0158\r\u0158\x0E\u0158\u153C\x03\u0158\x03\u0158\x05" +
		"\u0158\u1541\n\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158" +
		"\x03\u0159\x05\u0159\u1549\n\u0159\x03\u0159\x03\u0159\x03\u0159\x03\u0159" +
		"\x03\u0159\x03\u0159\x05\u0159\u1551\n\u0159\x03\u0159\x03\u0159\x03\u0159" +
		"\x03\u0159\x03\u0159\x03\u0159\x05\u0159\u1559\n\u0159\x03\u0159\x03\u0159" +
		"\x03\u0159\x03\u0159\x03\u0159\x03\u0159\x05\u0159\u1561\n\u0159\x03\u0159" +
		"\x03\u0159\x05\u0159\u1565\n\u0159\x03\u015A\x03\u015A\x03\u015A\x03\u015A" +
		"\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A" +
		"\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A" +
		"\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A" +
		"\x03\u015A\x03\u015A\x07\u015A\u1582\n\u015A\f\u015A\x0E\u015A\u1585\v" +
		"\u015A\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03" +
		"\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03" +
		"\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03" +
		"\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03" +
		"\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03" +
		"\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03" +
		"\u015B\x06\u015B\u15B1\n\u015B\r\u015B\x0E\u015B\u15B2\x03\u015B\x03\u015B" +
		"\x05\u015B\u15B7\n\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x06\u015B" +
		"\u15BD\n\u015B\r\u015B\x0E\u015B\u15BE\x03\u015B\x03\u015B\x05\u015B\u15C3" +
		"\n\u015B\x03\u015B\x03\u015B\x03\u015B\x05\u015B\u15C8\n\u015B\x03\u015B" +
		"\x03\u015B\x05\u015B\u15CC\n\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B" +
		"\x05\u015B\u15D2\n\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B" +
		"\x05\u015B\u15D9\n\u015B\x03\u015B\x03\u015B\x03\u015B\x05\u015B\u15DE" +
		"\n\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03" +
		"\u015B\x05\u015B\u15E7\n\u015B\x03\u015B\x03\u015B\x05\u015B\u15EB\n\u015B" +
		"\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B" +
		"\x05\u015B\u15F4\n\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x05\u015B" +
		"\u15FA\n\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B" +
		"\x03\u015B\x03\u015B\x05\u015B\u1604\n\u015B\x03\u015B\x03\u015B\x05\u015B" +
		"\u1608\n\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x07\u015B\u160E" +
		"\n\u015B\f\u015B\x0E\u015B\u1611\v\u015B\x03\u015C\x03\u015C\x03\u015C" +
		"\x03\u015C\x03\u015C\x03\u015C\x03\u015C\x03\u015C\x03\u015C\x05\u015C" +
		"\u161C\n\u015C\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D" +
		"\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x07\u015D" +
		"\u162A\n\u015D\f\u015D\x0E\u015D\u162D\v\u015D\x05\u015D\u162F\n\u015D" +
		"\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x07\u015D" +
		"\u1637\n\u015D\f\u015D\x0E\u015D\u163A\v\u015D\x05\u015D\u163C\n\u015D" +
		"\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x05\u015D" +
		"\u1644\n\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D" +
		"\x03\u015D\x03\u015D\x07\u015D\u164E\n\u015D\f\u015D\x0E\u015D\u1651\v" +
		"\u015D\x05\u015D\u1653\n\u015D\x03\u015D\x03\u015D\x05\u015D\u1657\n\u015D" +
		"\x05\u015D\u1659\n\u015D\x03\u015E\x03\u015E\x03\u015E\x05\u015E\u165E" +
		"\n\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x05" +
		"\u015E\u1666\n\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E" +
		"\x05\u015E\u166D\n\u015E\x05\u015E\u166F\n\u015E\x03\u015E\x03\u015E\x03" +
		"\u015E\x07\u015E\u1674\n\u015E\f\u015E\x0E\u015E\u1677\v\u015E\x05\u015E" +
		"\u1679\n\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x05\u015E\u167F" +
		"\n\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x05" +
		"\u015E\u1687\n\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E" +
		"\x03\u015E\x05\u015E\u168F\n\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E" +
		"\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E" +
		"\x07\u015E\u169C\n\u015E\f\u015E\x0E\u015E\u169F\v\u015E\x05\u015E\u16A1" +
		"\n\u015E\x03\u015E\x03\u015E\x05\u015E\u16A5\n\u015E\x03\u015F\x03\u015F" +
		"\x03\u015F\x03\u0160\x03\u0160\x03\u0160\x03\u0160\x03\u0160\x05\u0160" +
		"\u16AF\n\u0160\x03\u0160\x03\u0160\x03\u0161\x03\u0161\x03\u0162\x03\u0162" +
		"\x03\u0162\x03\u0162\x03\u0162\x03\u0162\x03\u0162\x03\u0162\x03\u0162" +
		"\x03\u0162\x03\u0162\x03\u0162\x03\u0162\x03\u0162\x03\u0162\x05\u0162" +
		"\u16C4\n\u0162\x03\u0162\x03\u0162\x03\u0162\x05\u0162\u16C9\n\u0162\x05" +
		"\u0162\u16CB\n\u0162\x03\u0163\x03\u0163\x03\u0163\x05\u0163\u16D0\n\u0163" +
		"\x03\u0163\x03\u0163\x03\u0163\x05\u0163\u16D5\n\u0163\x03\u0163\x03\u0163" +
		"\x03\u0163\x05\u0163\u16DA\n\u0163\x03\u0163\x03\u0163\x03\u0163\x05\u0163" +
		"\u16DF\n\u0163\x03\u0163\x03\u0163\x03\u0163\x05\u0163\u16E4\n\u0163\x05" +
		"\u0163\u16E6\n\u0163\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x07\u0164\u16FC\n\u0164\f\u0164\x0E\u0164\u16FF\v\u0164\x05" +
		"\u0164\u1701\n\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x07\u0164\u1734\n\u0164\f\u0164\x0E\u0164\u1737\v" +
		"\u0164\x05\u0164\u1739\n\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x05\u0164\u1775\n\u0164" +
		"\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165" +
		"\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165" +
		"\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x05\u0165\u1789\n\u0165\x03\u0165" +
		"\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x05\u0165\u1790\n\u0165\x03\u0165" +
		"\x03\u0165\x07\u0165\u1794\n\u0165\f\u0165\x0E\u0165\u1797\v\u0165\x05" +
		"\u0165\u1799\n\u0165\x03\u0165\x03\u0165\x05\u0165\u179D\n\u0165\x03\u0165" +
		"\x03\u0165\x03\u0165\x03\u0165\x05\u0165\u17A3\n\u0165\x03\u0165\x03\u0165" +
		"\x07\u0165\u17A7\n\u0165\f\u0165\x0E\u0165\u17AA\v\u0165\x05\u0165\u17AC" +
		"\n\u0165\x03\u0165\x03\u0165\x05\u0165\u17B0\n\u0165\x03\u0165\x03\u0165" +
		"\x03\u0165\x03\u0165\x05\u0165\u17B6\n\u0165\x03\u0165\x03\u0165\x07\u0165" +
		"\u17BA\n\u0165\f\u0165\x0E\u0165\u17BD\v\u0165\x05\u0165\u17BF\n\u0165" +
		"\x03\u0165\x03\u0165\x05\u0165\u17C3\n\u0165\x03\u0165\x03\u0165\x03\u0165" +
		"\x03\u0165\x05\u0165\u17C9\n\u0165\x03\u0165\x03\u0165\x07\u0165\u17CD" +
		"\n\u0165\f\u0165\x0E\u0165\u17D0\v\u0165\x05\u0165\u17D2\n\u0165\x03\u0165" +
		"\x03\u0165\x05\u0165\u17D6\n\u0165\x05\u0165\u17D8\n\u0165\x03\u0166\x03" +
		"\u0166\x03\u0166\x03\u0166\x03\u0166\x03\u0167\x03\u0167\x03\u0167\x05" +
		"\u0167\u17E2\n\u0167\x03\u0167\x03\u0167\x03\u0167\x03\u0167\x03\u0167" +
		"\x07\u0167\u17E9\n\u0167\f\u0167\x0E\u0167\u17EC\v\u0167\x05\u0167\u17EE" +
		"\n\u0167\x03\u0167\x03\u0167\x03\u0167\x03\u0167\x03\u0167\x07\u0167\u17F5" +
		"\n\u0167\f\u0167\x0E\u0167\u17F8\v\u0167\x05\u0167\u17FA\n\u0167\x03\u0167" +
		"\x03\u0167\x03\u0168\x03\u0168\x03\u0168\x03\u0169\x03\u0169\x05\u0169" +
		"\u1803\n\u0169\x03\u016A\x03\u016A\x05\u016A\u1807\n\u016A\x03\u016A\x03" +
		"\u016A\x05\u016A\u180B\n\u016A\x03\u016B\x03\u016B\x05\u016B\u180F\n\u016B" +
		"\x03\u016C\x03\u016C\x03\u016C\x03\u016D\x03\u016D\x03\u016D\x03\u016D" +
		"\x03\u016D\x03\u016D\x03\u016D\x03\u016D\x07\u016D\u181C\n\u016D\f\u016D" +
		"\x0E\u016D\u181F\v\u016D\x05\u016D\u1821\n\u016D\x03\u016D\x03\u016D\x03" +
		"\u016D\x03\u016D\x03\u016D\x03\u016D\x03\u016D\x03\u016D\x03\u016D\x03" +
		"\u016D\x07\u016D\u182D\n\u016D\f\u016D\x0E\u016D\u1830\v\u016D\x05\u016D" +
		"\u1832\n\u016D\x03\u016D\x03\u016D\x03\u016D\x03\u016D\x03\u016D\x05\u016D" +
		"\u1839\n\u016D\x03\u016D\x03\u016D\x03\u016D\x03\u016D\x03\u016D\x07\u016D" +
		"\u1840\n\u016D\f\u016D\x0E\u016D\u1843\v\u016D\x05\u016D\u1845\n\u016D" +
		"\x03\u016D\x03\u016D\x03\u016D\x03\u016D\x03\u016D\x05\u016D\u184C\n\u016D" +
		"\x03\u016D\x03\u016D\x03\u016D\x03\u016D\x03\u016D\x03\u016D\x03\u016D" +
		"\x03\u016D\x07\u016D\u1856\n\u016D\f\u016D\x0E\u016D\u1859\v\u016D\x05" +
		"\u016D\u185B\n\u016D\x03\u016D\x03\u016D\x03\u016D\x03\u016D\x03\u016D" +
		"\x05\u016D\u1862\n\u016D\x03\u016E\x03\u016E\x05\u016E\u1866\n\u016E\x03" +
		"\u016F\x03\u016F\x03\u016F\x03\u016F\x05\u016F\u186C\n\u016F\x03\u016F" +
		"\x03\u016F\x03\u016F\x03\u016F\x03\u016F\x05\u016F\u1873\n\u016F\x03\u0170" +
		"\x03\u0170\x03\u0170\x03\u0170\x05\u0170\u1879\n\u0170\x03\u0170\x03\u0170" +
		"\x03\u0170\x03\u0170\x03\u0170\x03\u0170\x03\u0170\x07\u0170\u1882\n\u0170" +
		"\f\u0170\x0E\u0170\u1885\v\u0170\x03\u0170\x03\u0170\x05\u0170\u1889\n" +
		"\u0170\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x07\u0171\u188F\n\u0171" +
		"\f\u0171\x0E\u0171\u1892\v\u0171\x03\u0171\x03\u0171\x03\u0172\x03\u0172" +
		"\x05\u0172\u1898\n\u0172\x03\u0173\x03\u0173\x03\u0173\x03\u0173\x05\u0173" +
		"\u189E\n\u0173\x03\u0173\x03\u0173\x03\u0173\x03\u0173\x05\u0173\u18A4" +
		"\n\u0173\x03\u0174\x03\u0174\x03\u0174\x03\u0174\x03\u0174\x03\u0174\x03" +
		"\u0174\x03\u0174\x03\u0174\x03\u0174\x03\u0174\x03\u0174\x03\u0174\x03" +
		"\u0174\x03\u0174\x03\u0174\x03\u0174\x03\u0174\x03\u0174\x03\u0174\x03" +
		"\u0174\x03\u0174\x03\u0174\x03\u0174\x03\u0174\x03\u0174\x05\u0174\u18C0" +
		"\n\u0174\x03\u0175\x03\u0175\x03\u0175\x03\u0175\x03\u0175\x03\u0175\x03" +
		"\u0175\x03\u0175\x03\u0175\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x05" +
		"\u0176\u18CF\n\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x05\u0176\u18D7\n\u0176\x03\u0177\x03\u0177\x03\u0177\x03\u0177" +
		"\x07\u0177\u18DD\n\u0177\f\u0177\x0E\u0177\u18E0\v\u0177\x03\u0177\x03" +
		"\u0177\x03\u0178\x03\u0178\x03\u0178\x03\u0178\x03\u0179\x03\u0179\x05" +
		"\u0179\u18EA\n\u0179\x03\u017A\x03\u017A\x03\u017A\x03\u017A\x03\u017A" +
		"\x03\u017A\x05\u017A\u18F2\n\u017A\x03\u017A\x03\u017A\x03\u017A\x03\u017A" +
		"\x05\u017A\u18F8\n\u017A\x03\u017B\x03\u017B\x03\u017B\x03\u017B\x03\u017B" +
		"\x03\u017B\x05\u017B\u1900\n\u017B\x03\u017B\x03\u017B\x03\u017B\x03\u017B" +
		"\x03\u017B\x03\u017B\x03\u017B\x03\u017B\x03\u017B\x05\u017B\u190B\n\u017B" +
		"\x05\u017B\u190D\n\u017B\x03\u017C\x03\u017C\x05\u017C\u1911\n\u017C\x03" +
		"\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x05" +
		"\u017C\u191A\n\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C" +
		"\x03\u017C\x03\u017C\x05\u017C\u1923\n\u017C\x03\u017D\x03\u017D\x03\u017E" +
		"\x03\u017E\x03\u017E\x03\u017E\x03\u017E\x07\u017E\u192C\n\u017E\f\u017E" +
		"\x0E\u017E\u192F\v\u017E\x03\u017E\x03\u017E\x03\u017F\x03\u017F\x03\u017F" +
		"\x03\u0180\x03\u0180\x03\u0180\x03\u0180\x07\u0180\u193A\n\u0180\f\u0180" +
		"\x0E\u0180\u193D\v\u0180\x03\u0180\x03\u0180\x03\u0181\x03\u0181\x03\u0181" +
		"\x07\u0181\u1944\n\u0181\f\u0181\x0E\u0181\u1947\v\u0181\x03\u0182\x03" +
		"\u0182\x03\u0182\x03\u0182\x03\u0183\x03\u0183\x03\u0184\x03\u0184\x03" +
		"\u0184\x03\u0185\x03\u0185\x03\u0185\x03\u0185\x05\u0185\u1956\n\u0185" +
		"\x03\u0185\x05\u0185\u1959\n\u0185\x03\u0186\x03\u0186\x03\u0186\x03\u0186" +
		"\x05\u0186\u195F\n\u0186\x03\u0187\x03\u0187\x03\u0188\x03\u0188\x03\u0189" +
		"\x03\u0189\x03\u018A\x03\u018A\x03\u018B\x03\u018B\x03\u018B\x03\u018B" +
		"\x03\u018C\x03\u018C\x03\u018D\x03\u018D\x03\u018E\x03\u018E\x03\u018E" +
		"\x03\u018E\x03\u018E\x05\u018E\u1976\n\u018E\x03\u018F\x03\u018F\x03\u018F" +
		"\x03\u018F\x03\u018F\x03\u0190\x03\u0190\x03\u0190\x03\u0190\x03\u0190" +
		"\x03\u0190\x03\u0190\x03\u0191\x03\u0191\x03\u0191\x03\u0192\x03\u0192" +
		"\x03\u0192\x07\u0192\u198A\n\u0192\f\u0192\x0E\u0192\u198D\v\u0192\x03" +
		"\u0193\x03\u0193\x03\u0193\x03\u0193\x03\u0193\x03\u0194\x03\u0194\x03" +
		"\u0194\x03\u0194\x03\u0195\x03\u0195\x03\u0195\x05\u0195\u199B\n\u0195" +
		"\x03\u0195\x03\u0195\x05\u0195\u199F\n\u0195\x03\u0195\x03\u0195\x05\u0195" +
		"\u19A3\n\u0195\x03\u0195\x03\u0195\x05\u0195\u19A7\n\u0195\x03\u0195\x03" +
		"\u0195\x05\u0195\u19AB\n\u0195\x03\u0195\x03\u0195\x05\u0195\u19AF\n\u0195" +
		"\x03\u0195\x03\u0195\x05\u0195\u19B3\n\u0195\x03\u0195\x03\u0195\x05\u0195" +
		"\u19B7\n\u0195\x03\u0195\x03\u0195\x05\u0195\u19BB\n\u0195\x03\u0195\x03" +
		"\u0195\x05\u0195\u19BF\n\u0195\x03\u0195\x03\u0195\x03\u0195\x03\u0195" +
		"\x03\u0195\x03\u0195\x03\u0195\x05\u0195\u19C8\n\u0195\x03\u0195\x03\u0195" +
		"\x05\u0195\u19CC\n\u0195\x03\u0195\x03\u0195\x03\u0195\x03\u0195\x03\u0195" +
		"\x03\u0195\x03\u0195\x03\u0195\x05\u0195\u19D6\n\u0195\x03\u0195\x03\u0195" +
		"\x05\u0195\u19DA\n\u0195\x05\u0195\u19DC\n\u0195\x03\u0196\x03\u0196\x03" +
		"\u0196\x03\u0196\x03\u0196\x05\u0196\u19E3\n\u0196\x03\u0196\x05\u0196" +
		"\u19E6\n\u0196\x03\u0197\x03\u0197\x03\u0197\x03\u0197\x07\u0197\u19EC" +
		"\n\u0197\f\u0197\x0E\u0197\u19EF\v\u0197\x03\u0198\x03\u0198\x03\u0198" +
		"\x03\u0198\x05\u0198\u19F5\n\u0198\x03\u0199\x03\u0199\x03\u0199\x03\u0199" +
		"\x07\u0199\u19FB\n\u0199\f\u0199\x0E\u0199\u19FE\v\u0199\x03\u0199\x03" +
		"\u0199\x03\u019A\x03\u019A\x05\u019A\u1A04\n\u019A\x03\u019B\x03\u019B" +
		"\x03\u019B\x07\u019B\u1A09\n\u019B\f\u019B\x0E\u019B\u1A0C\v\u019B\x03" +
		"\u019C\x03\u019C\x03\u019C\x05\u019C\u1A11\n\u019C\x03\u019D\x03\u019D" +
		"\x03\u019D\x03\u019D\x03\u019D\x03\u019D\x03\u019D\x03\u019D\x03\u019D" +
		"\x03\u019D\x03\u019D\x05\u019D\u1A1E\n\u019D\x03\u019E\x03\u019E\x03\u019E" +
		"\x03\u019E\x03\u019F\x03\u019F\x03\u019F\x07\u019F\u1A27\n\u019F\f\u019F" +
		"\x0E\u019F\u1A2A\v\u019F\x03\u01A0\x03\u01A0\x03\u01A0\x05\u01A0\u1A2F" +
		"\n\u01A0\x03\u01A1\x03\u01A1\x03\u01A1\x02\x02\x07\u0268\u02A6\u02AA\u02B2" +
		"\u02B4\u01A2\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10\x02" +
		"\x12\x02\x14\x02\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02\"\x02$\x02" +
		"&\x02(\x02*\x02,\x02.\x020\x022\x024\x026\x028\x02:\x02<\x02>\x02@\x02" +
		"B\x02D\x02F\x02H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02X\x02Z\x02\\\x02" +
		"^\x02`\x02b\x02d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02t\x02v\x02x\x02" +
		"z\x02|\x02~\x02\x80\x02\x82\x02\x84\x02\x86\x02\x88\x02\x8A\x02\x8C\x02" +
		"\x8E\x02\x90\x02\x92\x02\x94\x02\x96\x02\x98\x02\x9A\x02\x9C\x02\x9E\x02" +
		"\xA0\x02\xA2\x02\xA4\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02\xAE\x02\xB0\x02" +
		"\xB2\x02\xB4\x02\xB6\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02\xC0\x02\xC2\x02" +
		"\xC4\x02\xC6\x02\xC8\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02\xD2\x02\xD4\x02" +
		"\xD6\x02\xD8\x02\xDA\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02\xE4\x02\xE6\x02" +
		"\xE8\x02\xEA\x02\xEC\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02\xF6\x02\xF8\x02" +
		"\xFA\x02\xFC\x02\xFE\x02\u0100\x02\u0102\x02\u0104\x02\u0106\x02\u0108" +
		"\x02\u010A\x02\u010C\x02\u010E\x02\u0110\x02\u0112\x02\u0114\x02\u0116" +
		"\x02\u0118\x02\u011A\x02\u011C\x02\u011E\x02\u0120\x02\u0122\x02\u0124" +
		"\x02\u0126\x02\u0128\x02\u012A\x02\u012C\x02\u012E\x02\u0130\x02\u0132" +
		"\x02\u0134\x02\u0136\x02\u0138\x02\u013A\x02\u013C\x02\u013E\x02\u0140" +
		"\x02\u0142\x02\u0144\x02\u0146\x02\u0148\x02\u014A\x02\u014C\x02\u014E" +
		"\x02\u0150\x02\u0152\x02\u0154\x02\u0156\x02\u0158\x02\u015A\x02\u015C" +
		"\x02\u015E\x02\u0160\x02\u0162\x02\u0164\x02\u0166\x02\u0168\x02\u016A" +
		"\x02\u016C\x02\u016E\x02\u0170\x02\u0172\x02\u0174\x02\u0176\x02\u0178" +
		"\x02\u017A\x02\u017C\x02\u017E\x02\u0180\x02\u0182\x02\u0184\x02\u0186" +
		"\x02\u0188\x02\u018A\x02\u018C\x02\u018E\x02\u0190\x02\u0192\x02\u0194" +
		"\x02\u0196\x02\u0198\x02\u019A\x02\u019C\x02\u019E\x02\u01A0\x02\u01A2" +
		"\x02\u01A4\x02\u01A6\x02\u01A8\x02\u01AA\x02\u01AC\x02\u01AE\x02\u01B0" +
		"\x02\u01B2\x02\u01B4\x02\u01B6\x02\u01B8\x02\u01BA\x02\u01BC\x02\u01BE" +
		"\x02\u01C0\x02\u01C2\x02\u01C4\x02\u01C6\x02\u01C8\x02\u01CA\x02\u01CC" +
		"\x02\u01CE\x02\u01D0\x02\u01D2\x02\u01D4\x02\u01D6\x02\u01D8\x02\u01DA" +
		"\x02\u01DC\x02\u01DE\x02\u01E0\x02\u01E2\x02\u01E4\x02\u01E6\x02\u01E8" +
		"\x02\u01EA\x02\u01EC\x02\u01EE\x02\u01F0\x02\u01F2\x02\u01F4\x02\u01F6" +
		"\x02\u01F8\x02\u01FA\x02\u01FC\x02\u01FE\x02\u0200\x02\u0202\x02\u0204" +
		"\x02\u0206\x02\u0208\x02\u020A\x02\u020C\x02\u020E\x02\u0210\x02\u0212" +
		"\x02\u0214\x02\u0216\x02\u0218\x02\u021A\x02\u021C\x02\u021E\x02\u0220" +
		"\x02\u0222\x02\u0224\x02\u0226\x02\u0228\x02\u022A\x02\u022C\x02\u022E" +
		"\x02\u0230\x02\u0232\x02\u0234\x02\u0236\x02\u0238\x02\u023A\x02\u023C" +
		"\x02\u023E\x02\u0240\x02\u0242\x02\u0244\x02\u0246\x02\u0248\x02\u024A" +
		"\x02\u024C\x02\u024E\x02\u0250\x02\u0252\x02\u0254\x02\u0256\x02\u0258" +
		"\x02\u025A\x02\u025C\x02\u025E\x02\u0260\x02\u0262\x02\u0264\x02\u0266" +
		"\x02\u0268\x02\u026A\x02\u026C\x02\u026E\x02\u0270\x02\u0272\x02\u0274" +
		"\x02\u0276\x02\u0278\x02\u027A\x02\u027C\x02\u027E\x02\u0280\x02\u0282" +
		"\x02\u0284\x02\u0286\x02\u0288\x02\u028A\x02\u028C\x02\u028E\x02\u0290" +
		"\x02\u0292\x02\u0294\x02\u0296\x02\u0298\x02\u029A\x02\u029C\x02\u029E" +
		"\x02\u02A0\x02\u02A2\x02\u02A4\x02\u02A6\x02\u02A8\x02\u02AA\x02";
	private static readonly _serializedATNSegment3: string =
		"\u02AC\x02\u02AE\x02\u02B0\x02\u02B2\x02\u02B4\x02\u02B6\x02\u02B8\x02" +
		"\u02BA\x02\u02BC\x02\u02BE\x02\u02C0\x02\u02C2\x02\u02C4\x02\u02C6\x02" +
		"\u02C8\x02\u02CA\x02\u02CC\x02\u02CE\x02\u02D0\x02\u02D2\x02\u02D4\x02" +
		"\u02D6\x02\u02D8\x02\u02DA\x02\u02DC\x02\u02DE\x02\u02E0\x02\u02E2\x02" +
		"\u02E4\x02\u02E6\x02\u02E8\x02\u02EA\x02\u02EC\x02\u02EE\x02\u02F0\x02" +
		"\u02F2\x02\u02F4\x02\u02F6\x02\u02F8\x02\u02FA\x02\u02FC\x02\u02FE\x02" +
		"\u0300\x02\u0302\x02\u0304\x02\u0306\x02\u0308\x02\u030A\x02\u030C\x02" +
		"\u030E\x02\u0310\x02\u0312\x02\u0314\x02\u0316\x02\u0318\x02\u031A\x02" +
		"\u031C\x02\u031E\x02\u0320\x02\u0322\x02\u0324\x02\u0326\x02\u0328\x02" +
		"\u032A\x02\u032C\x02\u032E\x02\u0330\x02\u0332\x02\u0334\x02\u0336\x02" +
		"\u0338\x02\u033A\x02\u033C\x02\u033E\x02\u0340\x02\x022\x04\x02\x8F\x8F" +
		"\xAB\xAB\x04\x02UU\u0145\u0145\x06\x02\t\tmm\u0112\u0112\u017F\u017F\t" +
		"\x02\"\"\xA1\xA1\xDF\xDF\xE2\xE2\u010C\u010C\u012D\u012E\u015F\u015F\x04" +
		"\x02<<\x80\x80\x04\x02;;\u013E\u013E\x03\x02ef\x04\x02\xAE\xAF\xC2\xC3" +
		"\x04\x02\x14\x14\u0161\u0161\x04\x02\x8A\x8A\xF6\xF6\x04\x02\xAB\xAB\u0174" +
		"\u0174\x04\x02\x1C\x1CMM\x03\x02\xBB\xBC\x04\x02\x92\x92\u0143\u0143\x04" +
		"\x02\xBF\xBF\u0158\u0158\x04\x02))\x95\x95\x04\x02\t\t\u0166\u0166\x04" +
		"\x02\x93\x93\u0115\u0115\x04\x02tt\u0195\u0195\x03\x02\u0186\u0187\x04" +
		"\x02\x12\x12**\x04\x02\x90\x90\u01BA\u01BA\x05\x02ww\xE4\xE4\u017E\u017E" +
		"\x04\x02\x13\x13ee\x04\x02\x84\x84\xC8\xC8\x04\x02\n\ngg\x03\x02\u0104" +
		"\u0105\x04\x02\r\r\u01AE\u01AE\x04\x02\xFF\xFF\u01AD\u01AD\x05\x02\xCF" +
		"\xCF\u0127\u0127\u013A\u013A\x05\x02\xE6\xE6\u01AA\u01AC\u01B0\u01B0\x03" +
		"\x02\u01A8\u01A9\x04\x02\u01A8\u01A9\u01B4\u01B4\x03\x02WX\x04\x02efz" +
		"z\x06\x02\f\fGG\xD8\xD8\u018E\u018E\x04\x02\xFD\xFD\u0126\u0126\x04\x02" +
		"cc\xA8\xA8\x04\x02\x04\x04\xAC\xAC\x06\x02\x95\x95\xD3\xD3\u014C\u014C" +
		"\u018E\u018E\x03\x02\u01BD\u01BE\x03\x02\u01BF\u01C0\x03\x02\u01A1\u01A7" +
		"\x04\x02\x7F\x7F\u0178\u0178\n\x02YY\xA3\xA3\xE3\xE3\xE9\xE9\u011C\u011C" +
		"\u0147\u0147\u0196\u0196\u019D\u019D\x04\x0200\x87\x87\x04\x02Z^\xF4\xF5" +
		"^\x02\x04\x04\x07\t\x0E\x0E\x14\x1B\x1D\x1D\"#%%\')++-14468::<?BEGHLL" +
		"NNTTWY__himnpvxx{~\x80\x81\x83\x84\x87\x8A\x8D\x8E\x90\x91\x94\x95\x97" +
		"\x97\x9C\x9C\x9E\x9F\xA1\xA5\xA7\xA7\xAA\xAA\xAC\xAD\xAF\xAF\xB2\xB2\xB8" +
		"\xB8\xBA\xBA\xBC\xBC\xBE\xBF\xC5\xC5\xC8\xC8\xCD\xCE\xD1\xD1\xD3\xD3\xD6" +
		"\xD6\xD8\xDA\xDE\xDF\xE1\xE5\xE7\xF0\xF3\xF8\xFA\xFE\u0105\u010A\u010C" +
		"\u010E\u0111\u0111\u0113\u0114\u0116\u0120\u0122\u0122\u0124\u0126\u0129" +
		"\u0129\u012B\u012C\u012E\u0136\u0138\u0138\u013B\u0140\u0143\u0144\u0147" +
		"\u0147\u014A\u014C\u014E\u014E\u0150\u0151\u0154\u015C\u015E\u0161\u0163" +
		"\u0165\u0167\u016A\u016C\u016C\u016E\u0171\u0173\u0173\u0175\u0177\u0179" +
		"\u017D\u0180\u0180\u0184\u0184\u0186\u0187\u0189\u0189\u018D\u0190\u0193" +
		"\u0196\u0199\u0199\u019B\u01A0\u01D4\u01D4\x02\u1D90\x02\u0343\x03\x02" +
		"\x02\x02\x04\u034A\x03\x02\x02\x02\x06\u034F\x03\x02\x02\x02\b\u041C\x03" +
		"\x02\x02\x02\n\u041E\x03\x02\x02\x02\f\u0421\x03\x02\x02\x02\x0E\u0424" +
		"\x03\x02\x02\x02\x10\u043C\x03\x02\x02\x02\x12\u044E\x03\x02\x02\x02\x14" +
		"\u0450\x03\x02\x02\x02\x16\u0466\x03\x02\x02\x02\x18\u0475\x03\x02\x02" +
		"\x02\x1A\u047A\x03\x02\x02\x02\x1C\u0480\x03\x02\x02\x02\x1E\u048A\x03" +
		"\x02\x02\x02 \u048C\x03\x02\x02\x02\"\u04CC\x03\x02\x02\x02$\u04EF\x03" +
		"\x02\x02\x02&\u04F1\x03\x02\x02\x02(\u04FD\x03\x02\x02\x02*\u0500\x03" +
		"\x02\x02\x02,\u0509\x03\x02\x02\x02.\u050E\x03\x02\x02\x020\u051D\x03" +
		"\x02\x02\x022\u0525\x03\x02\x02\x024\u0529\x03\x02\x02\x026\u052D\x03" +
		"\x02\x02\x028\u052F\x03\x02\x02\x02:\u053B\x03\x02\x02\x02<\u0546\x03" +
		"\x02\x02\x02>\u054A\x03\x02\x02\x02@\u054D\x03\x02\x02\x02B\u0555\x03" +
		"\x02\x02\x02D\u055E\x03\x02\x02\x02F\u0564\x03\x02\x02\x02H\u058B\x03" +
		"\x02\x02\x02J\u05BD\x03\x02\x02\x02L\u05BF\x03\x02\x02\x02N\u05CB\x03" +
		"\x02\x02\x02P\u05D1\x03\x02\x02\x02R\u05D4\x03\x02\x02\x02T\u05E3\x03" +
		"\x02\x02\x02V\u05ED\x03\x02\x02\x02X\u05FF\x03\x02\x02\x02Z\u060C\x03" +
		"\x02\x02\x02\\\u0654\x03\x02\x02\x02^\u0656\x03\x02\x02\x02`\u065B\x03" +
		"\x02\x02\x02b\u0669\x03\x02\x02\x02d\u0672\x03\x02\x02\x02f\u0676\x03" +
		"\x02\x02\x02h\u0696\x03\x02\x02\x02j\u0698\x03\x02\x02\x02l\u06B2\x03" +
		"\x02\x02\x02n\u06B8\x03\x02\x02\x02p\u06FA\x03\x02\x02\x02r\u06FC\x03" +
		"\x02\x02\x02t\u0704\x03\x02\x02\x02v\u070B\x03\x02\x02\x02x\u071B\x03" +
		"\x02\x02\x02z\u071D\x03\x02\x02\x02|\u0721\x03\x02\x02\x02~\u0750\x03" +
		"\x02\x02\x02\x80\u0752\x03\x02\x02\x02\x82\u075F\x03\x02\x02\x02\x84\u0784" +
		"\x03\x02\x02\x02\x86\u0786\x03\x02\x02\x02\x88\u0796\x03\x02\x02\x02\x8A" +
		"\u079C\x03\x02\x02\x02\x8C\u07A4\x03\x02\x02\x02\x8E\u07AA\x03\x02\x02" +
		"\x02\x90\u07B2\x03\x02\x02\x02\x92\u07BB\x03\x02\x02\x02\x94\u07C8\x03" +
		"\x02\x02\x02\x96\u07CF\x03\x02\x02\x02\x98\u07D7\x03\x02\x02\x02\x9A\u07DD" +
		"\x03\x02\x02\x02\x9C\u07E6\x03\x02\x02\x02\x9E\u07E8\x03\x02\x02\x02\xA0" +
		"\u07EC\x03\x02\x02\x02\xA2\u07F7\x03\x02\x02\x02\xA4\u07FB\x03\x02\x02" +
		"\x02\xA6\u0804\x03\x02\x02\x02\xA8\u0809\x03\x02\x02\x02\xAA\u080D\x03" +
		"\x02\x02\x02\xAC\u0810\x03\x02\x02\x02\xAE\u081B\x03\x02\x02\x02\xB0\u0823" +
		"\x03\x02\x02\x02\xB2\u083D\x03\x02\x02\x02\xB4\u083F\x03\x02\x02\x02\xB6" +
		"\u0845\x03\x02\x02\x02\xB8\u084D\x03\x02\x02\x02\xBA\u0855\x03\x02\x02" +
		"\x02\xBC\u0865\x03\x02\x02\x02\xBE\u0869\x03\x02\x02\x02\xC0\u086D\x03" +
		"\x02\x02\x02\xC2\u0874\x03\x02\x02\x02\xC4\u087D\x03\x02\x02\x02\xC6\u088B" +
		"\x03\x02\x02\x02\xC8\u088D\x03\x02\x02\x02\xCA\u0890\x03\x02\x02\x02\xCC" +
		"\u0894\x03\x02\x02\x02\xCE\u0899\x03\x02\x02\x02\xD0\u08C4\x03\x02\x02" +
		"\x02\xD2\u08C6\x03\x02\x02\x02\xD4\u08CA\x03\x02\x02\x02\xD6\u08CE\x03" +
		"\x02\x02\x02\xD8\u08D5\x03\x02\x02\x02\xDA\u08DF\x03\x02\x02\x02\xDC\u08EC" +
		"\x03\x02\x02\x02\xDE\u08F6\x03\x02\x02\x02\xE0\u08FD\x03\x02\x02\x02\xE2" +
		"\u0908\x03\x02\x02\x02\xE4\u092D\x03\x02\x02\x02\xE6\u092F\x03\x02\x02" +
		"\x02\xE8\u0936\x03\x02\x02\x02\xEA\u0939\x03\x02\x02\x02\xEC\u093E\x03" +
		"\x02\x02\x02\xEE\u0948\x03\x02\x02\x02\xF0\u094C\x03\x02\x02\x02\xF2\u094F" +
		"\x03\x02\x02\x02\xF4\u0953\x03\x02\x02\x02\xF6\u0956\x03\x02\x02\x02\xF8" +
		"\u095A\x03\x02\x02\x02\xFA\u0969\x03\x02\x02\x02\xFC\u097C\x03\x02\x02" +
		"\x02\xFE\u0986\x03\x02\x02\x02\u0100\u0995\x03\x02\x02\x02\u0102\u099A" +
		"\x03\x02\x02\x02\u0104\u09A4\x03\x02\x02\x02\u0106\u09AA\x03\x02\x02\x02" +
		"\u0108\u09C3\x03\x02\x02\x02\u010A\u09D8\x03\x02\x02\x02\u010C\u09F7\x03" +
		"\x02\x02\x02\u010E\u09F9\x03\x02\x02\x02\u0110\u0A06\x03\x02\x02\x02\u0112" +
		"\u0A17\x03\x02\x02\x02\u0114\u0A19\x03\x02\x02\x02\u0116\u0A20\x03\x02" +
		"\x02\x02\u0118\u0A26\x03\x02\x02\x02\u011A\u0A43\x03\x02\x02\x02\u011C" +
		"\u0A52\x03\x02\x02\x02\u011E\u0A65\x03\x02\x02\x02\u0120\u0A79\x03\x02" +
		"\x02\x02\u0122\u0A8A\x03\x02\x02\x02\u0124\u0A96\x03\x02\x02\x02\u0126" +
		"\u0A9E\x03\x02\x02\x02\u0128\u0AA0\x03\x02\x02\x02\u012A\u0AA5\x03\x02" +
		"\x02\x02\u012C\u0AAA\x03\x02\x02\x02\u012E\u0AAD\x03\x02\x02\x02\u0130" +
		"\u0ABE\x03\x02\x02\x02\u0132\u0AC0\x03\x02\x02\x02\u0134\u0AC2\x03\x02" +
		"\x02\x02\u0136\u0ACD\x03\x02\x02\x02\u0138\u0AD8\x03\x02\x02\x02\u013A" +
		"\u0AE3\x03\x02\x02\x02\u013C\u0B09\x03\x02\x02\x02\u013E\u0B14\x03\x02" +
		"\x02\x02\u0140\u0B3A\x03\x02\x02\x02\u0142\u0B55\x03\x02\x02\x02\u0144" +
		"\u0B59\x03\x02\x02\x02\u0146\u0B74\x03\x02\x02\x02\u0148\u0BAC\x03\x02" +
		"\x02\x02\u014A\u0BAE\x03\x02\x02\x02\u014C\u0BB2\x03\x02\x02\x02\u014E" +
		"\u0BBB\x03\x02\x02\x02\u0150\u0BC2\x03\x02\x02\x02\u0152\u0BC9\x03\x02" +
		"\x02\x02\u0154\u0BDE\x03\x02\x02\x02\u0156\u0BE0\x03\x02\x02\x02\u0158" +
		"\u0C04\x03\x02\x02\x02\u015A\u0C3D\x03\x02\x02\x02\u015C\u0C49\x03\x02" +
		"\x02\x02\u015E\u0C4B\x03\x02\x02\x02\u0160\u0C54\x03\x02\x02\x02\u0162" +
		"\u0C5A\x03\x02\x02\x02\u0164\u0C5E\x03\x02\x02\x02\u0166\u0C61\x03\x02" +
		"\x02\x02\u0168\u0C65\x03\x02\x02\x02\u016A\u0C77\x03\x02\x02\x02\u016C" +
		"\u0C81\x03\x02\x02\x02\u016E\u0C97\x03\x02\x02\x02\u0170\u0CC0\x03\x02" +
		"\x02\x02\u0172\u0CC5\x03\x02\x02\x02\u0174\u0CC9\x03\x02\x02\x02\u0176" +
		"\u0D19\x03\x02\x02\x02\u0178\u0D1B\x03\x02\x02\x02\u017A\u0D3D\x03\x02" +
		"\x02\x02\u017C\u0D3F\x03\x02\x02\x02\u017E\u0D45\x03\x02\x02\x02\u0180" +
		"\u0D74\x03\x02\x02\x02\u0182\u0D76\x03\x02\x02\x02\u0184\u0D80\x03\x02" +
		"\x02\x02\u0186\u0D8C\x03\x02\x02\x02\u0188\u0D91\x03\x02\x02\x02\u018A" +
		"\u0D94\x03\x02\x02\x02\u018C\u0D97\x03\x02\x02\x02\u018E\u0D9A\x03\x02" +
		"\x02\x02\u0190\u0DA8\x03\x02\x02\x02\u0192\u0DB0\x03\x02\x02\x02\u0194" +
		"\u0DB6\x03\x02\x02\x02\u0196\u0DBE\x03\x02\x02\x02\u0198\u0DCA\x03\x02" +
		"\x02\x02\u019A\u0DCD\x03\x02\x02\x02\u019C\u0DD0\x03\x02\x02\x02\u019E" +
		"\u0DD3\x03\x02\x02\x02\u01A0\u0DD6\x03\x02\x02\x02\u01A2\u0DDA\x03\x02" +
		"\x02\x02\u01A4\u0DDD\x03\x02\x02\x02\u01A6\u0DE6\x03\x02\x02\x02\u01A8" +
		"\u0DEA\x03\x02\x02\x02\u01AA\u0DF0\x03\x02\x02\x02\u01AC\u0DF6\x03\x02" +
		"\x02\x02\u01AE\u0E1E\x03\x02\x02\x02\u01B0\u0E20\x03\x02\x02\x02\u01B2" +
		"\u0E2A\x03\x02\x02\x02\u01B4\u0E39\x03\x02\x02\x02\u01B6\u0E43\x03\x02" +
		"\x02\x02\u01B8\u0E4E\x03\x02\x02\x02\u01BA\u0E53\x03\x02\x02\x02\u01BC" +
		"\u0E56\x03\x02\x02\x02\u01BE\u0E66\x03\x02\x02\x02\u01C0\u0E85\x03\x02" +
		"\x02\x02\u01C2\u0E87\x03\x02\x02\x02\u01C4\u0E93\x03\x02\x02\x02\u01C6" +
		"\u0E95\x03\x02\x02\x02\u01C8\u0E9D\x03\x02\x02\x02\u01CA\u0EA8\x03\x02" +
		"\x02\x02\u01CC\u0EB4\x03\x02\x02\x02\u01CE\u0EBC\x03\x02\x02\x02\u01D0" +
		"\u0ECD\x03\x02\x02\x02\u01D2\u0EDD\x03\x02\x02\x02\u01D4\u0EEF\x03\x02" +
		"\x02\x02\u01D6\u0EF1\x03\x02\x02\x02\u01D8\u0F02\x03\x02\x02\x02\u01DA" +
		"\u0F5C\x03\x02\x02\x02\u01DC\u0F9E\x03\x02\x02\x02\u01DE\u0FAE\x03\x02" +
		"\x02\x02\u01E0\u0FB0\x03\x02\x02\x02\u01E2\u0FB6\x03\x02\x02\x02\u01E4" +
		"\u0FBD\x03\x02\x02\x02\u01E6\u0FC2\x03\x02\x02\x02\u01E8\u0FC6\x03\x02" +
		"\x02\x02\u01EA\u0FCC\x03\x02\x02\x02\u01EC\u0FD2\x03\x02\x02\x02\u01EE" +
		"\u0FD9\x03\x02\x02\x02\u01F0\u0FDE\x03\x02\x02\x02\u01F2\u0FE2\x03\x02" +
		"\x02\x02\u01F4\u0FF4\x03\x02\x02\x02\u01F6\u0FF6\x03\x02\x02\x02\u01F8" +
		"\u0FFB\x03\x02\x02\x02\u01FA\u1003\x03\x02\x02\x02\u01FC\u1012\x03\x02" +
		"\x02\x02\u01FE\u1043\x03\x02\x02\x02\u0200\u1052\x03\x02\x02\x02\u0202" +
		"\u1064\x03\x02\x02\x02\u0204\u1066\x03\x02\x02\x02\u0206\u1085\x03\x02" +
		"\x02\x02\u0208\u10B6\x03\x02\x02\x02\u020A\u10B8\x03\x02\x02\x02\u020C" +
		"\u10BF\x03\x02\x02\x02\u020E\u10C5\x03\x02\x02\x02\u0210\u10E5\x03\x02" +
		"\x02\x02\u0212\u111A\x03\x02\x02\x02\u0214\u111C\x03\x02\x02\x02\u0216" +
		"\u1124\x03\x02\x02\x02\u0218\u112B\x03\x02\x02\x02\u021A\u112E\x03\x02" +
		"\x02\x02\u021C\u1145\x03\x02\x02\x02\u021E\u114B\x03\x02\x02\x02\u0220" +
		"\u1151\x03\x02\x02\x02\u0222\u1168\x03\x02\x02\x02\u0224\u116E\x03\x02" +
		"\x02\x02\u0226\u1178\x03\x02\x02\x02\u0228\u1180\x03\x02\x02\x02\u022A" +
		"\u1193\x03\x02\x02\x02\u022C\u1197\x03\x02\x02\x02\u022E\u119B\x03\x02" +
		"\x02\x02\u0230\u11A5\x03\x02\x02\x02\u0232\u11A8\x03\x02\x02\x02\u0234" +
		"\u11AB\x03\x02\x02\x02\u0236\u11B9\x03\x02\x02\x02\u0238\u11C5\x03\x02" +
		"\x02\x02\u023A\u11E0\x03\x02\x02\x02\u023C\u11E7\x03\x02\x02\x02\u023E" +
		"\u11EB\x03\x02\x02\x02\u0240\u11F4\x03\x02\x02\x02\u0242\u11FD\x03\x02" +
		"\x02\x02\u0244\u1203\x03\x02\x02\x02\u0246\u124D\x03\x02\x02\x02\u0248" +
		"\u1259\x03\x02\x02\x02\u024A\u125F\x03\x02\x02\x02\u024C\u1261\x03\x02" +
		"\x02\x02\u024E\u126C\x03\x02\x02\x02\u0250\u1272\x03\x02\x02\x02\u0252" +
		"\u1274\x03\x02\x02\x02\u0254\u127C\x03\x02\x02\x02\u0256\u1284\x03\x02" +
		"\x02\x02\u0258\u12C3\x03\x02\x02\x02\u025A\u12C5\x03\x02\x02\x02\u025C" +
		"\u12D6\x03\x02\x02\x02\u025E\u12DA\x03\x02\x02\x02\u0260\u12E1\x03\x02" +
		"\x02\x02\u0262\u12E5\x03\x02\x02\x02\u0264\u12EE\x03\x02\x02\x02\u0266" +
		"\u1318\x03\x02\x02\x02\u0268\u131D\x03\x02\x02\x02\u026A\u1330\x03\x02" +
		"\x02\x02\u026C\u1334\x03\x02\x02\x02\u026E\u1338\x03\x02\x02\x02\u0270" +
		"\u134A\x03\x02\x02\x02\u0272\u134C\x03\x02\x02\x02\u0274\u1379\x03\x02" +
		"\x02\x02\u0276\u1395\x03\x02\x02\x02\u0278\u1397\x03\x02\x02\x02\u027A" +
		"\u13A4\x03\x02\x02\x02\u027C\u13AD\x03\x02\x02\x02\u027E\u13BE\x03\x02" +
		"\x02\x02\u0280\u13C0\x03\x02\x02\x02\u0282\u13DC\x03\x02\x02\x02\u0284" +
		"\u143B\x03\x02\x02\x02\u0286\u1452\x03\x02\x02\x02\u0288\u145A\x03\x02" +
		"\x02\x02\u028A\u1477\x03\x02\x02\x02\u028C\u1479\x03\x02\x02\x02\u028E" +
		"\u1484\x03\x02\x02\x02\u0290\u1492\x03\x02\x02\x02\u0292\u14A4\x03\x02" +
		"\x02\x02\u0294\u14A6\x03\x02\x02\x02\u0296\u14C6\x03\x02\x02\x02\u0298" +
		"\u14C8\x03\x02\x02\x02\u029A\u14D4\x03\x02\x02\x02\u029C\u14E0\x03\x02" +
		"\x02\x02\u029E\u14ED\x03\x02\x02\x02\u02A0\u14EF\x03\x02\x02\x02\u02A2" +
		"\u14F7\x03\x02\x02\x02\u02A4\u14FB\x03\x02\x02\x02\u02A6\u1502\x03\x02" +
		"\x02\x02\u02A8\u150F\x03\x02\x02\x02\u02AA\u1517\x03\x02\x02\x02\u02AC" +
		"\u1534\x03\x02\x02\x02\u02AE\u1536\x03\x02\x02\x02\u02B0\u1564\x03\x02" +
		"\x02\x02\u02B2\u1566\x03\x02\x02\x02\u02B4\u15EA\x03\x02\x02\x02\u02B6" +
		"\u161B\x03\x02\x02\x02\u02B8\u1658\x03\x02\x02\x02\u02BA\u16A4\x03\x02" +
		"\x02\x02\u02BC\u16A6\x03\x02\x02\x02\u02BE\u16A9\x03\x02\x02\x02\u02C0" +
		"\u16B2\x03\x02\x02\x02\u02C2\u16CA\x03\x02\x02\x02\u02C4\u16E5\x03\x02" +
		"\x02\x02\u02C6\u1774\x03\x02\x02\x02\u02C8\u17D7\x03\x02\x02\x02\u02CA" +
		"\u17D9\x03\x02\x02\x02\u02CC\u17DE\x03\x02\x02\x02\u02CE\u17FD\x03\x02" +
		"\x02\x02\u02D0\u1800\x03\x02\x02\x02\u02D2\u1804\x03\x02\x02\x02\u02D4" +
		"\u180C\x03\x02\x02\x02\u02D6\u1810\x03\x02\x02\x02\u02D8\u1861\x03\x02" +
		"\x02\x02\u02DA\u1865\x03\x02\x02\x02\u02DC\u1867\x03\x02\x02\x02\u02DE" +
		"\u1874\x03\x02\x02\x02\u02E0\u188A\x03\x02\x02\x02\u02E2\u1897\x03\x02" +
		"\x02\x02\u02E4\u1899\x03\x02\x02\x02\u02E6\u18BF\x03\x02\x02\x02\u02E8" +
		"\u18C1\x03\x02\x02\x02\u02EA\u18D6\x03\x02\x02\x02\u02EC\u18D8\x03\x02" +
		"\x02\x02\u02EE\u18E3\x03\x02\x02\x02\u02F0\u18E9\x03\x02\x02\x02\u02F2" +
		"\u18F7\x03\x02\x02\x02\u02F4\u190C\x03\x02\x02\x02\u02F6\u190E\x03\x02" +
		"\x02\x02\u02F8\u1924\x03\x02\x02\x02\u02FA\u1926\x03\x02\x02\x02\u02FC" +
		"\u1932\x03\x02\x02\x02\u02FE\u1935\x03\x02\x02\x02\u0300\u1940\x03\x02" +
		"\x02\x02\u0302\u1948\x03\x02\x02\x02\u0304\u194C\x03\x02\x02\x02\u0306" +
		"\u194E\x03\x02\x02\x02\u0308\u1951\x03\x02\x02\x02\u030A\u195A\x03\x02" +
		"\x02\x02\u030C\u1960\x03\x02\x02\x02\u030E\u1962\x03\x02\x02\x02\u0310" +
		"\u1964\x03\x02\x02\x02\u0312\u1966\x03\x02\x02\x02\u0314\u1968\x03\x02" +
		"\x02\x02\u0316\u196C\x03\x02\x02\x02\u0318\u196E\x03\x02\x02\x02\u031A" +
		"\u1975\x03\x02\x02\x02\u031C\u1977\x03\x02\x02\x02\u031E\u197C\x03\x02" +
		"\x02\x02\u0320\u1983\x03\x02\x02\x02\u0322\u1986\x03\x02\x02\x02\u0324" +
		"\u198E\x03\x02\x02\x02\u0326\u1993\x03\x02\x02\x02\u0328\u19DB\x03\x02" +
		"\x02\x02\u032A\u19DD\x03\x02\x02\x02\u032C\u19E7\x03\x02\x02\x02\u032E" +
		"\u19F4\x03\x02\x02\x02\u0330\u19F6\x03\x02\x02\x02\u0332\u1A03\x03\x02" +
		"\x02\x02\u0334\u1A05\x03\x02\x02\x02\u0336\u1A10\x03\x02\x02\x02\u0338" +
		"\u1A1D\x03\x02\x02\x02\u033A\u1A1F\x03\x02\x02\x02\u033C\u1A23\x03\x02" +
		"\x02\x02\u033E\u1A2E\x03\x02\x02\x02\u0340\u1A30\x03\x02\x02\x02\u0342" +
		"\u0344\x05\x04\x03\x02\u0343\u0342\x03\x02\x02\x02\u0343\u0344\x03\x02" +
		"\x02\x02\u0344\u0345\x03\x02\x02\x02\u0345\u0346\x07\x02\x02\x03\u0346" +
		"\x03\x03\x02\x02\x02\u0347\u0349\x05\x06\x04\x02\u0348\u0347\x03\x02\x02" +
		"\x02\u0349\u034C\x03\x02\x02\x02\u034A\u0348\x03\x02\x02\x02\u034A\u034B" +
		"\x03\x02\x02\x02\u034B\u034D\x03\x02\x02\x02\u034C\u034A\x03\x02\x02\x02" +
		"\u034D\u034E\x07\x02\x02\x03\u034E\x05\x03\x02\x02\x02\u034F\u0351\x05" +
		"\b\x05\x02\u0350\u0352\x07\u01C8\x02\x02\u0351\u0350\x03\x02\x02\x02\u0351" +
		"\u0352\x03\x02\x02\x02\u0352\x07\x03\x02\x02\x02\u0353\u041D\x05\u025E" +
		"\u0130\x02\u0354\u041D\x05\xACW\x02\u0355\u041D\x05\xB0Y\x02\u0356\u041D" +
		"\x05\xAEX\x02\u0357\u041D\x05\xB2Z\x02\u0358\u041D\x05\xB4[\x02\u0359" +
		"\u041D\x05\xB6\\\x02\u035A\u041D\x05\xB8]\x02\u035B\u041D\x05\n\x06\x02" +
		"\u035C\u041D\x05\f\x07\x02\u035D\u041D\x05\x0E\b\x02\u035E\u041D\x05\x10" +
		"\t\x02\u035F\u041D\x05\x12\n\x02\u0360\u041D\x05\x14\v\x02\u0361\u041D" +
		"\x05\x16\f\x02\u0362\u041D\x05\x18\r\x02\u0363\u041D\x05\x1A\x0E\x02\u0364" +
		"\u041D\x05\x1C\x0F\x02\u0365\u041D\x05\x1E\x10\x02\u0366\u041D\x05 \x11" +
		"\x02\u0367\u041D\x05F$\x02\u0368\u041D\x05D#\x02\u0369\u041D\x05`1\x02" +
		"\u036A\u041D\x05T+\x02\u036B\u041D\x05H%\x02\u036C\u041D\x05d3\x02\u036D" +
		"\u041D\x05f4\x02\u036E\u041D\x05R*\x02\u036F\u041D\x05^0\x02\u0370\u041D" +
		"\x05X-\x02\u0371\u041D\x05V,\x02\u0372\u041D\x05Z.\x02\u0373\u041D\x05" +
		"J&\x02\u0374\u041D\x05h5\x02\u0375\u041D\x05\\/\x02\u0376\u041D\x05n8" +
		"\x02\u0377\u041D\x05p9\x02\u0378\u041D\x05r:\x02\u0379\u041D\x05j6\x02" +
		"\u037A\u041D\x05l7\x02\u037B\u041D\x05L\'\x02\u037C\u041D\x05N(\x02\u037D" +
		"\u041D\x05b2\x02\u037E\u041D\x05v<\x02\u037F\u041D\x05z>\x02\u0380\u041D" +
		"\x05|?\x02\u0381\u041D\x05\x80A\x02\u0382\u041D\x05\x82B\x02\u0383\u041D" +
		"\x05\x84C\x02\u0384\u041D\x05\x86D\x02\u0385\u041D\x05\x88E\x02\u0386" +
		"\u041D\x05\xA4S\x02\u0387\u041D\x05\xA8U\x02\u0388\u041D\x05\xAAV\x02" +
		"\u0389\u041D\x05\xA6T\x02\u038A\u041D\x05\u0118\x8D\x02\u038B\u041D\x05" +
		"\u011A\x8E\x02\u038C\u041D\x05\u011C\x8F\x02\u038D\u041D\x05\u011E\x90" +
		"\x02\u038E\u041D\x05\u0120\x91\x02\u038F\u041D\x05\u0134\x9B\x02\u0390" +
		"\u041D\x05\u0136\x9C\x02\u0391\u041D\x05\u0138\x9D\x02\u0392\u041D\x05" +
		"\u013A\x9E\x02\u0393\u041D\x05\u013C\x9F\x02\u0394\u041D\x05\u013E\xA0" +
		"\x02\u0395\u041D\x05\x8AF\x02\u0396\u041D\x05\x8CG\x02\u0397\u041D\x05" +
		"\x8EH\x02\u0398\u041D\x05\x90I\x02\u0399\u041D\x05\x92J\x02\u039A\u041D" +
		"\x05\x94K\x02\u039B\u041D\x05\x96L\x02\u039C\u041D\x05\x98M\x02\u039D" +
		"\u041D\x05\x9AN\x02\u039E\u041D\x05\x9CO\x02\u039F\u041D\x05\u0256\u012C" +
		"\x02\u03A0\u041D\x05\x9EP\x02\u03A1\u041D\x05\xA0Q\x02\u03A2\u041D\x05" +
		"\xA2R\x02\u03A3\u041D\x05\u0140\xA1\x02\u03A4\u041D\x05\u0142\xA2\x02" +
		"\u03A5\u041D\x05\u0148\xA5\x02\u03A6\u041D\x05\u014A\xA6\x02\u03A7\u041D" +
		"\x05\u0144\xA3\x02\u03A8\u041D\x05\u0146\xA4\x02\u03A9\u041D\x05\u014C" +
		"\xA7\x02\u03AA\u041D\x05\u014E\xA8\x02\u03AB\u041D\x05\u0150\xA9\x02\u03AC" +
		"\u041D\x05\u0152\xAA\x02\u03AD\u041D\x05\u0154\xAB\x02\u03AE\u041D\x05" +
		"\u0156\xAC\x02\u03AF\u041D\x05\u0158\xAD\x02\u03B0\u041D\x05\u015A\xAE" +
		"\x02\u03B1\u041D\x05\u015C\xAF\x02\u03B2\u041D\x05\u015E\xB0\x02\u03B3" +
		"\u041D\x05\u0160\xB1\x02\u03B4\u041D\x05\u0162\xB2\x02\u03B5\u041D\x05" +
		"\u0164\xB3\x02\u03B6\u041D\x05\u0168\xB5\x02\u03B7\u041D\x05\u016A\xB6" +
		"\x02\u03B8\u041D\x05\u016C\xB7\x02\u03B9\u041D\x05\u0170\xB9\x02\u03BA" +
		"\u041D\x05\u017E\xC0\x02\u03BB\u041D\x05\u0180\xC1\x02\u03BC\u041D\x05" +
		"\u0182\xC2\x02\u03BD\u041D\x05\u0184\xC3\x02\u03BE\u041D\x05\u0188\xC5" +
		"\x02\u03BF\u041D\x05\u018A\xC6\x02\u03C0\u041D\x05\u018C\xC7\x02\u03C1" +
		"\u041D\x05\u018E\xC8\x02\u03C2\u041D\x05\u0190\xC9\x02\u03C3\u041D\x05" +
		"\u0192\xCA\x02\u03C4\u041D\x05\u0194\xCB\x02\u03C5\u041D\x05\u0196\xCC" +
		"\x02\u03C6\u041D\x05\u0198\xCD\x02\u03C7\u041D\x05\u019A\xCE\x02\u03C8" +
		"\u041D\x05\u019C\xCF\x02\u03C9\u041D\x05\u019E\xD0\x02\u03CA\u041D\x05" +
		"\u01A0\xD1\x02\u03CB\u041D\x05\u01A2\xD2\x02\u03CC\u041D\x05\u01A4\xD3" +
		"\x02\u03CD\u041D\x05\u01A6\xD4\x02\u03CE\u041D\x05\u01A8\xD5\x02\u03CF" +
		"\u041D\x05\u01AA\xD6\x02\u03D0\u041D\x05\u01AC\xD7\x02\u03D1\u041D\x05" +
		"\u01AE\xD8\x02\u03D2\u041D\x05\u01B0\xD9\x02\u03D3\u041D\x05\u01B2\xDA" +
		"\x02\u03D4\u041D\x05\u01B4\xDB\x02\u03D5\u041D\x05\u01B6\xDC\x02\u03D6" +
		"\u041D\x05\u01B8\xDD\x02\u03D7\u041D\x05\u01BA\xDE\x02\u03D8\u041D\x05" +
		"\u01BC\xDF\x02\u03D9\u041D\x05\u01BE\xE0\x02\u03DA\u041D\x05\u01C0\xE1" +
		"\x02\u03DB\u041D\x05\u01C2\xE2\x02\u03DC\u041D\x05\u01C4\xE3\x02\u03DD" +
		"\u041D\x05\u01C6\xE4\x02\u03DE\u041D\x05\u01C8\xE5\x02\u03DF\u041D\x05" +
		"\u01CA\xE6\x02\u03E0\u041D\x05\u01CC\xE7\x02\u03E1\u041D\x05\u01CE\xE8" +
		"\x02\u03E2\u041D\x05\u01D0\xE9\x02\u03E3\u041D\x05\u01D2\xEA\x02\u03E4" +
		"\u041D\x05\u01D4\xEB\x02\u03E5\u041D\x05\u01D6\xEC\x02\u03E6\u041D\x05" +
		"\u01DA\xEE\x02\u03E7\u041D\x05\u01DC\xEF\x02\u03E8\u041D\x05\u01DE\xF0" +
		"\x02\u03E9\u041D\x05\u01E0\xF1\x02\u03EA\u041D\x05\u01E2\xF2\x02\u03EB" +
		"\u041D\x05\u01E4\xF3\x02\u03EC\u041D\x05\u01E6\xF4\x02\u03ED\u041D\x05" +
		"\u01E8\xF5\x02\u03EE\u041D\x05\u01EA\xF6\x02\u03EF\u041D\x05\u01EC\xF7" +
		"\x02\u03F0\u041D\x05\u01EE\xF8\x02\u03F1\u041D\x05\u01F0\xF9\x02\u03F2" +
		"\u041D\x05\u01F2\xFA\x02\u03F3\u041D\x05\u0204\u0103\x02\u03F4\u041D\x05" +
		"\u0206\u0104\x02\u03F5\u041D\x05\u0208\u0105\x02\u03F6\u041D\x05\u020A" +
		"\u0106\x02\u03F7\u041D\x05\u020C\u0107\x02\u03F8\u041D\x05\u020E\u0108" +
		"\x02\u03F9\u041D\x05\u0210\u0109\x02\u03FA\u041D\x05\u0212\u010A\x02\u03FB" +
		"\u041D\x05\u0214\u010B\x02\u03FC\u041D\x05\u0216\u010C\x02\u03FD\u041D" +
		"\x05\u021A\u010E\x02\u03FE\u041D\x05\u021C\u010F\x02\u03FF\u041D\x05\u021E" +
		"\u0110\x02\u0400\u041D\x05\u0220\u0111\x02\u0401\u041D\x05\u0222\u0112" +
		"\x02\u0402\u041D\x05\u0224\u0113\x02\u0403\u041D\x05\u0226\u0114\x02\u0404" +
		"\u041D\x05\u0228\u0115\x02\u0405\u041D\x05\u022A\u0116\x02\u0406\u041D" +
		"\x05\u022C\u0117\x02\u0407\u041D\x05\u022E\u0118\x02\u0408\u041D\x05\u0230" +
		"\u0119\x02\u0409\u041D\x05\u0232\u011A\x02\u040A\u041D\x05\u0234\u011B" +
		"\x02\u040B\u041D\x05\u0236\u011C\x02\u040C\u041D\x05\u0238\u011D\x02\u040D" +
		"\u041D\x05\u023A\u011E\x02\u040E\u041D\x05\u023C\u011F\x02\u040F\u041D" +
		"\x05\u023E\u0120\x02\u0410\u041D\x05\u0240\u0121\x02\u0411\u041D\x05\u0242" +
		"\u0122\x02\u0412\u041D\x05\u0244\u0123\x02\u0413\u041D\x05\u0252\u012A" +
		"\x02\u0414\u041D\x05\xBA^\x02\u0415\u041D\x05\xC4c\x02\u0416\u041D\x05" +
		"\xC2b\x02\u0417\u041D\x05\xC0a\x02\u0418\u041D\x05\xCCg\x02\u0419\u041D" +
		"\x05\xCEh\x02\u041A\u041D\x05\u0186\xC4\x02\u041B\u041D\x05\u0258\u012D" +
		"\x02\u041C\u0353\x03\x02\x02\x02\u041C\u0354\x03\x02\x02\x02\u041C\u0355" +
		"\x03\x02\x02\x02\u041C\u0356\x03\x02\x02\x02\u041C\u0357\x03\x02\x02\x02" +
		"\u041C\u0358\x03\x02\x02\x02\u041C\u0359\x03\x02\x02\x02\u041C\u035A\x03" +
		"\x02\x02\x02\u041C\u035B\x03\x02\x02\x02\u041C\u035C\x03\x02\x02\x02\u041C" +
		"\u035D\x03\x02\x02\x02\u041C\u035E\x03\x02\x02\x02\u041C\u035F\x03\x02" +
		"\x02\x02\u041C\u0360\x03\x02\x02\x02\u041C\u0361\x03\x02\x02\x02\u041C" +
		"\u0362\x03\x02\x02\x02\u041C\u0363\x03\x02\x02\x02\u041C\u0364\x03\x02" +
		"\x02\x02\u041C\u0365\x03\x02\x02\x02\u041C\u0366\x03\x02\x02\x02\u041C" +
		"\u0367\x03\x02\x02\x02\u041C\u0368\x03\x02\x02\x02\u041C\u0369\x03\x02" +
		"\x02\x02\u041C\u036A\x03\x02\x02\x02\u041C\u036B\x03\x02\x02\x02\u041C" +
		"\u036C\x03\x02\x02\x02\u041C\u036D\x03\x02\x02\x02\u041C\u036E\x03\x02" +
		"\x02\x02\u041C\u036F\x03\x02\x02\x02\u041C\u0370\x03\x02\x02\x02\u041C" +
		"\u0371\x03\x02\x02\x02\u041C\u0372\x03\x02\x02\x02\u041C\u0373\x03\x02" +
		"\x02\x02\u041C\u0374\x03\x02\x02\x02\u041C\u0375\x03\x02\x02\x02\u041C" +
		"\u0376\x03\x02\x02\x02\u041C\u0377\x03\x02\x02\x02\u041C\u0378\x03\x02" +
		"\x02\x02\u041C\u0379\x03\x02\x02\x02\u041C\u037A\x03\x02\x02\x02\u041C" +
		"\u037B\x03\x02\x02\x02\u041C\u037C\x03\x02\x02\x02\u041C\u037D\x03\x02" +
		"\x02\x02\u041C\u037E\x03\x02\x02\x02\u041C\u037F\x03\x02\x02\x02\u041C" +
		"\u0380\x03\x02\x02\x02\u041C\u0381\x03\x02\x02\x02\u041C\u0382\x03\x02" +
		"\x02\x02\u041C\u0383\x03\x02\x02\x02\u041C\u0384\x03\x02\x02\x02\u041C" +
		"\u0385\x03\x02\x02\x02\u041C\u0386\x03\x02\x02\x02\u041C\u0387\x03\x02" +
		"\x02\x02\u041C\u0388\x03\x02\x02\x02\u041C\u0389\x03\x02\x02\x02\u041C" +
		"\u038A\x03\x02\x02\x02\u041C\u038B\x03\x02\x02\x02\u041C\u038C\x03\x02" +
		"\x02\x02\u041C\u038D\x03\x02\x02\x02\u041C\u038E\x03\x02\x02\x02\u041C" +
		"\u038F\x03\x02\x02\x02\u041C\u0390\x03\x02\x02\x02\u041C\u0391\x03\x02" +
		"\x02\x02\u041C\u0392\x03\x02\x02\x02\u041C\u0393\x03\x02\x02\x02\u041C" +
		"\u0394\x03\x02\x02\x02\u041C\u0395\x03\x02\x02\x02\u041C\u0396\x03\x02" +
		"\x02\x02\u041C\u0397\x03\x02\x02\x02\u041C\u0398\x03\x02\x02\x02\u041C" +
		"\u0399\x03\x02\x02\x02\u041C\u039A\x03\x02\x02\x02\u041C\u039B\x03\x02" +
		"\x02\x02\u041C\u039C\x03\x02\x02\x02\u041C\u039D\x03\x02\x02\x02\u041C" +
		"\u039E\x03\x02\x02\x02\u041C\u039F\x03\x02\x02\x02\u041C\u03A0\x03\x02" +
		"\x02\x02\u041C\u03A1\x03\x02\x02\x02\u041C\u03A2\x03\x02\x02\x02\u041C" +
		"\u03A3\x03\x02\x02\x02\u041C\u03A4\x03\x02\x02\x02\u041C\u03A5\x03\x02" +
		"\x02\x02\u041C\u03A6\x03\x02\x02\x02\u041C\u03A7\x03\x02\x02\x02\u041C" +
		"\u03A8\x03\x02\x02\x02\u041C\u03A9\x03\x02\x02\x02\u041C\u03AA\x03\x02" +
		"\x02\x02\u041C\u03AB\x03\x02\x02\x02";
	private static readonly _serializedATNSegment4: string =
		"\u041C\u03AC\x03\x02\x02\x02\u041C\u03AD\x03\x02\x02\x02\u041C\u03AE\x03" +
		"\x02\x02\x02\u041C\u03AF\x03\x02\x02\x02\u041C\u03B0\x03\x02\x02\x02\u041C" +
		"\u03B1\x03\x02\x02\x02\u041C\u03B2\x03\x02\x02\x02\u041C\u03B3\x03\x02" +
		"\x02\x02\u041C\u03B4\x03\x02\x02\x02\u041C\u03B5\x03\x02\x02\x02\u041C" +
		"\u03B6\x03\x02\x02\x02\u041C\u03B7\x03\x02\x02\x02\u041C\u03B8\x03\x02" +
		"\x02\x02\u041C\u03B9\x03\x02\x02\x02\u041C\u03BA\x03\x02\x02\x02\u041C" +
		"\u03BB\x03\x02\x02\x02\u041C\u03BC\x03\x02\x02\x02\u041C\u03BD\x03\x02" +
		"\x02\x02\u041C\u03BE\x03\x02\x02\x02\u041C\u03BF\x03\x02\x02\x02\u041C" +
		"\u03C0\x03\x02\x02\x02\u041C\u03C1\x03\x02\x02\x02\u041C\u03C2\x03\x02" +
		"\x02\x02\u041C\u03C3\x03\x02\x02\x02\u041C\u03C4\x03\x02\x02\x02\u041C" +
		"\u03C5\x03\x02\x02\x02\u041C\u03C6\x03\x02\x02\x02\u041C\u03C7\x03\x02" +
		"\x02\x02\u041C\u03C8\x03\x02\x02\x02\u041C\u03C9\x03\x02\x02\x02\u041C" +
		"\u03CA\x03\x02\x02\x02\u041C\u03CB\x03\x02\x02\x02\u041C\u03CC\x03\x02" +
		"\x02\x02\u041C\u03CD\x03\x02\x02\x02\u041C\u03CE\x03\x02\x02\x02\u041C" +
		"\u03CF\x03\x02\x02\x02\u041C\u03D0\x03\x02\x02\x02\u041C\u03D1\x03\x02" +
		"\x02\x02\u041C\u03D2\x03\x02\x02\x02\u041C\u03D3\x03\x02\x02\x02\u041C" +
		"\u03D4\x03\x02\x02\x02\u041C\u03D5\x03\x02\x02\x02\u041C\u03D6\x03\x02" +
		"\x02\x02\u041C\u03D7\x03\x02\x02\x02\u041C\u03D8\x03\x02\x02\x02\u041C" +
		"\u03D9\x03\x02\x02\x02\u041C\u03DA\x03\x02\x02\x02\u041C\u03DB\x03\x02" +
		"\x02\x02\u041C\u03DC\x03\x02\x02\x02\u041C\u03DD\x03\x02\x02\x02\u041C" +
		"\u03DE\x03\x02\x02\x02\u041C\u03DF\x03\x02\x02\x02\u041C\u03E0\x03\x02" +
		"\x02\x02\u041C\u03E1\x03\x02\x02\x02\u041C\u03E2\x03\x02\x02\x02\u041C" +
		"\u03E3\x03\x02\x02\x02\u041C\u03E4\x03\x02\x02\x02\u041C\u03E5\x03\x02" +
		"\x02\x02\u041C\u03E6\x03\x02\x02\x02\u041C\u03E7\x03\x02\x02\x02\u041C" +
		"\u03E8\x03\x02\x02\x02\u041C\u03E9\x03\x02\x02\x02\u041C\u03EA\x03\x02" +
		"\x02\x02\u041C\u03EB\x03\x02\x02\x02\u041C\u03EC\x03\x02\x02\x02\u041C" +
		"\u03ED\x03\x02\x02\x02\u041C\u03EE\x03\x02\x02\x02\u041C\u03EF\x03\x02" +
		"\x02\x02\u041C\u03F0\x03\x02\x02\x02\u041C\u03F1\x03\x02\x02\x02\u041C" +
		"\u03F2\x03\x02\x02\x02\u041C\u03F3\x03\x02\x02\x02\u041C\u03F4\x03\x02" +
		"\x02\x02\u041C\u03F5\x03\x02\x02\x02\u041C\u03F6\x03\x02\x02\x02\u041C" +
		"\u03F7\x03\x02\x02\x02\u041C\u03F8\x03\x02\x02\x02\u041C\u03F9\x03\x02" +
		"\x02\x02\u041C\u03FA\x03\x02\x02\x02\u041C\u03FB\x03\x02\x02\x02\u041C" +
		"\u03FC\x03\x02\x02\x02\u041C\u03FD\x03\x02\x02\x02\u041C\u03FE\x03\x02" +
		"\x02\x02\u041C\u03FF\x03\x02\x02\x02\u041C\u0400\x03\x02\x02\x02\u041C" +
		"\u0401\x03\x02\x02\x02\u041C\u0402\x03\x02\x02\x02\u041C\u0403\x03\x02" +
		"\x02\x02\u041C\u0404\x03\x02\x02\x02\u041C\u0405\x03\x02\x02\x02\u041C" +
		"\u0406\x03\x02\x02\x02\u041C\u0407\x03\x02\x02\x02\u041C\u0408\x03\x02" +
		"\x02\x02\u041C\u0409\x03\x02\x02\x02\u041C\u040A\x03\x02\x02\x02\u041C" +
		"\u040B\x03\x02\x02\x02\u041C\u040C\x03\x02\x02\x02\u041C\u040D\x03\x02" +
		"\x02\x02\u041C\u040E\x03\x02\x02\x02\u041C\u040F\x03\x02\x02\x02\u041C" +
		"\u0410\x03\x02\x02\x02\u041C\u0411\x03\x02\x02\x02\u041C\u0412\x03\x02" +
		"\x02\x02\u041C\u0413\x03\x02\x02\x02\u041C\u0414\x03\x02\x02\x02\u041C" +
		"\u0415\x03\x02\x02\x02\u041C\u0416\x03\x02\x02\x02\u041C\u0417\x03\x02" +
		"\x02\x02\u041C\u0418\x03\x02\x02\x02\u041C\u0419\x03\x02\x02\x02\u041C" +
		"\u041A\x03\x02\x02\x02\u041C\u041B\x03\x02\x02\x02\u041D\t\x03\x02\x02" +
		"\x02\u041E\u041F\x07\u0185\x02\x02\u041F\u0420\x05\u032C\u0197\x02\u0420" +
		"\v\x03\x02\x02\x02\u0421\u0422\x07\u0185\x02\x02\u0422\u0423\x05\u030C" +
		"\u0187\x02\u0423\r\x03\x02\x02\x02\u0424\u0425\x07\u014D\x02\x02\u0425" +
		"\u0426\x07.\x02\x02\u0426\u0427\x05\u0332\u019A\x02\u0427\x0F\x03\x02" +
		"\x02\x02\u0428\u0429\x07\u0152\x02\x02\u0429\u042C\x07V\x02\x02\u042A" +
		"\u042B\t\x02\x02\x02\u042B\u042D\x05\u032C\u0197\x02\u042C\u042A\x03\x02" +
		"\x02\x02\u042C\u042D\x03\x02\x02\x02\u042D\u0432\x03\x02\x02\x02\u042E" +
		"\u042F\x07\xCF\x02\x02\u042F\u0433\x05\u030C\u0187\x02\u0430\u0431\x07" +
		"\u0198\x02\x02\u0431\u0433\x05\u02A6\u0154\x02\u0432\u042E\x03\x02\x02" +
		"\x02\u0432\u0430\x03\x02\x02\x02\u0432\u0433\x03\x02\x02\x02\u0433\u043D" +
		"\x03\x02\x02\x02\u0434\u0435\x07\u0152\x02\x02\u0435\u043A\x07\u0146\x02" +
		"\x02\u0436\u0437\x07\xCF\x02\x02\u0437\u043B\x05\u030C\u0187\x02\u0438" +
		"\u0439\x07\u0198\x02\x02\u0439\u043B\x05\u02A6\u0154\x02\u043A\u0436\x03" +
		"\x02\x02\x02\u043A\u0438\x03\x02\x02\x02\u043A\u043B\x03\x02\x02\x02\u043B" +
		"\u043D\x03\x02\x02\x02\u043C\u0428\x03\x02\x02\x02\u043C\u0434\x03\x02" +
		"\x02\x02\u043D\x11\x03\x02\x02\x02\u043E\u043F\x07\v\x02\x02\u043F\u0440" +
		"\x07U\x02\x02\u0440\u0441\x05\u032E\u0198\x02\u0441\u0442\x07\u014D\x02" +
		"\x02\u0442\u0443\x07T\x02\x02\u0443\u0444\x07\u011F\x02\x02\u0444\u0445" +
		"\x05\u032E\u0198\x02\u0445\u044F\x03\x02\x02\x02\u0446\u0447\x07\v\x02" +
		"\x02\u0447\u0448\x07U\x02\x02\u0448\u0449\x05\u032E\u0198\x02\u0449\u044A" +
		"\x07\u014D\x02\x02\u044A\u044B\x07\u012F\x02\x02\u044B\u044C\x07\u011F" +
		"\x02\x02\u044C\u044D\x07\u01BA\x02\x02\u044D\u044F\x03\x02\x02\x02\u044E" +
		"\u043E\x03\x02\x02\x02\u044E\u0446\x03\x02\x02\x02\u044F\x13\x03\x02\x02" +
		"\x02\u0450\u0451\x07I\x02\x02\u0451\u0455\t\x03\x02\x02\u0452\u0453\x07" +
		"\xA6\x02\x02\u0453\u0454\x07\xF1\x02\x02\u0454\u0456\x07y\x02\x02\u0455" +
		"\u0452\x03\x02\x02\x02\u0455\u0456\x03\x02\x02\x02\u0456\u045A\x03\x02" +
		"\x02\x02\u0457\u0458\x05\u032E\u0198\x02\u0458\u0459\x07\u01CD\x02\x02" +
		"\u0459\u045B\x03\x02\x02\x02\u045A\u0457\x03\x02\x02\x02\u045A\u045B\x03" +
		"\x02\x02\x02\u045B\u045C\x03\x02\x02\x02\u045C\u045E\x05\u032E\u0198\x02" +
		"\u045D\u045F\x05.\x18\x02\u045E\u045D\x03\x02\x02\x02\u045E\u045F\x03" +
		"\x02\x02\x02\u045F\u0461\x03\x02\x02\x02\u0460\u0462\x050\x19\x02\u0461" +
		"\u0460\x03\x02\x02\x02\u0461\u0462\x03\x02\x02\x02\u0462\u0464\x03\x02" +
		"\x02\x02\u0463\u0465\x05\u02FA\u017E\x02\u0464\u0463\x03\x02\x02\x02\u0464" +
		"\u0465\x03\x02\x02\x02\u0465\x15\x03\x02\x02\x02\u0466\u0467\x07k\x02" +
		"\x02\u0467\u046A\t\x03\x02\x02\u0468\u0469\x07\xA6\x02\x02\u0469\u046B" +
		"\x07y\x02\x02\u046A\u0468\x03\x02\x02\x02\u046A\u046B\x03\x02\x02\x02" +
		"\u046B\u046F\x03\x02\x02\x02\u046C\u046D\x05\u032E\u0198\x02\u046D\u046E" +
		"\x07\u01CD\x02\x02\u046E\u0470\x03\x02\x02\x02\u046F\u046C\x03\x02\x02" +
		"\x02\u046F\u0470\x03\x02\x02\x02\u0470\u0471\x03\x02\x02\x02\u0471\u0473" +
		"\x05\u032E\u0198\x02\u0472\u0474\x07\x8C\x02\x02\u0473\u0472\x03\x02\x02" +
		"\x02\u0473\u0474\x03\x02\x02\x02\u0474\x17\x03\x02\x02\x02\u0475\u0476" +
		"\x07\u0152\x02\x02\u0476\u0477\x07I\x02\x02\u0477\u0478\t\x03\x02\x02" +
		"\u0478\u0479\x05\u032E\u0198\x02\u0479\x19\x03\x02\x02\x02\u047A\u047B" +
		"\x07\v\x02\x02\u047B\u047C\x07U\x02\x02\u047C\u047D\x05\u032E\u0198\x02" +
		"\u047D\u047E\x07\u012A\x02\x02\u047E\u047F\x05\u032E\u0198\x02\u047F\x1B" +
		"\x03\x02\x02\x02\u0480\u0481\x07\u0124\x02\x02\u0481\u0482\t\x03\x02\x02" +
		"\u0482\u0483\x05\u032E\u0198\x02\u0483\x1D\x03\x02\x02\x02\u0484\u0485" +
		"\x07\u0152\x02\x02\u0485\u048B\x07T\x02\x02\u0486\u0487\x07\u0152\x02" +
		"\x02\u0487\u0488\x07T\x02\x02\u0488\u0489\x07\x8F\x02\x02\u0489\u048B" +
		"\x05\u032C\u0197\x02\u048A\u0484\x03\x02\x02\x02\u048A\u0486\x03\x02\x02" +
		"\x02\u048B\x1F\x03\x02\x02\x02\u048C\u048E\x07I\x02\x02\u048D\u048F\x07" +
		"|\x02\x02\u048E\u048D\x03\x02\x02\x02\u048E\u048F\x03\x02\x02\x02\u048F" +
		"\u0490\x03\x02\x02\x02\u0490\u0494\x07\u0166\x02\x02\u0491\u0492\x07\xA6" +
		"\x02\x02\u0492\u0493\x07\xF1\x02\x02\u0493\u0495\x07y\x02\x02\u0494\u0491" +
		"\x03\x02\x02\x02\u0494\u0495\x03\x02\x02\x02\u0495\u0496\x03\x02\x02\x02" +
		"\u0496\u0497\x05\u032C\u0197\x02\u0497\u0498\x07\u01CA\x02\x02\u0498\u049D" +
		"\x05\"\x12\x02\u0499\u049A\x07\u01CC\x02\x02\u049A\u049C\x05\"\x12\x02" +
		"\u049B\u0499\x03\x02\x02\x02\u049C\u049F\x03\x02\x02\x02\u049D\u049B\x03" +
		"\x02\x02\x02\u049D\u049E\x03\x02\x02\x02\u049E\u04A4\x03\x02\x02\x02\u049F" +
		"\u049D\x03\x02\x02\x02\u04A0\u04A1\x07\u01CC\x02\x02\u04A1\u04A3\x05*" +
		"\x16\x02\u04A2\u04A0\x03\x02\x02\x02\u04A3\u04A6\x03\x02\x02\x02\u04A4" +
		"\u04A2\x03\x02\x02\x02\u04A4\u04A5\x03\x02\x02\x02\u04A5\u04A7\x03\x02" +
		"\x02\x02\u04A6\u04A4\x03\x02\x02\x02\u04A7\u04A9\x07\u01CB\x02\x02\u04A8" +
		"\u04AA\x05,\x17\x02\u04A9\u04A8\x03\x02\x02\x02\u04A9\u04AA\x03\x02\x02" +
		"\x02\u04AA\u04AC\x03\x02\x02\x02\u04AB\u04AD\x05.\x18\x02\u04AC\u04AB" +
		"\x03\x02\x02\x02\u04AC\u04AD\x03\x02\x02\x02\u04AD\u04AF\x03\x02\x02\x02" +
		"\u04AE\u04B0\x052\x1A\x02\u04AF\u04AE\x03\x02\x02\x02\u04AF\u04B0\x03" +
		"\x02\x02\x02\u04B0\u04B4\x03\x02\x02\x02\u04B1\u04B3\x05B\"\x02\u04B2" +
		"\u04B1\x03\x02\x02\x02\u04B3\u04B6\x03\x02\x02\x02\u04B4\u04B2\x03\x02" +
		"\x02\x02\u04B4\u04B5\x03\x02\x02\x02\u04B5\u04B8\x03\x02\x02\x02\u04B6" +
		"\u04B4\x03\x02\x02\x02\u04B7\u04B9\x05\u0306\u0184\x02\u04B8\u04B7\x03" +
		"\x02\x02\x02\u04B8\u04B9\x03\x02\x02\x02\u04B9\u04BB\x03\x02\x02\x02\u04BA" +
		"\u04BC\x05\u02D8\u016D\x02\u04BB\u04BA\x03\x02\x02\x02\u04BB\u04BC\x03" +
		"\x02\x02\x02\u04BC\u04BE\x03\x02\x02\x02\u04BD\u04BF\x05\u02F4\u017B\x02" +
		"\u04BE\u04BD\x03\x02\x02\x02\u04BE\u04BF\x03\x02\x02\x02\u04BF\u04C1\x03" +
		"\x02\x02\x02\u04C0\u04C2\x054\x1B\x02\u04C1\u04C0\x03\x02\x02\x02\u04C1" +
		"\u04C2\x03\x02\x02\x02\u04C2\u04C4\x03\x02\x02\x02\u04C3\u04C5\x058\x1D" +
		"\x02\u04C4\u04C3\x03\x02\x02\x02\u04C4\u04C5\x03\x02\x02\x02\u04C5\u04C7" +
		"\x03\x02\x02\x02\u04C6\u04C8\x05\u02FA\u017E\x02\u04C7\u04C6\x03\x02\x02" +
		"\x02\u04C7\u04C8\x03\x02\x02\x02\u04C8\u04CA\x03\x02\x02\x02\u04C9\u04CB" +
		"\x05\u02FC\u017F\x02\u04CA\u04C9\x03\x02\x02\x02\u04CA\u04CB\x03\x02\x02" +
		"\x02\u04CB!\x03\x02\x02\x02\u04CC\u04CD\x05\u032E\u0198\x02\u04CD\u04CF" +
		"\x05\u031A\u018E\x02\u04CE\u04D0\x05$\x13\x02\u04CF\u04CE\x03\x02\x02" +
		"\x02\u04CF\u04D0\x03\x02\x02\x02\u04D0\u04D2\x03\x02\x02\x02\u04D1\u04D3" +
		"\x07\xC2\x02\x02\u04D2\u04D1\x03\x02\x02\x02\u04D2\u04D3\x03\x02\x02\x02" +
		"\u04D3\u04D5\x03\x02\x02\x02\u04D4\u04D6\x056\x1C\x02\u04D5\u04D4\x03" +
		"\x02\x02\x02\u04D5\u04D6\x03\x02\x02\x02\u04D6\u04DA\x03\x02\x02\x02\u04D7" +
		"\u04DB\x07\xF2\x02\x02\u04D8\u04D9\x07\xF1\x02\x02\u04D9\u04DB\x07\xF2" +
		"\x02\x02\u04DA\u04D7\x03\x02\x02\x02\u04DA\u04D8\x03\x02\x02\x02\u04DA" +
		"\u04DB\x03\x02\x02\x02\u04DB\u04DF\x03\x02\x02\x02\u04DC\u04E0\x05&\x14" +
		"\x02\u04DD\u04E0\x07\x17\x02\x02\u04DE\u04E0\x05(\x15\x02\u04DF\u04DC" +
		"\x03\x02\x02\x02\u04DF\u04DD\x03\x02\x02\x02\u04DF\u04DE\x03\x02\x02\x02" +
		"\u04DF\u04E0\x03\x02\x02\x02\u04E0\u04E2\x03\x02\x02\x02\u04E1\u04E3\x05" +
		"@!\x02\u04E2\u04E1\x03\x02\x02\x02\u04E2\u04E3\x03\x02\x02\x02\u04E3\u04E5" +
		"\x03\x02\x02\x02\u04E4\u04E6\x05\u0306\u0184\x02\u04E5\u04E4\x03\x02\x02" +
		"\x02\u04E5\u04E6\x03\x02\x02\x02\u04E6#\x03\x02\x02\x02\u04E7\u04E8\x07" +
		"2\x02\x02\u04E8\u04E9\x07\u014D\x02\x02\u04E9\u04F0\x05\u032E\u0198\x02" +
		"\u04EA\u04EB\x074\x02\x02\u04EB\u04F0\x05\u032E\u0198\x02\u04EC\u04ED" +
		"\x073\x02\x02\u04ED\u04EE\x07\u014D\x02\x02\u04EE\u04F0\x05\u032E\u0198" +
		"\x02\u04EF\u04E7\x03\x02\x02\x02\u04EF\u04EA\x03\x02\x02\x02\u04EF\u04EC" +
		"\x03\x02\x02\x02\u04F0%\x03\x02\x02\x02\u04F1\u04FB\x07`\x02\x02\u04F2" +
		"\u04FC\x05\u030C\u0187\x02\u04F3\u04FC\x07\xF2\x02\x02\u04F4\u04FC\x07" +
		"R\x02\x02\u04F5\u04F6\x07\u01CA\x02\x02\u04F6\u04F7\x05\u032C\u0197\x02" +
		"\u04F7\u04F8\x07\u01CA\x02\x02\u04F8\u04F9\x07\u01CB\x02\x02\u04F9\u04FA" +
		"\x07\u01CB\x02\x02\u04FA\u04FC\x03\x02\x02\x02\u04FB\u04F2\x03\x02\x02" +
		"\x02\u04FB\u04F3\x03\x02\x02\x02\u04FB\u04F4\x03\x02\x02\x02\u04FB\u04F5" +
		"\x03\x02\x02\x02\u04FC\'\x03\x02\x02\x02\u04FD\u04FE\x07\x12\x02\x02\u04FE" +
		"\u04FF\x05\u02A6\u0154\x02\u04FF)\x03\x02\x02\x02\u0500\u0501\x07\xAE" +
		"\x02\x02\u0501\u0502\x05\u032E\u0198\x02\u0502\u0504\x05\u0330\u0199\x02" +
		"\u0503\u0505\x05P)\x02\u0504\u0503\x03\x02\x02\x02\u0504\u0505\x03\x02" +
		"\x02\x02\u0505\u0507\x03\x02\x02\x02\u0506\u0508\x05\u0306\u0184\x02\u0507" +
		"\u0506\x03\x02\x02\x02\u0507\u0508\x03\x02\x02\x02\u0508+\x03\x02\x02" +
		"\x02\u0509\u050A\x07r\x02\x02\u050A\u050B\x07\u01A1\x02\x02\u050B\u050C" +
		"\x05\u032E\u0198\x02\u050C-\x03\x02\x02\x02\u050D\u050F\x07`\x02\x02\u050E" +
		"\u050D\x03\x02\x02\x02\u050E\u050F\x03\x02\x02\x02\u050F\u0515\x03\x02" +
		"\x02\x02\u0510\u0511\x072\x02\x02\u0511\u0516\x07\u014D\x02\x02\u0512" +
		"\u0516\x074\x02\x02\u0513\u0514\x073\x02\x02\u0514\u0516\x07\u014D\x02" +
		"\x02\u0515\u0510\x03\x02\x02\x02\u0515\u0512\x03\x02\x02\x02\u0515\u0513" +
		"\x03\x02\x02\x02\u0516\u0518\x03\x02\x02\x02\u0517\u0519\x07\u01A1\x02" +
		"\x02\u0518\u0517\x03\x02\x02\x02\u0518\u0519\x03\x02\x02\x02\u0519\u051A" +
		"\x03\x02\x02\x02\u051A\u051B\x05\u0332\u019A\x02\u051B/\x03\x02\x02\x02" +
		"\u051C\u051E\x07`\x02\x02\u051D\u051C\x03\x02\x02\x02\u051D\u051E\x03" +
		"\x02\x02\x02\u051E\u051F\x03\x02\x02\x02\u051F\u0521\x079\x02\x02\u0520" +
		"\u0522\x07\u01A1\x02\x02\u0521\u0520\x03\x02\x02\x02\u0521\u0522\x03\x02" +
		"\x02\x02\u0522\u0523\x03\x02\x02\x02\u0523\u0524\x05\u0332\u019A\x02\u0524" +
		"1\x03\x02\x02\x02\u0525\u0526\t\x04\x02\x02\u0526\u0527\x07\xC2\x02\x02" +
		"\u0527\u0528\x05\u0330\u0199\x02\u05283\x03\x02\x02\x02\u0529\u052A\x07" +
		"\u0100\x02\x02\u052A\u052B\x07*\x02\x02\u052B\u052C\x05\u0330\u0199\x02" +
		"\u052C5\x03\x02\x02\x02\u052D\u052E\t\x05\x02\x02\u052E7\x03\x02\x02\x02" +
		"\u052F\u0530\x07\u013E\x02\x02\u0530\u0531\x07\u01CA\x02\x02\u0531\u0536" +
		"\x05:\x1E\x02\u0532\u0533\x07\u01CC\x02\x02\u0533\u0535\x05:\x1E\x02\u0534" +
		"\u0532\x03\x02\x02\x02\u0535\u0538\x03\x02\x02\x02\u0536\u0534\x03\x02" +
		"\x02\x02\u0536\u0537\x03\x02\x02\x02\u0537\u0539\x03\x02\x02\x02\u0538" +
		"\u0536\x03\x02\x02\x02\u0539\u053A\x07\u01CB\x02\x02\u053A9\x03\x02\x02" +
		"\x02\u053B\u053C\x05\u032E\u0198\x02\u053C\u053E\x05\u0330\u0199\x02\u053D" +
		"\u053F\x05<\x1F\x02\u053E\u053D\x03\x02\x02\x02\u053E\u053F\x03\x02\x02" +
		"\x02\u053F\u0541\x03\x02\x02\x02\u0540\u0542\x05> \x02\u0541\u0540\x03" +
		"\x02\x02\x02\u0541\u0542\x03\x02\x02\x02\u0542\u0544\x03\x02\x02\x02\u0543" +
		"\u0545\x05\u02FA\u017E\x02\u0544\u0543\x03\x02\x02\x02\u0544\u0545\x03" +
		"\x02\x02\x02\u0545;\x03\x02\x02\x02\u0546\u0547\x07m\x02\x02\u0547\u0548" +
		"\x07\xC2\x02\x02\u0548\u0549\x05\u0330\u0199\x02\u0549=\x03\x02\x02\x02" +
		"\u054A\u054B\x07\x8F\x02\x02\u054B\u054C\x05\u032E\u0198\x02\u054C?\x03" +
		"\x02\x02\x02\u054D\u054E\x07\u019A\x02\x02\u054E\u054F\x07\xDD\x02\x02" +
		"\u054F\u0550\x07\u010F\x02\x02\u0550\u0553\x05\u032C\u0197\x02\u0551\u0552" +
		"\x07\u0188\x02\x02\u0552\u0554\x05\u0330\u0199\x02\u0553\u0551\x03\x02" +
		"\x02\x02\u0553\u0554\x03\x02\x02\x02\u0554A\x03\x02\x02\x02\u0555\u0556" +
		"\x07\u019A\x02\x02\u0556\u0557\x07\u0140\x02\x02\u0557\u0558\x07\x05\x02" +
		"\x02\u0558\u0559\x07\u010F\x02\x02\u0559\u055C\x05\u032C\u0197\x02\u055A" +
		"\u055B\x07\xF9\x02\x02\u055B\u055D\x05\u0330\u0199\x02\u055C\u055A\x03" +
		"\x02\x02\x02\u055C\u055D\x03\x02\x02\x02\u055DC\x03\x02\x02\x02\u055E" +
		"\u055F\x07I\x02\x02\u055F\u0560\x07\u016A\x02\x02\u0560\u0561\x07\u0166" +
		"\x02\x02\u0561\u0562\x05\u032C\u0197\x02\u0562\u0563\x05\u025E\u0130\x02" +
		"\u0563E\x03\x02\x02\x02\u0564\u0565\x07I\x02\x02\u0565\u0569\x07\u0166" +
		"\x02\x02\u0566\u0567\x07\xA6\x02\x02\u0567\u0568\x07\xF1\x02\x02\u0568" +
		"\u056A\x07y\x02\x02\u0569\u0566\x03\x02\x02\x02\u0569\u056A\x03\x02\x02" +
		"\x02\u056A\u056B\x03\x02\x02\x02\u056B\u0577\x05\u032C\u0197\x02\u056C" +
		"\u056D\x07\u01CA\x02\x02\u056D\u0572\x05\u032E\u0198\x02\u056E\u056F\x07" +
		"\u01CC\x02\x02\u056F\u0571\x05\u032E\u0198\x02\u0570\u056E\x03\x02\x02" +
		"\x02\u0571\u0574\x03\x02\x02\x02\u0572\u0570\x03\x02\x02\x02\u0572\u0573" +
		"\x03\x02\x02\x02\u0573\u0575\x03\x02\x02\x02\u0574\u0572\x03\x02\x02\x02" +
		"\u0575\u0576\x07\u01CB\x02\x02\u0576\u0578\x03\x02\x02\x02\u0577\u056C" +
		"\x03\x02\x02\x02\u0577\u0578\x03\x02\x02\x02\u0578\u057A\x03\x02\x02\x02" +
		"\u0579\u057B\x052\x1A\x02\u057A\u0579\x03\x02\x02\x02\u057A\u057B\x03" +
		"\x02\x02\x02\u057B\u057D\x03\x02\x02\x02\u057C\u057E\x05\u0306\u0184\x02" +
		"\u057D\u057C\x03\x02\x02\x02\u057D\u057E\x03\x02\x02\x02\u057E\u0580\x03" +
		"\x02\x02\x02\u057F\u0581\x05\u02D8\u016D\x02\u0580\u057F\x03\x02\x02\x02" +
		"\u0580\u0581\x03\x02\x02\x02\u0581\u0583\x03\x02\x02\x02\u0582\u0584\x05" +
		"\u02F4\u017B\x02\u0583\u0582\x03\x02\x02\x02\u0583\u0584\x03\x02\x02\x02" +
		"\u0584\u0586\x03\x02\x02\x02\u0585\u0587\x05\u02FA\u017E\x02\u0586\u0585" +
		"\x03\x02\x02\x02\u0586\u0587\x03\x02\x02\x02\u0587\u0588\x03\x02\x02\x02" +
		"\u0588\u0589\x07\x12\x02\x02\u0589\u058A\x05\u025E\u0130\x02\u058AG\x03" +
		"\x02\x02\x02\u058B\u058D\x07k\x02\x02\u058C\u058E\x07\u016A\x02\x02\u058D" +
		"\u058C\x03\x02\x02\x02\u058D\u058E\x03\x02\x02\x02\u058E\u058F\x03\x02" +
		"\x02\x02\u058F\u0592\x07\u0166\x02\x02\u0590\u0591\x07\xA6\x02\x02\u0591" +
		"\u0593\x07y\x02\x02\u0592\u0590\x03\x02\x02\x02\u0592\u0593\x03\x02\x02" +
		"\x02\u0593\u0594\x03\x02\x02\x02\u0594\u0596\x05\u032C\u0197\x02\u0595" +
		"\u0597\x07\x8C\x02\x02\u0596\u0595\x03\x02\x02\x02\u0596\u0597\x03\x02" +
		"\x02\x02\u0597I\x03\x02\x02\x02\u0598\u0599\x07\v\x02\x02\u0599\u059A" +
		"\x07\u0166\x02\x02\u059A\u059B\x05\u032C\u0197\x02\u059B\u05A0\x05\xD0" +
		"i\x02\u059C\u059D\x07\u01CC\x02\x02\u059D\u059F\x05\xD0i\x02\u059E\u059C" +
		"\x03\x02\x02\x02\u059F\u05A2\x03\x02\x02\x02\u05A0\u059E\x03\x02\x02\x02" +
		"\u05A0\u05A1\x03\x02\x02\x02\u05A1\u05BE\x03\x02\x02\x02\u05A2\u05A0\x03" +
		"\x02\x02\x02\u05A3\u05A4\x07\v\x02\x02\u05A4\u05A5\x07\u0166\x02\x02\u05A5" +
		"\u05A6\x05\u032C\u0197\x02\u05A6\u05A7\x07\x06\x02\x02\u05A7\u05A8\x07" +
		"\u013E\x02\x02\u05A8\u05AD\x05:\x1E\x02\u05A9\u05AA\x07\u01CC\x02\x02" +
		"\u05AA\u05AC\x05:\x1E\x02\u05AB\u05A9\x03\x02\x02\x02\u05AC\u05AF\x03" +
		"\x02\x02\x02\u05AD\u05AB\x03\x02\x02\x02\u05AD\u05AE\x03\x02\x02\x02\u05AE" +
		"\u05BE\x03\x02\x02\x02\u05AF\u05AD\x03\x02\x02\x02\u05B0\u05B1\x07\v\x02" +
		"\x02\u05B1\u05B2\x07\u0166\x02\x02\u05B2\u05B3\x05\u032C\u0197\x02\u05B3" +
		"\u05B4\x07k\x02\x02\u05B4\u05B5\x07\u013E\x02\x02\u05B5\u05BA\x05\u032E" +
		"\u0198\x02\u05B6\u05B7\x07\u01CC\x02\x02\u05B7\u05B9\x05\u032E\u0198\x02" +
		"\u05B8\u05B6\x03\x02\x02\x02\u05B9\u05BC\x03\x02\x02\x02\u05BA\u05B8\x03" +
		"\x02\x02\x02\u05BA\u05BB\x03\x02\x02\x02\u05BB\u05BE\x03\x02\x02\x02\u05BC" +
		"\u05BA\x03\x02\x02\x02\u05BD\u0598\x03\x02\x02\x02\u05BD\u05A3\x03\x02" +
		"\x02\x02\u05BD\u05B0\x03\x02\x02\x02\u05BEK\x03\x02\x02\x02\u05BF\u05C0" +
		"\x07I\x02\x02\u05C0\u05C1\x07\xAE\x02\x02\u05C1\u05C2\x05\u032E\u0198" +
		"\x02\u05C2\u05C3\x07\xF9\x02\x02\u05C3\u05C4\x05\u032C\u0197\x02\u05C4" +
		"\u05C6\x05\u0330\u0199\x02\u05C5\u05C7\x05P)\x02\u05C6\u05C5\x03\x02\x02" +
		"\x02\u05C6\u05C7\x03\x02\x02\x02\u05C7\u05C9\x03\x02\x02\x02\u05C8\u05CA" +
		"\x05\u0306\u0184\x02\u05C9\u05C8\x03\x02\x02\x02\u05C9\u05CA\x03\x02\x02" +
		"\x02\u05CAM\x03\x02\x02\x02\u05CB\u05CC\x07k\x02\x02\u05CC\u05CD\x07\xAE" +
		"\x02\x02\u05CD\u05CE\x05\u032E\u0198\x02\u05CE\u05CF\x07\xF9\x02\x02\u05CF" +
		"\u05D0\x05\u032C\u0197\x02\u05D0O\x03\x02\x02\x02\u05D1\u05D2\x07\u0188" +
		"\x02\x02\u05D2\u05D3\x07!\x02\x02\u05D3Q\x03\x02\x02\x02\u05D4\u05D6\x07" +
		"\u0152\x02\x02\u05D5\u05D7\x07\x92\x02\x02\u05D6\u05D5\x03\x02\x02\x02" +
		"\u05D6\u05D7\x03\x02\x02\x02\u05D7\u05D8\x03\x02\x02\x02\u05D8\u05DB\x07" +
		"\u0167\x02\x02\u05D9\u05DA\t\x02\x02\x02\u05DA\u05DC\x05\u032C\u0197\x02" +
		"\u05DB\u05D9\x03\x02\x02\x02\u05DB\u05DC\x03\x02\x02\x02\u05DC\u05E1\x03" +
		"\x02\x02\x02\u05DD\u05DE\x07\xCF\x02\x02\u05DE\u05E2\x05\u030C\u0187\x02" +
		"\u05DF\u05E0\x07\u0198\x02\x02\u05E0\u05E2\x05\u02A6\u0154\x02\u05E1\u05DD" +
		"\x03\x02\x02\x02\u05E1\u05DF\x03\x02\x02\x02\u05E1\u05E2\x03\x02\x02\x02" +
		"\u05E2S\x03\x02\x02\x02\u05E3\u05E4\x07\u0152\x02\x02\u05E4\u05E9\x07" +
		"I\x02\x02\u05E5\u05EA\x07\u0166\x02\x02\u05E6\u05EA\x07\u018F\x02\x02" +
		"\u05E7\u05E8\x07\xDE\x02\x02\u05E8\u05EA\x07\u018F\x02\x02\u05E9\u05E5" +
		"\x03\x02\x02\x02\u05E9\u05E6\x03\x02\x02\x02\u05E9\u05E7\x03\x02\x02\x02" +
		"\u05EA\u05EB\x03\x02\x02\x02\u05EB\u05EC\x05\u032C\u0197\x02\u05ECU\x03" +
		"\x02\x02\x02\u05ED\u05EF\x07\u0152\x02\x02\u05EE\u05F0\x07\x92\x02\x02" +
		"\u05EF\u05EE\x03\x02\x02\x02\u05EF\u05F0\x03\x02\x02\x02\u05F0\u05F1\x03" +
		"\x02\x02\x02\u05F1\u05F2\t\x06\x02\x02\u05F2\u05F3\t\x02\x02\x02\u05F3" +
		"\u05F4\x05\u032C\u0197\x02\u05F4\u05F7\x03\x02\x02\x02\u05F5\u05F6\t\x02" +
		"\x02\x02\u05F6\u05F8\x05\u032C\u0197\x02\u05F7\u05F5\x03\x02\x02\x02\u05F7" +
		"\u05F8\x03\x02\x02\x02\u05F8\u05FD\x03\x02\x02\x02\u05F9\u05FA\x07\xCF" +
		"\x02\x02\u05FA\u05FE\x05\u030C\u0187\x02\u05FB\u05FC\x07\u0198\x02\x02" +
		"\u05FC\u05FE\x05\u02A6\u0154\x02\u05FD\u05F9\x03\x02\x02\x02\u05FD\u05FB" +
		"\x03\x02\x02\x02\u05FD\u05FE\x03\x02\x02\x02\u05FEW\x03\x02\x02\x02\u05FF" +
		"\u0600\x07\u0152\x02\x02\u0600\u0601\x07\u0166\x02\x02\u0601\u0604\x07" +
		"\u0158\x02\x02\u0602\u0603\t\x02\x02\x02\u0603\u0605\x05\u032C\u0197\x02" +
		"\u0604\u0602\x03\x02\x02\x02\u0604\u0605\x03\x02\x02\x02\u0605\u060A\x03" +
		"\x02\x02\x02\u0606\u0607\x07\xCF\x02\x02\u0607\u060B\x05\u030C\u0187\x02" +
		"\u0608\u0609\x07\u0198\x02\x02\u0609\u060B\x05\u02A6\u0154\x02\u060A\u0606" +
		"\x03\x02\x02\x02\u060A\u0608\x03\x02\x02\x02\u060A\u060B\x03\x02\x02\x02" +
		"\u060BY\x03\x02\x02\x02\u060C\u060D\x07\u0125\x02\x02\u060D\u060E\x07" +
		"|\x02\x02\u060E\u060F\x07\u0166\x02\x02\u060F\u061C\x05\u032C\u0197\x02" +
		"\u0610\u0611\x07\u0104\x02\x02\u0611\u0612\x07\u01CA\x02\x02\u0612\u0617" +
		"\x05\u030C\u0187\x02\u0613\u0614\x07\u01CC\x02\x02\u0614\u0616\x05\u030C" +
		"\u0187\x02\u0615\u0613\x03\x02\x02\x02\u0616\u0619\x03\x02\x02\x02\u0617" +
		"\u0615\x03\x02\x02\x02\u0617\u0618\x03\x02\x02\x02\u0618\u061A\x03\x02" +
		"\x02\x02\u0619\u0617\x03\x02\x02\x02\u061A\u061B\x07\u01CB\x02\x02\u061B" +
		"\u061D\x03\x02\x02\x02\u061C\u0610\x03\x02\x02\x02\u061C\u061D\x03\x02" +
		"\x02\x02\u061D[\x03\x02\x02\x02\u061E\u061F\x07\u0152\x02\x02\u061F\u0620" +
		"\x07\v\x02\x02\u0620\u0621\x07\u0166\x02\x02\u0621\u0624\t\x07\x02\x02" +
		"\u0622\u0623\t\x02\x02\x02\u0623\u0625\x05\u032C\u0197\x02\u0624\u0622" +
		"\x03\x02\x02\x02\u0624\u0625\x03\x02\x02\x02\u0625\u0628\x03\x02\x02\x02" +
		"\u0626\u0627\x07\u0198\x02\x02\u0627\u0629\x05\u02A6\u0154\x02\u0628\u0626" +
		"\x03\x02\x02\x02\u0628\u0629\x03\x02\x02\x02\u0629\u0634\x03\x02\x02\x02" +
		"\u062A\u062B\x07\u0100\x02\x02\u062B\u062C\x07*\x02\x02\u062C\u0631\x05" +
		"\u026E\u0138\x02\u062D\u062E\x07\u01CC\x02\x02\u062E\u0630\x05\u026E\u0138" +
		"\x02\u062F\u062D\x03\x02\x02\x02\u0630\u0633\x03\x02\x02\x02\u0631\u062F" +
		"\x03\x02\x02\x02\u0631\u0632\x03\x02\x02\x02\u0632\u0635\x03\x02\x02\x02" +
		"\u0633\u0631\x03\x02\x02\x02\u0634\u062A\x03\x02\x02\x02\u0634\u0635\x03" +
		"\x02\x02\x02\u0635\u0637\x03\x02\x02\x02\u0636\u0638\x05\u0270\u0139\x02" +
		"\u0637\u0636\x03\x02\x02\x02\u0637\u0638\x03\x02\x02\x02\u0638\u0655\x03" +
		"\x02\x02\x02\u0639\u063A\x07\u0152\x02\x02\u063A\u063B\x07\v\x02\x02\u063B" +
		"\u063C\x07\xDE\x02\x02\u063C\u063F\x07\u018F\x02\x02\u063D\u063E\t\x02" +
		"\x02\x02\u063E\u0640\x05\u032C\u0197\x02\u063F\u063D\x03\x02\x02\x02\u063F" +
		"\u0640\x03\x02\x02\x02\u0640\u0643\x03\x02\x02\x02\u0641\u0642\x07\u0198" +
		"\x02\x02\u0642\u0644\x05\u02A6\u0154\x02\u0643\u0641\x03\x02\x02\x02\u0643" +
		"\u0644\x03\x02\x02\x02\u0644\u064F\x03\x02\x02\x02\u0645\u0646\x07\u0100" +
		"\x02\x02\u0646\u0647\x07*\x02\x02\u0647\u064C\x05\u026E\u0138\x02\u0648" +
		"\u0649\x07\u01CC\x02\x02\u0649\u064B\x05\u026E\u0138\x02\u064A\u0648\x03" +
		"\x02\x02\x02\u064B\u064E\x03\x02\x02\x02\u064C\u064A\x03\x02\x02\x02\u064C" +
		"\u064D\x03\x02\x02\x02\u064D\u0650\x03\x02\x02\x02\u064E\u064C\x03\x02" +
		"\x02\x02\u064F\u0645\x03\x02\x02\x02\u064F\u0650\x03\x02\x02\x02\u0650" +
		"\u0652\x03\x02\x02\x02\u0651\u0653\x05\u0270\u0139\x02\u0652\u0651\x03" +
		"\x02\x02\x02\u0652\u0653\x03\x02\x02\x02\u0653\u0655\x03\x02\x02\x02\u0654" +
		"\u061E\x03\x02\x02\x02\u0654\u0639\x03\x02\x02\x02\u0655]\x03\x02\x02" +
		"\x02\u0656\u0657\t\b\x02\x02\u0657\u0659\x05\u032C\u0197\x02\u0658\u065A" +
		"\x07\n\x02\x02\u0659\u0658\x03\x02\x02\x02\u0659\u065A\x03\x02\x02\x02" +
		"\u065A_\x03\x02\x02\x02\u065B\u065D\x07I\x02\x02\u065C\u065E\x07|\x02" +
		"\x02\u065D\u065C\x03\x02\x02\x02\u065D\u065E\x03\x02\x02\x02\u065E\u065F" +
		"\x03\x02\x02\x02\u065F\u0663\x07\u0166\x02\x02\u0660\u0661\x07\xA6\x02" +
		"\x02\u0661\u0662\x07\xF1\x02\x02\u0662\u0664\x07y\x02\x02\u0663\u0660" +
		"\x03\x02\x02\x02\u0663\u0664\x03\x02\x02\x02\u0664\u0665\x03\x02\x02\x02" +
		"\u0665\u0666\x05\u032C\u0197\x02\u0666\u0667\x07\xCF\x02\x02\u0667\u0668" +
		"\x05\u032C\u0197\x02\u0668a\x03\x02\x02\x02\u0669\u066A\x07\u0152\x02" +
		"\x02\u066A\u066B\t\t\x02\x02\u066B\u066C\t\x02\x02\x02\u066C\u066D\x05" +
		"\u032C\u0197\x02\u066D\u0670\x03\x02\x02\x02\u066E\u066F\t\x02\x02\x02" +
		"\u066F\u0671\x05\u032C\u0197\x02\u0670\u066E\x03\x02\x02\x02\u0670\u0671" +
		"\x03\x02\x02\x02\u0671c\x03\x02\x02\x02\u0672\u0673\x07\u0124\x02\x02" +
		"\u0673\u0674\x07\u0166\x02\x02\u0674\u0675\x05\u032C\u0197\x02\u0675e" +
		"\x03\x02\x02\x02\u0676\u0677\x07\u0179\x02\x02\u0677\u0678\x07\u0166\x02" +
		"\x02\u0678\u067A\x05\u032C\u0197\x02\u0679\u067B\x05\u0296\u014C\x02\u067A" +
		"\u0679\x03\x02\x02\x02\u067A\u067B\x03\x02\x02\x02\u067Bg\x03\x02\x02" +
		"\x02\u067C\u067D\x07+\x02\x02\u067D\u067E\x07\v\x02\x02\u067E\u0680\x07" +
		"\u0166\x02\x02\u067F\u0681\t\x07\x02\x02\u0680\u067F\x03\x02\x02\x02\u0680" +
		"\u0681";
	private static readonly _serializedATNSegment5: string =
		"\x03\x02\x02\x02\u0681\u0682\x03\x02\x02\x02\u0682\u0683\x07\x8F\x02\x02" +
		"\u0683\u068E\x05\u032C\u0197\x02\u0684\u0685\x07\u01CA\x02\x02\u0685\u068A" +
		"\x07\u01BA\x02\x02\u0686\u0687\x07\u01CC\x02\x02\u0687\u0689\x07\u01BA" +
		"\x02\x02\u0688\u0686\x03\x02\x02\x02\u0689\u068C\x03\x02\x02\x02\u068A" +
		"\u0688\x03\x02\x02\x02\u068A\u068B\x03\x02\x02\x02\u068B\u068D\x03\x02" +
		"\x02\x02\u068C\u068A\x03\x02\x02\x02\u068D\u068F\x07\u01CB\x02\x02\u068E" +
		"\u0684\x03\x02\x02\x02\u068E\u068F\x03\x02\x02\x02\u068F\u0697\x03\x02" +
		"\x02\x02\u0690\u0691\x07+\x02\x02\u0691\u0692\x07\v\x02\x02\u0692\u0693" +
		"\x07\xDE\x02\x02\u0693\u0694\x07\u018F\x02\x02\u0694\u0695\x07\x8F\x02" +
		"\x02\u0695\u0697\x05\u032C\u0197\x02\u0696\u067C\x03\x02\x02\x02\u0696" +
		"\u0690\x03\x02\x02\x02\u0697i\x03\x02\x02\x02\u0698\u069A\x07\u0152\x02" +
		"\x02\u0699\u069B\x07\u016A\x02\x02\u069A\u0699\x03\x02\x02\x02\u069A\u069B" +
		"\x03\x02\x02\x02\u069B\u069C\x03\x02\x02\x02\u069C\u069D\x07\u0105\x02" +
		"\x02\u069D\u069E\x07\x8F\x02\x02\u069E\u06A1\x05\u032C\u0197\x02\u069F" +
		"\u06A0\x07\u0198\x02\x02\u06A0\u06A2\x05\u02A6\u0154\x02\u06A1\u069F\x03" +
		"\x02\x02\x02\u06A1\u06A2\x03\x02\x02\x02\u06A2\u06AD\x03\x02\x02\x02\u06A3" +
		"\u06A4\x07\u0100\x02\x02\u06A4\u06A5\x07*\x02\x02\u06A5\u06AA\x05\u026E" +
		"\u0138\x02\u06A6\u06A7\x07\u01CC\x02\x02\u06A7\u06A9\x05\u026E\u0138\x02" +
		"\u06A8\u06A6\x03\x02\x02\x02\u06A9\u06AC\x03\x02\x02\x02\u06AA\u06A8\x03" +
		"\x02\x02\x02\u06AA\u06AB\x03\x02\x02\x02\u06AB\u06AE\x03\x02\x02\x02\u06AC" +
		"\u06AA\x03\x02\x02\x02\u06AD\u06A3\x03\x02\x02\x02\u06AD\u06AE\x03\x02" +
		"\x02\x02\u06AE\u06B0\x03\x02\x02\x02\u06AF\u06B1\x05\u0270\u0139\x02\u06B0" +
		"\u06AF\x03\x02\x02\x02\u06B0\u06B1\x03\x02\x02\x02\u06B1k\x03\x02\x02" +
		"\x02\u06B2\u06B3\x07\u0124\x02\x02\u06B3\u06B4\x07\u0104\x02\x02\u06B4" +
		"\u06B5\x05\u032E\u0198\x02\u06B5\u06B6\x07\x8F\x02\x02\u06B6\u06B7\x05" +
		"\u032C\u0197\x02\u06B7m\x03\x02\x02\x02\u06B8\u06BB\x07I\x02\x02\u06B9" +
		"\u06BA\x07\xFF\x02\x02\u06BA\u06BC\x07\u012D\x02\x02\u06BB\u06B9\x03\x02" +
		"\x02\x02\u06BB\u06BC\x03\x02\x02\x02\u06BC\u06BD\x03\x02\x02\x02\u06BD" +
		"\u06C1\x07\u018F\x02\x02\u06BE\u06BF\x07\xA6\x02\x02\u06BF\u06C0\x07\xF1" +
		"\x02\x02\u06C0\u06C2\x07y\x02\x02\u06C1\u06BE\x03\x02\x02\x02\u06C1\u06C2" +
		"\x03\x02\x02\x02\u06C2\u06C3\x03\x02\x02\x02\u06C3\u06CF\x05\u032C\u0197" +
		"\x02\u06C4\u06C5\x07\u01CA\x02\x02\u06C5\u06CA\x05t;\x02\u06C6\u06C7\x07" +
		"\u01CC\x02\x02\u06C7\u06C9\x05t;\x02\u06C8\u06C6\x03\x02\x02\x02\u06C9" +
		"\u06CC\x03\x02\x02\x02\u06CA\u06C8\x03\x02\x02\x02\u06CA\u06CB\x03\x02" +
		"\x02\x02\u06CB\u06CD\x03\x02\x02\x02\u06CC\u06CA\x03\x02\x02\x02\u06CD" +
		"\u06CE\x07\u01CB\x02\x02\u06CE\u06D0\x03\x02\x02\x02\u06CF\u06C4\x03\x02" +
		"\x02\x02\u06CF\u06D0\x03\x02\x02\x02\u06D0\u06D4\x03\x02\x02\x02\u06D1" +
		"\u06D3\x05B\"\x02\u06D2\u06D1\x03\x02\x02\x02\u06D3\u06D6\x03\x02\x02" +
		"\x02\u06D4\u06D2\x03\x02\x02\x02\u06D4\u06D5\x03\x02\x02\x02\u06D5\u06D8" +
		"\x03\x02\x02\x02\u06D6\u06D4\x03\x02\x02\x02\u06D7\u06D9\x05\u0306\u0184" +
		"\x02\u06D8\u06D7\x03\x02\x02\x02\u06D8\u06D9\x03\x02\x02\x02\u06D9\u06DA" +
		"\x03\x02\x02\x02\u06DA\u06DB\x07\x12\x02\x02\u06DB\u06DC\x05\u025E\u0130" +
		"\x02\u06DCo\x03\x02\x02\x02\u06DD\u06DE\x07\v\x02\x02\u06DE\u06DF\x07" +
		"\u018F\x02\x02\u06DF\u06EB\x05\u032C\u0197\x02\u06E0\u06E1\x07\u01CA\x02" +
		"\x02\u06E1\u06E6\x05t;\x02\u06E2\u06E3\x07\u01CC\x02\x02\u06E3\u06E5\x05" +
		"t;\x02\u06E4\u06E2\x03\x02\x02\x02\u06E5\u06E8\x03\x02\x02\x02\u06E6\u06E4" +
		"\x03\x02\x02\x02\u06E6\u06E7\x03\x02\x02\x02\u06E7\u06E9\x03\x02\x02\x02" +
		"\u06E8\u06E6\x03\x02\x02\x02\u06E9\u06EA\x07\u01CB\x02\x02\u06EA\u06EC" +
		"\x03\x02\x02\x02\u06EB\u06E0\x03\x02\x02\x02\u06EB\u06EC\x03\x02\x02\x02" +
		"\u06EC\u06ED\x03\x02\x02\x02\u06ED\u06EE\x07\x12\x02\x02\u06EE\u06EF\x05" +
		"\u025E\u0130\x02\u06EF\u06FB\x03\x02\x02\x02\u06F0\u06F1\x07\v\x02\x02" +
		"\u06F1\u06F2\x07\u018F\x02\x02\u06F2\u06F3\x05\u032C\u0197\x02\u06F3\u06F4" +
		"\x05\u0108\x85\x02\u06F4\u06FB\x03\x02\x02\x02\u06F5\u06F6\x07\v\x02\x02" +
		"\u06F6\u06F7\x07\u018F\x02\x02\u06F7\u06F8\x05\u032C\u0197\x02\u06F8\u06F9" +
		"\x05\u010A\x86\x02\u06F9\u06FB\x03\x02\x02\x02\u06FA\u06DD\x03\x02\x02" +
		"\x02\u06FA\u06F0\x03\x02\x02\x02\u06FA\u06F5\x03\x02\x02\x02\u06FBq\x03" +
		"\x02\x02\x02\u06FC\u06FD\x07k\x02\x02\u06FD\u0700\x07\u018F\x02\x02\u06FE" +
		"\u06FF\x07\xA6\x02\x02\u06FF\u0701\x07y\x02\x02\u0700\u06FE\x03\x02\x02" +
		"\x02\u0700\u0701\x03\x02\x02\x02\u0701\u0702\x03\x02\x02\x02\u0702\u0703" +
		"\x05\u032C\u0197\x02\u0703s\x03\x02\x02\x02\u0704\u0706\x05\u032E\u0198" +
		"\x02\u0705\u0707\x05@!\x02\u0706\u0705\x03\x02\x02\x02\u0706\u0707\x03" +
		"\x02\x02\x02\u0707\u0709\x03\x02\x02\x02\u0708\u070A\x05\u0306\u0184\x02" +
		"\u0709\u0708\x03\x02\x02\x02\u0709\u070A\x03\x02\x02\x02\u070Au\x03\x02" +
		"\x02\x02\u070B\u070F\x07\u015E\x02\x02\u070C\u070E\x05\u028E\u0148\x02" +
		"\u070D\u070C\x03\x02\x02\x02\u070E\u0711\x03\x02\x02\x02\u070F\u070D\x03" +
		"\x02\x02\x02\u070F\u0710\x03\x02\x02\x02\u0710\u0712\x03\x02\x02\x02\u0711" +
		"\u070F\x03\x02\x02\x02\u0712\u0714\x07\u0169\x02\x02\u0713\u0715\x05\u032C" +
		"\u0197\x02\u0714\u0713\x03\x02\x02\x02\u0714\u0715\x03\x02\x02\x02\u0715" +
		"\u0716\x03\x02\x02\x02\u0716\u0717\x07\x12\x02\x02\u0717\u0718\x05x=\x02" +
		"\u0718w\x03\x02\x02\x02\u0719\u071C\x05F$\x02\u071A\u071C\x05\u0118\x8D" +
		"\x02\u071B\u0719\x03\x02\x02\x02\u071B\u071A\x03\x02\x02\x02\u071Cy\x03" +
		"\x02\x02\x02\u071D\u071E\x07k\x02\x02\u071E\u071F\x07\u0169\x02\x02\u071F" +
		"\u0720\x05\u032C\u0197\x02\u0720{\x03\x02\x02\x02\u0721\u0722\x07I\x02" +
		"\x02\u0722\u0723\x07\xDE\x02\x02\u0723\u0727\x07\u018F\x02\x02\u0724\u0725" +
		"\x07\xA6\x02\x02\u0725\u0726\x07\xF1\x02\x02\u0726\u0728\x07y\x02\x02" +
		"\u0727\u0724\x03\x02\x02\x02\u0727\u0728\x03\x02\x02\x02\u0728\u0729\x03" +
		"\x02\x02\x02\u0729\u0735\x05\u032C\u0197\x02\u072A\u072B\x07\u01CA\x02" +
		"\x02\u072B\u0730\x05t;\x02\u072C\u072D\x07\u01CC\x02\x02\u072D\u072F\x05" +
		"t;\x02\u072E\u072C\x03\x02\x02\x02\u072F\u0732\x03\x02\x02\x02\u0730\u072E" +
		"\x03\x02\x02\x02\u0730\u0731\x03\x02\x02\x02\u0731\u0733\x03\x02\x02\x02" +
		"\u0732\u0730\x03\x02\x02\x02\u0733\u0734\x07\u01CB\x02\x02\u0734\u0736" +
		"\x03\x02\x02\x02\u0735\u072A\x03\x02\x02\x02\u0735\u0736\x03\x02\x02\x02" +
		"\u0736\u073A\x03\x02\x02\x02\u0737\u0739\x05B\"\x02\u0738\u0737\x03\x02" +
		"\x02\x02\u0739\u073C\x03\x02\x02\x02\u073A\u0738\x03\x02\x02\x02\u073A" +
		"\u073B\x03\x02\x02\x02\u073B\u073E\x03\x02\x02\x02\u073C\u073A\x03\x02" +
		"\x02\x02\u073D\u073F\x05\u0306\u0184\x02\u073E\u073D\x03\x02\x02\x02\u073E" +
		"\u073F\x03\x02\x02\x02\u073F\u0743\x03\x02\x02\x02\u0740\u0742\x05~@\x02" +
		"\u0741\u0740\x03\x02\x02\x02\u0742\u0745\x03\x02\x02\x02\u0743\u0741\x03" +
		"\x02\x02\x02\u0743\u0744\x03\x02\x02\x02\u0744\u0746\x03\x02\x02\x02\u0745" +
		"\u0743\x03\x02\x02\x02\u0746\u0747\x07\x12\x02\x02\u0747\u0748\x05\u025E" +
		"\u0130\x02\u0748}\x03\x02\x02\x02\u0749\u074A\x07\u0104\x02\x02\u074A" +
		"\u074B\x07*\x02\x02\u074B\u0751\x05\u02B4\u015B\x02\u074C\u0751\x05\u02F4" +
		"\u017B\x02\u074D\u0751\x054\x1B\x02\u074E\u0751\x05\u02F6\u017C\x02\u074F" +
		"\u0751\x05\u02FA\u017E\x02\u0750\u0749\x03\x02\x02\x02\u0750\u074C\x03" +
		"\x02\x02\x02\u0750\u074D\x03\x02\x02\x02\u0750\u074E\x03\x02\x02\x02\u0750" +
		"\u074F\x03\x02\x02\x02\u0751\x7F\x03\x02\x02\x02\u0752\u0753\x07\u0152" +
		"\x02\x02\u0753\u0754\x07\xDE\x02\x02\u0754\u0757\x07\u0190\x02\x02\u0755" +
		"\u0756\t\x02\x02\x02\u0756\u0758\x05\u032C\u0197\x02\u0757\u0755\x03\x02" +
		"\x02\x02\u0757\u0758\x03\x02\x02\x02\u0758\u075D\x03\x02\x02\x02\u0759" +
		"\u075A\x07\xCF\x02\x02\u075A\u075E\x05\u030C\u0187\x02\u075B\u075C\x07" +
		"\u0198\x02\x02\u075C\u075E\x05\u02A6\u0154\x02\u075D\u0759\x03\x02\x02" +
		"\x02\u075D\u075B\x03\x02\x02\x02\u075D\u075E\x03\x02\x02\x02\u075E\x81" +
		"\x03\x02\x02\x02\u075F\u0760\x07k\x02\x02\u0760\u0761\x07\xDE\x02\x02" +
		"\u0761\u0764\x07\u018F\x02\x02\u0762\u0763\x07\xA6\x02\x02\u0763\u0765" +
		"\x07y\x02\x02\u0764\u0762\x03\x02\x02\x02\u0764\u0765\x03\x02\x02\x02" +
		"\u0765\u0766\x03\x02\x02\x02\u0766\u0767\x05\u032C\u0197\x02\u0767\x83" +
		"\x03\x02\x02\x02\u0768\u0769\x07\v\x02\x02\u0769\u076A\x07\xDE\x02\x02" +
		"\u076A\u076B\x07\u018F\x02\x02\u076B\u0770\x05\u032C\u0197\x02\u076C\u0771" +
		"\x05\u02F6\u017C\x02\u076D\u0771\x05\xF0y\x02\u076E\u0771\x05\xF4{\x02" +
		"\u076F\u0771\x05\xF2z\x02\u0770\u076C\x03\x02\x02\x02\u0770\u076D\x03" +
		"\x02\x02\x02\u0770\u076E\x03\x02\x02\x02\u0770\u076F\x03\x02\x02\x02\u0771" +
		"\u0785\x03\x02\x02\x02\u0772\u0773\x07\v\x02\x02\u0773\u0774\x07\xDE\x02" +
		"\x02\u0774\u0775\x07\u018F\x02\x02\u0775\u0776\x05\u032C\u0197\x02\u0776" +
		"\u0777\x05\u02F8\u017D\x02\u0777\u0785\x03\x02\x02\x02\u0778\u0779\x07" +
		"\v\x02\x02\u0779\u077A\x07\xDE\x02\x02\u077A\u077B\x07\u018F\x02\x02\u077B" +
		"\u077C\x05\u032C\u0197\x02\u077C\u077D\x05\u0108\x85\x02\u077D\u0785\x03" +
		"\x02\x02\x02\u077E\u077F\x07\v\x02\x02\u077F\u0780\x07\xDE\x02\x02\u0780" +
		"\u0781\x07\u018F\x02\x02\u0781\u0782\x05\u032C\u0197\x02\u0782\u0783\x05" +
		"\u010A\x86\x02\u0783\u0785\x03\x02\x02\x02\u0784\u0768\x03\x02\x02\x02" +
		"\u0784\u0772\x03\x02\x02\x02\u0784\u0778\x03\x02\x02\x02\u0784\u077E\x03" +
		"\x02\x02\x02\u0785\x85\x03\x02\x02\x02\u0786\u0787\x07\u0125\x02\x02\u0787" +
		"\u0788\x07\xDE\x02\x02\u0788\u0789\x07\u018F\x02\x02\u0789\u078C\x05\u032C" +
		"\u0197\x02\u078A\u078B\x07\u0104\x02\x02\u078B\u078D\x05\u02E8\u0175\x02" +
		"\u078C\u078A\x03\x02\x02\x02\u078C\u078D\x03\x02\x02\x02\u078D\u078F\x03" +
		"\x02\x02\x02\u078E\u0790\x07\x8C\x02\x02\u078F\u078E\x03\x02\x02\x02\u078F" +
		"\u0790\x03\x02\x02\x02\u0790\u0794\x03\x02\x02\x02\u0791\u0792\x07\u019A" +
		"\x02\x02\u0792\u0793\t\n\x02\x02\u0793\u0795\x07\xE7\x02\x02\u0794\u0791" +
		"\x03\x02\x02\x02\u0794\u0795\x03\x02\x02\x02\u0795\x87\x03\x02\x02\x02" +
		"\u0796\u0797\x07+\x02\x02\u0797\u0798\x07\u0125\x02\x02\u0798\u0799\x07" +
		"\xDE\x02\x02\u0799\u079A\x07\u018F\x02\x02\u079A\u079B\x05\u032C\u0197" +
		"\x02\u079B\x89\x03\x02\x02\x02\u079C\u079D\x07\x07\x02\x02\u079D\u079E" +
		"\x07\u014D\x02\x02\u079E\u079F\x07\x90\x02\x02\u079F\u07A0\x07C\x02\x02" +
		"\u07A0\u07A1\x07\u01CA\x02\x02\u07A1\u07A2\x05\u0302\u0182\x02\u07A2\u07A3" +
		"\x07\u01CB\x02\x02\u07A3\x8B\x03\x02\x02\x02\u07A4\u07A5\x07\x07\x02\x02" +
		"\u07A5\u07A6\x07\u014D\x02\x02\u07A6\u07A7\x07\u012F\x02\x02\u07A7\u07A8" +
		"\x07\u0158\x02\x02\u07A8\u07A9\x05\u02FA\u017E\x02\u07A9\x8D\x03\x02\x02" +
		"\x02\u07AA\u07AB\x07\x07\x02\x02\u07AB\u07AC\x07\u0152\x02\x02\u07AC\u07AD" +
		"\x07\x90\x02\x02\u07AD\u07B0\x07C\x02\x02\u07AE\u07AF\x07\xCF\x02\x02" +
		"\u07AF\u07B1\x05\u030C\u0187\x02\u07B0\u07AE\x03\x02\x02\x02\u07B0\u07B1" +
		"\x03\x02\x02\x02\u07B1\x8F\x03\x02\x02\x02\u07B2\u07B3\x07\x07\x02\x02" +
		"\u07B3\u07B4\x07\u0152\x02\x02\u07B4\u07B5\x07\u012F\x02\x02\u07B5\u07B6" +
		"\x07i\x02\x02\u07B6\u07B7\x07\x8F\x02\x02\u07B7\u07B9\x05\u032C\u0197" +
		"\x02\u07B8\u07BA\x05\u0296\u014C\x02\u07B9\u07B8\x03\x02\x02\x02\u07B9" +
		"\u07BA\x03\x02\x02\x02\u07BA\x91\x03\x02\x02\x02\u07BB\u07BC\x07\x07\x02" +
		"\x02\u07BC\u07BD\x07\u0152\x02\x02\u07BD\u07BE\x07\u012F\x02\x02\u07BE" +
		"\u07BF\x07\u0158\x02\x02\u07BF\u07C0\x07\x8F\x02\x02\u07C0\u07C2\x05\u032C" +
		"\u0197\x02\u07C1\u07C3\x05\u0296\u014C\x02\u07C2\u07C1\x03\x02\x02\x02" +
		"\u07C2\u07C3\x03\x02\x02\x02\u07C3\u07C6\x03\x02\x02\x02\u07C4\u07C5\x07" +
		"\u0198\x02\x02\u07C5\u07C7\x05\u02A6\u0154\x02\u07C6\u07C4\x03\x02\x02" +
		"\x02\u07C6\u07C7\x03\x02\x02\x02\u07C7\x93\x03\x02\x02\x02\u07C8\u07C9" +
		"\x07\x07\x02\x02\u07C9\u07CA\x07\u012B\x02\x02\u07CA\u07CB\x07\u0166\x02" +
		"\x02\u07CB\u07CD\x05\u032C\u0197\x02\u07CC\u07CE\x05\u0296\u014C\x02\u07CD" +
		"\u07CC\x03\x02\x02\x02\u07CD\u07CE\x03\x02\x02\x02\u07CE\x95\x03\x02\x02" +
		"\x02\u07CF\u07D0\x07\x07\x02\x02\u07D0\u07D1\x07+\x02\x02\u07D1\u07D2" +
		"\x07\u012B\x02\x02\u07D2\u07D3\x07\u0166\x02\x02\u07D3\u07D5\x05\u032C" +
		"\u0197\x02\u07D4\u07D6\x05\u0296\u014C\x02\u07D5\u07D4\x03\x02\x02\x02" +
		"\u07D5\u07D6\x03\x02\x02\x02\u07D6\x97\x03\x02\x02\x02\u07D7\u07D8\x07" +
		"\x07\x02\x02\u07D8\u07D9\x075\x02\x02\u07D9\u07DA\x05\u029A\u014E\x02" +
		"\u07DA\u07DB\x07\u0119\x02\x02\u07DB\u07DC\x07\u01D6\x02\x02\u07DC\x99" +
		"\x03\x02\x02\x02\u07DD\u07E2\x07\xC4\x02\x02\u07DE\u07E0\x07D\x02\x02" +
		"\u07DF\u07DE\x03\x02\x02\x02\u07DF\u07E0\x03\x02\x02\x02\u07E0\u07E3\x03" +
		"\x02\x02\x02\u07E1\u07E3\x07\u011D\x02\x02\u07E2\u07DF\x03\x02\x02\x02" +
		"\u07E2\u07E1\x03\x02\x02\x02\u07E3\u07E4\x03\x02\x02\x02\u07E4\u07E5\x07" +
		"\u01BA\x02\x02\u07E5\x9B\x03\x02\x02\x02\u07E6\u07E7\x07\u0161\x02\x02" +
		"\u07E7\x9D\x03\x02\x02\x02\u07E8\u07E9\x07\v\x02\x02\u07E9\u07EA\x07\u0162" +
		"\x02\x02\u07EA\u07EB\x05\xD0i\x02\u07EB\x9F\x03\x02\x02\x02\u07EC\u07ED" +
		"\x07+\x02\x02\u07ED\u07EE\x07_\x02\x02\u07EE\u07EF\x07\x19\x02\x02\u07EF" +
		"\u07F4\x05\u030C\u0187\x02\u07F0\u07F1\x07\u01CC\x02\x02\u07F1\u07F3\x05" +
		"\u030C\u0187\x02\u07F2\u07F0\x03\x02\x02\x02\u07F3\u07F6\x03\x02\x02\x02" +
		"\u07F4\u07F2\x03\x02\x02\x02\u07F4\u07F5\x03\x02\x02\x02\u07F5\xA1\x03" +
		"\x02\x02\x02\u07F6\u07F4\x03\x02\x02\x02\u07F7\u07F8\x07\u0152\x02\x02" +
		"\u07F8\u07F9\x07B\x02\x02\u07F9\u07FA\x07\xEF\x02\x02\u07FA\xA3\x03\x02" +
		"\x02\x02\u07FB\u07FC\x07I\x02\x02\u07FC\u07FD\x07|\x02\x02\u07FD\u07FE" +
		"\x07.\x02\x02\u07FE\u0800\x05\u0332\u019A\x02\u07FF\u0801\x05\u0306\u0184" +
		"\x02\u0800\u07FF\x03\x02\x02\x02\u0800\u0801\x03\x02\x02\x02\u0801\u0802" +
		"\x03\x02\x02\x02\u0802\u0803\x05\u02FA\u017E\x02\u0803\xA5\x03\x02\x02" +
		"\x02\u0804\u0805\x07\u0152\x02\x02\u0805\u0806\x07I\x02\x02\u0806\u0807" +
		"\x07.\x02\x02\u0807\u0808\x05\u0332\u019A\x02\u0808\xA7\x03\x02\x02\x02" +
		"\u0809\u080A\x07k\x02\x02\u080A\u080B\x07.\x02\x02\u080B\u080C\x05\u0332" +
		"\u019A\x02\u080C\xA9\x03\x02\x02\x02\u080D\u080E\x07\u0152\x02\x02\u080E" +
		"\u080F\x07/\x02\x02\u080F\xAB\x03\x02\x02\x02\u0810\u0811\x07I\x02\x02" +
		"\u0811\u0815\x07\u0193\x02\x02\u0812\u0813\x07\xA6\x02\x02\u0813\u0814" +
		"\x07\xF1\x02\x02\u0814\u0816\x07y\x02\x02\u0815\u0812\x03\x02\x02\x02" +
		"\u0815\u0816\x03\x02\x02\x02\u0816\u0817\x03\x02\x02\x02\u0817\u0819\x05" +
		"\u0332\u019A\x02\u0818\u081A\x05\u02FA\u017E\x02\u0819\u0818\x03\x02\x02" +
		"\x02\u0819\u081A\x03\x02\x02\x02\u081A\xAD\x03\x02\x02\x02\u081B\u081C" +
		"\x07\u0152\x02\x02\u081C\u0821\x07\u0194\x02\x02\u081D\u081E\x07\xCF\x02" +
		"\x02\u081E\u0822\x05\u030C\u0187\x02\u081F\u0820\x07\u0198\x02\x02\u0820" +
		"\u0822\x05\u02A6\u0154\x02\u0821\u081D\x03\x02\x02\x02\u0821\u081F\x03" +
		"\x02\x02\x02\u0821\u0822\x03\x02\x02\x02\u0822\xAF\x03\x02\x02\x02\u0823" +
		"\u0824\x07k\x02\x02\u0824\u0827\x07\u0193\x02\x02\u0825\u0826\x07\xA6" +
		"\x02\x02\u0826\u0828\x07y\x02\x02\u0827\u0825\x03\x02\x02\x02\u0827\u0828" +
		"\x03\x02\x02\x02\u0828\u0829\x03\x02\x02\x02\u0829\u082A\x05\u0332\u019A" +
		"\x02\u082A\xB1\x03\x02\x02\x02\u082B\u082C\x07\v\x02\x02\u082C\u082D\x07" +
		"\u0193\x02\x02\u082D\u082E\x05\u032E\u0198\x02\u082E\u082F\x07\x06\x02" +
		"\x02\u082F\u0830\x077\x02\x02\u0830\u083E\x03\x02\x02\x02\u0831\u0832" +
		"\x07\v\x02\x02\u0832\u0833\x07\u0193\x02\x02\u0833\u0834\x05\u032E\u0198" +
		"\x02\u0834\u0835\x07\u0129\x02\x02\u0835\u0836\x077\x02\x02\u0836\u083E" +
		"\x03\x02\x02\x02\u0837\u0838\x07\v\x02\x02\u0838\u0839\x07\u0193\x02\x02" +
		"\u0839\u083A\x05\u032E\u0198\x02\u083A\u083B\x07\u014D\x02\x02\u083B\u083C" +
		"\x05\u02FE\u0180\x02\u083C\u083E\x03\x02\x02\x02\u083D\u082B\x03\x02\x02" +
		"\x02\u083D\u0831\x03\x02\x02\x02\u083D\u0837\x03\x02\x02\x02\u083E\xB3" +
		"\x03\x02\x02\x02\u083F\u0840\x07\u0152\x02\x02\u0840\u0841\x078\x02\x02" +
		"\u0841\u0842\x07\x8F\x02\x02\u0842\u0843\x07\u0193\x02\x02\u0843\u0844" +
		"\x05\u032E\u0198\x02\u0844\xB5\x03\x02\x02\x02\u0845\u0846\x07\u0160\x02" +
		"\x02\u0846\u0849\x07\u0193\x02\x02\u0847\u0848\x07\xA6\x02\x02\u0848\u084A" +
		"\x07y\x02\x02\u0849\u0847\x03\x02\x02\x02\u0849\u084A\x03\x02\x02\x02" +
		"\u084A\u084B\x03\x02\x02\x02\u084B\u084C\x05\u032E\u0198\x02\u084C\xB7" +
		"\x03\x02\x02\x02\u084D\u084E\x07\u0135\x02\x02\u084E\u0851\x07\u0193\x02" +
		"\x02\u084F\u0850\x07\xA6\x02\x02\u0850\u0852\x07y\x02\x02\u0851\u084F" +
		"\x03\x02\x02\x02\u0851\u0852\x03\x02\x02\x02\u0852\u0853\x03\x02\x02\x02" +
		"\u0853\u0854\x05\u032E\u0198\x02\u0854\xB9\x03\x02\x02\x02\u0855\u0856" +
		"\x07I\x02\x02\u0856\u0857\x07\u015A\x02\x02\u0857\u085B\x07\u0191\x02" +
		"\x02\u0858\u0859\x07\xA6\x02\x02\u0859\u085A\x07\xF1\x02\x02\u085A\u085C" +
		"\x07y\x02\x02\u085B\u0858\x03\x02\x02\x02\u085B\u085C\x03\x02\x02\x02" +
		"\u085C\u085D\x03\x02\x02\x02\u085D\u085E\x05\u0332\u019A\x02\u085E\u085F" +
		"\x05\xBC_\x02\u085F\u0861\x05\xBE`\x02\u0860\u0862\x05\u0306\u0184\x02" +
		"\u0861\u0860\x03\x02\x02\x02\u0861\u0862\x03\x02\x02\x02\u0862\u0863\x03" +
		"\x02\x02\x02\u0863\u0864\x05\u02FA\u017E\x02\u0864\xBB\x03\x02\x02\x02" +
		"\u0865\u0866\x07\u017A\x02\x02\u0866\u0867\x07\u01A1\x02\x02\u0867\u0868" +
		"\x05\u032E\u0198\x02\u0868\xBD\x03\x02\x02\x02\u0869\u086A\x07\xD7\x02" +
		"\x02\u086A\u086B\x07\u01A1\x02\x02\u086B\u086C\x05\u02E0\u0171\x02\u086C" +
		"\xBF\x03\x02\x02\x02\u086D\u086E\x07\u0152\x02\x02\u086E\u086F\x07\u015A" +
		"\x02\x02\u086F\u0872\x07\u0192\x02\x02\u0870\u0871\x07\xCF\x02\x02\u0871" +
		"\u0873\x05\u030C\u0187\x02\u0872\u0870\x03\x02\x02\x02\u0872\u0873\x03" +
		"\x02\x02\x02\u0873\xC1\x03\x02\x02\x02\u0874\u0875\x07k\x02\x02\u0875" +
		"\u0876\x07\u015A\x02\x02\u0876\u0879\x07\u0191\x02\x02\u0877\u0878\x07" +
		"\xA6\x02\x02\u0878\u087A\x07y\x02\x02\u0879\u0877\x03\x02\x02\x02\u0879" +
		"\u087A\x03\x02\x02\x02\u087A\u087B\x03\x02\x02\x02\u087B\u087C\x05\u0332" +
		"\u019A\x02\u087C\xC3\x03\x02\x02\x02\u087D\u087E\x07\v\x02\x02\u087E\u087F" +
		"\x07\u015A\x02\x02\u087F\u0880\x07\u0191\x02\x02\u0880\u0881\x05\u0332" +
		"\u019A\x02\u0881\u0886\x05\xC6d\x02\u0882\u0883\x07\u01CC\x02\x02\u0883" +
		"\u0885\x05\xC6d\x02\u0884\u0882\x03\x02\x02\x02\u0885\u0888\x03\x02\x02" +
		"\x02\u0886\u0884\x03\x02\x02\x02\u0886\u0887\x03\x02\x02\x02\u0887\xC5" +
		"\x03\x02\x02\x02\u0888\u0886\x03\x02\x02\x02\u0889\u088C\x05\xCAf\x02" +
		"\u088A\u088C\x05\xC8e\x02\u088B\u0889\x03\x02\x02\x02\u088B\u088A\x03" +
		"\x02\x02\x02\u088C\xC7\x03\x02\x02\x02\u088D\u088E\x07\u014D\x02\x02\u088E" +
		"\u088F\x05\u02FE\u0180\x02\u088F\xC9\x03\x02\x02\x02\u0890\u0891\x07=" +
		"\x02\x02\u0891\u0892\x07\u01A1\x02\x02\u0892\u0893\x05\u030C\u0187\x02" +
		"\u0893\xCB\x03\x02\x02\x02\u0894\u0895\t\b\x02\x02\u0895\u0896\x07\u015A" +
		"\x02\x02\u0896\u0897\x07\u0191\x02\x02\u0897\u0898\x05\u0332\u019A\x02" +
		"\u0898\xCD\x03\x02\x02\x02\u0899\u089A\x07\u014D\x02\x02\u089A\u089B\x05" +
		"\u0332\u019A\x02\u089B\u089C\x07\x12\x02\x02\u089C\u089D\x07`\x02\x02" +
		"\u089D\u089E\x07\u015A\x02\x02\u089E\u089F\x07\u0191\x02\x02\u089F\xCF" +
		"\x03\x02\x02\x02\u08A0\u08C5\x05\xD2j\x02\u08A1\u08C5\x05\xD4k\x02\u08A2" +
		"\u08C5\x05\xD6l\x02\u08A3\u08C5\x05\xD8m\x02\u08A4\u08C5\x05\xDAn\x02" +
		"\u08A5\u08C5\x05\xDCo\x02\u08A6\u08C5\x05\xDEp\x02\u08A7\u08C5\x05\xE0" +
		"q\x02\u08A8\u08C5\x05\xE2r\x02\u08A9\u08C5\x05\xE4s\x02\u08AA\u08C5\x05" +
		"\xE6t\x02\u08AB\u08C5\x05\xE8u\x02\u08AC\u08C5\x05\xEAv\x02\u08AD\u08C5" +
		"\x05\xECw\x02\u08AE\u08C5\x05\xEEx\x02\u08AF\u08C5\x05\xF0y\x02\u08B0" +
		"\u08C5\x05\xF2z\x02\u08B1\u08C5\x05\xF4{\x02\u08B2\u08C5\x05\xF8}\x02" +
		"\u08B3\u08C5\x05\xFA~\x02\u08B4\u08C5\x05\xFC\x7F\x02\u08B5\u08C5\x05" +
		"\xFE\x80\x02\u08B6\u08C5\x05\u0100\x81\x02\u08B7\u08C5\x05\u0102\x82\x02" +
		"\u08B8\u08C5\x05\u0104\x83\x02\u08B9\u08C5\x05\u0106\x84\x02\u08BA\u08C5" +
		"\x05\xF6|\x02\u08BB\u08C5\x05\u0108\x85\x02\u08BC\u08C5\x05\u010A\x86" +
		"\x02\u08BD\u08C5\x05\u010C\x87\x02\u08BE\u08C5\x05\u010E\x88\x02\u08BF" +
		"\u08C5\x05\u02F2\u017A\x02\u08C0\u08C5\x05\u0110\x89\x02\u08C1\u08C5\x05" +
		"\u0112\x8A\x02\u08C2\u08C5\x05\u0114\x8B\x02\u08C3\u08C5\x05\u0116\x8C" +
		"\x02\u08C4\u08A0\x03\x02\x02\x02\u08C4\u08A1\x03\x02\x02\x02\u08C4\u08A2" +
		"\x03\x02\x02\x02\u08C4\u08A3\x03\x02\x02\x02\u08C4\u08A4\x03\x02\x02\x02" +
		"\u08C4\u08A5\x03\x02\x02\x02\u08C4\u08A6\x03\x02\x02\x02\u08C4\u08A7\x03" +
		"\x02\x02\x02\u08C4\u08A8\x03\x02\x02\x02\u08C4\u08A9\x03\x02\x02\x02\u08C4" +
		"\u08AA\x03\x02\x02\x02\u08C4\u08AB\x03\x02\x02\x02\u08C4\u08AC\x03\x02" +
		"\x02\x02\u08C4\u08AD\x03\x02\x02\x02\u08C4\u08AE\x03\x02\x02\x02\u08C4" +
		"\u08AF\x03\x02\x02\x02\u08C4\u08B0\x03\x02\x02\x02\u08C4\u08B1\x03\x02" +
		"\x02\x02\u08C4\u08B2\x03\x02\x02\x02\u08C4\u08B3\x03\x02\x02\x02\u08C4" +
		"\u08B4\x03\x02\x02\x02\u08C4\u08B5\x03\x02\x02\x02\u08C4\u08B6\x03\x02" +
		"\x02\x02\u08C4\u08B7\x03\x02\x02\x02\u08C4\u08B8\x03\x02\x02\x02\u08C4" +
		"\u08B9\x03\x02\x02\x02\u08C4\u08BA\x03\x02\x02\x02\u08C4\u08BB\x03\x02" +
		"\x02\x02\u08C4\u08BC\x03\x02\x02\x02\u08C4\u08BD\x03\x02\x02\x02\u08C4" +
		"\u08BE\x03\x02\x02\x02\u08C4\u08BF\x03\x02\x02\x02\u08C4\u08C0\x03\x02" +
		"\x02\x02\u08C4\u08C1\x03\x02\x02\x02\u08C4\u08C2\x03\x02\x02\x02\u08C4" +
		"\u08C3\x03\x02\x02\x02\u08C5\xD1\x03\x02\x02\x02\u08C6\u08C7\x07\x06\x02" +
		"\x02\u08C7\u08C8\t\v\x02\x02\u08C8\u08C9\x05\u030C\u0187\x02\u08C9\xD3" +
		"\x03\x02\x02\x02\u08CA\u08CB\x07k\x02\x02\u08CB\u08CC\t\v\x02\x02\u08CC" +
		"\u08CD\x05\u030C\u0187\x02\u08CD\xD5\x03\x02\x02\x02\u08CE\u08CF\x07\xE8" +
		"\x02\x02\u08CF\u08D0\x07\x90\x02\x02\u08D0\u08D1\x07\xA2\x02\x02\u08D1" +
		"\u08D2\x05\u030C\u0187\x02\u08D2\u08D3\x07\u0174\x02\x02\u08D3\u08D4\x05" +
		"\u030C\u0187\x02\u08D4\xD7\x03\x02\x02\x02\u08D5\u08D6\x07\x06\x02\x02" +
		"\u08D6\u08D7\x07\x19\x02\x02\u08D7\u08DC\x05\u030C\u0187\x02\u08D8\u08D9" +
		"\x07\u01CC\x02\x02\u08D9\u08DB\x05\u030C\u0187\x02\u08DA\u08D8\x03\x02" +
		"\x02\x02\u08DB\u08DE\x03\x02\x02\x02\u08DC\u08DA\x03\x02\x02\x02\u08DC" +
		"\u08DD\x03\x02\x02\x02\u08DD\xD9\x03\x02\x02\x02\u08DE\u08DC\x03\x02\x02" +
		"\x02\u08DF\u08E0\x07k\x02\x02\u08E0\u08E1\x07\x19\x02\x02\u08E1\u08E6" +
		"\x05\u030C\u0187\x02\u08E2\u08E3\x07\u01CC\x02\x02\u08E3\u08E5\x05\u030C" +
		"\u0187\x02\u08E4\u08E2\x03\x02\x02\x02\u08E5\u08E8\x03\x02\x02\x02\u08E6" +
		"\u08E4\x03\x02\x02\x02\u08E6\u08E7\x03\x02\x02\x02\u08E7\u08EA\x03\x02" +
		"\x02\x02\u08E8\u08E6\x03\x02\x02\x02\u08E9\u08EB\x07\x8C\x02\x02\u08EA" +
		"\u08E9\x03\x02\x02\x02\u08EA\u08EB\x03\x02\x02\x02\u08EB\xDB\x03\x02\x02" +
		"\x02\u08EC\u08ED\x07_\x02\x02\u08ED\u08EE\x07\x19\x02\x02\u08EE\u08F3" +
		"\x05\u030C\u0187\x02\u08EF\u08F0\x07\u01CC\x02\x02\u08F0\u08F2\x05\u030C" +
		"\u0187\x02\u08F1\u08EF\x03\x02\x02\x02\u08F2\u08F5\x03\x02\x02\x02\u08F3" +
		"\u08F1\x03\x02\x02\x02\u08F3\u08F4\x03\x02\x02\x02\u08F4\xDD\x03\x02\x02" +
		"\x02\u08F5\u08F3\x03\x02\x02\x02\u08F6\u08F7\x07\xE8\x02\x02\u08F7\u08F8" +
		"\x07\x19\x02\x02\u08F8\u08F9\x07\xA2\x02\x02\u08F9\u08FA\x05\u030C\u0187" +
		"\x02\u08FA\u08FB\x07\u0174\x02\x02\u08FB\u08FC\x05\u030C\u0187\x02\u08FC" +
		"\xDF\x03\x02\x02\x02\u08FD\u08FE\x07\x06\x02\x02\u08FE\u08FF\x07B\x02" +
		"\x02\u08FF\u0900\x07\xEE\x02\x02\u0900\u0905\x05\u030C\u0187\x02\u0901" +
		"\u0902\x07\u01CC\x02\x02\u0902\u0904\x05\u030C\u0187\x02\u0903\u0901\x03" +
		"\x02\x02\x02\u0904\u0907\x03\x02\x02\x02\u0905\u0903\x03\x02\x02\x02\u0905" +
		"\u0906\x03\x02\x02\x02\u0906\xE1\x03\x02\x02\x02\u0907\u0905\x03\x02\x02" +
		"\x02\u0908\u0909\x07k\x02\x02\u0909\u090A\x07B\x02\x02\u090A\u090B\x07" +
		"\xEE\x02\x02\u090B\u0910\x05\u030C\u0187\x02\u090C\u090D\x07\u01CC\x02" +
		"\x02\u090D\u090F\x05\u030C\u0187\x02\u090E\u090C\x03\x02\x02\x02\u090F" +
		"\u0912\x03\x02\x02\x02\u0910\u090E\x03\x02\x02\x02\u0910\u0911\x03\x02" +
		"\x02\x02\u0911\xE3\x03\x02\x02\x02\u0912\u0910\x03\x02\x02\x02\u0913\u0914" +
		"\x07\x06\x02\x02\u0914\u0915\x07\'\x02\x02\u0915\u0916\x05\u0332\u019A" +
		"\x02\u0916\u091B\x05\u030C\u0187\x02\u0917\u0918\x07\u01CC\x02\x02\u0918" +
		"\u091A\x05\u030C\u0187\x02\u0919\u0917\x03\x02\x02\x02\u091A\u091D\x03" +
		"\x02\x02\x02\u091B\u0919\x03\x02\x02\x02\u091B\u091C\x03\x02\x02\x02\u091C" +
		"\u092E\x03\x02\x02\x02\u091D\u091B\x03\x02\x02\x02\u091E\u091F\x07k\x02" +
		"\x02\u091F\u0920\x07\'\x02\x02\u0920\u0921\x05\u0332\u019A\x02\u0921\u0926" +
		"\x05\u030C\u0187\x02\u0922\u0923\x07\u01CC\x02\x02\u0923\u0925\x05\u030C" +
		"\u0187\x02\u0924\u0922\x03\x02\x02\x02\u0925\u0928\x03\x02\x02\x02\u0926" +
		"\u0924\x03\x02\x02\x02\u0926\u0927\x03\x02\x02\x02\u0927\u092E\x03\x02" +
		"\x02\x02\u0928\u0926\x03\x02\x02\x02\u0929\u092A\x07k\x02\x02\u092A\u092B" +
		"\x07\n\x02\x02\u092B\u092C\x07\'\x02\x02\u092C\u092E\x05\u0332\u019A\x02" +
		"\u092D\u0913\x03\x02\x02\x02\u092D\u091E\x03\x02\x02\x02\u092D\u0929\x03" +
		"\x02\x02\x02\u092E\xE5\x03\x02\x02\x02\u092F\u0930\x07\u014D\x02\x02\u0930" +
		"\u0931\x07\xD2\x02\x02\u0931\u0932\x07t\x02\x02\u0932\u0934\x07\xA4\x02" +
		"\x02\u0933\u0935\x05\u02FA\u017E\x02\u0934\u0933\x03\x02\x02\x02\u0934" +
		"\u0935\x03\x02\x02\x02\u0935\xE7\x03\x02\x02\x02\u0936\u0937\x07I\x02" +
		"\x02\u0937\u0938\x07\xAA\x02\x02\u0938\xE9\x03\x02\x02\x02\u0939\u093A" +
		"\x076\x02\x02\u093A\u093B\x07\u0168\x02\x02\u093B\u093C\x07\u0144\x02" +
		"\x02\u093C\u093D\x07\u011E\x02\x02\u093D\xEB\x03\x02\x02\x02\u093E\u093F" +
		"\x07\x06\x02\x02\u093F\u0940\x07\xAE\x02\x02\u0940\u0941\x05\u032E\u0198" +
		"\x02\u0941\u0943\x05\u0330\u0199\x02\u0942\u0944\x05P)\x02\u0943\u0942" +
		"\x03\x02\x02\x02\u0943\u0944\x03\x02\x02\x02\u0944\u0946\x03\x02\x02\x02" +
		"\u0945\u0947\x05\u0306\u0184\x02\u0946\u0945\x03\x02\x02\x02\u0946\u0947" +
		"\x03\x02\x02\x02\u0947\xED\x03\x02\x02\x02\u0948\u0949\x07k\x02\x02\u0949" +
		"\u094A\x07\xAE";
	private static readonly _serializedATNSegment6: string =
		"\x02\x02\u094A\u094B\x05\u032E\u0198\x02\u094B\xEF\x03\x02\x02\x02\u094C" +
		"\u094D\x07\u012A\x02\x02\u094D\u094E\x05\u032E\u0198\x02\u094E\xF1\x03" +
		"\x02\x02\x02\u094F\u0950\x07\u0164\x02\x02\u0950\u0951\x07\u019A\x02\x02" +
		"\u0951\u0952\x05\u032E\u0198\x02\u0952\xF3\x03\x02\x02\x02\u0953\u0954" +
		"\x07\u014D\x02\x02\u0954\u0955\x05\u02FE\u0180\x02\u0955\xF5\x03\x02\x02" +
		"\x02\u0956\u0957\x07=\x02\x02\u0957\u0958\x07\u01A1\x02\x02\u0958\u0959" +
		"\x05\u030C\u0187\x02\u0959\xF7\x03\x02\x02\x02\u095A\u095B\x07\x06\x02" +
		"\x02\u095B\u095C\x07;\x02\x02\u095C\u0960\x05\"\x12\x02\u095D\u0961\x07" +
		"\x84\x02\x02\u095E\u095F\x07\b\x02\x02\u095F\u0961\x05\u032E\u0198\x02" +
		"\u0960\u095D\x03\x02\x02\x02\u0960\u095E\x03\x02\x02\x02\u0960\u0961\x03" +
		"\x02\x02\x02\u0961\u0964\x03\x02\x02\x02\u0962\u0963\t\f\x02\x02\u0963" +
		"\u0965\x05\u032E\u0198\x02\u0964\u0962\x03\x02\x02\x02\u0964\u0965\x03" +
		"\x02\x02\x02\u0965\u0967\x03\x02\x02\x02\u0966\u0968\x05\u02FA\u017E\x02" +
		"\u0967\u0966\x03\x02\x02\x02\u0967\u0968\x03\x02\x02\x02\u0968\xF9\x03" +
		"\x02\x02\x02\u0969\u096A\x07\x06\x02\x02\u096A\u096B\x07;\x02\x02\u096B" +
		"\u096C\x07\u01CA\x02\x02\u096C\u0971\x05\"\x12\x02\u096D\u096E\x07\u01CC" +
		"\x02\x02\u096E\u0970\x05\"\x12\x02\u096F\u096D\x03\x02\x02\x02\u0970\u0973" +
		"\x03\x02\x02\x02\u0971\u096F\x03\x02\x02\x02\u0971\u0972\x03\x02\x02\x02" +
		"\u0972\u0974\x03\x02\x02\x02\u0973\u0971\x03\x02\x02\x02\u0974\u0977\x07" +
		"\u01CB\x02\x02\u0975\u0976\t\f\x02\x02\u0976\u0978\x05\u032E\u0198\x02" +
		"\u0977\u0975\x03\x02\x02\x02\u0977\u0978\x03\x02\x02\x02\u0978\u097A\x03" +
		"\x02\x02\x02\u0979\u097B\x05\u02FA\u017E\x02\u097A\u0979\x03\x02\x02\x02" +
		"\u097A\u097B\x03\x02\x02\x02\u097B\xFB\x03\x02\x02\x02\u097C\u097D\x07" +
		"k\x02\x02\u097D\u097E\x07;\x02\x02\u097E\u0981\x05\u032E\u0198\x02\u097F" +
		"\u0980\x07\x8F\x02\x02\u0980\u0982\x05\u032E\u0198\x02\u0981\u097F\x03" +
		"\x02\x02\x02\u0981\u0982\x03\x02\x02\x02\u0982\u0984\x03\x02\x02\x02\u0983" +
		"\u0985\x05\u02FA\u017E\x02\u0984\u0983\x03\x02\x02\x02\u0984\u0985\x03" +
		"\x02\x02\x02\u0985\xFD\x03\x02\x02\x02\u0986\u0987\x07\xE8\x02\x02\u0987" +
		"\u0988\x07;\x02\x02\u0988\u098C\x05\"\x12\x02\u0989\u098D\x07\x84\x02" +
		"\x02\u098A\u098B\x07\b\x02\x02\u098B\u098D\x05\u032E\u0198\x02\u098C\u0989" +
		"\x03\x02\x02\x02\u098C\u098A\x03\x02\x02\x02\u098C\u098D\x03\x02\x02\x02" +
		"\u098D\u0990\x03\x02\x02\x02\u098E\u098F\x07\x8F\x02\x02\u098F\u0991\x05" +
		"\u032E\u0198\x02\u0990\u098E\x03\x02\x02\x02\u0990\u0991\x03\x02\x02\x02" +
		"\u0991\u0993\x03\x02\x02\x02\u0992\u0994\x05\u02FA\u017E\x02\u0993\u0992" +
		"\x03\x02\x02\x02\u0993\u0994\x03\x02\x02\x02\u0994\xFF\x03\x02\x02\x02" +
		"\u0995\u0996\x07\u012A\x02\x02\u0996\u0997\x07;\x02\x02\u0997\u0998\x05" +
		"\u032E\u0198\x02\u0998\u0999\x05\u032E\u0198\x02\u0999\u0101\x03\x02\x02" +
		"\x02\u099A\u099B\x07\u0100\x02\x02\u099B\u099C\x07*\x02\x02\u099C\u099F" +
		"\x05\u0330\u0199\x02\u099D\u099E\x07\x8F\x02\x02\u099E\u09A0\x05\u032E" +
		"\u0198\x02\u099F\u099D\x03\x02\x02\x02\u099F\u09A0\x03\x02\x02\x02\u09A0" +
		"\u09A2\x03\x02\x02\x02\u09A1\u09A3\x05\u02FA\u017E\x02\u09A2\u09A1\x03" +
		"\x02\x02\x02\u09A2\u09A3\x03\x02\x02\x02\u09A3\u0103\x03\x02\x02\x02\u09A4" +
		"\u09A5\x07\u012A\x02\x02\u09A5\u09A6\x07\u013E\x02\x02\u09A6\u09A7\x05" +
		"\u032E\u0198\x02\u09A7\u09A8\x05\u032E\u0198\x02\u09A8\u0105\x03\x02\x02" +
		"\x02\u09A9\u09AB\t\r\x02\x02\u09AA\u09A9\x03\x02\x02\x02\u09AA\u09AB\x03" +
		"\x02\x02\x02\u09AB\u09AC\x03\x02\x02\x02\u09AC\u09AF\x07@\x02\x02\u09AD" +
		"\u09B0\x05\u032E\u0198\x02\u09AE\u09B0\x05\u0330\u0199\x02\u09AF\u09AD" +
		"\x03\x02\x02\x02\u09AF\u09AE\x03\x02\x02\x02\u09AF\u09B0\x03\x02\x02\x02" +
		"\u09B0\u0107\x03\x02\x02\x02\u09B1\u09B2\x07\xE8\x02\x02\u09B2\u09B3\x07" +
		";\x02\x02\u09B3\u09B4\x05\u032E\u0198\x02\u09B4\u09B5\x07\u014D\x02\x02" +
		"\u09B5\u09B6\x07\xDD\x02\x02\u09B6\u09B7\x07\u010F\x02\x02\u09B7\u09BA" +
		"\x05\u032C\u0197\x02\u09B8\u09B9\x07\u0188\x02\x02\u09B9\u09BB\x05\u0330" +
		"\u0199\x02\u09BA\u09B8\x03\x02\x02\x02\u09BA\u09BB\x03\x02\x02\x02\u09BB" +
		"\u09C4\x03\x02\x02\x02\u09BC\u09BD\x07\xE8\x02\x02\u09BD\u09BE\x07;\x02" +
		"\x02\u09BE\u09BF\x05\u032E\u0198\x02\u09BF\u09C0\x07\u0181\x02\x02\u09C0" +
		"\u09C1\x07\xDD\x02\x02\u09C1\u09C2\x07\u010F\x02\x02\u09C2\u09C4\x03\x02" +
		"\x02\x02\u09C3\u09B1\x03\x02\x02\x02\u09C3\u09BC\x03\x02\x02\x02\u09C4" +
		"\u0109\x03\x02\x02\x02\u09C5\u09C6\x07\x06\x02\x02\u09C6\u09C7\x07\u0140" +
		"\x02\x02\u09C7\u09C8\x07\x05\x02\x02\u09C8\u09C9\x07\u010F\x02\x02\u09C9" +
		"\u09CC\x05\u032C\u0197\x02\u09CA\u09CB\x07\xF9\x02\x02\u09CB\u09CD\x05" +
		"\u0330\u0199\x02\u09CC\u09CA\x03\x02\x02\x02\u09CC\u09CD\x03\x02\x02\x02" +
		"\u09CD\u09D9\x03\x02\x02\x02\u09CE\u09CF\x07k\x02\x02\u09CF\u09D0\x07" +
		"\u0140\x02\x02\u09D0\u09D1\x07\x05\x02\x02\u09D1\u09D2\x07\u010F\x02\x02" +
		"\u09D2\u09D9\x05\u032C\u0197\x02\u09D3\u09D4\x07k\x02\x02\u09D4\u09D5" +
		"\x07\n\x02\x02\u09D5\u09D6\x07\u0140\x02\x02\u09D6\u09D7\x07\x05\x02\x02" +
		"\u09D7\u09D9\x07\u0110\x02\x02\u09D8\u09C5\x03\x02\x02\x02\u09D8\u09CE" +
		"\x03\x02\x02\x02\u09D8\u09D3\x03\x02\x02\x02\u09D9\u010B\x03\x02\x02\x02" +
		"\u09DA\u09DC\x07\x06\x02\x02\u09DB\u09DD\x07\u016A\x02\x02\u09DC\u09DB" +
		"\x03\x02\x02\x02\u09DC\u09DD\x03\x02\x02\x02\u09DD\u09E1\x03\x02\x02\x02" +
		"\u09DE\u09E2\x05\u02E4\u0173\x02\u09DF\u09E0\x07\u0105\x02\x02\u09E0\u09E2" +
		"\x05\u02E6\u0174\x02\u09E1\u09DE\x03\x02\x02\x02\u09E1\u09DF\x03\x02\x02" +
		"\x02\u09E2\u09E4\x03\x02\x02\x02\u09E3\u09E5\x05\u02F4\u017B\x02\u09E4" +
		"\u09E3\x03\x02\x02\x02\u09E4\u09E5\x03\x02\x02\x02\u09E5\u09E7\x03\x02" +
		"\x02\x02\u09E6\u09E8\x05\u02FA\u017E\x02\u09E7\u09E6\x03\x02\x02\x02\u09E7" +
		"\u09E8\x03\x02\x02\x02\u09E8\u09F8\x03\x02\x02\x02\u09E9\u09EB\x07\x06" +
		"\x02\x02\u09EA\u09EC\x07\u016A\x02\x02\u09EB\u09EA\x03\x02\x02\x02\u09EB" +
		"\u09EC\x03\x02\x02\x02\u09EC\u09EF\x03\x02\x02\x02\u09ED\u09F0\x05\u02DC" +
		"\u016F\x02\u09EE\u09F0\x05\u02DE\u0170\x02\u09EF\u09ED\x03\x02\x02\x02" +
		"\u09EF\u09EE\x03\x02\x02\x02\u09F0\u09F2\x03\x02\x02\x02\u09F1\u09F3\x05" +
		"\u02F4\u017B\x02\u09F2\u09F1\x03\x02\x02\x02\u09F2\u09F3\x03\x02\x02\x02" +
		"\u09F3\u09F5\x03\x02\x02\x02\u09F4\u09F6\x05\u02FA\u017E\x02\u09F5\u09F4" +
		"\x03\x02\x02\x02\u09F5\u09F6\x03\x02\x02\x02\u09F6\u09F8\x03\x02\x02\x02" +
		"\u09F7\u09DA\x03\x02\x02\x02\u09F7\u09E9\x03\x02\x02\x02\u09F8\u010D\x03" +
		"\x02\x02\x02\u09F9\u09FB\x07k\x02\x02\u09FA\u09FC\x07\u016A\x02\x02\u09FB" +
		"\u09FA\x03\x02\x02\x02\u09FB\u09FC\x03\x02\x02\x02\u09FC\u09FD\x03\x02" +
		"\x02\x02\u09FD\u0A00\x07\u0104\x02\x02\u09FE\u09FF\x07\xA6\x02\x02\u09FF" +
		"\u0A01\x07y\x02\x02\u0A00\u09FE\x03\x02\x02\x02\u0A00\u0A01\x03\x02\x02" +
		"\x02\u0A01\u0A02\x03\x02\x02\x02\u0A02\u0A04\x05\u032E\u0198\x02\u0A03" +
		"\u0A05\x07\x8C\x02\x02\u0A04\u0A03\x03\x02\x02\x02\u0A04\u0A05\x03\x02" +
		"\x02\x02\u0A05\u010F\x03\x02\x02\x02\u0A06\u0A07\x07\u0179\x02\x02\u0A07" +
		"\u0A08\x05\u0296\u014C\x02\u0A08\u0111\x03\x02\x02\x02\u0A09\u0A0A\x07" +
		"\xE8\x02\x02\u0A0A\u0A10\x07\u0104\x02\x02\u0A0B\u0A11\x05\u032E\u0198" +
		"\x02\u0A0C\u0A11\x05\u0330\u0199\x02\u0A0D\u0A0E\x07\u01CA\x02\x02\u0A0E" +
		"\u0A0F\x07\u01AA\x02\x02\u0A0F\u0A11\x07\u01CB\x02\x02\u0A10\u0A0B\x03" +
		"\x02\x02\x02\u0A10\u0A0C\x03\x02\x02\x02\u0A10\u0A0D\x03\x02\x02\x02\u0A11" +
		"\u0A12\x03\x02\x02\x02\u0A12\u0A13\x07\u014D\x02\x02\u0A13\u0A18\x05\u02FE" +
		"\u0180\x02\u0A14\u0A15\x07\xE8\x02\x02\u0A15\u0A16\x07\u0104\x02\x02\u0A16" +
		"\u0A18\x05\u02F4\u017B\x02\u0A17\u0A09\x03\x02\x02\x02\u0A17\u0A14\x03" +
		"\x02\x02\x02\u0A18\u0113\x03\x02\x02\x02\u0A19\u0A1A\x07\u012D\x02\x02" +
		"\u0A1A\u0A1B\x05\u0296\u014C\x02\u0A1B\u0A1C\x07\u019A\x02\x02\u0A1C\u0A1E" +
		"\x05\u0296\u014C\x02\u0A1D\u0A1F\x05\u02FA\u017E\x02\u0A1E\u0A1D\x03\x02" +
		"\x02\x02\u0A1E\u0A1F\x03\x02\x02\x02\u0A1F\u0115\x03\x02\x02\x02\u0A20" +
		"\u0A21\x07\u012A\x02\x02\u0A21\u0A22\x07\u0104\x02\x02\u0A22\u0A23\x05" +
		"\u032E\u0198\x02\u0A23\u0A24\x05\u032E\u0198\x02\u0A24\u0117\x03\x02\x02" +
		"\x02\u0A25\u0A27\x05\u02D4\u016B\x02\u0A26\u0A25\x03\x02\x02\x02\u0A26" +
		"\u0A27\x03\x02\x02\x02\u0A27\u0A28\x03\x02\x02\x02\u0A28\u0A29\x07\xB3" +
		"\x02\x02\u0A29\u0A2A\t\x0E\x02\x02\u0A2A\u0A2C\x05\u032C\u0197\x02\u0A2B" +
		"\u0A2D\x05\u0296\u014C\x02\u0A2C\u0A2B\x03\x02\x02\x02\u0A2C\u0A2D\x03" +
		"\x02\x02\x02\u0A2D\u0A31\x03\x02\x02\x02\u0A2E\u0A2F\x07\u019A\x02\x02" +
		"\u0A2F\u0A30\x07\xC5\x02\x02\u0A30\u0A32\x05\u032E\u0198\x02\u0A31\u0A2E" +
		"\x03\x02\x02\x02\u0A31\u0A32\x03\x02\x02\x02\u0A32\u0A34\x03\x02\x02\x02" +
		"\u0A33\u0A35\x05\u0294\u014B\x02\u0A34\u0A33\x03\x02\x02\x02\u0A34\u0A35" +
		"\x03\x02\x02\x02\u0A35\u0A40\x03\x02\x02\x02\u0A36\u0A41\x05\u025E\u0130" +
		"\x02\u0A37\u0A38\x07\u018A\x02\x02\u0A38\u0A3D\x05\u029C\u014F\x02\u0A39" +
		"\u0A3A\x07\u01CC\x02\x02\u0A3A\u0A3C\x05\u029C\u014F\x02\u0A3B\u0A39\x03" +
		"\x02\x02\x02\u0A3C\u0A3F\x03\x02\x02\x02\u0A3D\u0A3B\x03\x02\x02\x02\u0A3D" +
		"\u0A3E\x03\x02\x02\x02\u0A3E\u0A41\x03\x02\x02\x02\u0A3F\u0A3D\x03\x02" +
		"\x02\x02\u0A40\u0A36\x03\x02\x02\x02\u0A40\u0A37\x03\x02\x02\x02\u0A41" +
		"\u0119\x03\x02\x02\x02\u0A42\u0A44\x05\u02D4\u016B\x02\u0A43\u0A42\x03" +
		"\x02\x02\x02\u0A43\u0A44\x03\x02\x02\x02\u0A44\u0A46\x03\x02\x02\x02\u0A45" +
		"\u0A47\x05\u0262\u0132\x02\u0A46\u0A45\x03\x02\x02\x02\u0A46\u0A47\x03" +
		"\x02\x02\x02\u0A47\u0A48\x03\x02\x02\x02\u0A48\u0A49\x07\u0183\x02\x02" +
		"\u0A49\u0A4A\x05\u032C\u0197\x02\u0A4A\u0A4B\x07\u014D\x02\x02\u0A4B\u0A4C" +
		"\x05\u033C\u019F\x02\u0A4C\u0A4F\x05\u0274\u013B\x02\u0A4D\u0A4E\x07\u0198" +
		"\x02\x02\u0A4E\u0A50\x05\u02A6\u0154\x02\u0A4F\u0A4D\x03\x02\x02\x02\u0A4F" +
		"\u0A50\x03\x02\x02\x02\u0A50\u011B\x03\x02\x02\x02\u0A51\u0A53\x05\u02D4" +
		"\u016B\x02\u0A52\u0A51\x03\x02\x02\x02\u0A52\u0A53\x03\x02\x02\x02\u0A53" +
		"\u0A55\x03\x02\x02\x02\u0A54\u0A56\x05\u0262\u0132\x02\u0A55\u0A54\x03" +
		"\x02\x02\x02\u0A55\u0A56\x03\x02\x02\x02\u0A56\u0A57\x03\x02\x02\x02\u0A57" +
		"\u0A58\x07a\x02\x02\u0A58\u0A59\x07\x8F\x02\x02\u0A59\u0A5B\x05\u032C" +
		"\u0197\x02\u0A5A\u0A5C\x05\u0296\u014C\x02\u0A5B\u0A5A\x03\x02\x02\x02" +
		"\u0A5B\u0A5C\x03\x02\x02\x02\u0A5C\u0A5F\x03\x02\x02\x02\u0A5D\u0A5E\x07" +
		"\u0188\x02\x02\u0A5E\u0A60\x05\u0280\u0141\x02\u0A5F\u0A5D\x03\x02\x02" +
		"\x02\u0A5F\u0A60\x03\x02\x02\x02\u0A60\u0A63\x03\x02\x02\x02\u0A61\u0A62" +
		"\x07\u0198\x02\x02\u0A62\u0A64\x05\u02A6\u0154\x02\u0A63\u0A61\x03\x02" +
		"\x02\x02\u0A63\u0A64\x03\x02\x02\x02\u0A64\u011D\x03\x02\x02\x02\u0A65" +
		"\u0A66\x07I\x02\x02\u0A66\u0A67\x07\u013F\x02\x02\u0A67\u0A6B\x07\xD2" +
		"\x02\x02\u0A68\u0A69\x05\u032C\u0197\x02\u0A69\u0A6A\x07\u01CD\x02\x02" +
		"\u0A6A\u0A6C\x03\x02\x02\x02\u0A6B\u0A68\x03\x02\x02\x02\u0A6B\u0A6C\x03" +
		"\x02\x02\x02\u0A6C\u0A6D\x03\x02\x02\x02\u0A6D\u0A6E\x05\u032E\u0198\x02" +
		"\u0A6E\u0A6F\x07\xF9\x02\x02\u0A6F\u0A70\x05\u032C\u0197\x02\u0A70\u0A72" +
		"\x05\u0124\x93\x02\u0A71\u0A73\x05\u0130\x99\x02\u0A72\u0A71\x03\x02\x02" +
		"\x02\u0A72\u0A73\x03\x02\x02\x02\u0A73\u0A74\x03\x02\x02\x02\u0A74\u0A75" +
		"\x07\x8F\x02\x02\u0A75\u0A77\x05\u032E\u0198\x02\u0A76\u0A78\x05\u0132" +
		"\x9A\x02\u0A77\u0A76\x03\x02\x02\x02\u0A77\u0A78\x03\x02\x02\x02\u0A78" +
		"\u011F\x03\x02\x02\x02\u0A79\u0A7A\x07\v\x02\x02\u0A7A\u0A7B\x07\u013F" +
		"\x02\x02\u0A7B\u0A7C\x07\xD2\x02\x02\u0A7C\u0A80\x07\x8B\x02\x02\u0A7D" +
		"\u0A7E\x05\u032C\u0197\x02\u0A7E\u0A7F\x07\u01CD\x02\x02\u0A7F\u0A81\x03" +
		"\x02\x02\x02\u0A80\u0A7D\x03\x02\x02\x02\u0A80\u0A81\x03\x02\x02\x02\u0A81" +
		"\u0A82\x03\x02\x02\x02\u0A82\u0A83\x05\u032E\u0198\x02\u0A83\u0A85\x05" +
		"\u0124\x93\x02\u0A84\u0A86\x05\u0130\x99\x02\u0A85\u0A84\x03\x02\x02\x02" +
		"\u0A85\u0A86\x03\x02\x02\x02\u0A86\u0A88\x03\x02\x02\x02\u0A87\u0A89\x05" +
		"\u0122\x92\x02\u0A88\u0A87\x03\x02\x02\x02\u0A88\u0A89\x03\x02\x02\x02" +
		"\u0A89\u0121\x03\x02\x02\x02\u0A8A\u0A8B\x07\x8F\x02\x02\u0A8B\u0A8C\x05" +
		"\u032E\u0198\x02\u0A8C\u0A8D\x05\u0132\x9A\x02\u0A8D\u0123\x03\x02\x02" +
		"\x02\u0A8E\u0A93\x05\u0126\x94\x02\u0A8F\u0A90\x07\u01CC\x02\x02\u0A90" +
		"\u0A92\x05\u0126\x94\x02\u0A91\u0A8F\x03\x02\x02\x02\u0A92\u0A95\x03\x02" +
		"\x02\x02\u0A93\u0A91\x03\x02\x02\x02\u0A93\u0A94\x03\x02\x02\x02\u0A94" +
		"\u0A97\x03\x02\x02\x02\u0A95\u0A93\x03\x02\x02\x02\u0A96\u0A8E\x03\x02" +
		"\x02\x02\u0A96\u0A97\x03\x02\x02\x02\u0A97\u0125\x03\x02\x02\x02\u0A98" +
		"\u0A9F\x05\u0128\x95\x02\u0A99\u0A9F\x05\u012A\x96\x02\u0A9A\u0A9F\x05" +
		"\u012C\x97\x02\u0A9B\u0A9C\x07\u0198\x02\x02\u0A9C\u0A9F\x05\u02A6\u0154" +
		"\x02\u0A9D\u0A9F\x05\u0296\u014C\x02\u0A9E\u0A98\x03\x02\x02\x02\u0A9E" +
		"\u0A99\x03\x02\x02\x02\u0A9E\u0A9A\x03\x02\x02\x02\u0A9E\u0A9B\x03\x02" +
		"\x02\x02\u0A9E\u0A9D\x03\x02\x02\x02\u0A9F\u0127\x03\x02\x02\x02\u0AA0" +
		"\u0AA1\x07<\x02\x02\u0AA1\u0AA2\x07\u016B\x02\x02\u0AA2\u0AA3\x07*\x02" +
		"\x02\u0AA3\u0AA4\x05\u030C\u0187\x02\u0AA4\u0129\x03\x02\x02\x02\u0AA5" +
		"\u0AA6\x07\u0141\x02\x02\u0AA6\u0AA7\x07\u016B\x02\x02\u0AA7\u0AA8\x07" +
		"*\x02\x02\u0AA8\u0AA9\x05\u030C\u0187\x02\u0AA9\u012B\x03\x02\x02\x02" +
		"\u0AAA\u0AAB\x07<\x02\x02\u0AAB\u0AAC\x05\u012E\x98\x02\u0AAC\u012D\x03" +
		"\x02\x02\x02\u0AAD\u0AB0\x07\u01CA\x02\x02\u0AAE\u0AB1\x05\u032C\u0197" +
		"\x02\u0AAF\u0AB1\x05\u033A\u019E\x02\u0AB0\u0AAE\x03\x02\x02\x02\u0AB0" +
		"\u0AAF\x03\x02\x02\x02\u0AB1\u0AB9\x03\x02\x02\x02\u0AB2\u0AB5\x07\u01CC" +
		"\x02\x02\u0AB3\u0AB6\x05\u032C\u0197\x02\u0AB4\u0AB6\x05\u033A\u019E\x02" +
		"\u0AB5\u0AB3\x03\x02\x02\x02\u0AB5\u0AB4\x03\x02\x02\x02\u0AB6\u0AB8\x03" +
		"\x02\x02\x02\u0AB7\u0AB2\x03\x02\x02\x02\u0AB8\u0ABB\x03\x02\x02\x02\u0AB9" +
		"\u0AB7\x03\x02\x02\x02\u0AB9\u0ABA\x03\x02\x02\x02\u0ABA\u0ABC\x03\x02" +
		"\x02\x02\u0ABB\u0AB9\x03\x02\x02\x02\u0ABC\u0ABD\x07\u01CB\x02\x02\u0ABD" +
		"\u012F\x03\x02\x02\x02\u0ABE\u0ABF\x05\u02FA\u017E\x02\u0ABF\u0131\x03" +
		"\x02\x02\x02\u0AC0\u0AC1\x05\u02FE\u0180\x02\u0AC1\u0133\x03\x02\x02\x02" +
		"\u0AC2\u0AC3\x07\u0159\x02\x02\u0AC3\u0AC4\x07\u013F\x02\x02\u0AC4\u0AC5" +
		"\x07\xD2\x02\x02\u0AC5\u0AC9\x07\x8B\x02\x02\u0AC6\u0AC7\x05\u032C\u0197" +
		"\x02\u0AC7\u0AC8\x07\u01CD\x02\x02\u0AC8\u0ACA\x03\x02\x02\x02\u0AC9\u0AC6" +
		"\x03\x02\x02\x02\u0AC9\u0ACA\x03\x02\x02\x02\u0ACA\u0ACB\x03\x02\x02\x02" +
		"\u0ACB\u0ACC\x05\u032E\u0198\x02\u0ACC\u0135\x03\x02\x02\x02\u0ACD\u0ACE" +
		"\x07\u0135\x02\x02\u0ACE\u0ACF\x07\u013F\x02\x02\u0ACF\u0AD0\x07\xD2\x02" +
		"\x02\u0AD0\u0AD4\x07\x8B\x02\x02\u0AD1\u0AD2\x05\u032C\u0197\x02\u0AD2" +
		"\u0AD3\x07\u01CD\x02\x02\u0AD3\u0AD5\x03\x02\x02\x02\u0AD4\u0AD1\x03\x02" +
		"\x02\x02\u0AD4\u0AD5\x03\x02\x02\x02\u0AD5\u0AD6\x03\x02\x02\x02\u0AD6" +
		"\u0AD7\x05\u032E\u0198\x02\u0AD7\u0137\x03\x02\x02\x02\u0AD8\u0AD9\x07" +
		"\u0108\x02\x02\u0AD9\u0ADA\x07\u013F\x02\x02\u0ADA\u0ADB\x07\xD2\x02\x02" +
		"\u0ADB\u0ADF\x07\x8B\x02\x02\u0ADC\u0ADD\x05\u032C\u0197\x02\u0ADD\u0ADE" +
		"\x07\u01CD\x02\x02\u0ADE\u0AE0\x03\x02\x02\x02\u0ADF\u0ADC\x03\x02\x02" +
		"\x02\u0ADF\u0AE0\x03\x02\x02\x02\u0AE0\u0AE1\x03\x02\x02\x02\u0AE1\u0AE2" +
		"\x05\u032E\u0198\x02\u0AE2\u0139\x03\x02\x02\x02\u0AE3\u0AE5\x07\u0152" +
		"\x02\x02\u0AE4\u0AE6\x07\n\x02\x02\u0AE5\u0AE4\x03\x02\x02\x02\u0AE5\u0AE6" +
		"\x03\x02\x02\x02\u0AE6\u0AE7\x03\x02\x02\x02\u0AE7\u0AE8\x07\u013F\x02" +
		"\x02\u0AE8\u0AF0\x07\xD2\x02\x02\u0AE9\u0AED\x07\x8B\x02\x02\u0AEA\u0AEB" +
		"\x05\u032C\u0197\x02\u0AEB\u0AEC\x07\u01CD\x02\x02\u0AEC\u0AEE\x03\x02" +
		"\x02\x02\u0AED\u0AEA\x03\x02\x02\x02\u0AED\u0AEE\x03\x02\x02\x02\u0AEE" +
		"\u0AEF\x03\x02\x02\x02\u0AEF\u0AF1\x05\u032E\u0198\x02\u0AF0\u0AE9\x03" +
		"\x02\x02\x02\u0AF0\u0AF1\x03\x02\x02\x02\u0AF1\u0AF4\x03\x02\x02\x02\u0AF2" +
		"\u0AF3\x07\x8F\x02\x02\u0AF3\u0AF5\x05\u032C\u0197\x02\u0AF4\u0AF2\x03" +
		"\x02\x02\x02\u0AF4\u0AF5\x03\x02\x02\x02\u0AF5\u0AF8\x03\x02\x02\x02\u0AF6" +
		"\u0AF7\x07\u0198\x02\x02\u0AF7\u0AF9\x05\u02A6\u0154\x02\u0AF8\u0AF6\x03" +
		"\x02\x02\x02\u0AF8\u0AF9\x03\x02\x02\x02\u0AF9\u0B04\x03\x02\x02\x02\u0AFA" +
		"\u0AFB\x07\u0100\x02\x02\u0AFB\u0AFC\x07*\x02\x02\u0AFC\u0B01\x05\u026E" +
		"\u0138\x02\u0AFD\u0AFE\x07\u01CC\x02\x02\u0AFE\u0B00\x05\u026E\u0138\x02" +
		"\u0AFF\u0AFD\x03\x02\x02\x02\u0B00\u0B03\x03\x02\x02\x02\u0B01\u0AFF\x03" +
		"\x02\x02\x02\u0B01\u0B02\x03\x02\x02\x02\u0B02\u0B05\x03\x02\x02\x02\u0B03" +
		"\u0B01\x03\x02\x02\x02\u0B04\u0AFA\x03\x02\x02\x02\u0B04\u0B05\x03\x02" +
		"\x02\x02\u0B05\u0B07\x03\x02\x02\x02\u0B06\u0B08\x05\u0270\u0139\x02\u0B07" +
		"\u0B06\x03\x02\x02\x02\u0B07\u0B08\x03\x02\x02\x02\u0B08\u013B\x03\x02" +
		"\x02\x02\u0B09\u0B0A\x07\u0152\x02\x02\u0B0A\u0B0B\x07\u013F\x02\x02\u0B0B" +
		"\u0B0C\x07\xD2\x02\x02\u0B0C\u0B0F\x07\u0169\x02\x02\u0B0D\u0B0E\x07\x8F" +
		"\x02\x02\u0B0E\u0B10\x05\u032C\u0197\x02\u0B0F\u0B0D\x03\x02\x02\x02\u0B0F" +
		"\u0B10\x03\x02\x02\x02\u0B10\u0B11\x03\x02\x02\x02\u0B11\u0B12\x07\u0198" +
		"\x02\x02\u0B12\u0B13\x05\u02A6\u0154\x02\u0B13\u013D\x03\x02\x02\x02\u0B14" +
		"\u0B16\x07\u0152\x02\x02\u0B15\u0B17\x07\n\x02\x02\u0B16\u0B15\x03\x02" +
		"\x02\x02\u0B16\u0B17\x03\x02\x02\x02\u0B17\u0B18\x03\x02\x02\x02\u0B18" +
		"\u0B19\x07\u015B\x02\x02\u0B19\u0B21\x07\xD2\x02\x02\u0B1A\u0B1E\x07\x8B" +
		"\x02\x02\u0B1B\u0B1C\x05\u032C\u0197\x02\u0B1C\u0B1D\x07\u01CD\x02\x02" +
		"\u0B1D\u0B1F\x03\x02\x02\x02\u0B1E\u0B1B\x03\x02\x02\x02\u0B1E\u0B1F\x03" +
		"\x02\x02\x02\u0B1F\u0B20\x03\x02\x02\x02\u0B20\u0B22\x05\u032E\u0198\x02" +
		"\u0B21\u0B1A\x03\x02\x02\x02\u0B21\u0B22\x03\x02\x02\x02\u0B22\u0B25\x03" +
		"\x02\x02\x02\u0B23\u0B24\x07\x8F\x02\x02\u0B24\u0B26\x05\u032C\u0197\x02" +
		"\u0B25\u0B23\x03\x02\x02\x02\u0B25\u0B26\x03\x02\x02\x02\u0B26\u0B29\x03" +
		"\x02\x02\x02\u0B27\u0B28\x07\u0198\x02\x02\u0B28\u0B2A\x05\u02A6\u0154" +
		"\x02\u0B29\u0B27\x03\x02\x02\x02\u0B29\u0B2A\x03\x02\x02\x02\u0B2A\u0B35" +
		"\x03\x02\x02\x02\u0B2B\u0B2C\x07\u0100\x02\x02\u0B2C\u0B2D\x07*\x02\x02" +
		"\u0B2D\u0B32\x05\u026E\u0138\x02\u0B2E\u0B2F\x07\u01CC\x02\x02\u0B2F\u0B31" +
		"\x05\u026E\u0138\x02\u0B30\u0B2E\x03\x02\x02\x02\u0B31\u0B34\x03\x02\x02" +
		"\x02\u0B32\u0B30\x03\x02\x02\x02\u0B32\u0B33\x03\x02\x02\x02\u0B33\u0B36" +
		"\x03\x02\x02\x02\u0B34\u0B32\x03\x02\x02\x02\u0B35\u0B2B\x03\x02\x02\x02" +
		"\u0B35\u0B36\x03\x02\x02\x02\u0B36\u0B38\x03\x02\x02\x02\u0B37\u0B39\x05" +
		"\u0270\u0139\x02\u0B38\u0B37\x03\x02\x02\x02\u0B38\u0B39\x03\x02\x02\x02" +
		"\u0B39\u013F\x03\x02\x02\x02\u0B3A\u0B3C\x07\f\x02\x02\u0B3B\u0B3D\t\x0F" +
		"\x02\x02\u0B3C\u0B3B\x03\x02\x02\x02\u0B3C\u0B3D\x03\x02\x02\x02\u0B3D" +
		"\u0B3E\x03\x02\x02\x02\u0B3E\u0B3F\x07\u0166\x02\x02\u0B3F\u0B4B\x05\u032C" +
		"\u0197\x02\u0B40\u0B41\x07\u01CA\x02\x02\u0B41\u0B46\x05\u032E\u0198\x02" +
		"\u0B42\u0B43\x07\u01CC\x02\x02\u0B43\u0B45\x05\u032E\u0198\x02\u0B44\u0B42" +
		"\x03\x02\x02\x02\u0B45\u0B48\x03\x02\x02\x02\u0B46\u0B44\x03\x02\x02\x02" +
		"\u0B46\u0B47\x03\x02\x02\x02\u0B47\u0B49\x03\x02\x02\x02\u0B48\u0B46\x03" +
		"\x02\x02\x02\u0B49\u0B4A\x07\u01CB\x02\x02\u0B4A\u0B4C\x03\x02\x02\x02" +
		"\u0B4B\u0B40\x03\x02\x02\x02\u0B4B\u0B4C\x03\x02\x02\x02\u0B4C\u0B50\x03" +
		"\x02\x02\x02\u0B4D\u0B4E\x07\u019A\x02\x02\u0B4E\u0B4F\t\n\x02\x02\u0B4F" +
		"\u0B51\x07\xE7\x02\x02\u0B50\u0B4D\x03\x02\x02\x02\u0B50\u0B51\x03\x02" +
		"\x02\x02\u0B51\u0B53\x03\x02\x02\x02\u0B52\u0B54\x05\u02FA\u017E\x02\u0B53" +
		"\u0B52\x03\x02\x02\x02\u0B53\u0B54\x03\x02\x02\x02\u0B54\u0141\x03\x02" +
		"\x02\x02\u0B55\u0B56\x07k\x02\x02\u0B56\u0B57\x07\u0157\x02\x02\u0B57" +
		"\u0B58\x05\u032C\u0197\x02\u0B58\u0143\x03\x02\x02\x02\u0B59\u0B5A\x07" +
		"\f\x02\x02\u0B5A\u0B5B\x07\u0166\x02\x02\u0B5B\u0B5C\x05\u032C\u0197\x02" +
		"\u0B5C\u0B5D\x07\u0183\x02\x02\u0B5D\u0B5E\x07\x9F\x02\x02\u0B5E\u0B5F" +
		"\x07\xF9\x02\x02\u0B5F\u0B64\x05\u032E\u0198\x02\u0B60\u0B61\x07\u01CC" +
		"\x02\x02\u0B61\u0B63\x05\u032E\u0198\x02\u0B62\u0B60\x03\x02\x02\x02\u0B63" +
		"\u0B66\x03\x02\x02\x02\u0B64\u0B62\x03\x02\x02\x02\u0B64\u0B65\x03\x02" +
		"\x02\x02\u0B65\u0B6A\x03\x02\x02\x02\u0B66\u0B64\x03\x02\x02\x02\u0B67" +
		"\u0B68\x07\u019A\x02\x02\u0B68\u0B69\t\n\x02\x02\u0B69\u0B6B\x07\xE7\x02" +
		"\x02\u0B6A\u0B67\x03\x02\x02\x02\u0B6A\u0B6B\x03\x02\x02\x02\u0B6B\u0B6F" +
		"\x03\x02\x02\x02\u0B6C\u0B6D\x07\u019A\x02\x02\u0B6D\u0B6E\x07\u01BA\x02" +
		"\x02\u0B6E\u0B70\x07(\x02\x02\u0B6F\u0B6C\x03\x02\x02\x02\u0B6F\u0B70" +
		"\x03\x02\x02\x02\u0B70\u0B72\x03\x02\x02\x02\u0B71\u0B73\x05\u02FA\u017E" +
		"\x02\u0B72\u0B71\x03\x02\x02\x02\u0B72\u0B73\x03\x02\x02\x02\u0B73\u0145" +
		"\x03\x02\x02\x02\u0B74\u0B75\x07\f\x02\x02\u0B75\u0B76\x07\u0166\x02\x02" +
		"\u0B76\u0B77\x05\u032C\u0197\x02\u0B77\u0B78\x07k\x02\x02\u0B78\u0B79" +
		"\x07\x9F\x02\x02\u0B79\u0B7A\x07\xF9\x02\x02\u0B7A\u0B7F\x05\u032E\u0198" +
		"\x02\u0B7B\u0B7C\x07\u01CC\x02\x02\u0B7C\u0B7E\x05\u032E\u0198\x02\u0B7D" +
		"\u0B7B\x03\x02\x02\x02\u0B7E\u0B81\x03\x02\x02\x02\u0B7F\u0B7D\x03\x02" +
		"\x02\x02\u0B7F\u0B80\x03\x02\x02\x02\u0B80\u0147\x03\x02\x02\x02\u0B81" +
		"\u0B7F\x03\x02\x02\x02\u0B82\u0B83\x07I\x02\x02\u0B83\u0B85\x07\f\x02" +
		"\x02\u0B84\u0B86\t\x0F\x02\x02\u0B85\u0B84\x03\x02\x02\x02\u0B85\u0B86" +
		"\x03\x02\x02\x02\u0B86\u0B87\x03\x02\x02\x02\u0B87\u0B89\x07\n\x02\x02" +
		"\u0B88\u0B8A\x05\u02FA\u017E\x02\u0B89\u0B88\x03\x02\x02\x02\u0B89\u0B8A" +
		"\x03\x02\x02\x02\u0B8A\u0BAD\x03\x02\x02\x02\u0B8B\u0B8C\x07I\x02\x02" +
		"\u0B8C\u0B8E\x07\f\x02\x02\u0B8D\u0B8F\t\x0F\x02\x02\u0B8E\u0B8D\x03\x02" +
		"\x02\x02\u0B8E\u0B8F\x03\x02\x02\x02\u0B8F\u0B90\x03\x02\x02\x02\u0B90" +
		"\u0B91\x07U\x02\x02\u0B91\u0B93\x05\u032E\u0198\x02\u0B92\u0B94\x05\u02FA" +
		"\u017E\x02\u0B93\u0B92\x03\x02\x02\x02\u0B93\u0B94\x03\x02\x02\x02\u0B94" +
		"\u0BAD\x03\x02\x02\x02\u0B95\u0B96\x07I\x02\x02\u0B96\u0B98\x07\f\x02" +
		"\x02\u0B97\u0B99\t\x0F\x02\x02\u0B98\u0B97\x03\x02\x02\x02\u0B98\u0B99" +
		"\x03\x02\x02\x02\u0B99\u0B9A\x03\x02\x02\x02\u0B9A\u0B9B\x07\u0166\x02" +
		"\x02\u0B9B\u0BA7\x05\u032C\u0197\x02\u0B9C\u0B9D\x07\u01CA\x02\x02\u0B9D" +
		"\u0BA2\x05\u032E\u0198\x02\u0B9E\u0B9F\x07\u01CC\x02\x02\u0B9F\u0BA1\x05" +
		"\u032E\u0198\x02\u0BA0\u0B9E\x03\x02\x02\x02\u0BA1\u0BA4\x03\x02\x02\x02" +
		"\u0BA2\u0BA0\x03\x02\x02\x02\u0BA2\u0BA3\x03\x02\x02\x02\u0BA3\u0BA5\x03" +
		"\x02\x02\x02\u0BA4\u0BA2\x03\x02\x02\x02\u0BA5\u0BA6\x07\u01CB\x02\x02" +
		"\u0BA6\u0BA8\x03\x02\x02\x02\u0BA7\u0B9C\x03\x02\x02\x02\u0BA7\u0BA8\x03" +
		"\x02\x02\x02\u0BA8\u0BAA\x03\x02\x02\x02\u0BA9\u0BAB\x05\u02FA\u017E\x02" +
		"\u0BAA\u0BA9\x03\x02\x02\x02\u0BAA\u0BAB\x03\x02\x02\x02\u0BAB\u0BAD\x03" +
		"\x02\x02\x02\u0BAC\u0B82\x03\x02\x02\x02\u0BAC\u0B8B\x03\x02\x02\x02\u0BAC" +
		"\u0B95\x03\x02\x02\x02\u0BAD\u0149\x03\x02\x02\x02\u0BAE\u0BAF\x07k\x02" +
		"\x02\u0BAF\u0BB0\x07\f\x02\x02\u0BB0\u0BB1\x07\u01BA\x02\x02\u0BB1\u014B" +
		"\x03\x02\x02\x02\u0BB2\u0BB3\x07\u0152\x02\x02\u0BB3\u0BB5\x07\f\x02\x02" +
		"\u0BB4\u0BB6\t\x10\x02\x02\u0BB5\u0BB4\x03\x02\x02\x02\u0BB5\u0BB6\x03" +
		"\x02\x02\x02\u0BB6\u0BB9\x03\x02\x02\x02\u0BB7\u0BB8\x07\u0198\x02\x02" +
		"\u0BB8\u0BBA\x05\u02A6\u0154\x02\u0BB9\u0BB7\x03\x02\x02\x02\u0BB9\u0BBA" +
		"\x03\x02\x02\x02\u0BBA\u014D\x03\x02\x02\x02\u0BBB\u0BBC\x07\u0152\x02" +
		"\x02\u0BBC\u0BBD\x07\u0157\x02\x02\u0BBD\u0BC0\x07\xE5\x02\x02\u0BBE\u0BBF" +
		"\x07\u0198\x02\x02\u0BBF\u0BC1\x05\u02A6\u0154\x02\u0BC0\u0BBE\x03\x02" +
		"\x02\x02\u0BC0\u0BC1\x03\x02\x02\x02\u0BC1\u014F\x03\x02\x02\x02\u0BC2" +
		"\u0BC3\x07\u0152\x02\x02\u0BC3\u0BC4\x07\x9F\x02\x02\u0BC4\u0BC7\x07\xE5" +
		"\x02\x02\u0BC5\u0BC6\x07\u0198\x02\x02\u0BC6\u0BC8\x05\u02A6\u0154\x02" +
		"\u0BC7\u0BC5\x03\x02\x02\x02\u0BC7\u0BC8\x03\x02\x02\x02\u0BC8\u0151\x03" +
		"\x02\x02\x02\u0BC9\u0BCA\x07\xC4\x02\x02\u0BCA\u0BCB\x07\f\x02\x02\u0BCB" +
		"\u0BCC\x07\u01BA\x02\x02\u0BCC\u0153\x03\x02\x02\x02\u0BCD\u0BCE\x07\f" +
		"\x02\x02\u0BCE\u0BCF\x07\u0117\x02\x02\u0BCF\u0BD0\x07\x8F\x02\x02\u0BD0" +
		"\u0BDF\x05\u030C\u0187\x02\u0BD1\u0BD2\x07\f\x02\x02\u0BD2\u0BD3\x07\u0117" +
		"\x02\x02\u0BD3\u0BD4\x07\x8F\x02\x02\u0BD4\u0BD5\x05\u030C\u0187\x02\u0BD5" +
		"\u0BD6\x07\u01CC\x02\x02\u0BD6\u0BDB\x07\u01BA\x02\x02\u0BD7\u0BD8\x07" +
		"\u01CC\x02\x02\u0BD8\u0BDA\x07\u01BA\x02\x02\u0BD9\u0BD7\x03\x02\x02\x02" +
		"\u0BDA\u0BDD\x03\x02\x02\x02\u0BDB\u0BD9\x03\x02\x02\x02\u0BDB\u0BDC\x03" +
		"\x02\x02\x02\u0BDC\u0BDF\x03\x02\x02\x02\u0BDD\u0BDB\x03\x02\x02\x02\u0BDE" +
		"\u0BCD\x03\x02\x02\x02\u0BDE\u0BD1\x03\x02\x02\x02\u0BDF\u0155\x03\x02" +
		"\x02\x02\u0BE0\u0BE1\x07I\x02\x02\u0BE1\u0BE2\x07\u0132\x02\x02\u0BE2" +
		"\u0BE6\x07\x98\x02\x02\u0BE3\u0BE4\x07\xA6\x02\x02\u0BE4\u0BE5\x07\xF1" +
		"\x02\x02\u0BE5\u0BE7\x07y\x02\x02\u0BE6\u0BE3\x03\x02\x02\x02\u0BE6\u0BE7" +
		"\x03\x02\x02\x02\u0BE7\u0BEA\x03\x02\x02\x02\u0BE8\u0BE9\x07\xFF\x02\x02" +
		"\u0BE9\u0BEB\x07\u012D\x02\x02\u0BEA\u0BE8\x03\x02\x02\x02\u0BEA\u0BEB" +
		"\x03\x02\x02\x02\u0BEB\u0BEC\x03\x02\x02\x02\u0BEC\u0BF6\x05\u032E\u0198" +
		"\x02\u0BED\u0BEE\x07\u0174\x02\x02\u0BEE\u0BF3\x05\u0166\xB4\x02\u0BEF" +
		"\u0BF0\x07\u01CC\x02\x02\u0BF0\u0BF2\x05\u0166\xB4\x02\u0BF1\u0BEF\x03" +
		"\x02\x02\x02\u0BF2\u0BF5\x03\x02\x02\x02\u0BF3\u0BF1\x03\x02\x02\x02\u0BF3" +
		"\u0BF4\x03\x02\x02\x02\u0BF4\u0BF7\x03\x02\x02\x02\u0BF5\u0BF3\x03\x02" +
		"\x02\x02\u0BF6\u0BED\x03\x02\x02\x02\u0BF6\u0BF7\x03\x02\x02\x02\u0BF7" +
		"\u0BF8\x03\x02\x02\x02\u0BF8\u0BF9\x07\u019A\x02\x02\u0BF9\u0BFA\x07\u01CA" +
		"\x02\x02\u0BFA\u0BFF\x05\u0302\u0182\x02\u0BFB\u0BFC\x07\u01CC\x02\x02" +
		"\u0BFC\u0BFE\x05\u0302\u0182\x02\u0BFD\u0BFB\x03\x02\x02\x02\u0BFE\u0C01" +
		"\x03\x02\x02\x02\u0BFF\u0BFD\x03\x02\x02\x02\u0BFF\u0C00\x03\x02\x02\x02" +
		"\u0C00\u0C02\x03\x02\x02\x02\u0C01\u0BFF\x03\x02\x02\x02\u0C02\u0C03\x07" +
		"\u01CB\x02\x02\u0C03\u0157\x03\x02\x02\x02\u0C04\u0C05\x07k\x02\x02\u0C05" +
		"\u0C06\x07\u0132\x02\x02\u0C06\u0C07\x07\x98\x02\x02\u0C07\u0C08\x05\u032E" +
		"\u0198\x02\u0C08\u0159\x03\x02\x02\x02\u0C09\u0C0A\x07\v\x02\x02\u0C0A" +
		"\u0C0B\x07\u0132\x02\x02\u0C0B\u0C0C\x07\x98\x02\x02\u0C0C\u0C0D\x05\u032E" +
		"\u0198\x02\u0C0D\u0C0E\x07\x06\x02\x02\u0C0E\u0C13\x05\u0166\xB4\x02\u0C0F" +
		"\u0C10\x07\u01CC\x02\x02\u0C10\u0C12\x05\u0166\xB4\x02\u0C11\u0C0F\x03" +
		"\x02\x02\x02\u0C12\u0C15\x03\x02\x02\x02\u0C13\u0C11\x03\x02\x02\x02";
	private static readonly _serializedATNSegment7: string =
		"\u0C13\u0C14\x03\x02\x02\x02\u0C14\u0C3E\x03\x02\x02\x02\u0C15\u0C13\x03" +
		"\x02\x02\x02\u0C16\u0C17\x07\v\x02\x02\u0C17\u0C18\x07\u0132\x02\x02\u0C18" +
		"\u0C19\x07\x98\x02\x02\u0C19\u0C1A\x05\u032E\u0198\x02\u0C1A\u0C1B\x07" +
		"k\x02\x02\u0C1B\u0C1C\x07\u01CA\x02\x02\u0C1C\u0C21\x07\u01BA\x02\x02" +
		"\u0C1D\u0C1E\x07\u01CC\x02\x02\u0C1E\u0C20\x07\u01BA\x02\x02\u0C1F\u0C1D" +
		"\x03\x02\x02\x02\u0C20\u0C23\x03\x02\x02\x02\u0C21\u0C1F\x03\x02\x02\x02" +
		"\u0C21\u0C22\x03\x02\x02\x02\u0C22\u0C24\x03\x02\x02\x02\u0C23\u0C21\x03" +
		"\x02\x02\x02\u0C24\u0C25\x07\u01CB\x02\x02\u0C25\u0C3E\x03\x02\x02\x02" +
		"\u0C26\u0C27\x07\v\x02\x02\u0C27\u0C28\x07\u0132\x02\x02\u0C28\u0C29\x07" +
		"\x98\x02\x02\u0C29\u0C2A\x05\u032E\u0198\x02\u0C2A\u0C2B\x07k\x02\x02" +
		"\u0C2B\u0C2C\x07\n\x02\x02\u0C2C\u0C3E\x03\x02\x02\x02\u0C2D\u0C2E\x07" +
		"\v\x02\x02\u0C2E\u0C2F\x07\u0132\x02\x02\u0C2F\u0C30\x07\x98\x02\x02\u0C30" +
		"\u0C31\x05\u032E\u0198\x02\u0C31\u0C32\x07\u019A\x02\x02\u0C32\u0C33\x07" +
		"\u01CA\x02\x02\u0C33\u0C38\x05\u0302\u0182\x02\u0C34\u0C35\x07\u01CC\x02" +
		"\x02\u0C35\u0C37\x05\u0302\u0182\x02\u0C36\u0C34\x03\x02\x02\x02\u0C37" +
		"\u0C3A\x03\x02\x02\x02\u0C38\u0C36\x03\x02\x02\x02\u0C38\u0C39\x03\x02" +
		"\x02\x02\u0C39\u0C3B\x03\x02\x02\x02\u0C3A\u0C38\x03\x02\x02\x02\u0C3B" +
		"\u0C3C\x07\u01CB\x02\x02\u0C3C\u0C3E\x03\x02\x02\x02\u0C3D\u0C09\x03\x02" +
		"\x02\x02\u0C3D\u0C16\x03\x02\x02\x02\u0C3D\u0C26\x03\x02\x02\x02\u0C3D" +
		"\u0C2D\x03\x02\x02\x02\u0C3E\u015B\x03\x02\x02\x02\u0C3F\u0C40\x07\u0152" +
		"\x02\x02\u0C40\u0C41\x07\u0132\x02\x02\u0C41\u0C42\x07\x98\x02\x02\u0C42" +
		"\u0C4A\x05\u032E\u0198\x02\u0C43\u0C44\x07\u0152\x02\x02\u0C44\u0C45\x07" +
		"\u0132\x02\x02\u0C45\u0C47\x07\x99\x02\x02\u0C46\u0C48\x07\n\x02\x02\u0C47" +
		"\u0C46\x03\x02\x02\x02\u0C47\u0C48\x03\x02\x02\x02\u0C48\u0C4A\x03\x02" +
		"\x02\x02\u0C49\u0C3F\x03\x02\x02\x02\u0C49\u0C43\x03\x02\x02\x02\u0C4A" +
		"\u015D\x03\x02\x02\x02\u0C4B\u0C4D\x07I\x02\x02\u0C4C\u0C4E\x07|\x02\x02" +
		"\u0C4D\u0C4C\x03\x02\x02\x02\u0C4D\u0C4E\x03\x02\x02\x02\u0C4E\u0C4F\x03" +
		"\x02\x02\x02\u0C4F\u0C50\x07\u0132\x02\x02\u0C50\u0C52\x05\u0332\u019A" +
		"\x02\u0C51\u0C53\x05\u02FA\u017E\x02\u0C52\u0C51\x03\x02\x02\x02\u0C52" +
		"\u0C53\x03\x02\x02\x02\u0C53\u015F\x03\x02\x02\x02\u0C54\u0C55\x07\v\x02" +
		"\x02\u0C55\u0C56\x07\u0132\x02\x02\u0C56\u0C57\x05\u0332\u019A\x02\u0C57" +
		"\u0C58\x07\u014D\x02\x02\u0C58\u0C59\x05\u02FA\u017E\x02\u0C59\u0161\x03" +
		"\x02\x02\x02\u0C5A\u0C5B\x07k\x02\x02\u0C5B\u0C5C\x07\u0132\x02\x02\u0C5C" +
		"\u0C5D\x05\u0332\u019A\x02\u0C5D\u0163\x03\x02\x02\x02\u0C5E\u0C5F\x07" +
		"\u0152\x02\x02\u0C5F\u0C60\x07\u0133\x02\x02\u0C60\u0165\x03\x02\x02\x02" +
		"\u0C61\u0C62\x07\u01CA\x02\x02\u0C62\u0C63\x05\u02A8\u0155\x02\u0C63\u0C64" +
		"\x07\u01CB\x02\x02\u0C64\u0167\x03\x02\x02\x02\u0C65\u0C67\x07\u0152\x02" +
		"\x02\u0C66\u0C68\x07\x92\x02\x02\u0C67\u0C66\x03\x02\x02\x02\u0C67\u0C68" +
		"\x03\x02\x02\x02\u0C68\u0C6A\x03\x02\x02\x02\u0C69\u0C6B\t\x11\x02\x02" +
		"\u0C6A\u0C69\x03\x02\x02\x02\u0C6A\u0C6B\x03\x02\x02\x02\u0C6B\u0C6C\x03" +
		"\x02\x02\x02\u0C6C\u0C6F\x07\x94\x02\x02\u0C6D\u0C6E\t\x02\x02\x02\u0C6E" +
		"\u0C70\x05\u032C\u0197\x02\u0C6F\u0C6D\x03\x02\x02\x02\u0C6F\u0C70\x03" +
		"\x02\x02\x02\u0C70\u0C75\x03\x02\x02\x02\u0C71\u0C72\x07\xCF\x02\x02\u0C72" +
		"\u0C76\x05\u030C\u0187\x02\u0C73\u0C74\x07\u0198\x02\x02\u0C74\u0C76\x05" +
		"\u02A6\u0154\x02\u0C75\u0C71\x03\x02\x02\x02\u0C75\u0C73\x03\x02\x02\x02" +
		"\u0C75\u0C76\x03\x02\x02\x02\u0C76\u0169\x03\x02\x02\x02\u0C77\u0C79\x07" +
		"k\x02\x02\u0C78\u0C7A\x07\x95\x02\x02\u0C79\u0C78\x03\x02\x02\x02\u0C79" +
		"\u0C7A\x03\x02\x02\x02\u0C7A\u0C7B\x03\x02\x02\x02\u0C7B\u0C7C\x07\x93" +
		"\x02\x02\u0C7C\u0C7D\x05\u032C\u0197\x02\u0C7D\u0C7E\x07\u01CA\x02\x02" +
		"\u0C7E\u0C7F\x05\u016E\xB8\x02\u0C7F\u0C80\x07\u01CB\x02\x02\u0C80\u016B" +
		"\x03\x02\x02\x02\u0C81\u0C83\x07I\x02\x02\u0C82\u0C84\x07\x95\x02\x02" +
		"\u0C83\u0C82\x03\x02\x02\x02\u0C83\u0C84\x03\x02\x02\x02\u0C84\u0C86\x03" +
		"\x02\x02\x02\u0C85\u0C87\t\x12\x02\x02\u0C86\u0C85\x03\x02\x02\x02\u0C86" +
		"\u0C87\x03\x02\x02\x02\u0C87\u0C88\x03\x02\x02\x02\u0C88\u0C89\x07\x93" +
		"\x02\x02\u0C89\u0C8A\x05\u032C\u0197\x02\u0C8A\u0C8B\x07\u01CA\x02\x02" +
		"\u0C8B\u0C8C\x05\u016E\xB8\x02\u0C8C\u0C8D\x07\u01CB\x02\x02\u0C8D\u0C8E" +
		"\x07\u0136\x02\x02\u0C8E\u0C91\x05\u031A\u018E\x02\u0C8F\u0C90\x07\xB8" +
		"\x02\x02\u0C90\u0C92\x05\u031A\u018E\x02\u0C91\u0C8F\x03\x02\x02\x02\u0C91" +
		"\u0C92\x03\x02\x02\x02\u0C92\u0C94\x03\x02\x02\x02\u0C93\u0C95\x05\u02FA" +
		"\u017E\x02\u0C94\u0C93\x03\x02\x02\x02\u0C94\u0C95\x03\x02\x02\x02\u0C95" +
		"\u016D\x03\x02\x02\x02\u0C96\u0C98\x05\u031A\u018E\x02\u0C97\u0C96\x03" +
		"\x02\x02\x02\u0C97\u0C98\x03\x02\x02\x02\u0C98\u0C9D\x03\x02\x02\x02\u0C99" +
		"\u0C9A\x07\u01CC\x02\x02\u0C9A\u0C9C\x05\u031A\u018E\x02\u0C9B\u0C99\x03" +
		"\x02\x02\x02\u0C9C\u0C9F\x03\x02\x02\x02\u0C9D\u0C9B\x03\x02\x02\x02\u0C9D" +
		"\u0C9E\x03\x02\x02\x02\u0C9E\u0CA2\x03\x02\x02\x02\u0C9F\u0C9D\x03\x02" +
		"\x02\x02\u0CA0\u0CA1\x07\u01CC\x02\x02\u0CA1\u0CA3\x07\u01D4\x02\x02\u0CA2" +
		"\u0CA0\x03\x02\x02\x02\u0CA2\u0CA3\x03\x02\x02\x02\u0CA3\u016F\x03\x02" +
		"\x02\x02\u0CA4\u0CA5\x07\xD2\x02\x02\u0CA5\u0CA6\x07\xC5\x02\x02\u0CA6" +
		"\u0CA8\x05\u0172\xBA\x02\u0CA7\u0CA9\x05\u0174\xBB\x02\u0CA8\u0CA7\x03" +
		"\x02\x02\x02\u0CA8\u0CA9\x03\x02\x02\x02\u0CA9\u0CAB\x03\x02\x02\x02\u0CAA" +
		"\u0CAC\x05\u017A\xBE\x02\u0CAB\u0CAA\x03\x02\x02\x02\u0CAB\u0CAC\x03\x02" +
		"\x02\x02\u0CAC\u0CAF\x03\x02\x02\x02\u0CAD\u0CAE\x07*\x02\x02\u0CAE\u0CB0" +
		"\x05\u0332\u019A\x02\u0CAF\u0CAD\x03\x02\x02\x02\u0CAF\u0CB0\x03\x02\x02" +
		"\x02\u0CB0\u0CB3\x03\x02\x02\x02\u0CB1\u0CB2\x07\u0119\x02\x02\u0CB2\u0CB4" +
		"\x05\u02FE\u0180\x02\u0CB3\u0CB1\x03\x02\x02\x02\u0CB3\u0CB4\x03\x02\x02" +
		"\x02\u0CB4\u0CC1\x03\x02\x02\x02\u0CB5\u0CB6\x07\xD2\x02\x02\u0CB6\u0CB7" +
		"\x07\xC5\x02\x02\u0CB7\u0CB9\x05\u0172\xBA\x02\u0CB8\u0CBA\x05\u0174\xBB" +
		"\x02\u0CB9\u0CB8\x03\x02\x02\x02\u0CB9\u0CBA\x03\x02\x02\x02\u0CBA\u0CBB" +
		"\x03\x02\x02\x02\u0CBB\u0CBE\x05\u017C\xBF\x02\u0CBC\u0CBD\x07\u0119\x02" +
		"\x02\u0CBD\u0CBF\x05\u02FE\u0180\x02\u0CBE\u0CBC\x03\x02\x02\x02\u0CBE" +
		"\u0CBF\x03\x02\x02\x02\u0CBF\u0CC1\x03\x02\x02\x02\u0CC0\u0CA4\x03\x02" +
		"\x02\x02\u0CC0\u0CB5\x03\x02\x02\x02\u0CC1\u0171\x03\x02\x02\x02\u0CC2" +
		"\u0CC3\x05\u032E\u0198\x02\u0CC3\u0CC4\x07\u01CD\x02\x02\u0CC4\u0CC6\x03" +
		"\x02\x02\x02\u0CC5\u0CC2\x03\x02\x02\x02\u0CC5\u0CC6\x03\x02\x02\x02\u0CC6" +
		"\u0CC7\x03\x02\x02\x02\u0CC7\u0CC8\x05\u032E\u0198\x02\u0CC8\u0173\x03" +
		"\x02\x02\x02\u0CC9\u0CCA\x07\u01CA\x02\x02\u0CCA\u0CCF\x05\u0176\xBC\x02" +
		"\u0CCB\u0CCC\x07\u01CC\x02\x02\u0CCC\u0CCE\x05\u0176\xBC\x02\u0CCD\u0CCB" +
		"\x03\x02\x02\x02\u0CCE\u0CD1\x03\x02\x02\x02\u0CCF\u0CCD\x03\x02\x02\x02" +
		"\u0CCF\u0CD0\x03\x02\x02\x02\u0CD0\u0CD2\x03\x02\x02\x02\u0CD1\u0CCF\x03" +
		"\x02\x02\x02\u0CD2\u0CD3\x07\u01CB\x02\x02\u0CD3\u0175\x03\x02\x02\x02" +
		"\u0CD4\u0CD5\x07T\x02\x02\u0CD5\u0CD6\x07\xB0\x02\x02\u0CD6\u0CD8\x05" +
		"\u02E0\u0171\x02\u0CD7\u0CD9\x07\xEC\x02\x02\u0CD8\u0CD7\x03\x02\x02\x02" +
		"\u0CD8\u0CD9\x03\x02\x02\x02\u0CD9\u0CDA\x03\x02\x02\x02\u0CDA\u0CDB\x07" +
		"\xBB\x02\x02\u0CDB\u0CDC\x07\u0166\x02\x02\u0CDC\u0CDE\x05\u032E\u0198" +
		"\x02\u0CDD\u0CDF\x05\u0296\u014C\x02\u0CDE\u0CDD\x03\x02\x02\x02\u0CDE" +
		"\u0CDF\x03\x02\x02\x02\u0CDF\u0CE4\x03\x02\x02\x02\u0CE0\u0CE1\x07<\x02" +
		"\x02\u0CE1\u0CE2\x07\u016B\x02\x02\u0CE2\u0CE3\x07*\x02\x02\u0CE3\u0CE5" +
		"\x05\u030C\u0187\x02\u0CE4\u0CE0\x03\x02\x02\x02\u0CE4\u0CE5\x03\x02\x02" +
		"\x02\u0CE5\u0CEA\x03\x02\x02\x02\u0CE6\u0CE7\x07\u0141\x02\x02\u0CE7\u0CE8" +
		"\x07\u016B\x02\x02\u0CE8\u0CE9\x07*\x02\x02\u0CE9\u0CEB\x05\u030C\u0187" +
		"\x02\u0CEA\u0CE6\x03\x02\x02\x02\u0CEA\u0CEB\x03\x02\x02\x02\u0CEB\u0CED" +
		"\x03\x02\x02\x02\u0CEC\u0CEE\x05\u030A\u0186\x02\u0CED\u0CEC\x03\x02\x02" +
		"\x02\u0CED\u0CEE\x03\x02\x02\x02\u0CEE\u0CF0\x03\x02\x02\x02\u0CEF\u0CF1" +
		"\x05\u0178\xBD\x02\u0CF0\u0CEF\x03\x02\x02\x02\u0CF0\u0CF1\x03\x02\x02" +
		"\x02\u0CF1\u0CF3\x03\x02\x02\x02\u0CF2\u0CF4\x05\u0294\u014B\x02\u0CF3" +
		"\u0CF2\x03\x02\x02\x02\u0CF3\u0CF4\x03\x02\x02\x02\u0CF4\u0CFA\x03\x02" +
		"\x02\x02\u0CF5\u0CF6\x07<\x02\x02\u0CF6\u0CF7\x07\x8F\x02\x02\u0CF7\u0CF8" +
		"\x07\u0107\x02\x02\u0CF8\u0CF9\x07\x12\x02\x02\u0CF9\u0CFB\x05\u0330\u0199" +
		"\x02\u0CFA\u0CF5\x03\x02\x02\x02\u0CFA\u0CFB\x03\x02\x02\x02\u0CFB\u0CFE" +
		"\x03\x02\x02\x02\u0CFC\u0CFD\x07\u014D\x02\x02\u0CFD\u0CFF\x05\u0166\xB4" +
		"\x02\u0CFE\u0CFC\x03\x02\x02\x02\u0CFE\u0CFF\x03\x02\x02\x02\u0CFF\u0D02" +
		"\x03\x02\x02\x02\u0D00\u0D01\x07\u0198\x02\x02\u0D01\u0D03\x05\u02A6\u0154" +
		"\x02\u0D02\u0D00\x03\x02\x02\x02\u0D02\u0D03\x03\x02\x02\x02\u0D03\u0D1A" +
		"\x03\x02\x02\x02\u0D04\u0D05\x07T\x02\x02\u0D05\u0D06\x07\x8F\x02\x02" +
		"\u0D06\u0D07\x07\u0166\x02\x02\u0D07\u0D09\x05\u032E\u0198\x02\u0D08\u0D0A" +
		"\x07\xEC\x02\x02\u0D09\u0D08\x03\x02\x02\x02\u0D09\u0D0A\x03\x02\x02\x02" +
		"\u0D0A\u0D0B\x03\x02\x02\x02\u0D0B\u0D0C\x07\xBB\x02\x02\u0D0C\u0D0D\x07" +
		"\u0166\x02\x02\u0D0D\u0D0F\x05\u032E\u0198\x02\u0D0E\u0D10\x05\u0296\u014C" +
		"\x02\u0D0F\u0D0E\x03\x02\x02\x02\u0D0F\u0D10\x03\x02\x02\x02\u0D10\u0D13" +
		"\x03\x02\x02\x02\u0D11\u0D12\x07\u014D\x02\x02\u0D12\u0D14\x05\u0166\xB4" +
		"\x02\u0D13\u0D11\x03\x02\x02\x02\u0D13\u0D14\x03\x02\x02\x02\u0D14\u0D17" +
		"\x03\x02\x02\x02\u0D15\u0D16\x07\u0198\x02\x02\u0D16\u0D18\x05\u02A6\u0154" +
		"\x02\u0D17\u0D15\x03\x02\x02\x02\u0D17\u0D18\x03\x02\x02\x02\u0D18\u0D1A" +
		"\x03\x02\x02\x02\u0D19\u0CD4\x03\x02\x02\x02\u0D19\u0D04\x03\x02\x02\x02" +
		"\u0D1A\u0177\x03\x02\x02\x02\u0D1B\u0D1F\x07\u01CA\x02\x02\u0D1C\u0D1D" +
		"\x07\u0151\x02\x02\u0D1D\u0D1E\x07\u01A1\x02\x02\u0D1E\u0D20\x07\u01BA" +
		"\x02\x02\u0D1F\u0D1C\x03\x02\x02\x02\u0D1F\u0D20\x03\x02\x02\x02\u0D20" +
		"\u0D24\x03\x02\x02\x02\u0D21\u0D22\x07\u0177\x02\x02\u0D22\u0D23\x07\u01A1" +
		"\x02\x02\u0D23\u0D25\x05\u0312\u018A\x02\u0D24\u0D21\x03\x02\x02\x02\u0D24" +
		"\u0D25\x03\x02\x02\x02\u0D25\u0D29\x03\x02\x02\x02\u0D26\u0D27\x07p\x02" +
		"\x02\u0D27\u0D28\x07\u01A1\x02\x02\u0D28\u0D2A\x05\u030C\u0187\x02\u0D29" +
		"\u0D26\x03\x02\x02\x02\u0D29\u0D2A\x03\x02\x02\x02\u0D2A\u0D2E\x03\x02" +
		"\x02\x02\u0D2B\u0D2C\x07u\x02\x02\u0D2C\u0D2D\x07\u01A1\x02\x02\u0D2D" +
		"\u0D2F\x05\u030C\u0187\x02\u0D2E\u0D2B\x03\x02\x02\x02\u0D2E\u0D2F\x03" +
		"\x02\x02\x02\u0D2F\u0D30\x03\x02\x02\x02\u0D30\u0D31\x07\u01CB\x02\x02" +
		"\u0D31\u0179\x03\x02\x02\x02\u0D32\u0D33\x07\u019A\x02\x02\u0D33\u0D35" +
		"\x07\'\x02\x02\u0D34\u0D36\x05\u02FE\u0180\x02\u0D35\u0D34\x03\x02\x02" +
		"\x02\u0D35\u0D36\x03\x02\x02\x02\u0D36\u0D3E\x03\x02\x02\x02\u0D37\u0D38" +
		"\x07\u019A\x02\x02\u0D38\u0D39\x07\'\x02\x02\u0D39\u0D3B\x05\u0332\u019A" +
		"\x02\u0D3A\u0D3C\x05\u02FE\u0180\x02\u0D3B\u0D3A\x03\x02\x02\x02\u0D3B" +
		"\u0D3C\x03\x02\x02\x02\u0D3C\u0D3E\x03\x02\x02\x02\u0D3D\u0D32\x03\x02" +
		"\x02\x02\u0D3D\u0D37\x03\x02\x02\x02\u0D3E\u017B\x03\x02\x02\x02\u0D3F" +
		"\u0D40\x07\u019A\x02\x02\u0D40\u0D41\x07\u0132\x02\x02\u0D41\u0D43\x05" +
		"\u0332\u019A\x02\u0D42\u0D44\x05\u02FE\u0180\x02\u0D43\u0D42\x03\x02\x02" +
		"\x02\u0D43\u0D44\x03\x02\x02\x02\u0D44\u017D\x03\x02\x02\x02\u0D45\u0D46" +
		"\x07\u0152\x02\x02\u0D46\u0D48\x07\xD2\x02\x02\u0D47\u0D49\x07\n\x02\x02" +
		"\u0D48\u0D47\x03\x02\x02\x02\u0D48\u0D49\x03\x02\x02\x02\u0D49\u0D4C\x03" +
		"\x02\x02\x02\u0D4A\u0D4B\x07\x8F\x02\x02\u0D4B\u0D4D\x05\u032E\u0198\x02" +
		"\u0D4C\u0D4A\x03\x02\x02\x02\u0D4C\u0D4D\x03\x02\x02\x02\u0D4D\u0D50\x03" +
		"\x02\x02\x02\u0D4E\u0D4F\x07\u0198\x02\x02\u0D4F\u0D51\x05\u02A6\u0154" +
		"\x02\u0D50\u0D4E\x03\x02\x02\x02\u0D50\u0D51\x03\x02\x02\x02\u0D51\u0D5C" +
		"\x03\x02\x02\x02\u0D52\u0D53\x07\u0100\x02\x02\u0D53\u0D54\x07*\x02\x02" +
		"\u0D54\u0D59\x05\u026E\u0138\x02\u0D55\u0D56\x07\u01CC\x02\x02\u0D56\u0D58" +
		"\x05\u026E\u0138\x02\u0D57\u0D55\x03\x02\x02\x02\u0D58\u0D5B\x03\x02\x02" +
		"\x02\u0D59\u0D57\x03\x02\x02\x02\u0D59\u0D5A\x03\x02\x02\x02\u0D5A\u0D5D" +
		"\x03\x02\x02\x02\u0D5B\u0D59\x03\x02\x02\x02\u0D5C\u0D52\x03\x02\x02\x02" +
		"\u0D5C\u0D5D\x03\x02\x02\x02\u0D5D\u0D5F\x03\x02\x02\x02\u0D5E\u0D60\x05" +
		"\u0270\u0139\x02\u0D5F\u0D5E\x03\x02\x02\x02\u0D5F\u0D60\x03\x02\x02\x02" +
		"\u0D60\u017F\x03\x02\x02\x02\u0D61\u0D62\x07\u0152\x02\x02\u0D62\u0D63" +
		"\x07\xD2\x02\x02\u0D63\u0D66\x07\u0195\x02\x02\u0D64\u0D65\x07\x8F\x02" +
		"\x02\u0D65\u0D67\x05\u032E\u0198\x02\u0D66\u0D64\x03\x02\x02\x02\u0D66" +
		"\u0D67\x03\x02\x02\x02\u0D67\u0D6A\x03\x02\x02\x02\u0D68\u0D69\x07\u0198" +
		"\x02\x02\u0D69\u0D6B\x05\u02A6\u0154\x02\u0D6A\u0D68\x03\x02\x02\x02\u0D6A" +
		"\u0D6B\x03\x02\x02\x02\u0D6B\u0D6D\x03\x02\x02\x02\u0D6C\u0D6E\x05\u0270" +
		"\u0139\x02\u0D6D\u0D6C\x03\x02\x02\x02\u0D6D\u0D6E\x03\x02\x02\x02\u0D6E" +
		"\u0D75\x03\x02\x02\x02\u0D6F\u0D70\x07\u0152\x02\x02\u0D70\u0D71\x07\xD2" +
		"\x02\x02\u0D71\u0D72\x07\u0195\x02\x02\u0D72\u0D73\x07\xF9\x02\x02\u0D73" +
		"\u0D75\x05\u030C\u0187\x02\u0D74\u0D61\x03\x02\x02\x02\u0D74\u0D6F\x03" +
		"\x02\x02\x02\u0D75\u0181\x03\x02\x02\x02\u0D76\u0D77\x07+\x02\x02\u0D77" +
		"\u0D7A\x07\xD2\x02\x02\u0D78\u0D79\x07\x8F\x02\x02\u0D79\u0D7B\x05\u032E" +
		"\u0198\x02\u0D7A\u0D78\x03\x02\x02\x02\u0D7A\u0D7B\x03\x02\x02\x02\u0D7B" +
		"\u0D7E\x03\x02\x02\x02\u0D7C\u0D7D\x07\u0198\x02\x02\u0D7D\u0D7F\x05\u02A6" +
		"\u0154\x02\u0D7E\u0D7C\x03\x02\x02\x02\u0D7E\u0D7F\x03\x02\x02\x02\u0D7F" +
		"\u0183\x03\x02\x02\x02\u0D80\u0D81\x07\v\x02\x02\u0D81\u0D82\x07\xD2\x02" +
		"\x02\u0D82\u0D86\x07\x8B\x02\x02\u0D83\u0D84\x05\u032C\u0197\x02\u0D84" +
		"\u0D85\x07\u01CD\x02\x02\u0D85\u0D87\x03\x02\x02\x02\u0D86\u0D83\x03\x02" +
		"\x02\x02\u0D86\u0D87\x03\x02\x02\x02\u0D87\u0D88\x03\x02\x02\x02\u0D88" +
		"\u0D8A\x05\u032E\u0198\x02\u0D89\u0D8B\x05\u0130\x99\x02\u0D8A\u0D89\x03" +
		"\x02\x02\x02\u0D8A\u0D8B\x03\x02\x02\x02\u0D8B\u0185\x03\x02\x02\x02\u0D8C" +
		"\u0D8D\x07+\x02\x02\u0D8D\u0D8E\x07A\x02\x02\u0D8E\u0D8F\x07\u0198\x02" +
		"\x02\u0D8F\u0D90\x05\u02A6\u0154\x02\u0D90\u0187\x03\x02\x02\x02\u0D91" +
		"\u0D92\x07\u0152\x02\x02\u0D92\u0D93\x07\x15\x02\x02\u0D93\u0189\x03\x02" +
		"\x02\x02\u0D94\u0D95\x07\u0152\x02\x02\u0D95\u0D96\x07\x1A\x02\x02\u0D96" +
		"\u018B\x03\x02\x02\x02\u0D97\u0D98\x07\u0152\x02\x02\u0D98\u0D99\x07\'" +
		"\x02\x02\u0D99\u018D\x03\x02\x02\x02\u0D9A\u0DA0\x07\u0152\x02\x02\u0D9B" +
		"\u0D9C\x072\x02\x02\u0D9C\u0DA1\x07\u014D\x02\x02\u0D9D\u0DA1\x074\x02" +
		"\x02\u0D9E\u0D9F\x073\x02\x02\u0D9F\u0DA1\x07\u014D\x02\x02\u0DA0\u0D9B" +
		"\x03\x02\x02\x02\u0DA0\u0D9D\x03\x02\x02\x02\u0DA0\u0D9E\x03\x02\x02\x02" +
		"\u0DA1\u0DA6\x03\x02\x02\x02\u0DA2\u0DA3\x07\xCF\x02\x02\u0DA3\u0DA7\x05" +
		"\u030C\u0187\x02\u0DA4\u0DA5\x07\u0198\x02\x02\u0DA5\u0DA7\x05\u02A6\u0154" +
		"\x02\u0DA6\u0DA2\x03\x02\x02\x02\u0DA6\u0DA4\x03\x02\x02\x02\u0DA6\u0DA7" +
		"\x03\x02\x02\x02\u0DA7\u018F\x03\x02\x02\x02\u0DA8\u0DA9\x07\u0152\x02" +
		"\x02\u0DA9\u0DAE\x07:\x02\x02\u0DAA\u0DAB\x07\xCF\x02\x02\u0DAB\u0DAF" +
		"\x05\u030C\u0187\x02\u0DAC\u0DAD\x07\u0198\x02\x02\u0DAD\u0DAF\x05\u02A6" +
		"\u0154\x02\u0DAE\u0DAA\x03\x02\x02\x02\u0DAE\u0DAC\x03\x02\x02\x02\u0DAE" +
		"\u0DAF\x03\x02\x02\x02\u0DAF\u0191\x03\x02\x02\x02\u0DB0\u0DB1\x07\u0152" +
		"\x02\x02\u0DB1\u0DB4\x07a\x02\x02\u0DB2\u0DB3\t\x02\x02\x02\u0DB3\u0DB5" +
		"\x05\u032C\u0197\x02\u0DB4\u0DB2\x03\x02\x02\x02\u0DB4\u0DB5\x03\x02\x02" +
		"\x02\u0DB5\u0193\x03\x02\x02\x02\u0DB6\u0DB7\x07\u0152\x02\x02\u0DB7\u0DB8" +
		"\x07n\x02\x02\u0DB8\u0DB9\x07\u0104\x02\x02\u0DB9\u0DBC\x07\u0167\x02" +
		"\x02\u0DBA\u0DBB\t\x02\x02\x02\u0DBB\u0DBD\x05\u032C\u0197\x02\u0DBC\u0DBA" +
		"\x03\x02\x02\x02\u0DBC\u0DBD\x03\x02\x02\x02\u0DBD\u0195\x03\x02\x02\x02" +
		"\u0DBE\u0DBF\x07\u0152\x02\x02\u0DBF\u0DC2\x07v\x02\x02\u0DC0\u0DC1\t" +
		"\x02\x02\x02\u0DC1\u0DC3\x05\u032C\u0197\x02\u0DC2\u0DC0\x03\x02\x02\x02" +
		"\u0DC2\u0DC3\x03\x02\x02\x02\u0DC3\u0DC8\x03\x02\x02\x02\u0DC4\u0DC5\x07" +
		"\xCF\x02\x02\u0DC5\u0DC9\x05\u030C\u0187\x02\u0DC6\u0DC7\x07\u0198\x02" +
		"\x02\u0DC7\u0DC9\x05\u02A6\u0154\x02\u0DC8\u0DC4\x03\x02\x02\x02\u0DC8" +
		"\u0DC6\x03\x02\x02\x02\u0DC8\u0DC9\x03\x02\x02\x02\u0DC9\u0197\x03\x02" +
		"\x02\x02\u0DCA\u0DCB\x07\u0152\x02\x02\u0DCB\u0DCC\x07s\x02\x02\u0DCC" +
		"\u0199\x03\x02\x02\x02\u0DCD\u0DCE\x07\u0152\x02\x02\u0DCE\u0DCF\x07\x91" +
		"\x02\x02\u0DCF\u019B\x03\x02\x02\x02\u0DD0\u0DD1\x07\u0152\x02\x02\u0DD1" +
		"\u0DD2\x07\u010E\x02\x02\u0DD2\u019D\x03\x02\x02\x02\u0DD3\u0DD4\x07\u0152" +
		"\x02\x02\u0DD4\u0DD5\x07\u0131\x02\x02\u0DD5\u019F\x03\x02\x02\x02\u0DD6" +
		"\u0DD7\x07\u0152\x02\x02\u0DD7\u0DD8\x07\xFB\x02\x02\u0DD8\u0DD9\x07\u0167" +
		"\x02\x02\u0DD9\u01A1\x03\x02\x02\x02\u0DDA\u0DDB\x07\u0152\x02\x02\u0DDB" +
		"\u0DDC\x07\u0113\x02\x02\u0DDC\u01A3\x03\x02\x02\x02\u0DDD\u0DDE\x07\u0152" +
		"\x02\x02\u0DDE\u0DDF\t\x13\x02\x02\u0DDF\u0DE4\x07\u0158\x02\x02\u0DE0" +
		"\u0DE1\x07\xCF\x02\x02\u0DE1\u0DE5\x05\u030C\u0187\x02\u0DE2\u0DE3\x07" +
		"\u0198\x02\x02\u0DE3\u0DE5\x05\u02A6\u0154\x02\u0DE4\u0DE0\x03\x02\x02" +
		"\x02\u0DE4\u0DE2\x03\x02\x02\x02\u0DE4\u0DE5\x03\x02\x02\x02\u0DE5\u01A5" +
		"\x03\x02\x02\x02\u0DE6\u0DE7\x07\u0152\x02\x02\u0DE7\u0DE8\x07\u0114\x02" +
		"\x02\u0DE8\u0DE9\x05\u030C\u0187\x02\u0DE9\u01A7\x03\x02\x02\x02\u0DEA" +
		"\u0DEC\x07\u0152\x02\x02\u0DEB\u0DED\x07\x92\x02\x02\u0DEC\u0DEB\x03\x02" +
		"\x02\x02\u0DEC\u0DED\x03\x02\x02\x02\u0DED\u0DEE\x03\x02\x02\x02\u0DEE" +
		"\u0DEF\x07\u0116\x02\x02\u0DEF\u01A9\x03\x02\x02\x02\u0DF0\u0DF1\x07\u0152" +
		"\x02\x02\u0DF1\u0DF4\x07\u0118\x02\x02\u0DF2\u0DF3\x07\xD0\x02\x02\u0DF3" +
		"\u0DF5\x07\u01BA\x02\x02\u0DF4\u0DF2\x03\x02\x02\x02\u0DF4\u0DF5\x03\x02" +
		"\x02\x02\u0DF5\u01AB\x03\x02\x02\x02\u0DF6\u0DF8\x07\u0152\x02\x02\u0DF7" +
		"\u0DF9\x05\u0304\u0183\x02\u0DF8\u0DF7\x03\x02\x02\x02\u0DF8\u0DF9\x03" +
		"\x02\x02\x02\u0DF9\u0DFA\x03\x02\x02\x02\u0DFA\u0DFF\x07\u0158\x02\x02" +
		"\u0DFB\u0DFC\x07\xCF\x02\x02\u0DFC\u0E00\x05\u030C\u0187\x02\u0DFD\u0DFE" +
		"\x07\u0198\x02\x02\u0DFE\u0E00\x05\u02A6\u0154\x02\u0DFF\u0DFB\x03\x02" +
		"\x02\x02\u0DFF\u0DFD\x03\x02\x02\x02\u0DFF\u0E00\x03\x02\x02\x02\u0E00" +
		"\u01AD\x03\x02\x02\x02\u0E01\u0E02\x07\u0152\x02\x02\u0E02\u0E03\x07\u0168" +
		"\x02\x02\u0E03\u0E1F\x07\u01BA\x02\x02\u0E04\u0E05\x07\u0152\x02\x02\u0E05" +
		"\u0E06\x07\u0168\x02\x02\u0E06\u0E07\x07\x8F\x02\x02\u0E07\u0E09\x05\u032C" +
		"\u0197\x02\u0E08\u0E0A\x05\u0296\u014C\x02\u0E09\u0E08\x03\x02\x02\x02" +
		"\u0E09\u0E0A\x03\x02\x02\x02\u0E0A\u0E0D\x03\x02\x02\x02\u0E0B\u0E0C\x07" +
		"\u0198\x02\x02\u0E0C\u0E0E\x05\u02A6\u0154\x02\u0E0D\u0E0B\x03\x02\x02" +
		"\x02\u0E0D\u0E0E\x03\x02\x02\x02\u0E0E\u0E19\x03\x02\x02\x02\u0E0F\u0E10" +
		"\x07\u0100\x02\x02\u0E10\u0E11\x07*\x02\x02\u0E11\u0E16\x05\u026E\u0138" +
		"\x02\u0E12\u0E13\x07\u01CC\x02\x02\u0E13\u0E15\x05\u026E\u0138\x02\u0E14" +
		"\u0E12\x03\x02\x02\x02\u0E15\u0E18\x03\x02\x02\x02\u0E16\u0E14\x03\x02" +
		"\x02\x02\u0E16\u0E17\x03\x02\x02\x02\u0E17\u0E1A\x03\x02\x02\x02\u0E18" +
		"\u0E16\x03\x02\x02\x02\u0E19\u0E0F\x03\x02\x02\x02\u0E19\u0E1A\x03\x02" +
		"\x02\x02\u0E1A\u0E1C\x03\x02\x02\x02\u0E1B\u0E1D\x05\u0270\u0139\x02\u0E1C" +
		"\u0E1B\x03\x02\x02\x02\u0E1C\u0E1D\x03\x02\x02\x02\u0E1D\u0E1F\x03\x02" +
		"\x02\x02\u0E1E\u0E01\x03\x02\x02\x02\u0E1E\u0E04\x03\x02\x02\x02\u0E1F" +
		"\u01AF\x03\x02\x02\x02\u0E20\u0E21\x07\u0152\x02\x02\u0E21\u0E24\x07\u0173" +
		"\x02\x02\u0E22\u0E23\t\x02\x02\x02\u0E23\u0E25\x05\u032C\u0197\x02\u0E24" +
		"\u0E22\x03\x02\x02\x02\u0E24\u0E25\x03\x02\x02\x02\u0E25\u0E28\x03\x02" +
		"\x02\x02\u0E26\u0E27\x07\u0198\x02\x02\u0E27\u0E29\x05\u02A6\u0154\x02" +
		"\u0E28\u0E26\x03\x02\x02\x02\u0E28\u0E29\x03\x02\x02\x02\u0E29\u01B1\x03" +
		"\x02\x02\x02\u0E2A\u0E2C\x07\u0152\x02\x02\u0E2B\u0E2D\x07\x92\x02\x02" +
		"\u0E2C\u0E2B\x03\x02\x02\x02\u0E2C\u0E2D\x03\x02\x02\x02\u0E2D\u0E2E\x03" +
		"\x02\x02\x02\u0E2E\u0E31\x07\u0176\x02\x02\u0E2F\u0E30\t\x02\x02\x02\u0E30" +
		"\u0E32\x05\u032C\u0197\x02\u0E31\u0E2F\x03\x02\x02\x02\u0E31\u0E32\x03" +
		"\x02\x02\x02\u0E32\u0E37\x03\x02\x02\x02\u0E33\u0E34\x07\xCF\x02\x02\u0E34" +
		"\u0E38\x05\u030C\u0187\x02\u0E35\u0E36\x07\u0198\x02\x02\u0E36\u0E38\x05" +
		"\u02A6\u0154\x02\u0E37\u0E33\x03\x02\x02\x02\u0E37\u0E35\x03\x02\x02\x02" +
		"\u0E37\u0E38\x03\x02\x02\x02\u0E38\u01B3\x03\x02\x02\x02\u0E39\u0E3A\x07" +
		"\u0152\x02\x02\u0E3A\u0E3D\x07\u011A\x02\x02\u0E3B\u0E3C\x07\x8B\x02\x02" +
		"\u0E3C\u0E3E\x05\u030C\u0187\x02\u0E3D\u0E3B\x03\x02\x02\x02\u0E3D\u0E3E" +
		"\x03\x02\x02\x02\u0E3E\u0E41\x03\x02\x02\x02\u0E3F\u0E40\x07\xCF\x02\x02" +
		"\u0E40\u0E42\x05\u030C\u0187\x02\u0E41\u0E3F\x03\x02\x02\x02\u0E41\u0E42" +
		"\x03\x02\x02\x02\u0E42\u01B5\x03\x02\x02\x02\u0E43\u0E45\x07\u0152\x02" +
		"\x02\u0E44\u0E46\x05\u0304\u0183\x02\u0E45\u0E44\x03\x02\x02\x02\u0E45" +
		"\u0E46\x03\x02\x02\x02\u0E46\u0E47\x03\x02\x02\x02\u0E47\u0E4C\x07\u018D" +
		"\x02\x02\u0E48\u0E49\x07\xCF\x02\x02\u0E49\u0E4D\x05\u030C\u0187\x02\u0E4A" +
		"\u0E4B\x07\u0198\x02\x02\u0E4B\u0E4D\x05\u02A6\u0154\x02\u0E4C\u0E48\x03" +
		"\x02\x02\x02\u0E4C\u0E4A\x03\x02\x02\x02\u0E4C\u0E4D\x03\x02\x02\x02\u0E4D" +
		"\u01B7\x03\x02\x02\x02\u0E4E\u0E4F\x07\u0152\x02\x02\u0E4F\u0E51\t\x14" +
		"\x02\x02\u0E50\u0E52\x05\u0270\u0139\x02\u0E51\u0E50\x03\x02\x02\x02\u0E51" +
		"\u0E52\x03\x02\x02\x02\u0E52\u01B9\x03\x02\x02\x02\u0E53\u0E54\x07\x9E" +
		"\x02\x02\u0E54\u0E55\x05\u0332\u019A\x02\u0E55\u01BB\x03\x02\x02\x02\u0E56" +
		"\u0E57\x07I\x02\x02\u0E57\u0E5B\x07\u0186\x02\x02\u0E58\u0E59\x07\xA6" +
		"\x02\x02\u0E59\u0E5A\x07\xF1\x02\x02\u0E5A\u0E5C\x07y\x02\x02\u0E5B\u0E58" +
		"\x03\x02\x02\x02\u0E5B\u0E5C\x03\x02\x02\x02\u0E5C\u0E5D\x03\x02\x02\x02" +
		"\u0E5D\u0E5F\x05\u0338\u019D\x02\u0E5E\u0E60\x05\u01F4\xFB\x02\u0E5F\u0E5E" +
		"\x03\x02\x02\x02\u0E5F\u0E60\x03\x02\x02\x02\u0E60\u0E64\x03\x02\x02\x02" +
		"\u0E61\u0E62\x07`\x02\x02\u0E62\u0E63\x07\u013B\x02\x02\u0E63\u0E65\x05" +
		"\u0254\u012B\x02\u0E64\u0E61\x03\x02\x02\x02\u0E64\u0E65\x03\x02\x02\x02" +
		"\u0E65\u01BD\x03\x02\x02\x02\u0E66\u0E67\x07k\x02\x02\u0E67\u0E6A\x07" +
		"\u0186\x02\x02\u0E68\u0E69\x07\xA6\x02\x02\u0E69\u0E6B\x07y\x02\x02\u0E6A" +
		"\u0E68\x03\x02\x02\x02\u0E6A\u0E6B\x03\x02\x02\x02\u0E6B\u0E6C\x03\x02" +
		"\x02\x02\u0E6C\u0E6D\x05\u0338\u019D\x02\u0E6D\u01BF\x03\x02\x02\x02\u0E6E" +
		"\u0E6F\x07\v\x02\x02\u0E6F\u0E72\x07\u0186\x02\x02\u0E70\u0E71\x07\xA6" +
		"\x02\x02\u0E71\u0E73\x07y\x02\x02\u0E72\u0E70\x03\x02\x02\x02\u0E72\u0E73" +
		"\x03\x02\x02\x02\u0E73\u0E74\x03\x02\x02\x02\u0E74\u0E75\x05\u0338\u019D" +
		"\x02\u0E75\u0E76\x05\u01F4\xFB\x02\u0E76\u0E86\x03\x02\x02\x02\u0E77\u0E78" +
		"\x07\v\x02\x02\u0E78\u0E7B\x07\u0186\x02\x02\u0E79\u0E7A\x07\xA6\x02\x02" +
		"\u0E7A\u0E7C\x07y\x02\x02\u0E7B\u0E79\x03\x02\x02\x02\u0E7B\u0E7C\x03" +
		"\x02\x02\x02\u0E7C\u0E7D\x03\x02\x02\x02\u0E7D\u0E7E\x05\u0338\u019D\x02" +
		"\u0E7E\u0E7F\x07`\x02\x02\u0E7F\u0E83\x07\u013B\x02\x02\u0E80\u0E84\x07" +
		"\xF0\x02\x02\u0E81\u0E84\x07\n\x02\x02\u0E82\u0E84\x05\u0254\u012B\x02" +
		"\u0E83\u0E80\x03\x02\x02\x02\u0E83\u0E81\x03\x02\x02\x02\u0E83\u0E82\x03" +
		"\x02\x02\x02\u0E84\u0E86\x03\x02\x02\x02\u0E85\u0E6E\x03\x02\x02\x02\u0E85" +
		"\u0E77\x03\x02\x02\x02\u0E86\u01C1\x03\x02\x02\x02\u0E87\u0E88\x07\u0152" +
		"\x02\x02\u0E88\u0E89\t\x15\x02\x02\u0E89\u01C3\x03\x02\x02\x02\u0E8A\u0E8B" +
		"\x07\u0152\x02\x02\u0E8B\u0E8C\x07\n\x02\x02\u0E8C\u0E94\x07\x16\x02\x02" +
		"\u0E8D\u0E8E\x07\u0152\x02\x02\u0E8E\u0E91\x07\x16\x02\x02\u0E8F\u0E90" +
		"\x07\x8B\x02\x02\u0E90\u0E92\x05\u0338\u019D\x02\u0E91\u0E8F\x03\x02\x02" +
		"\x02\u0E91\u0E92\x03\x02\x02\x02\u0E92\u0E94\x03\x02\x02\x02\u0E93\u0E8A" +
		"\x03\x02\x02\x02\u0E93\u0E8D\x03\x02\x02\x02\u0E94\u01C5\x03\x02\x02\x02" +
		"\u0E95\u0E96\x07x\x02\x02\u0E96\u0E97\x07\x12\x02\x02\u0E97\u0E9B\x05" +
		"\u0338\u019D\x02\u0E98\u0E99\x07\u019A\x02\x02\u0E99\u0E9A\x07\xED\x02" +
		"\x02\u0E9A\u0E9C\x07\u0138\x02\x02\u0E9B\u0E98\x03\x02\x02\x02\u0E9B\u0E9C" +
		"\x03\x02\x02\x02\u0E9C\u01C7\x03\x02\x02\x02\u0E9D\u0E9E\x07I\x02\x02" +
		"\u0E9E\u0EA2\x07\u013B\x02\x02\u0E9F\u0EA0\x07\xA6\x02\x02\u0EA0\u0EA1" +
		"\x07\xF1\x02\x02\u0EA1\u0EA3\x07y\x02\x02\u0EA2\u0E9F\x03\x02\x02\x02" +
		"\u0EA2\u0EA3\x03\x02\x02\x02\u0EA3\u0EA4\x03\x02\x02\x02\u0EA4\u0EA6\x05" +
		"\u0254\u012B\x02\u0EA5\u0EA7\x05\u0306\u0184\x02\u0EA6\u0EA5\x03\x02\x02" +
		"\x02\u0EA6\u0EA7\x03\x02\x02\x02\u0EA7\u01C9\x03\x02\x02\x02\u0EA8\u0EA9" +
		"\x07\v\x02\x02\u0EA9\u0EAC\x07\u013B\x02\x02\u0EAA\u0EAB\x07\xA6\x02\x02" +
		"\u0EAB\u0EAD\x07y\x02\x02\u0EAC\u0EAA\x03\x02\x02\x02\u0EAC\u0EAD\x03" +
		"\x02\x02\x02\u0EAD\u0EAE\x03\x02\x02\x02\u0EAE\u0EAF\x05\u0254\u012B\x02" +
		"\u0EAF\u0EB0\x07\u014D\x02\x02\u0EB0\u0EB1\x07=\x02\x02\u0EB1\u0EB2\x07" +
		"\u01A1\x02\x02\u0EB2\u0EB3\x05\u030C\u0187\x02\u0EB3\u01CB\x03\x02\x02" +
		"\x02\u0EB4\u0EB5\x07k\x02\x02\u0EB5\u0EB8\x07\u013B\x02\x02\u0EB6\u0EB7" +
		"\x07\xA6\x02\x02\u0EB7\u0EB9\x07y\x02\x02\u0EB8\u0EB6\x03\x02\x02\x02" +
		"\u0EB8\u0EB9\x03\x02\x02\x02\u0EB9\u0EBA\x03\x02\x02\x02\u0EBA\u0EBB\x05" +
		"\u0254\u012B\x02\u0EBB\u01CD\x03\x02\x02\x02\u0EBC\u0EBD\x07\u0152\x02" +
		"\x02\u0EBD\u0EBE\x07\u013C\x02\x02\u0EBE\u01CF\x03\x02\x02\x02\u0EBF\u0EC0" +
		"\x07\x96\x02\x02\u0EC0\u0EC1\x05\u0334\u019B\x02\u0EC1\u0EC3\x07\u0174" +
		"\x02\x02\u0EC2\u0EC4\x07\u0186\x02\x02\u0EC3\u0EC2\x03\x02\x02\x02\u0EC3" +
		"\u0EC4\x03\x02\x02\x02\u0EC4\u0EC5\x03\x02\x02\x02\u0EC5\u0EC6\x05\u0338" +
		"\u019D\x02\u0EC6\u0ECE\x03\x02\x02\x02\u0EC7\u0EC8\x07\x96\x02\x02\u0EC8" +
		"\u0EC9\x05\u0334\u019B\x02\u0EC9\u0ECA\x07\u0174\x02\x02\u0ECA\u0ECB\x07" +
		"\u013B\x02\x02\u0ECB\u0ECC\x05\u0332\u019A\x02\u0ECC\u0ECE\x03\x02\x02" +
		"\x02\u0ECD\u0EBF\x03\x02\x02\x02\u0ECD\u0EC7\x03\x02\x02\x02\u0ECE\u01D1" +
		"\x03\x02\x02\x02\u0ECF\u0ED0\x07\u0137\x02\x02\u0ED0\u0ED1\x05\u0334\u019B" +
		"\x02\u0ED1\u0ED3\x07\x8F\x02\x02\u0ED2\u0ED4\x07\u0186\x02\x02\u0ED3\u0ED2" +
		"\x03\x02\x02\x02\u0ED3\u0ED4\x03\x02\x02\x02\u0ED4\u0ED5\x03\x02\x02\x02" +
		"\u0ED5\u0ED6\x05\u0338\u019D\x02\u0ED6\u0EDE\x03\x02\x02\x02\u0ED7\u0ED8" +
		"\x07\u0137\x02\x02\u0ED8\u0ED9\x05\u0334\u019B\x02\u0ED9\u0EDA";
	private static readonly _serializedATNSegment8: string =
		"\x07\x8F\x02\x02\u0EDA\u0EDB\x07\u013B\x02\x02\u0EDB\u0EDC\x05\u0332\u019A" +
		"\x02\u0EDC\u0EDE\x03\x02\x02\x02\u0EDD\u0ECF\x03\x02\x02\x02\u0EDD\u0ED7" +
		"\x03\x02\x02\x02\u0EDE\u01D3\x03\x02\x02\x02\u0EDF\u0EE0\x07\u014D\x02" +
		"\x02\u0EE0\u0EE1\x07\u013B\x02\x02\u0EE1\u0EF0\x07`\x02\x02\u0EE2\u0EE3" +
		"\x07\u014D\x02\x02\u0EE3\u0EE4\x07\u013B\x02\x02\u0EE4\u0EF0\x07\xF0\x02" +
		"\x02\u0EE5\u0EE6\x07\u014D\x02\x02\u0EE6\u0EE7\x07\u013B\x02\x02\u0EE7" +
		"\u0EEA\x07\n\x02\x02\u0EE8\u0EE9\x07w\x02\x02\u0EE9\u0EEB\x05\u0254\u012B" +
		"\x02\u0EEA\u0EE8\x03\x02\x02\x02\u0EEA\u0EEB\x03\x02\x02\x02\u0EEB\u0EF0" +
		"\x03\x02\x02\x02\u0EEC\u0EED\x07\u014D\x02\x02\u0EED\u0EEE\x07\u013B\x02" +
		"\x02\u0EEE\u0EF0\x05\u0254\u012B\x02\u0EEF\u0EDF\x03\x02\x02\x02\u0EEF" +
		"\u0EE2\x03\x02\x02\x02\u0EEF\u0EE5\x03\x02\x02\x02\u0EEF\u0EEC\x03\x02" +
		"\x02\x02\u0EF0\u01D5\x03\x02\x02\x02\u0EF1\u0EF2\x07\u014D\x02\x02\u0EF2" +
		"\u0EF3\x07`\x02\x02\u0EF3\u0EF7\x07\u013B\x02\x02\u0EF4\u0EF8\x07\xF0" +
		"\x02\x02\u0EF5\u0EF8\x07\n\x02\x02\u0EF6\u0EF8\x05\u0254\u012B\x02\u0EF7" +
		"\u0EF4\x03\x02\x02\x02\u0EF7\u0EF5\x03\x02\x02\x02\u0EF7\u0EF6\x03\x02" +
		"\x02\x02\u0EF8\u0EF9\x03\x02\x02\x02\u0EF9\u0EFA\x07\u0174\x02\x02\u0EFA" +
		"\u0EFB\x05\u0338\u019D\x02\u0EFB\u01D7\x03\x02\x02\x02\u0EFC\u0EFE\x07" +
		"\u0186\x02\x02\u0EFD\u0EFC\x03\x02\x02\x02\u0EFD\u0EFE\x03\x02\x02\x02" +
		"\u0EFE\u0EFF\x03\x02\x02\x02\u0EFF\u0F03\x05\u0338\u019D\x02\u0F00\u0F01" +
		"\x07\u013B\x02\x02\u0F01\u0F03\x05\u0332\u019A\x02\u0F02\u0EFD\x03\x02" +
		"\x02\x02\u0F02\u0F00\x03\x02\x02\x02\u0F03\u01D9\x03\x02\x02\x02\u0F04" +
		"\u0F05\x07\x96\x02\x02\u0F05\u0F06\x07\xA7\x02\x02\u0F06\u0F07\x07\xF9" +
		"\x02\x02\u0F07\u0F08\x07\u0186\x02\x02\u0F08\u0F0D\x05\u0338\u019D\x02" +
		"\u0F09\u0F0A\x07\u01CC\x02\x02\u0F0A\u0F0C\x05\u0338\u019D\x02\u0F0B\u0F09" +
		"\x03\x02\x02\x02\u0F0C\u0F0F\x03\x02\x02\x02\u0F0D\u0F0B\x03\x02\x02\x02" +
		"\u0F0D\u0F0E\x03\x02\x02\x02\u0F0E\u0F10\x03\x02\x02\x02\u0F0F\u0F0D\x03" +
		"\x02\x02\x02\u0F10\u0F11\x07\u0174\x02\x02\u0F11\u0F15\x05\u01D8\xED\x02" +
		"\u0F12\u0F13\x07\u019A\x02\x02\u0F13\u0F14\x07\x96\x02\x02\u0F14\u0F16" +
		"\x07\xFE\x02\x02\u0F15\u0F12\x03\x02\x02\x02\u0F15\u0F16\x03\x02\x02\x02" +
		"\u0F16\u0F5D\x03\x02\x02\x02\u0F17\u0F18\x07\x96\x02\x02\u0F18\u0F19\x05" +
		"\u01FC\xFF\x02\u0F19\u0F1A\x07\xF9\x02\x02\u0F1A\u0F1B\x05\u01F8\xFD\x02" +
		"\u0F1B\u0F1C\x07\u0174\x02\x02\u0F1C\u0F20\x05\u01D8\xED\x02\u0F1D\u0F1E" +
		"\x07\u019A\x02\x02\u0F1E\u0F1F\x07\x96\x02\x02\u0F1F\u0F21\x07\xFE\x02" +
		"\x02\u0F20\u0F1D\x03\x02\x02\x02\u0F20\u0F21\x03\x02\x02\x02\u0F21\u0F5D" +
		"\x03\x02\x02\x02\u0F22\u0F23\x07\x96\x02\x02\u0F23\u0F24\x05\u01FC\xFF" +
		"\x02\u0F24\u0F26\x07\xF9\x02\x02\u0F25\u0F27\x07\x95\x02\x02\u0F26\u0F25" +
		"\x03\x02\x02\x02\u0F26\u0F27\x03\x02\x02\x02\u0F27\u0F28\x03\x02\x02\x02" +
		"\u0F28\u0F29\x07\x93\x02\x02\u0F29\u0F2A\x05\u01FA\xFE\x02\u0F2A\u0F2B" +
		"\x07\u0174\x02\x02\u0F2B\u0F2F\x05\u01D8\xED\x02\u0F2C\u0F2D\x07\u019A" +
		"\x02\x02\u0F2D\u0F2E\x07\x96\x02\x02\u0F2E\u0F30\x07\xFE\x02\x02\u0F2F" +
		"\u0F2C\x03\x02\x02\x02\u0F2F\u0F30\x03\x02\x02\x02\u0F30\u0F5D\x03\x02" +
		"\x02\x02\u0F31\u0F32\x07\x96\x02\x02\u0F32\u0F33\x05\u01FC\xFF\x02\u0F33" +
		"\u0F34\x07\xF9\x02\x02\u0F34\u0F35\x07\u0162\x02\x02\u0F35\u0F36\x07\u0174" +
		"\x02\x02\u0F36\u0F3A\x05\u01D8\xED\x02\u0F37\u0F38\x07\u019A\x02\x02\u0F38" +
		"\u0F39\x07\x96\x02\x02\u0F39\u0F3B\x07\xFE\x02\x02\u0F3A\u0F37\x03\x02" +
		"\x02\x02\u0F3A\u0F3B\x03\x02\x02\x02\u0F3B\u0F5D\x03\x02\x02\x02\u0F3C" +
		"\u0F3D\x07\x96\x02\x02\u0F3D\u0F3E\x05\u01FC\xFF\x02\u0F3E\u0F3F\x07\xF9" +
		"\x02\x02\u0F3F\u0F40\x05\u0200\u0101\x02\u0F40\u0F41\x05\u01F8\xFD\x02" +
		"\u0F41\u0F42\x07\u0174\x02\x02\u0F42\u0F46\x05\u01D8\xED\x02\u0F43\u0F44" +
		"\x07\u019A\x02\x02\u0F44\u0F45\x07\x96\x02\x02\u0F45\u0F47\x07\xFE\x02" +
		"\x02\u0F46\u0F43\x03\x02\x02\x02\u0F46\u0F47\x03\x02\x02\x02\u0F47\u0F5D" +
		"\x03\x02\x02\x02\u0F48\u0F49\x07\x96\x02\x02\u0F49\u0F4A\x05\u01FC\xFF" +
		"\x02\u0F4A\u0F4B\x07\xF9\x02\x02\u0F4B\u0F4C\x07\n\x02\x02\u0F4C\u0F53" +
		"\x05\u0202\u0102\x02\u0F4D\u0F4E\x07\xAB\x02\x02\u0F4E\u0F4F\x07\n\x02" +
		"\x02\u0F4F\u0F54\x07V\x02\x02\u0F50\u0F51\x07\xAB\x02\x02\u0F51\u0F52" +
		"\x07U\x02\x02\u0F52\u0F54\x05\u0332\u019A\x02\u0F53\u0F4D\x03\x02\x02" +
		"\x02\u0F53\u0F50\x03\x02\x02\x02\u0F53\u0F54\x03\x02\x02\x02\u0F54\u0F55" +
		"\x03\x02\x02\x02\u0F55\u0F56\x07\u0174\x02\x02\u0F56\u0F5A\x05\u01D8\xED" +
		"\x02\u0F57\u0F58\x07\u019A\x02\x02\u0F58\u0F59\x07\x96\x02\x02\u0F59\u0F5B" +
		"\x07\xFE\x02\x02\u0F5A\u0F57\x03\x02\x02\x02\u0F5A\u0F5B\x03\x02\x02\x02" +
		"\u0F5B\u0F5D\x03\x02\x02\x02\u0F5C\u0F04\x03\x02\x02\x02\u0F5C\u0F17\x03" +
		"\x02\x02\x02\u0F5C\u0F22\x03\x02\x02\x02\u0F5C\u0F31\x03\x02\x02\x02\u0F5C" +
		"\u0F3C\x03\x02\x02\x02\u0F5C\u0F48\x03\x02\x02\x02\u0F5D\u01DB\x03\x02" +
		"\x02\x02\u0F5E\u0F5F\x07\u0137\x02\x02\u0F5F\u0F60\x07\xA7\x02\x02\u0F60" +
		"\u0F61\x07\xF9\x02\x02\u0F61\u0F62\x07\u0186\x02\x02\u0F62\u0F67\x05\u0338" +
		"\u019D\x02\u0F63\u0F64\x07\u01CC\x02\x02\u0F64\u0F66\x05\u0338\u019D\x02" +
		"\u0F65\u0F63\x03\x02\x02\x02\u0F66\u0F69\x03\x02\x02\x02\u0F67\u0F65\x03" +
		"\x02\x02\x02\u0F67\u0F68\x03\x02\x02\x02\u0F68\u0F6A\x03\x02\x02\x02\u0F69" +
		"\u0F67\x03\x02\x02\x02\u0F6A\u0F6B\x07\x8F\x02\x02\u0F6B\u0F6C\x05\u01D8" +
		"\xED\x02\u0F6C\u0F9F\x03\x02\x02\x02\u0F6D\u0F6E\x07\u0137\x02\x02\u0F6E" +
		"\u0F6F\x05\u01FC\xFF\x02\u0F6F\u0F70\x07\xF9\x02\x02\u0F70\u0F71\x05\u01F8" +
		"\xFD\x02\u0F71\u0F72\x07\x8F\x02\x02\u0F72\u0F73\x05\u01D8\xED\x02\u0F73" +
		"\u0F9F\x03\x02\x02\x02\u0F74\u0F75\x07\u0137\x02\x02\u0F75\u0F76\x05\u01FC" +
		"\xFF\x02\u0F76\u0F78\x07\xF9\x02\x02\u0F77\u0F79\x07\x95\x02\x02\u0F78" +
		"\u0F77\x03\x02\x02\x02\u0F78\u0F79\x03\x02\x02\x02\u0F79\u0F7A\x03\x02" +
		"\x02\x02\u0F7A\u0F7B\x07\x93\x02\x02\u0F7B\u0F7C\x05\u01FA\xFE\x02\u0F7C" +
		"\u0F7D\x07\x8F\x02\x02\u0F7D\u0F7E\x05\u01D8\xED\x02\u0F7E\u0F9F\x03\x02" +
		"\x02\x02\u0F7F\u0F80\x07\u0137\x02\x02\u0F80\u0F81\x05\u01FC\xFF\x02\u0F81" +
		"\u0F82\x07\xF9\x02\x02\u0F82\u0F83\x07\u0162\x02\x02\u0F83\u0F84\x07\x8F" +
		"\x02\x02\u0F84\u0F85\x05\u01D8\xED\x02\u0F85\u0F9F\x03\x02\x02\x02\u0F86" +
		"\u0F87\x07\u0137\x02\x02\u0F87\u0F88\x05\u01FC\xFF\x02\u0F88\u0F89\x07" +
		"\xF9\x02\x02\u0F89\u0F8A\x05\u0200\u0101\x02\u0F8A\u0F8B\x05\u01F8\xFD" +
		"\x02\u0F8B\u0F8C\x07\x8F\x02\x02\u0F8C\u0F8D\x05\u01D8\xED\x02\u0F8D\u0F9F" +
		"\x03\x02\x02\x02\u0F8E\u0F8F\x07\u0137\x02\x02\u0F8F\u0F90\x05\u01FC\xFF" +
		"\x02\u0F90\u0F91\x07\xF9\x02\x02\u0F91\u0F92\x07\n\x02\x02\u0F92\u0F99" +
		"\x05\u0202\u0102\x02\u0F93\u0F94\x07\xAB\x02\x02\u0F94\u0F95\x07\n\x02" +
		"\x02\u0F95\u0F9A\x07V\x02\x02\u0F96\u0F97\x07\xAB\x02\x02\u0F97\u0F98" +
		"\x07U\x02\x02\u0F98\u0F9A\x05\u0332\u019A\x02\u0F99\u0F93\x03\x02\x02" +
		"\x02\u0F99\u0F96\x03\x02\x02\x02\u0F99\u0F9A\x03\x02\x02\x02\u0F9A\u0F9B" +
		"\x03\x02\x02\x02\u0F9B\u0F9C\x07\x8F\x02\x02\u0F9C\u0F9D\x05\u01D8\xED" +
		"\x02\u0F9D\u0F9F\x03\x02\x02\x02\u0F9E\u0F5E\x03\x02\x02\x02\u0F9E\u0F6D" +
		"\x03\x02\x02\x02\u0F9E\u0F74\x03\x02\x02\x02\u0F9E\u0F7F\x03\x02\x02\x02" +
		"\u0F9E\u0F86\x03\x02\x02\x02\u0F9E\u0F8E\x03\x02\x02\x02\u0F9F\u01DD\x03" +
		"\x02\x02\x02\u0FA0\u0FA1\x07\u0152\x02\x02\u0FA1\u0FAF\x07\x97\x02\x02" +
		"\u0FA2\u0FA3\x07\u0152\x02\x02\u0FA3\u0FA4\x07\x97\x02\x02\u0FA4\u0FA6" +
		"\x07\x8B\x02\x02\u0FA5\u0FA7\x07\u0186\x02\x02\u0FA6\u0FA5\x03\x02\x02" +
		"\x02\u0FA6\u0FA7\x03\x02\x02\x02\u0FA7\u0FA8\x03\x02\x02\x02\u0FA8\u0FAF" +
		"\x05\u0338\u019D\x02\u0FA9\u0FAA\x07\u0152\x02\x02\u0FAA\u0FAB\x07\x97" +
		"\x02\x02\u0FAB\u0FAC\x07\x8B\x02\x02\u0FAC\u0FAD\x07\u013B\x02\x02\u0FAD" +
		"\u0FAF\x05\u0332\u019A\x02\u0FAE\u0FA0\x03\x02\x02\x02\u0FAE\u0FA2\x03" +
		"\x02\x02\x02\u0FAE\u0FA9\x03\x02\x02\x02\u0FAF\u01DF\x03\x02\x02\x02\u0FB0" +
		"\u0FB1\x07I\x02\x02\u0FB1\u0FB2\x07\u0148\x02\x02\u0FB2\u0FB3\x07\xB6" +
		"\x02\x02\u0FB3\u0FB4\x05\u032E\u0198\x02\u0FB4\u0FB5\x05\u02FA\u017E\x02" +
		"\u0FB5\u01E1\x03\x02\x02\x02\u0FB6\u0FB7\x07\v\x02\x02\u0FB7\u0FB8\x07" +
		"\u0148\x02\x02\u0FB8\u0FB9\x07\xB6\x02\x02\u0FB9\u0FBA\x05\u032E\u0198" +
		"\x02\u0FBA\u0FBB\x07\u014D\x02\x02\u0FBB\u0FBC\x05\u02FE\u0180\x02\u0FBC" +
		"\u01E3\x03\x02\x02\x02\u0FBD\u0FBE\x07k\x02\x02\u0FBE\u0FBF\x07\u0148" +
		"\x02\x02\u0FBF\u0FC0\x07\xB6\x02\x02\u0FC0\u0FC1\x05\u032E\u0198\x02\u0FC1" +
		"\u01E5\x03\x02\x02\x02\u0FC2\u0FC3\x07\u0152\x02\x02\u0FC3\u0FC4\x07\u0148" +
		"\x02\x02\u0FC4\u0FC5\x07\xB7\x02\x02\u0FC5\u01E7\x03\x02\x02\x02\u0FC6" +
		"\u0FC7\x07\u0152\x02\x02\u0FC7\u0FC8\x07I\x02\x02\u0FC8\u0FC9\x07\u0148" +
		"\x02\x02\u0FC9\u0FCA\x07\xB6\x02\x02\u0FCA\u0FCB\x05\u032E\u0198\x02\u0FCB" +
		"\u01E9\x03\x02\x02\x02\u0FCC\u0FCD\x07I\x02\x02\u0FCD\u0FCE\x07\u013B" +
		"\x02\x02\u0FCE\u0FCF\x07\xDB\x02\x02\u0FCF\u0FD0\x05\u032E\u0198\x02\u0FD0" +
		"\u0FD1\x05\u02FA\u017E\x02\u0FD1\u01EB\x03\x02\x02\x02\u0FD2\u0FD3\x07" +
		"\v\x02\x02\u0FD3\u0FD4\x07\u013B\x02\x02\u0FD4\u0FD5\x07\xDB\x02\x02\u0FD5" +
		"\u0FD6\x05\u032E\u0198\x02\u0FD6\u0FD7\x07\u014D\x02\x02\u0FD7\u0FD8\x05" +
		"\u02FE\u0180\x02\u0FD8\u01ED\x03\x02\x02\x02\u0FD9\u0FDA\x07k\x02\x02" +
		"\u0FDA\u0FDB\x07\u013B\x02\x02\u0FDB\u0FDC\x07\xDB\x02\x02\u0FDC\u0FDD" +
		"\x05\u032E\u0198\x02\u0FDD\u01EF\x03\x02\x02\x02\u0FDE\u0FDF\x07\u0152" +
		"\x02\x02\u0FDF\u0FE0\x07\u013B\x02\x02\u0FE0\u0FE1\x07\xDC\x02\x02\u0FE1" +
		"\u01F1\x03\x02\x02\x02\u0FE2\u0FE3\x07\u0125\x02\x02\u0FE3\u0FE4\x07\n" +
		"\x02\x02\u0FE4\u0FE5\x07\u013B\x02\x02\u0FE5\u0FE6\x07\xDC\x02\x02\u0FE6" +
		"\u01F3\x03\x02\x02\x02\u0FE7\u0FE8\x07\xA5\x02\x02\u0FE8\u0FEA\x07*\x02" +
		"\x02\u0FE9\u0FEB\x07\u0106\x02\x02\u0FEA\u0FE9\x03\x02\x02\x02\u0FEA\u0FEB" +
		"\x03\x02\x02\x02\u0FEB\u0FEC\x03\x02\x02\x02\u0FEC\u0FF5\x05\u030C\u0187" +
		"\x02\u0FED\u0FEE\x07\xA5\x02\x02\u0FEE\u0FEF\x07\u019A\x02\x02\u0FEF\u0FF2" +
		"\x05\u0332\u019A\x02\u0FF0\u0FF1\t\x16\x02\x02\u0FF1\u0FF3\x05\u030C\u0187" +
		"\x02\u0FF2\u0FF0\x03\x02\x02\x02\u0FF2\u0FF3\x03\x02\x02\x02\u0FF3\u0FF5" +
		"\x03\x02\x02\x02\u0FF4\u0FE7\x03\x02\x02\x02\u0FF4\u0FED\x03\x02\x02\x02" +
		"\u0FF5\u01F5\x03\x02\x02\x02\u0FF6\u0FF9\x05\u0336\u019C\x02\u0FF7\u0FF8" +
		"\x07\u01CD\x02\x02\u0FF8\u0FFA\x05\u0336\u019C\x02\u0FF9\u0FF7\x03\x02" +
		"\x02\x02\u0FF9\u0FFA\x03\x02\x02\x02\u0FFA\u01F7\x03\x02\x02\x02\u0FFB" +
		"\u1000\x05\u01F6\xFC\x02\u0FFC\u0FFD\x07\u01CC\x02\x02\u0FFD\u0FFF\x05" +
		"\u01F6\xFC\x02\u0FFE\u0FFC\x03\x02\x02\x02\u0FFF\u1002\x03\x02\x02\x02" +
		"\u1000\u0FFE\x03\x02\x02\x02\u1000\u1001\x03\x02\x02\x02\u1001\u01F9\x03" +
		"\x02\x02\x02\u1002\u1000\x03\x02\x02\x02\u1003\u1004\x05\u032C\u0197\x02" +
		"\u1004\u1005\x07\u01CA\x02\x02\u1005\u1006\x05\u016E\xB8\x02\u1006\u100F" +
		"\x07\u01CB\x02\x02\u1007\u1008\x07\u01CC\x02\x02\u1008\u1009\x05\u032C" +
		"\u0197\x02\u1009\u100A\x07\u01CA\x02\x02\u100A\u100B\x05\u016E\xB8\x02" +
		"\u100B\u100C\x07\u01CB\x02\x02\u100C\u100E\x03\x02\x02\x02\u100D\u1007" +
		"\x03\x02\x02\x02\u100E\u1011\x03\x02\x02\x02\u100F\u100D\x03\x02\x02\x02" +
		"\u100F\u1010\x03\x02\x02\x02\u1010\u01FB\x03\x02\x02\x02\u1011\u100F\x03" +
		"\x02\x02\x02\u1012\u1017\x05\u01FE\u0100\x02\u1013\u1014\x07\u01CC\x02" +
		"\x02\u1014\u1016\x05\u01FE\u0100\x02\u1015\u1013\x03\x02\x02\x02\u1016" +
		"\u1019\x03\x02\x02\x02\u1017\u1015\x03\x02\x02\x02\u1017\u1018\x03\x02" +
		"\x02\x02\u1018\u01FD\x03\x02\x02\x02\u1019\u1017\x03\x02\x02\x02\u101A" +
		"\u101C\x07\n\x02\x02\u101B\u101D\x07\u0113\x02\x02\u101C\u101B\x03\x02" +
		"\x02\x02\u101C\u101D\x03\x02\x02\x02\u101D\u1044\x03\x02\x02\x02\u101E" +
		"\u1044\x07\v\x02\x02\u101F\u1044\x07\x0F\x02\x02\u1020\u1044\x07#\x02" +
		"\x02\u1021\u1032\x07I\x02\x02\u1022\u1033\x07U\x02\x02\u1023\u1033\x07" +
		"\u0166\x02\x02\u1024\u1033\x07\u018F\x02\x02\u1025\u1033\x07\x93\x02\x02" +
		"\u1026\u1027\x07\x95\x02\x02\u1027\u1033\x07\x93\x02\x02\u1028\u1029\x07" +
		"\xDE\x02\x02\u1029\u1033\x07\u018F\x02\x02\u102A\u1033\x07\u0132\x02\x02" +
		"\u102B\u102C\x07\u0132\x02\x02\u102C\u1033\x07\x98\x02\x02\u102D\u102E" +
		"\x07|\x02\x02\u102E\u1033\x07.\x02\x02\u102F\u1033\x07\u010F\x02\x02\u1030" +
		"\u1031\x07\u015A\x02\x02\u1031\u1033\x07\u0191\x02\x02\u1032\u1022\x03" +
		"\x02\x02\x02\u1032\u1023\x03\x02\x02\x02\u1032\u1024\x03\x02\x02\x02\u1032" +
		"\u1025\x03\x02\x02\x02\u1032\u1026\x03\x02\x02\x02\u1032\u1028\x03\x02" +
		"\x02\x02\u1032\u102A\x03\x02\x02\x02\u1032\u102B\x03\x02\x02\x02\u1032" +
		"\u102D\x03\x02\x02\x02\u1032\u102F\x03\x02\x02\x02\u1032\u1030\x03\x02" +
		"\x02\x02\u1033\u1044\x03\x02\x02\x02\u1034\u1044\x07a\x02\x02\u1035\u1044" +
		"\x07k\x02\x02\u1036\u1044\x07{\x02\x02\u1037\u1044\x07\x81\x02\x02\u1038" +
		"\u1044\x07\xA7\x02\x02\u1039\u1044\x07\xB3\x02\x02\u103A\u1044\x07\x96" +
		"\x02\x02\u103B\u1044\x07\xEE\x02\x02\u103C\u1044\x07\xFC\x02\x02\u103D" +
		"\u1044\x07\u010D\x02\x02\u103E\u1044\x07\u0130\x02\x02\u103F\u1044\x07" +
		"\u0125\x02\x02\u1040\u1044\x07\u0149\x02\x02\u1041\u1044\x07\u0183\x02" +
		"\x02\u1042\u1044\x07\u0184\x02\x02\u1043\u101A\x03\x02\x02\x02\u1043\u101E" +
		"\x03\x02\x02\x02\u1043\u101F\x03\x02\x02\x02\u1043\u1020\x03\x02\x02\x02" +
		"\u1043\u1021\x03\x02\x02\x02\u1043\u1034\x03\x02\x02\x02\u1043\u1035\x03" +
		"\x02\x02\x02\u1043\u1036\x03\x02\x02\x02\u1043\u1037\x03\x02\x02\x02\u1043" +
		"\u1038\x03\x02\x02\x02\u1043\u1039\x03\x02\x02\x02\u1043\u103A\x03\x02" +
		"\x02\x02\u1043\u103B\x03\x02\x02\x02\u1043\u103C\x03\x02\x02\x02\u1043" +
		"\u103D\x03\x02\x02\x02\u1043\u103E\x03\x02\x02\x02\u1043\u103F\x03\x02" +
		"\x02\x02\u1043\u1040\x03\x02\x02\x02\u1043\u1041\x03\x02\x02\x02\u1043" +
		"\u1042\x03\x02\x02\x02\u1044\u01FF\x03\x02\x02\x02\u1045\u1053\x07.\x02" +
		"\x02\u1046\u1053\x07U\x02\x02\u1047\u1048\x07\xDE\x02\x02\u1048\u1053" +
		"\x07\u018F\x02\x02\u1049\u1053\x07\u010F\x02\x02\u104A\u1053\x07\u0132" +
		"\x02\x02\u104B\u104C\x07\u0132\x02\x02\u104C\u1053\x07\x98\x02\x02\u104D" +
		"\u104E\x07\u015A\x02\x02\u104E\u1053\x07\u0191\x02\x02\u104F\u1053\x07" +
		"\u0162\x02\x02\u1050\u1053\x07\u0166\x02\x02\u1051\u1053\x07\u018F\x02" +
		"\x02\u1052\u1045\x03\x02\x02\x02\u1052\u1046\x03\x02\x02\x02\u1052\u1047" +
		"\x03\x02\x02\x02\u1052\u1049\x03\x02\x02\x02\u1052\u104A\x03\x02\x02\x02" +
		"\u1052\u104B\x03\x02\x02\x02\u1052\u104D\x03\x02\x02\x02\u1052\u104F\x03" +
		"\x02\x02\x02\u1052\u1050\x03\x02\x02\x02\u1052\u1051\x03\x02\x02\x02\u1053" +
		"\u0201\x03\x02\x02\x02\u1054\u1065\x07/\x02\x02\u1055\u1065\x07V\x02\x02" +
		"\u1056\u1065\x07\x94\x02\x02\u1057\u1058\x07\x95\x02\x02\u1058\u1065\x07" +
		"\x94\x02\x02\u1059\u105A\x07\xDE\x02\x02\u105A\u1065\x07\u0190\x02\x02" +
		"\u105B\u1065\x07\u0110\x02\x02\u105C\u1065\x07\u0133\x02\x02\u105D\u105E" +
		"\x07\u0132\x02\x02\u105E\u1065\x07\x99\x02\x02\u105F\u1060\x07\u015A\x02" +
		"\x02\u1060\u1065\x07\u0192\x02\x02\u1061\u1065\x07\u0167\x02\x02\u1062" +
		"\u1065\x07\u0187\x02\x02\u1063\u1065\x07\u0190\x02\x02\u1064\u1054\x03" +
		"\x02\x02\x02\u1064\u1055\x03\x02\x02\x02\u1064\u1056\x03\x02\x02\x02\u1064" +
		"\u1057\x03\x02\x02\x02\u1064\u1059\x03\x02\x02\x02\u1064\u105B\x03\x02" +
		"\x02\x02\u1064\u105C\x03\x02\x02\x02\u1064\u105D\x03\x02\x02\x02\u1064" +
		"\u105F\x03\x02\x02\x02\u1064\u1061\x03\x02\x02\x02\u1064\u1062\x03\x02" +
		"\x02\x02\u1064\u1063\x03\x02\x02\x02\u1065\u0203\x03\x02\x02\x02\u1066" +
		"\u1069\x07I\x02\x02\u1067\u1068\x07\xFF\x02\x02\u1068\u106A\x07\u012D" +
		"\x02\x02\u1069\u1067\x03\x02\x02\x02\u1069\u106A\x03\x02\x02\x02\u106A" +
		"\u106B\x03\x02\x02\x02\u106B\u106C\x07\xDD\x02\x02\u106C\u1070\x07\u010F" +
		"\x02\x02\u106D\u106E\x07\xA6\x02\x02\u106E\u106F\x07\xF1\x02\x02\u106F" +
		"\u1071\x07y\x02\x02\u1070\u106D\x03\x02\x02\x02\u1070\u1071\x03\x02\x02" +
		"\x02\u1071\u1072\x03\x02\x02\x02\u1072\u1073\x05\u032C\u0197\x02\u1073" +
		"\u1074\x07\x12\x02\x02\u1074\u1075\x07\u01CA\x02\x02\u1075\u107A\x05\u0218" +
		"\u010D\x02\u1076\u1077\x07\u01CC\x02\x02\u1077\u1079\x05\u0218\u010D\x02" +
		"\u1078\u1076\x03\x02\x02\x02\u1079\u107C\x03\x02\x02\x02\u107A\u1078\x03" +
		"\x02\x02\x02\u107A\u107B\x03\x02\x02\x02\u107B\u107D\x03\x02\x02\x02\u107C" +
		"\u107A\x03\x02\x02\x02\u107D\u107E\x07\u01CB\x02\x02\u107E\u107F\x07\u0136" +
		"\x02\x02\u107F\u1080\x05\u031A\u018E\x02\u1080\u1081\x07\u01B8\x02\x02" +
		"\u1081\u1083\x05\u02A6\u0154\x02\u1082\u1084\x05\u0306\u0184\x02\u1083" +
		"\u1082\x03\x02\x02\x02\u1083\u1084\x03\x02\x02\x02\u1084\u0205\x03\x02" +
		"\x02\x02\u1085\u1086\x07k\x02\x02\u1086\u1087\x07\xDD\x02\x02\u1087\u108A" +
		"\x07\u010F\x02\x02\u1088\u1089\x07\xA6\x02\x02\u1089\u108B\x07y\x02\x02" +
		"\u108A\u1088\x03\x02\x02\x02\u108A\u108B\x03\x02\x02\x02\u108B\u108C\x03" +
		"\x02\x02\x02\u108C\u108E\x05\u032C\u0197\x02\u108D\u108F\x07\x8C\x02\x02" +
		"\u108E\u108D\x03\x02\x02\x02\u108E\u108F\x03\x02\x02\x02\u108F\u0207\x03" +
		"\x02\x02\x02\u1090\u1091\x07\v\x02\x02\u1091\u1092\x07\xDD\x02\x02\u1092" +
		"\u1095\x07\u010F\x02\x02\u1093\u1094\x07\xA6\x02\x02\u1094\u1096\x07y" +
		"\x02\x02\u1095\u1093\x03\x02\x02\x02\u1095\u1096\x03\x02\x02\x02\u1096" +
		"\u1097\x03\x02\x02\x02\u1097\u1098\x05\u032C\u0197\x02\u1098\u1099\x07" +
		"\u014D\x02\x02\u1099\u109A\x07$\x02\x02\u109A\u109B\x07\u01B8\x02\x02" +
		"\u109B\u109C\x05\u02A6\u0154\x02\u109C\u10B7\x03\x02\x02\x02\u109D\u109E" +
		"\x07\v\x02\x02\u109E\u109F\x07\xDD\x02\x02\u109F\u10A2\x07\u010F\x02\x02" +
		"\u10A0\u10A1\x07\xA6\x02\x02\u10A1\u10A3\x07y\x02\x02\u10A2\u10A0\x03" +
		"\x02\x02\x02\u10A2\u10A3\x03\x02\x02\x02\u10A3\u10A4\x03\x02\x02\x02\u10A4" +
		"\u10A5\x05\u032C\u0197\x02\u10A5\u10A6\x07\u014D\x02\x02\u10A6\u10A7\x07" +
		"=\x02\x02\u10A7\u10A8\x07\u01A1\x02\x02\u10A8\u10A9\x05\u030C\u0187\x02" +
		"\u10A9\u10B7\x03\x02\x02\x02\u10AA\u10AB\x07\v\x02\x02\u10AB\u10AC\x07" +
		"\xDD\x02\x02\u10AC\u10AF\x07\u010F\x02\x02\u10AD\u10AE\x07\xA6\x02\x02" +
		"\u10AE\u10B0\x07y\x02\x02\u10AF\u10AD\x03\x02\x02\x02\u10AF\u10B0\x03" +
		"\x02\x02\x02\u10B0\u10B1\x03\x02\x02\x02\u10B1\u10B2\x05\u032C\u0197\x02" +
		"\u10B2\u10B3\x07\u012A\x02\x02\u10B3\u10B4\x07\u0174\x02\x02\u10B4\u10B5" +
		"\x05\u032E\u0198\x02\u10B5\u10B7\x03\x02\x02\x02\u10B6\u1090\x03\x02\x02" +
		"\x02\u10B6\u109D\x03\x02\x02\x02\u10B6\u10AA\x03\x02\x02\x02\u10B7\u0209" +
		"\x03\x02\x02\x02\u10B8\u10B9\x07\u0152\x02\x02\u10B9\u10BA\x07\xDD\x02" +
		"\x02\u10BA\u10BD\x07\u0110\x02\x02\u10BB\u10BC\t\x02\x02\x02\u10BC\u10BE" +
		"\x05\u032C\u0197\x02\u10BD\u10BB\x03\x02\x02\x02\u10BD\u10BE\x03\x02\x02" +
		"\x02\u10BE\u020B\x03\x02\x02\x02\u10BF\u10C0\x07\u0152\x02\x02\u10C0\u10C1" +
		"\x07I\x02\x02\u10C1\u10C2\x07\xDD\x02\x02\u10C2\u10C3\x07\u010F\x02\x02" +
		"\u10C3\u10C4\x05\u032C\u0197\x02\u10C4\u020D\x03\x02\x02\x02\u10C5\u10C8" +
		"\x07I\x02\x02\u10C6\u10C7\x07\xFF\x02\x02\u10C7\u10C9\x07\u012D\x02\x02" +
		"\u10C8\u10C6\x03\x02\x02\x02\u10C8\u10C9\x03\x02\x02\x02\u10C9\u10CA\x03" +
		"\x02\x02\x02\u10CA\u10CB\x07\u0140\x02\x02\u10CB\u10CC\x07\x05\x02\x02" +
		"\u10CC\u10D0\x07\u010F\x02\x02\u10CD\u10CE\x07\xA6\x02\x02\u10CE\u10CF" +
		"\x07\xF1\x02\x02\u10CF\u10D1\x07y\x02\x02\u10D0\u10CD\x03\x02\x02\x02" +
		"\u10D0\u10D1\x03\x02\x02\x02\u10D1\u10D2\x03\x02\x02\x02\u10D2\u10D3\x05" +
		"\u032C\u0197\x02\u10D3\u10D4\x07\x12\x02\x02\u10D4\u10D5\x07\u01CA\x02" +
		"\x02\u10D5\u10DA\x05\u0218\u010D\x02\u10D6\u10D7\x07\u01CC\x02\x02\u10D7" +
		"\u10D9\x05\u0218\u010D\x02\u10D8\u10D6\x03\x02\x02\x02\u10D9\u10DC\x03" +
		"\x02\x02\x02\u10DA\u10D8\x03\x02\x02\x02\u10DA\u10DB\x03\x02\x02\x02\u10DB" +
		"\u10DD\x03\x02\x02\x02\u10DC\u10DA\x03\x02\x02\x02\u10DD\u10DE\x07\u01CB" +
		"\x02\x02\u10DE\u10DF\x07\u0136\x02\x02\u10DF\u10E0\x07%\x02\x02\u10E0" +
		"\u10E1\x07\u01B8\x02\x02\u10E1\u10E3\x05\u02A6\u0154\x02\u10E2\u10E4\x05" +
		"\u0306\u0184\x02\u10E3\u10E2\x03\x02\x02\x02\u10E3\u10E4\x03\x02\x02\x02" +
		"\u10E4\u020F\x03\x02\x02\x02\u10E5\u10E6\x07k\x02\x02\u10E6\u10E7\x07" +
		"\u0140\x02\x02\u10E7\u10E8\x07\x05\x02\x02\u10E8\u10EB\x07\u010F\x02\x02" +
		"\u10E9\u10EA\x07\xA6\x02\x02\u10EA\u10EC\x07y\x02\x02\u10EB\u10E9\x03" +
		"\x02\x02\x02\u10EB\u10EC\x03\x02\x02\x02\u10EC\u10ED\x03\x02\x02\x02\u10ED" +
		"\u10EF\x05\u032C\u0197\x02\u10EE\u10F0\x07\x8C\x02\x02\u10EF\u10EE\x03" +
		"\x02\x02\x02\u10EF\u10F0\x03\x02\x02\x02\u10F0\u0211\x03\x02\x02\x02\u10F1" +
		"\u10F2\x07\v\x02\x02\u10F2\u10F3\x07\u0140\x02\x02\u10F3\u10F4\x07\x05" +
		"\x02\x02\u10F4\u10F7\x07\u010F\x02\x02\u10F5\u10F6\x07\xA6\x02\x02\u10F6" +
		"\u10F8\x07y\x02\x02\u10F7\u10F5\x03\x02\x02\x02\u10F7\u10F8\x03\x02\x02" +
		"\x02\u10F8\u10F9\x03\x02\x02\x02\u10F9\u10FA\x05\u032C\u0197\x02\u10FA" +
		"\u10FB\x07\u014D\x02\x02\u10FB\u10FC\x07$\x02\x02\u10FC\u10FD\x07\u01B8" +
		"\x02\x02\u10FD\u10FE\x05\u02A6\u0154\x02\u10FE\u111B\x03\x02\x02\x02\u10FF" +
		"\u1100\x07\v\x02\x02\u1100\u1101\x07\u0140\x02\x02\u1101\u1102\x07\x05" +
		"\x02\x02\u1102\u1105\x07\u010F\x02\x02\u1103\u1104\x07\xA6\x02\x02\u1104" +
		"\u1106\x07y\x02\x02\u1105\u1103\x03\x02\x02\x02\u1105\u1106\x03\x02\x02" +
		"\x02\u1106\u1107\x03\x02\x02\x02\u1107\u1108\x05\u032C\u0197\x02\u1108" +
		"\u1109\x07\u014D\x02\x02\u1109\u110A\x07=\x02\x02\u110A\u110B\x07\u01A1" +
		"\x02\x02\u110B\u110C\x05\u030C\u0187\x02\u110C\u111B\x03\x02\x02\x02\u110D" +
		"\u110E\x07\v\x02\x02\u110E\u110F\x07\u0140\x02\x02\u110F\u1110\x07\x05" +
		"\x02\x02\u1110\u1113\x07\u010F\x02\x02\u1111\u1112\x07\xA6\x02\x02\u1112" +
		"\u1114\x07y\x02\x02\u1113\u1111\x03\x02\x02\x02\u1113\u1114\x03\x02\x02" +
		"\x02\u1114\u1115\x03\x02\x02\x02\u1115\u1116\x05\u032C\u0197\x02\u1116" +
		"\u1117\x07\u012A\x02\x02\u1117\u1118\x07\u0174\x02\x02\u1118\u1119\x05" +
		"\u032E\u0198\x02\u1119\u111B\x03\x02\x02\x02\u111A\u10F1\x03\x02\x02\x02" +
		"\u111A\u10FF\x03\x02\x02\x02\u111A\u110D\x03\x02\x02\x02\u111B\u0213\x03" +
		"\x02\x02\x02\u111C\u111D\x07\u0152\x02\x02\u111D\u111E\x07\u0140\x02\x02" +
		"\u111E\u111F\x07\x05\x02\x02\u111F\u1122\x07\u0110\x02\x02\u1120\u1121" +
		"\t\x02\x02\x02\u1121\u1123\x05\u032C\u0197\x02\u1122\u1120\x03\x02\x02" +
		"\x02\u1122\u1123\x03\x02\x02\x02\u1123\u0215\x03\x02\x02\x02\u1124\u1125" +
		"\x07\u0152\x02\x02\u1125\u1126\x07I\x02\x02\u1126\u1127\x07\u0140\x02" +
		"\x02\u1127\u1128\x07\x05\x02\x02\u1128\u1129\x07\u010F\x02\x02\u1129\u112A" +
		"\x05\u032C\u0197\x02\u112A\u0217\x03\x02\x02\x02\u112B\u112C\x05\u032E" +
		"\u0198\x02\u112C\u112D\x05\u031A\u018E\x02\u112D\u0219\x03\x02\x02\x02" +
		"\u112E\u112F\x07\x1B\x02\x02\u112F\u1130\x07\u0154\x02\x02\u1130\u1131" +
		"\x05\u032C\u0197\x02\u1131\u1132\x07\u0174\x02\x02\u1132\u113F\x05\u032E" +
		"\u0198\x02\u1133\u1134\x07\xF9\x02\x02\u1134\u1135\x07\u01CA\x02\x02\u1135" +
		"\u113A\x05\u02D0\u0169\x02\u1136\u1137\x07\u01CC\x02\x02\u1137\u1139\x05" +
		"\u02D0\u0169\x02\u1138\u1136\x03\x02\x02\x02\u1139\u113C\x03\x02\x02\x02" +
		"\u113A\u1138\x03\x02\x02\x02\u113A\u113B\x03\x02\x02\x02\u113B\u113D\x03" +
		"\x02\x02\x02\u113C\u113A\x03\x02\x02\x02\u113D\u113E\x07\u01CB\x02\x02" +
		"\u113E\u1140\x03\x02\x02\x02\u113F\u1133\x03\x02\x02\x02\u113F\u1140\x03" +
		"\x02\x02\x02\u1140\u1143\x03\x02\x02\x02\u1141\u1142\x07\u0119\x02\x02" +
		"\u1142\u1144\x05\u02FE\u0180\x02\u1143\u1141\x03\x02\x02\x02\u1143\u1144" +
		"\x03\x02\x02\x02\u1144\u021B\x03\x02\x02\x02\u1145\u1146\x07+\x02\x02" +
		"\u1146\u1149\x07\x1B\x02\x02\u1147\u1148\t\x02\x02\x02\u1148\u114A\x05" +
		"\u032E\u0198\x02\u1149\u1147\x03\x02\x02\x02\u1149\u114A\x03\x02\x02\x02" +
		"\u114A\u021D\x03\x02\x02\x02\u114B\u114C\x07\u0152\x02\x02\u114C\u114F" +
		"\x07\x1B\x02\x02\u114D\u114E\t\x02\x02\x02\u114E\u1150\x05\u032E\u0198" +
		"\x02\u114F\u114D\x03\x02\x02\x02\u114F\u1150\x03\x02\x02\x02\u1150\u021F" +
		"\x03\x02\x02\x02\u1151\u1152\x07\u0134\x02\x02\u1152\u1153\x07\u0154\x02" +
		"\x02\u1153\u1154\x05\u032C\u0197\x02\u1154\u1155\x07\x8F\x02\x02\u1155" +
		"\u1162\x05\u032E\u0198\x02\u1156\u1157\x07\xF9\x02\x02\u1157\u1158\x07" +
		"\u01CA\x02\x02\u1158\u115D\x05\u02D2\u016A\x02\u1159\u115A\x07\u01CC\x02" +
		"\x02\u115A\u115C\x05\u02D2\u016A\x02\u115B\u1159\x03\x02\x02\x02\u115C" +
		"\u115F\x03\x02\x02\x02\u115D\u115B\x03\x02\x02\x02\u115D\u115E\x03\x02" +
		"\x02\x02\u115E\u1160\x03\x02\x02\x02\u115F\u115D\x03\x02\x02\x02\u1160" +
		"\u1161\x07\u01CB\x02\x02\u1161\u1163\x03\x02\x02\x02\u1162\u1156\x03\x02" +
		"\x02\x02\u1162\u1163\x03\x02\x02\x02\u1163\u1166\x03\x02\x02\x02\u1164" +
		"\u1165\x07\u0119\x02\x02\u1165\u1167\x05\u02FE\u0180\x02\u1166\u1164\x03" +
		"\x02\x02\x02\u1166\u1167\x03\x02\x02\x02\u1167\u0221\x03\x02\x02\x02\u1168" +
		"\u1169\x07+\x02\x02\u1169\u116C\x07\u0134\x02\x02\u116A\u116B\t\x02\x02" +
		"\x02\u116B\u116D\x05\u032E\u0198\x02\u116C\u116A\x03\x02\x02\x02\u116C" +
		"\u116D\x03\x02\x02\x02\u116D\u0223\x03\x02\x02\x02\u116E\u116F\x07\u0152" +
		"\x02\x02\u116F\u1172\x07\u0134\x02\x02\u1170\u1171\t\x02\x02\x02\u1171" +
		"\u1173\x05\u032E\u0198\x02\u1172\u1170\x03\x02\x02\x02\u1172\u1173\x03" +
		"\x02\x02\x02\u1173\u1176\x03\x02\x02\x02\u1174\u1175\x07\u0198\x02\x02" +
		"\u1175\u1177\x05\u02A6\u0154\x02\u1176\u1174\x03\x02\x02\x02\u1176\u1177" +
		"\x03\x02\x02\x02\u1177\u0225\x03\x02\x02\x02\u1178\u1179\x07\u0152\x02" +
		"\x02\u1179\u117A\x07\u0154\x02\x02\u117A\u117B\x07\xF9\x02\x02\u117B\u117E" +
		"\x05\u032E\u0198\x02\u117C\u117D\x07\u0198\x02\x02\u117D\u117F\x05\u02A6" +
		"\u0154\x02\u117E\u117C\x03\x02\x02\x02\u117E\u117F\x03\x02\x02\x02\u117F" +
		"\u0227\x03\x02\x02\x02\u1180\u1183\x07I\x02\x02\u1181\u1182\x07\u0123" +
		"\x02\x02\u1182\u1184\x07\xFA\x02\x02\u1183\u1181\x03\x02\x02\x02\u1183" +
		"\u1184\x03\x02\x02\x02\u1184\u1185\x03\x02\x02\x02\u1185\u1186\x07\u0130" +
		"\x02\x02\u1186\u1187\x05\u032E\u0198\x02\u1187\u1188\x07\u019A\x02\x02" +
		"\u1188\u118A\x07\'\x02\x02\u1189\u118B\x05\u0332\u019A\x02\u118A\u1189" +
		"\x03\x02\x02\x02\u118A\u118B\x03\x02\x02\x02\u118B\u118C\x03\x02\x02\x02" +
		"\u118C\u118D\x07\xF9\x02\x02\u118D\u118E\x07\xD6\x02\x02\u118E\u1191\x05" +
		"\u030C\u0187\x02\u118F\u1190\x07\u0119\x02\x02\u1190\u1192\x05\u02FE\u0180" +
		"\x02\u1191\u118F\x03\x02\x02\x02\u1191\u1192\x03\x02\x02\x02\u1192\u0229" +
		"\x03\x02\x02\x02\u1193\u1194\x07k\x02\x02\u1194\u1195\x07\u0130\x02\x02" +
		"\u1195\u1196\x05\u032E\u0198\x02\u1196\u022B\x03\x02";
	private static readonly _serializedATNSegment9: string =
		"\x02\x02\u1197\u1198\x07\x06\x02\x02\u1198\u1199\x07\u0155\x02\x02\u1199" +
		"\u119A\x05\u030C\u0187\x02\u119A\u022D\x03\x02\x02\x02\u119B\u119C\x07" +
		"a\x02\x02\u119C\u119D\x07\u0155\x02\x02\u119D\u11A2\x07\u01BA\x02\x02" +
		"\u119E\u119F\x07\u01CC\x02\x02\u119F\u11A1\x07\u01BA\x02\x02\u11A0\u119E" +
		"\x03\x02\x02\x02\u11A1\u11A4\x03\x02\x02\x02\u11A2\u11A0\x03\x02\x02\x02" +
		"\u11A2\u11A3\x03\x02\x02\x02\u11A3\u022F\x03\x02\x02\x02\u11A4\u11A2\x03" +
		"\x02\x02\x02\u11A5\u11A6\x07\u0152\x02\x02\u11A6\u11A7\x07\u0155\x02\x02" +
		"\u11A7\u0231\x03\x02\x02\x02\u11A8\u11A9\x07\u0152\x02\x02\u11A9\u11AA" +
		"\x07\u0199\x02\x02\u11AA\u0233\x03\x02\x02\x02\u11AB\u11AC\x07{\x02\x02" +
		"\u11AC\u11AD\x07\u0166\x02\x02\u11AD\u11AF\x05\u02D0\u0169\x02\u11AE\u11B0" +
		"\x05\u0294\u014B\x02\u11AF\u11AE\x03\x02\x02\x02\u11AF\u11B0\x03\x02\x02" +
		"\x02\u11B0\u11B1\x03\x02\x02\x02\u11B1\u11B2\x07\u0174\x02\x02\u11B2\u11B4" +
		"\x05\u030C\u0187\x02\u11B3\u11B5\x05\u02FA\u017E\x02\u11B4\u11B3\x03\x02" +
		"\x02\x02\u11B4\u11B5\x03\x02\x02\x02\u11B5\u11B7\x03\x02\x02\x02\u11B6" +
		"\u11B8\x05\u017A\xBE\x02\u11B7\u11B6\x03\x02\x02\x02\u11B7\u11B8\x03\x02" +
		"\x02\x02\u11B8\u0235\x03\x02\x02\x02\u11B9\u11BA\x07+\x02\x02\u11BA\u11BD" +
		"\x07{\x02\x02\u11BB\u11BC\t\x02\x02\x02\u11BC\u11BE\x05\u032C\u0197\x02" +
		"\u11BD\u11BB\x03\x02\x02\x02\u11BD\u11BE\x03\x02\x02\x02\u11BE\u11C3\x03" +
		"\x02\x02\x02\u11BF\u11C0\x07\xCF\x02\x02\u11C0\u11C4\x05\u030C\u0187\x02" +
		"\u11C1\u11C2\x07\u0198\x02\x02\u11C2\u11C4\x05\u02A6\u0154\x02\u11C3\u11BF" +
		"\x03\x02\x02\x02\u11C3\u11C1\x03\x02\x02\x02\u11C3\u11C4\x03\x02\x02\x02" +
		"\u11C4\u0237\x03\x02\x02\x02\u11C5\u11C6\x07\u0152\x02\x02\u11C6\u11C9" +
		"\x07{\x02\x02\u11C7\u11C8\t\x02\x02\x02\u11C8\u11CA\x05\u032C\u0197\x02" +
		"\u11C9\u11C7\x03\x02\x02\x02\u11C9\u11CA\x03\x02\x02\x02\u11CA\u11CF\x03" +
		"\x02\x02\x02\u11CB\u11CC\x07\xCF\x02\x02\u11CC\u11D0\x05\u030C\u0187\x02" +
		"\u11CD\u11CE\x07\u0198\x02\x02\u11CE\u11D0\x05\u02A6\u0154\x02\u11CF\u11CB" +
		"\x03\x02\x02\x02\u11CF\u11CD\x03\x02\x02\x02\u11CF\u11D0\x03\x02\x02\x02" +
		"\u11D0\u11DB\x03\x02\x02\x02\u11D1\u11D2\x07\u0100\x02\x02\u11D2\u11D3" +
		"\x07*\x02\x02\u11D3\u11D8\x05\u026E\u0138\x02\u11D4\u11D5\x07\u01CC\x02" +
		"\x02\u11D5\u11D7\x05\u026E\u0138\x02\u11D6\u11D4\x03\x02\x02\x02\u11D7" +
		"\u11DA\x03\x02\x02\x02\u11D8\u11D6\x03\x02\x02\x02\u11D8\u11D9\x03\x02" +
		"\x02\x02\u11D9\u11DC\x03\x02\x02\x02\u11DA\u11D8\x03\x02\x02\x02\u11DB" +
		"\u11D1\x03\x02\x02\x02\u11DB\u11DC\x03\x02\x02\x02\u11DC\u11DE\x03\x02" +
		"\x02\x02\u11DD\u11DF\x05\u0270\u0139\x02\u11DE\u11DD\x03\x02\x02\x02\u11DE" +
		"\u11DF\x03\x02\x02\x02\u11DF\u0239\x03\x02\x02\x02\u11E0\u11E1\x07\xB2" +
		"\x02\x02\u11E1\u11E2\x07\u010D\x02\x02\u11E2\u11E3\x07\x8F\x02\x02\u11E3" +
		"\u11E5\x05\u0332\u019A\x02\u11E4\u11E6\x05\u02FA\u017E\x02\u11E5\u11E4" +
		"\x03\x02\x02\x02\u11E5\u11E6\x03\x02\x02\x02\u11E6\u023B\x03\x02\x02\x02" +
		"\u11E7\u11E8\x07\u0180\x02\x02\u11E8\u11E9\x07\u010D\x02\x02\u11E9\u11EA" +
		"\x05\u0332\u019A\x02\u11EA\u023D\x03\x02\x02\x02\u11EB\u11EC\x07I\x02" +
		"\x02\u11EC\u11ED\x07\x81\x02\x02\u11ED\u11F0\x05\u030C\u0187\x02\u11EE" +
		"\u11EF\t\x02\x02\x02\u11EF\u11F1\x05\u032C\u0197\x02\u11F0\u11EE\x03\x02" +
		"\x02\x02\u11F0\u11F1\x03\x02\x02\x02\u11F1\u11F2\x03\x02\x02\x02\u11F2" +
		"\u11F3\x05\u02FA\u017E\x02\u11F3\u023F\x03\x02\x02\x02\u11F4\u11F5\x07" +
		"k\x02\x02\u11F5\u11F6\x07\x81\x02\x02\u11F6\u11F9\x05\u030C\u0187\x02" +
		"\u11F7\u11F8\t\x02\x02\x02\u11F8\u11FA\x05\u032C\u0197\x02\u11F9\u11F7" +
		"\x03\x02\x02\x02\u11F9\u11FA\x03\x02\x02\x02\u11FA\u11FB\x03\x02\x02\x02" +
		"\u11FB\u11FC\x05\u02FA\u017E\x02\u11FC\u0241\x03\x02\x02\x02\u11FD\u11FE" +
		"\x07\u0152\x02\x02\u11FE\u1201\x07\x81\x02\x02\u11FF\u1200\t\x02\x02\x02" +
		"\u1200\u1202\x05\u032C\u0197\x02\u1201\u11FF\x03\x02\x02\x02\u1201\u1202" +
		"\x03\x02\x02\x02\u1202\u0243\x03\x02\x02\x02\u1203\u1204\x07\u014D\x02" +
		"\x02\u1204\u1209\x05\u0246\u0124\x02\u1205\u1206\x07\u01CC\x02\x02\u1206" +
		"\u1208\x05\u0246\u0124\x02\u1207\u1205\x03\x02\x02\x02\u1208\u120B\x03" +
		"\x02\x02\x02\u1209\u1207\x03\x02\x02\x02\u1209\u120A\x03\x02\x02\x02\u120A" +
		"\u0245\x03\x02\x02\x02\u120B\u1209\x03\x02\x02\x02\u120C\u120D\x072\x02" +
		"\x02\u120D\u1212\x07\u014D\x02\x02\u120E\u1212\x074\x02\x02\u120F\u1210" +
		"\x073\x02\x02\u1210\u1212\x07\u014D\x02\x02\u1211\u120C\x03\x02\x02\x02" +
		"\u1211\u120E\x03\x02\x02\x02\u1211\u120F\x03\x02\x02\x02\u1212\u1215\x03" +
		"\x02\x02\x02\u1213\u1216\x05\u0332\u019A\x02\u1214\u1216\x07`\x02\x02" +
		"\u1215\u1213\x03\x02\x02\x02\u1215\u1214\x03\x02\x02\x02\u1216\u124E\x03" +
		"\x02\x02\x02\u1217\u121A\x07\xEB\x02\x02\u1218\u121B\x05\u0332\u019A\x02" +
		"\u1219\u121B\x07`\x02\x02\u121A\u1218\x03\x02\x02\x02\u121A\u1219\x03" +
		"\x02\x02\x02\u121B\u1221\x03\x02\x02\x02\u121C\u121F\x079\x02\x02\u121D" +
		"\u1220\x05\u0332\u019A\x02\u121E\u1220\x07`\x02\x02\u121F\u121D\x03\x02" +
		"\x02\x02\u121F\u121E\x03\x02\x02\x02\u1220\u1222\x03\x02\x02\x02\u1221" +
		"\u121C\x03\x02\x02\x02\u1221\u1222\x03\x02\x02\x02\u1222\u124E\x03\x02" +
		"\x02\x02\u1223\u1224\x07\u0106\x02\x02\u1224\u122B\x07\u01A1\x02\x02\u1225" +
		"\u122C\x05\u030C\u0187\x02\u1226\u1227\x07\u0106\x02\x02\u1227\u1228\x07" +
		"\u01CA\x02\x02\u1228\u1229\x05\u030C\u0187\x02\u1229\u122A\x07\u01CB\x02" +
		"\x02\u122A\u122C\x03\x02\x02\x02\u122B\u1225\x03\x02\x02\x02\u122B\u1226" +
		"\x03\x02\x02\x02\u122C\u124E\x03\x02\x02\x02\u122D\u122E\x07\u0106\x02" +
		"\x02\u122E\u122F\x07\x8B\x02\x02\u122F\u1230\x05\u0338\u019D\x02\u1230" +
		"\u1237\x07\u01A1\x02\x02\u1231\u1238\x05\u030C\u0187\x02\u1232\u1233\x07" +
		"\u0106\x02\x02\u1233\u1234\x07\u01CA\x02\x02\u1234\u1235\x05\u030C\u0187" +
		"\x02\u1235\u1236\x07\u01CB\x02\x02\u1236\u1238\x03\x02\x02\x02\u1237\u1231" +
		"\x03\x02\x02\x02\u1237\u1232\x03\x02\x02\x02\u1238\u124E\x03\x02\x02\x02" +
		"\u1239\u123A\x05\u02BC\u015F\x02\u123A\u123B\x07\u01A1\x02\x02\u123B\u123C" +
		"\x05\u02A6\u0154\x02\u123C\u124E\x03\x02\x02\x02\u123D\u123F\x05\u0304" +
		"\u0183\x02\u123E\u123D\x03\x02\x02\x02\u123E\u123F\x03\x02\x02\x02\u123F" +
		"\u1240\x03\x02\x02\x02\u1240\u1241\x05\u032E\u0198\x02\u1241\u1242\x07" +
		"\u01A1\x02\x02\u1242\u1243\x05\u0250\u0129\x02\u1243\u124E\x03\x02\x02" +
		"\x02\u1244\u1245\x05\u02BE\u0160\x02\u1245\u1246\x07\u01A1\x02\x02\u1246" +
		"\u1247\x05\u0250\u0129\x02\u1247\u124E\x03\x02\x02\x02\u1248\u124A\x05" +
		"\u0304\u0183\x02\u1249\u1248\x03\x02\x02\x02\u1249\u124A\x03\x02\x02\x02" +
		"\u124A\u124B\x03\x02\x02\x02\u124B\u124C\x07\u0173\x02\x02\u124C\u124E" +
		"\x05\u0248\u0125\x02\u124D\u1211\x03\x02\x02\x02\u124D\u1217\x03\x02\x02" +
		"\x02\u124D\u1223\x03\x02\x02\x02\u124D\u122D\x03\x02\x02\x02\u124D\u1239" +
		"\x03\x02\x02\x02\u124D\u123E\x03\x02\x02\x02\u124D\u1244\x03\x02\x02\x02" +
		"\u124D\u1249\x03\x02\x02\x02\u124E\u0247\x03\x02\x02\x02\u124F\u125A\x05" +
		"\u024A\u0126\x02\u1250\u125A\x05\u024C\u0127\x02\u1251\u1252\x05\u024A" +
		"\u0126\x02\u1252\u1253\x07\u01CC\x02\x02\u1253\u1254\x05\u024C\u0127\x02" +
		"\u1254\u125A\x03\x02\x02\x02\u1255\u1256\x05\u024C\u0127\x02\u1256\u1257" +
		"\x07\u01CC\x02\x02\u1257\u1258\x05\u024A\u0126\x02\u1258\u125A\x03\x02" +
		"\x02\x02\u1259\u124F\x03\x02\x02\x02\u1259\u1250\x03\x02\x02\x02\u1259" +
		"\u1251\x03\x02\x02\x02\u1259\u1255\x03\x02\x02\x02\u125A\u0249\x03\x02" +
		"\x02\x02\u125B\u125C\x07\u0123\x02\x02\u125C\u1260\x07\xFA\x02\x02\u125D" +
		"\u125E\x07\u0123\x02\x02\u125E\u1260\x07\u019C\x02\x02\u125F\u125B\x03" +
		"\x02\x02\x02\u125F\u125D\x03\x02\x02\x02\u1260\u024B\x03\x02\x02\x02\u1261" +
		"\u1262\x07\xBE\x02\x02\u1262\u1263\x07\xCE\x02\x02\u1263\u1264\x05\u024E" +
		"\u0128\x02\u1264\u024D\x03\x02\x02\x02\u1265\u1266\x07\u0123\x02\x02\u1266" +
		"\u126D\x07\u017D\x02\x02\u1267\u1268\x07\u0123\x02\x02\u1268\u126D\x07" +
		"?\x02\x02\u1269\u126A\x07\u012C\x02\x02\u126A\u126D\x07\u0123\x02\x02" +
		"\u126B\u126D\x07\u014B\x02\x02\u126C\u1265\x03\x02\x02\x02\u126C\u1267" +
		"\x03\x02\x02\x02\u126C\u1269\x03\x02\x02\x02\u126C\u126B\x03\x02\x02\x02" +
		"\u126D\u024F\x03\x02\x02\x02\u126E\u1273\x07`\x02\x02\u126F\u1273\x07" +
		"\xF9\x02\x02\u1270\u1273\x07\n\x02\x02\u1271\u1273\x05\u02A6\u0154\x02" +
		"\u1272\u126E\x03\x02\x02\x02\u1272\u126F\x03\x02\x02\x02\u1272\u1270\x03" +
		"\x02\x02\x02\u1272\u1271\x03\x02\x02\x02\u1273\u0251\x03\x02\x02\x02\u1274" +
		"\u1275\x07\u014D\x02\x02\u1275\u1278\x07\u011A\x02\x02\u1276\u1277\x07" +
		"\x8B\x02\x02\u1277\u1279\x05\u030C\u0187\x02\u1278\u1276\x03\x02\x02\x02" +
		"\u1278\u1279\x03\x02\x02\x02\u1279\u127A\x03\x02\x02\x02\u127A\u127B\x05" +
		"\u0300\u0181\x02\u127B\u0253\x03\x02\x02\x02\u127C\u1281\x05\u0332\u019A" +
		"\x02\u127D\u127E\x07\u01CC\x02\x02\u127E\u1280\x05\u0332\u019A\x02\u127F" +
		"\u127D\x03\x02\x02\x02\u1280\u1283\x03\x02\x02\x02\u1281\u127F\x03\x02" +
		"\x02\x02\u1281\u1282\x03\x02\x02\x02\u1282\u0255\x03\x02\x02\x02\u1283" +
		"\u1281\x03\x02\x02\x02\u1284\u1285\x07\x07\x02\x02\u1285\u1286\x07x\x02" +
		"\x02\u1286\u1287\x07\xF9\x02\x02\u1287\u1288\t\x17\x02\x02\u1288\u1289" +
		"\x05\u030C\u0187\x02\u1289\u0257\x03\x02\x02\x02\u128A\u128B\x07\u0156" +
		"\x02\x02\u128B\u128F\x07\u0173\x02\x02\u128C\u128D\x07\u019A\x02\x02\u128D" +
		"\u128E\x07E\x02\x02\u128E\u1290\x07\u0154\x02\x02\u128F\u128C\x03\x02" +
		"\x02\x02\u128F\u1290\x03\x02\x02\x02\u1290\u12C4\x03\x02\x02\x02\u1291" +
		"\u1293\x07\x1D\x02\x02\u1292\u1294\x07\u019B\x02\x02\u1293\u1292\x03\x02" +
		"\x02\x02\u1293\u1294\x03\x02\x02\x02\u1294\u12C4\x03\x02\x02\x02\u1295" +
		"\u1297\x07>\x02\x02\u1296\u1298\x07\u019B\x02\x02\u1297\u1296\x03\x02" +
		"\x02\x02\u1297\u1298\x03\x02\x02\x02\u1298\u129E\x03\x02\x02\x02\u1299" +
		"\u129B\x07\r\x02\x02\u129A\u129C\x07\xED\x02\x02\u129B\u129A\x03\x02\x02" +
		"\x02\u129B\u129C\x03\x02\x02\x02\u129C\u129D\x03\x02\x02\x02\u129D\u129F" +
		"\x071\x02\x02\u129E\u1299\x03\x02\x02\x02\u129E\u129F\x03\x02\x02\x02" +
		"\u129F\u12A4\x03\x02\x02\x02\u12A0\u12A2\x07\xED\x02\x02\u12A1\u12A0\x03" +
		"\x02\x02\x02\u12A1\u12A2\x03\x02\x02\x02\u12A2\u12A3\x03\x02\x02\x02\u12A3" +
		"\u12A5\x07\u0128\x02\x02\u12A4\u12A1\x03\x02\x02\x02\u12A4\u12A5\x03\x02" +
		"\x02\x02\u12A5\u12C4\x03\x02\x02\x02\u12A6\u12A8\x07\u013D\x02\x02\u12A7" +
		"\u12A9\x07\u019B\x02\x02\u12A8\u12A7\x03\x02\x02\x02\u12A8\u12A9\x03\x02" +
		"\x02\x02\u12A9\u12AF\x03\x02\x02\x02\u12AA\u12AC\x07\r\x02\x02\u12AB\u12AD" +
		"\x07\xED\x02\x02\u12AC\u12AB\x03\x02\x02\x02\u12AC\u12AD\x03\x02\x02\x02" +
		"\u12AD\u12AE\x03\x02\x02\x02\u12AE\u12B0\x071\x02\x02\u12AF\u12AA\x03" +
		"\x02\x02\x02\u12AF\u12B0\x03\x02\x02\x02\u12B0\u12B5\x03\x02\x02\x02\u12B1" +
		"\u12B3\x07\xED\x02\x02\u12B2\u12B1\x03\x02\x02\x02\u12B2\u12B3\x03\x02" +
		"\x02\x02\u12B3\u12B4\x03\x02\x02\x02\u12B4\u12B6\x07\u0128\x02\x02\u12B5" +
		"\u12B2\x03\x02\x02\x02\u12B5\u12B6\x03\x02\x02\x02\u12B6\u12C4\x03\x02" +
		"\x02\x02\u12B7\u12B8\x07\u019E\x02\x02\u12B8\u12B9\x07\u0167\x02\x02\u12B9" +
		"\u12BE\x05\u025A\u012E\x02\u12BA\u12BB\x07\u01CC\x02\x02\u12BB\u12BD\x05" +
		"\u025A\u012E\x02\u12BC\u12BA\x03\x02\x02\x02\u12BD\u12C0\x03\x02\x02\x02" +
		"\u12BE\u12BC\x03\x02\x02\x02\u12BE\u12BF\x03\x02\x02\x02\u12BF\u12C4\x03" +
		"\x02\x02\x02\u12C0\u12BE\x03\x02\x02\x02\u12C1\u12C2\x07\u019F\x02\x02" +
		"\u12C2\u12C4\x07\u0167\x02\x02\u12C3\u128A\x03\x02\x02\x02\u12C3\u1291" +
		"\x03\x02\x02\x02\u12C3\u1295\x03\x02\x02\x02\u12C3\u12A6\x03\x02\x02\x02" +
		"\u12C3\u12B7\x03\x02\x02\x02\u12C3\u12C1\x03\x02\x02\x02\u12C4\u0259\x03" +
		"\x02\x02\x02\u12C5\u12CA\x05\u032E\u0198\x02\u12C6\u12C8\x07\x12\x02\x02" +
		"\u12C7\u12C6\x03\x02\x02\x02\u12C7\u12C8\x03\x02\x02\x02\u12C8\u12C9\x03" +
		"\x02\x02\x02\u12C9\u12CB\x05\u032E\u0198\x02\u12CA\u12C7\x03\x02\x02\x02" +
		"\u12CA\u12CB\x03\x02\x02\x02\u12CB\u12CC\x03\x02\x02\x02\u12CC\u12CD\x05" +
		"\u025C\u012F\x02\u12CD\u025B\x03\x02\x02\x02\u12CE\u12D0\x07\u0123\x02" +
		"\x02\u12CF\u12D1\x07\xD3\x02\x02\u12D0\u12CF\x03\x02\x02\x02\u12D0\u12D1" +
		"\x03\x02\x02\x02\u12D1\u12D7\x03\x02\x02\x02\u12D2\u12D4\x07\u01A0\x02" +
		"\x02\u12D3\u12D2\x03\x02\x02\x02\u12D3\u12D4\x03\x02\x02\x02\u12D4\u12D5" +
		"\x03\x02\x02\x02\u12D5\u12D7\x07\u019C\x02\x02\u12D6\u12CE\x03\x02\x02" +
		"\x02\u12D6\u12D3\x03\x02\x02\x02\u12D7\u025D\x03\x02\x02\x02\u12D8\u12DB" +
		"\x05\u02D4\u016B\x02\u12D9\u12DB\x05\u02D6\u016C\x02\u12DA\u12D8\x03\x02" +
		"\x02\x02\u12DA\u12D9\x03\x02\x02\x02\u12DA\u12DB\x03\x02\x02\x02\u12DB" +
		"\u12DC\x03\x02\x02\x02\u12DC\u12DE\x05\u0260\u0131\x02\u12DD\u12DF\x05" +
		"\u0308\u0185\x02\u12DE\u12DD\x03\x02\x02\x02\u12DE\u12DF\x03\x02\x02\x02" +
		"\u12DF\u025F\x03\x02\x02\x02\u12E0\u12E2\x05\u0262\u0132\x02\u12E1\u12E0" +
		"\x03\x02\x02\x02\u12E1\u12E2\x03\x02\x02\x02\u12E2\u12E3\x03\x02\x02\x02" +
		"\u12E3\u12E4\x05\u0264\u0133\x02\u12E4\u0261\x03\x02\x02\x02\u12E5\u12E6" +
		"\x07\u019A\x02\x02\u12E6\u12EB\x05\u027A\u013E\x02\u12E7\u12E8\x07\u01CC" +
		"\x02\x02\u12E8\u12EA\x05\u027A\u013E\x02\u12E9\u12E7\x03\x02\x02\x02\u12EA" +
		"\u12ED\x03\x02\x02\x02\u12EB\u12E9\x03\x02\x02\x02\u12EB\u12EC\x03\x02" +
		"\x02\x02\u12EC\u0263\x03\x02\x02\x02\u12ED\u12EB\x03\x02\x02\x02\u12EE" +
		"\u12F9\x05\u0268\u0135\x02\u12EF\u12F0\x07\u0100\x02\x02\u12F0\u12F1\x07" +
		"*\x02\x02\u12F1\u12F6\x05\u026E\u0138\x02\u12F2\u12F3\x07\u01CC\x02\x02" +
		"\u12F3\u12F5\x05\u026E\u0138\x02\u12F4\u12F2\x03\x02\x02\x02\u12F5\u12F8" +
		"\x03\x02\x02\x02\u12F6\u12F4\x03\x02\x02\x02\u12F6\u12F7\x03\x02\x02\x02" +
		"\u12F7\u12FA\x03\x02\x02\x02\u12F8\u12F6\x03\x02\x02\x02\u12F9\u12EF\x03" +
		"\x02\x02\x02\u12F9\u12FA\x03\x02\x02\x02\u12FA\u12FC\x03\x02\x02\x02\u12FB" +
		"\u12FD\x05\u0270\u0139\x02\u12FC\u12FB\x03\x02\x02\x02\u12FC\u12FD\x03" +
		"\x02\x02\x02\u12FD\u0265\x03\x02\x02\x02\u12FE\u12FF\x07\x12\x02\x02\u12FF" +
		"\u1300\x07\xF7\x02\x02\u1300\u1319\x05\u02A6\u0154\x02\u1301\u1302\x07" +
		"\x8B\x02\x02\u1302\u1303\x07\u0163\x02\x02\u1303\u1304\x07\x12\x02\x02" +
		"\u1304\u1305\x07\xF7\x02\x02\u1305\u1306\x07\u016F\x02\x02\u1306\u1319" +
		"\x05\u030C\u0187\x02\u1307\u1308\x07\x8B\x02\x02\u1308\u1309\x07\u0163" +
		"\x02\x02\u1309\u130A\x07\x1E\x02\x02\u130A\u130B\x05\u02A6\u0154\x02\u130B" +
		"\u130C\x07\r\x02\x02\u130C\u130D\x05\u02A6\u0154\x02\u130D\u1319\x03\x02" +
		"\x02\x02\u130E\u130F\x07\x8B\x02\x02\u130F\u1310\x07\u0163\x02\x02\u1310" +
		"\u1311\x07\x8F\x02\x02\u1311\u1312\x05\u02A6\u0154\x02\u1312\u1313\x07" +
		"\u0174\x02\x02\u1313\u1314\x05\u02A6\u0154\x02\u1314\u1319\x03\x02\x02" +
		"\x02\u1315\u1316\x07\x8B\x02\x02\u1316\u1317\x07\u0163\x02\x02\u1317\u1319" +
		"\x07\n\x02\x02\u1318\u12FE\x03\x02\x02\x02\u1318\u1301\x03\x02\x02\x02" +
		"\u1318\u1307\x03\x02\x02\x02\u1318\u130E\x03\x02\x02\x02\u1318\u1315\x03" +
		"\x02\x02\x02\u1319\u0267\x03\x02\x02\x02\u131A\u131B\b\u0135\x01\x02\u131B" +
		"\u131E\x05\u0272\u013A\x02\u131C\u131E\x05\u026A\u0136\x02\u131D\u131A" +
		"\x03\x02\x02\x02\u131D\u131C\x03\x02\x02\x02\u131E\u132D\x03\x02\x02\x02" +
		"\u131F\u1320\f\x04\x02\x02\u1320\u1322\x07\xB9\x02\x02\u1321\u1323\x05" +
		"\u027C\u013F\x02\u1322\u1321\x03\x02\x02\x02\u1322\u1323\x03\x02\x02\x02" +
		"\u1323\u1324\x03\x02\x02\x02\u1324\u132C\x05\u0268\u0135\x05\u1325\u1326" +
		"\f\x03\x02\x02\u1326\u1328\t\x18\x02\x02\u1327\u1329\x05\u027C\u013F\x02" +
		"\u1328\u1327\x03\x02\x02\x02\u1328\u1329\x03\x02\x02\x02\u1329\u132A\x03" +
		"\x02\x02\x02\u132A\u132C\x05\u0268\u0135\x04\u132B\u131F\x03\x02\x02\x02" +
		"\u132B\u1325\x03\x02\x02\x02\u132C\u132F\x03\x02\x02\x02\u132D\u132B\x03" +
		"\x02\x02\x02\u132D\u132E\x03\x02\x02\x02\u132E\u0269\x03\x02\x02\x02\u132F" +
		"\u132D\x03\x02\x02\x02\u1330\u1331\x07\u01CA\x02\x02\u1331\u1332\x05\u0260" +
		"\u0131\x02\u1332\u1333\x07\u01CB\x02\x02\u1333\u026B\x03\x02\x02\x02\u1334" +
		"\u1335\x07\u01CA\x02\x02\u1335\u1336\x05\u02A8\u0155\x02\u1336\u1337\x07" +
		"\u01CB\x02\x02\u1337\u026D\x03\x02\x02\x02\u1338\u133A\x05\u02A6\u0154" +
		"\x02\u1339\u133B\t\x19\x02\x02\u133A\u1339\x03\x02\x02\x02\u133A\u133B" +
		"\x03\x02\x02\x02\u133B\u133E\x03\x02\x02\x02\u133C\u133D\x07\xF3\x02\x02" +
		"\u133D\u133F\t\x1A\x02\x02\u133E\u133C\x03\x02\x02\x02\u133E\u133F\x03" +
		"\x02\x02\x02\u133F\u026F\x03\x02\x02\x02\u1340\u1341\x07\xD0\x02\x02\u1341" +
		"\u1344\x07\u01BA\x02\x02\u1342\u1343\x07\xF8\x02\x02\u1343\u1345\x07\u01BA" +
		"\x02\x02\u1344\u1342\x03\x02\x02\x02\u1344\u1345\x03\x02\x02\x02\u1345" +
		"\u134B\x03\x02\x02\x02\u1346\u1347\x07\xD0\x02\x02\u1347\u1348\x07\u01BA" +
		"\x02\x02\u1348\u1349\x07\u01CC\x02\x02\u1349\u134B\x07\u01BA\x02\x02\u134A" +
		"\u1340\x03\x02\x02\x02\u134A\u1346\x03\x02\x02\x02\u134B\u0271\x03\x02" +
		"\x02\x02\u134C\u1350\x07\u0149\x02\x02\u134D\u134F\x05\u028E\u0148\x02" +
		"\u134E\u134D\x03\x02\x02\x02\u134F\u1352\x03\x02\x02\x02\u1350\u134E\x03" +
		"\x02\x02\x02\u1350\u1351\x03\x02\x02\x02\u1351\u1354\x03\x02\x02\x02\u1352" +
		"\u1350\x03\x02\x02\x02\u1353\u1355\x05\u027C\u013F\x02\u1354\u1353\x03" +
		"\x02\x02\x02\u1354\u1355\x03\x02\x02\x02\u1355\u1356\x03\x02\x02\x02\u1356" +
		"\u135B\x05\u027E\u0140\x02\u1357\u1358\x07\u01CC\x02\x02\u1358\u135A\x05" +
		"\u027E\u0140\x02\u1359\u1357\x03\x02\x02\x02\u135A\u135D\x03\x02\x02\x02" +
		"\u135B\u1359\x03\x02\x02\x02\u135B\u135C\x03\x02\x02\x02\u135C\u135E\x03" +
		"\x02\x02\x02\u135D\u135B\x03\x02\x02\x02\u135E\u1361\x05\u0274\u013B\x02" +
		"\u135F\u1360\x07\u0198\x02\x02\u1360\u1362\x05\u02A6\u0154\x02\u1361\u135F" +
		"\x03\x02\x02\x02\u1361\u1362\x03\x02\x02\x02\u1362\u1366\x03\x02\x02\x02" +
		"\u1363\u1364\x07\x98\x02\x02\u1364\u1365\x07*\x02\x02\u1365\u1367\x05" +
		"\u0276\u013C\x02\u1366\u1363\x03\x02\x02\x02\u1366\u1367\x03\x02\x02\x02" +
		"\u1367\u136A\x03\x02\x02\x02\u1368\u1369\x07\x9D\x02\x02\u1369\u136B\x05" +
		"\u02A6\u0154\x02\u136A\u1368\x03\x02\x02\x02\u136A\u136B\x03\x02\x02\x02" +
		"\u136B\u1371\x03\x02\x02\x02\u136C\u136D\x07\u011B\x02\x02\u136D\u136E" +
		"\x05\u027E\u0140\x02\u136E\u136F\x05\u0310\u0189\x02\u136F\u1370\x07\u01BA" +
		"\x02\x02\u1370\u1372\x03\x02\x02\x02\u1371\u136C\x03\x02\x02\x02\u1371" +
		"\u1372\x03\x02\x02\x02\u1372\u0273\x03\x02\x02\x02\u1373\u1374\x07\x8F" +
		"\x02\x02\u1374\u1376\x05\u0280\u0141\x02\u1375\u1373\x03\x02\x02\x02\u1375" +
		"\u1376\x03\x02\x02\x02\u1376\u137A\x03\x02\x02\x02\u1377\u1378\x07\x8F" +
		"\x02\x02\u1378\u137A\x07l\x02\x02\u1379\u1375\x03\x02\x02\x02\u1379\u1377" +
		"\x03\x02\x02\x02\u137A\u0275\x03\x02\x02\x02\u137B\u137C\x07\u013E\x02" +
		"\x02\u137C\u137E\x07\u01CA\x02\x02\u137D\u137F\x05\u02A8\u0155\x02\u137E" +
		"\u137D\x03\x02\x02\x02\u137E\u137F\x03\x02\x02\x02\u137F\u1380\x03\x02" +
		"\x02\x02\u1380\u1396\x07\u01CB\x02\x02\u1381\u1382\x07K\x02\x02\u1382" +
		"\u1384\x07\u01CA\x02\x02\u1383\u1385\x05\u02A8\u0155\x02\u1384\u1383\x03" +
		"\x02\x02\x02\u1384\u1385\x03\x02\x02\x02\u1385\u1386\x03\x02\x02\x02\u1386" +
		"\u1396\x07\u01CB\x02\x02\u1387\u1388\x07\x9A\x02\x02\u1388\u1389\x07\u014E" +
		"\x02\x02\u1389\u138A\x07\u01CA\x02\x02\u138A\u138F\x05\u0278\u013D\x02" +
		"\u138B\u138C\x07\u01CC\x02\x02\u138C\u138E\x05\u0278\u013D\x02\u138D\u138B" +
		"\x03\x02\x02\x02\u138E\u1391\x03\x02\x02\x02\u138F\u138D\x03\x02\x02\x02" +
		"\u138F\u1390\x03\x02\x02\x02\u1390\u1392\x03\x02\x02\x02\u1391\u138F\x03" +
		"\x02\x02\x02\u1392\u1393\x07\u01CB\x02\x02\u1393\u1396\x03\x02\x02\x02" +
		"\u1394\u1396\x05\u02A8\u0155\x02\u1395\u137B\x03\x02\x02\x02\u1395\u1381" +
		"\x03\x02\x02\x02\u1395\u1387\x03\x02\x02\x02\u1395\u1394\x03\x02\x02\x02" +
		"\u1396\u0277\x03\x02\x02\x02\u1397\u1399\x07\u01CA\x02\x02\u1398\u139A" +
		"\x05\u02A6\u0154\x02\u1399\u1398\x03\x02\x02\x02\u1399\u139A\x03\x02\x02" +
		"\x02\u139A\u139F\x03\x02\x02\x02\u139B\u139C\x07\u01CC\x02\x02\u139C\u139E" +
		"\x05\u02A6\u0154\x02\u139D\u139B\x03\x02\x02\x02\u139E\u13A1\x03\x02\x02" +
		"\x02\u139F\u139D\x03\x02\x02\x02\u139F\u13A0\x03\x02\x02\x02\u13A0\u13A2" +
		"\x03\x02\x02\x02\u13A1\u139F\x03\x02\x02\x02\u13A2\u13A3\x07\u01CB\x02" +
		"\x02\u13A3\u0279\x03\x02\x02\x02\u13A4\u13A6\x05\u032E\u0198\x02\u13A5" +
		"\u13A7\x05\u0294\u014B\x02\u13A6\u13A5\x03\x02\x02\x02\u13A6\u13A7\x03" +
		"\x02\x02\x02\u13A7\u13A8\x03\x02\x02\x02\u13A8\u13A9\x07\x12\x02\x02\u13A9" +
		"\u13AA\x07\u01CA\x02\x02\u13AA\u13AB\x05\u0260\u0131\x02\u13AB\u13AC\x07" +
		"\u01CB\x02\x02\u13AC\u027B\x03\x02\x02\x02\u13AD\u13AE\t\x1B\x02\x02\u13AE" +
		"\u027D\x03\x02\x02\x02\u13AF\u13B7\x05\u02A6\u0154\x02\u13B0\u13B2\x07" +
		"\x12\x02\x02\u13B1\u13B0\x03\x02\x02\x02\u13B1\u13B2\x03\x02\x02\x02\u13B2" +
		"\u13B5\x03\x02\x02\x02\u13B3\u13B6\x05\u032E\u0198\x02\u13B4\u13B6\x05" +
		"\u030C\u0187\x02\u13B5\u13B3\x03\x02\x02\x02\u13B5\u13B4\x03\x02\x02\x02" +
		"\u13B6\u13B8\x03\x02\x02\x02\u13B7\u13B1\x03\x02\x02\x02\u13B7\u13B8\x03" +
		"\x02\x02\x02\u13B8\u13BF\x03\x02\x02\x02\u13B9\u13BA\x05\u032C\u0197\x02" +
		"\u13BA\u13BB\x07\u01CD\x02\x02\u13BB\u13BC\x07\u01AA\x02\x02\u13BC\u13BF" +
		"\x03\x02\x02\x02\u13BD\u13BF\x07\u01AA\x02\x02\u13BE\u13AF\x03\x02\x02" +
		"\x02\u13BE\u13B9\x03\x02\x02\x02\u13BE\u13BD\x03\x02\x02\x02\u13BF\u027F" +
		"\x03\x02\x02\x02\u13C0\u13C8\x05\u0282\u0142\x02\u13C1\u13C3\x07\u01CC" +
		"\x02\x02\u13C2\u13C4\x07\xCA\x02\x02\u13C3\u13C2\x03\x02\x02\x02\u13C3" +
		"\u13C4\x03\x02\x02\x02\u13C4\u13C5\x03\x02\x02\x02\u13C5\u13C7\x05\u0282" +
		"\u0142\x02\u13C6\u13C1\x03\x02\x02\x02\u13C7\u13CA\x03\x02\x02\x02\u13C8" +
		"\u13C6\x03\x02\x02\x02\u13C8\u13C9\x03\x02\x02\x02\u13C9\u0281\x03\x02" +
		"\x02\x02\u13CA\u13C8\x03\x02\x02\x02\u13CB\u13CF\x05\u0284\u0143\x02\u13CC" +
		"\u13CE\x05\u0286\u0144\x02\u13CD\u13CC\x03\x02\x02\x02\u13CE\u13D1\x03" +
		"\x02\x02\x02\u13CF\u13CD\x03\x02\x02\x02\u13CF\u13D0\x03\x02\x02\x02\u13D0" +
		"\u13DD\x03\x02\x02\x02\u13D1\u13CF\x03\x02\x02\x02\u13D2\u13D3\x07\u01CA" +
		"\x02\x02\u13D3\u13D7\x05\u0284\u0143\x02\u13D4\u13D6\x05\u0286\u0144\x02" +
		"\u13D5\u13D4\x03\x02\x02\x02\u13D6\u13D9\x03\x02\x02\x02\u13D7\u13D5\x03" +
		"\x02\x02\x02\u13D7\u13D8\x03\x02\x02\x02\u13D8\u13DA\x03\x02\x02\x02\u13D9" +
		"\u13D7\x03\x02\x02\x02\u13DA\u13DB\x07\u01CB\x02\x02\u13DB\u13DD\x03\x02" +
		"\x02\x02\u13DC\u13CB\x03\x02\x02\x02\u13DC\u13D2\x03\x02\x02\x02\u13DD" +
		"\u0283\x03\x02\x02\x02\u13DE\u13E0\x05\u032C\u0197\x02\u13DF\u13E1\x05" +
		"\u0266\u0134\x02\u13E0\u13DF\x03\x02\x02\x02\u13E0\u13E1\x03\x02\x02\x02" +
		"\u13E1\u13E3\x03\x02\x02\x02\u13E2\u13E4\x05\u0296\u014C\x02\u13E3\u13E2" +
		"\x03\x02\x02\x02\u13E3\u13E4\x03\x02\x02\x02\u13E4\u13E6\x03\x02\x02\x02" +
		"\u13E5\u13E7\x05\u029A\u014E\x02\u13E6\u13E5\x03\x02\x02\x02\u13E6\u13E7" +
		"\x03\x02\x02\x02\u13E7\u13EC\x03\x02\x02\x02\u13E8\u13EA\x07\x12\x02\x02" +
		"\u13E9\u13E8\x03\x02\x02\x02\u13E9\u13EA\x03\x02\x02\x02\u13EA\u13EB\x03" +
		"\x02\x02\x02\u13EB\u13ED\x05\u032E\u0198\x02\u13EC\u13E9\x03\x02\x02\x02" +
		"\u13EC\u13ED\x03\x02\x02\x02\u13ED\u13EF\x03\x02\x02\x02\u13EE\u13F0\x05" +
		"\u028C\u0147\x02\u13EF\u13EE\x03\x02\x02\x02\u13EF\u13F0\x03\x02\x02\x02" +
		"\u13F0\u143C\x03\x02\x02\x02\u13F1\u13F2\x07\u01CA\x02\x02\u13F2\u13F3" +
		"\x07\u018A\x02\x02\u13F3\u13F8\x05\u026C\u0137\x02\u13F4\u13F5\x07\u01CC" +
		"\x02\x02\u13F5\u13F7\x05\u026C\u0137\x02\u13F6\u13F4\x03\x02\x02\x02\u13F7" +
		"\u13FA\x03\x02\x02\x02\u13F8\u13F6\x03\x02\x02\x02\u13F8\u13F9\x03\x02" +
		"\x02\x02\u13F9\u13FB\x03\x02\x02\x02\u13FA\u13F8\x03\x02\x02\x02\u13FB" +
		"\u1403\x07\u01CB\x02\x02\u13FC\u13FE\x07\x12\x02\x02\u13FD\u13FC\x03\x02" +
		"\x02\x02\u13FD\u13FE\x03\x02\x02\x02\u13FE\u13FF\x03\x02\x02\x02\u13FF" +
		"\u1401\x05\u032E\u0198\x02\u1400\u1402\x05\u0294\u014B\x02\u1401\u1400" +
		"\x03\x02\x02\x02\u1401\u1402\x03\x02\x02\x02\u1402\u1404\x03\x02\x02\x02" +
		"\u1403\u13FD\x03\x02\x02\x02\u1403\u1404\x03\x02\x02\x02\u1404\u143C\x03" +
		"\x02\x02\x02\u1405\u140D\x05\u026A\u0136\x02\u1406\u1408\x07\x12\x02\x02" +
		"\u1407\u1406\x03\x02\x02\x02\u1407\u1408\x03\x02\x02\x02\u1408\u1409\x03" +
		"\x02\x02\x02\u1409\u140B\x05\u032E\u0198\x02\u140A\u140C\x05\u0294\u014B" +
		"\x02\u140B\u140A\x03\x02\x02\x02\u140B\u140C\x03\x02\x02\x02\u140C\u140E" +
		"\x03\x02\x02\x02\u140D\u1407\x03\x02\x02\x02\u140D\u140E\x03\x02\x02\x02" +
		"\u140E\u143C\x03\x02\x02\x02\u140F\u1410\x05\u032C\u0197\x02\u1410\u1411" +
		"\x07\u01CA\x02\x02\u1411\u1412\x05\u02A8\u0155\x02\u1412\u141A\x07\u01CB" +
		"\x02\x02\u1413\u1415\x07\x12\x02\x02\u1414\u1413\x03\x02\x02\x02\u1414" +
		"\u1415\x03\x02\x02\x02\u1415\u1416\x03\x02\x02\x02\u1416\u1418\x05\u032E" +
		"\u0198\x02\u1417\u1419\x05\u0294\u014B\x02\u1418\u1417\x03\x02\x02\x02" +
		"\u1418\u1419\x03\x02\x02\x02\u1419\u141B\x03\x02\x02\x02\u141A\u1414\x03" +
		"\x02\x02\x02\u141A\u141B\x03\x02\x02\x02\u141B\u143C\x03\x02\x02\x02\u141C" +
		"\u141D\x07\u0166\x02\x02\u141D\u141E\x07\u01CA\x02\x02\u141E\u141F\x05" +
		"\u032C\u0197\x02\u141F\u1420\x07\u01CA\x02\x02\u1420\u1421\x05\u02A8\u0155" +
		"\x02\u1421\u1422\x07\u01CB\x02\x02\u1422\u142A\x07\u01CB\x02\x02\u1423" +
		"\u1425\x07\x12\x02\x02\u1424\u1423\x03\x02\x02\x02\u1424\u1425\x03\x02" +
		"\x02\x02\u1425\u1426\x03\x02\x02\x02\u1426\u1428\x05\u032E\u0198\x02\u1427" +
		"\u1429\x05\u0294\u014B\x02\u1428\u1427\x03\x02\x02\x02\u1428\u1429\x03" +
		"\x02\x02\x02\u1429\u142B\x03\x02\x02\x02\u142A\u1424\x03\x02\x02\x02\u142A" +
		"\u142B\x03\x02\x02\x02\u142B\u143C\x03\x02\x02\x02\u142C\u142D\x07\x82" +
		"\x02\x02\u142D\u1435\x05\u02FE\u0180\x02\u142E\u1430\x07\x12\x02\x02\u142F" +
		"\u142E\x03\x02\x02\x02\u142F\u1430\x03\x02\x02\x02\u1430\u1431\x03\x02" +
		"\x02\x02\u1431\u1433\x05\u032E\u0198\x02\u1432\u1434\x05\u0294\u014B\x02" +
		"\u1433\u1432\x03\x02\x02\x02\u1433\u1434\x03\x02\x02\x02\u1434\u1436\x03" +
		"\x02\x02\x02\u1435\u142F\x03\x02\x02\x02\u1435\u1436\x03\x02\x02\x02\u1436" +
		"\u143C\x03\x02\x02\x02\u1437\u1438\x07\u01CA\x02\x02\u1438\u1439\x05\u0280" +
		"\u0141\x02\u1439\u143A\x07\u01CB\x02\x02\u143A\u143C\x03\x02\x02\x02\u143B" +
		"\u13DE\x03\x02\x02\x02\u143B\u13F1\x03\x02\x02\x02\u143B\u1405\x03\x02" +
		"\x02\x02\u143B\u140F\x03\x02\x02\x02\u143B\u141C\x03\x02\x02\x02\u143B" +
		"\u142C\x03\x02\x02\x02\u143B\u1437\x03\x02\x02\x02\u143C\u0285\x03\x02" +
		"\x02\x02\u143D\u143F\x05\u0288\u0145\x02\u143E\u1440\x05\u028C\u0147\x02" +
		"\u143F\u143E\x03\x02\x02\x02\u143F\u1440\x03\x02\x02\x02\u1440\u1442\x03" +
		"\x02\x02\x02\u1441\u1443\x07\xCA\x02\x02\u1442\u1441\x03\x02\x02\x02\u1442" +
		"\u1443\x03\x02\x02\x02";
	private static readonly _serializedATNSegment10: string =
		"\u1443\u1444\x03\x02\x02\x02\u1444\u1446\x05\u0284\u0143\x02\u1445\u1447" +
		"\x05\u0292\u014A\x02\u1446\u1445\x03\x02\x02\x02\u1446\u1447\x03\x02\x02" +
		"\x02\u1447\u1453\x03\x02\x02\x02\u1448\u144A\x05\u028A\u0146\x02\u1449" +
		"\u144B\x05\u028C\u0147\x02\u144A\u1449\x03\x02\x02\x02\u144A\u144B\x03" +
		"\x02\x02\x02\u144B\u144D\x03\x02\x02\x02\u144C\u144E\x07\xCA\x02\x02\u144D" +
		"\u144C\x03\x02\x02\x02\u144D\u144E\x03\x02\x02\x02\u144E\u144F\x03\x02" +
		"\x02\x02\u144F\u1450\x05\u0284\u0143\x02\u1450\u1451\x05\u0292\u014A\x02" +
		"\u1451\u1453\x03\x02\x02\x02\u1452\u143D\x03\x02\x02\x02\u1452\u1448\x03" +
		"\x02\x02\x02\u1453\u0287\x03\x02\x02\x02\u1454\u145B\x07\xC0\x02\x02\u1455" +
		"\u1456\x07\xB1\x02\x02\u1456\u145B\x07\xC0\x02\x02\u1457\u145B\x07J\x02" +
		"\x02\u1458\u1459\x07J\x02\x02\u1459\u145B\x07\xC0\x02\x02\u145A\u1454" +
		"\x03\x02\x02\x02\u145A\u1455\x03\x02\x02\x02\u145A\u1457\x03\x02\x02\x02" +
		"\u145A\u1458\x03\x02\x02\x02\u145B\u0289\x03\x02\x02\x02\u145C\u145D\x07" +
		"\xCC\x02\x02\u145D\u1478\x07\xC0\x02\x02\u145E\u145F\x07\u0139\x02\x02" +
		"\u145F\u1478\x07\xC0\x02\x02\u1460\u1461\x07\x92\x02\x02\u1461\u1478\x07" +
		"\xC0\x02\x02\u1462\u1463\x07\xCC\x02\x02\u1463\u1464\x07\u0101\x02\x02" +
		"\u1464\u1478\x07\xC0\x02\x02\u1465\u1466\x07\u0139\x02\x02\u1466\u1467" +
		"\x07\u0101\x02\x02\u1467\u1478\x07\xC0\x02\x02\u1468\u1469\x07\x92\x02" +
		"\x02\u1469\u146A\x07\u0101\x02\x02\u146A\u1478\x07\xC0\x02\x02\u146B\u146C" +
		"\x07\xCC\x02\x02\u146C\u146D\x07\u014A\x02\x02\u146D\u1478\x07\xC0\x02" +
		"\x02\u146E\u146F\x07\u0139\x02\x02\u146F\u1470\x07\u014A\x02\x02\u1470" +
		"\u1478\x07\xC0\x02\x02\u1471\u1472\x07\xCC\x02\x02\u1472\u1473\x07\x0E" +
		"\x02\x02\u1473\u1478\x07\xC0\x02\x02\u1474\u1475\x07\u0139\x02\x02\u1475" +
		"\u1476\x07\x0E\x02\x02\u1476\u1478\x07\xC0\x02\x02\u1477\u145C\x03\x02" +
		"\x02\x02\u1477\u145E\x03\x02\x02\x02\u1477\u1460\x03\x02\x02\x02\u1477" +
		"\u1462\x03\x02\x02\x02\u1477\u1465\x03\x02\x02\x02\u1477\u1468\x03\x02" +
		"\x02\x02\u1477\u146B\x03\x02\x02\x02\u1477\u146E\x03\x02\x02\x02\u1477" +
		"\u1471\x03\x02\x02\x02\u1477\u1474\x03\x02\x02\x02\u1478\u028B\x03\x02" +
		"\x02\x02\u1479\u147A\x07\u01CE\x02\x02\u147A\u147F\x05\u032E\u0198\x02" +
		"\u147B\u147C\x07\u01CC\x02\x02\u147C\u147E\x05\u032E\u0198\x02\u147D\u147B" +
		"\x03\x02\x02\x02\u147E\u1481\x03\x02\x02\x02\u147F\u147D\x03\x02\x02\x02" +
		"\u147F\u1480\x03\x02\x02\x02\u1480\u1482\x03\x02\x02\x02\u1481\u147F\x03" +
		"\x02\x02\x02\u1482\u1483\x07\u01CF\x02\x02\u1483\u028D\x03\x02\x02\x02" +
		"\u1484\u1485\x07\u01D2\x02\x02\u1485\u1486\x07\u014F\x02\x02\u1486\u1487" +
		"\x07\u01CA\x02\x02\u1487\u148C\x05\u0290\u0149\x02\u1488\u1489\x07\u01CC" +
		"\x02\x02\u1489\u148B\x05\u0290\u0149\x02\u148A\u1488\x03\x02\x02\x02\u148B" +
		"\u148E\x03\x02\x02\x02\u148C\u148A\x03\x02\x02\x02\u148C\u148D\x03\x02" +
		"\x02\x02\u148D\u148F\x03\x02\x02\x02\u148E\u148C\x03\x02\x02\x02\u148F" +
		"\u1490\x07\u01CB\x02\x02\u1490\u1491\x07\u01D3\x02\x02\u1491\u028F\x03" +
		"\x02\x02\x02\u1492\u1493\x05\u0332\u019A\x02\u1493\u1494\x07\u01A1\x02" +
		"\x02\u1494\u1495\x05\u02B6\u015C\x02\u1495\u0291\x03\x02\x02\x02\u1496" +
		"\u1497\x07\xF9\x02\x02\u1497\u14A5\x05\u02A6\u0154\x02\u1498\u1499\x07" +
		"\u0188\x02\x02\u1499\u149A\x07\u01CA\x02\x02\u149A\u149F\x05\u032E\u0198" +
		"\x02\u149B\u149C\x07\u01CC\x02\x02\u149C\u149E\x05\u032E\u0198\x02\u149D" +
		"\u149B\x03\x02\x02\x02\u149E\u14A1\x03\x02\x02\x02\u149F\u149D\x03\x02" +
		"\x02\x02\u149F\u14A0\x03\x02\x02\x02\u14A0\u14A2\x03\x02\x02\x02\u14A1" +
		"\u149F\x03\x02\x02\x02\u14A2\u14A3\x07\u01CB\x02\x02\u14A3\u14A5\x03\x02" +
		"\x02\x02\u14A4\u1496\x03\x02\x02\x02\u14A4\u1498\x03\x02\x02\x02\u14A5" +
		"\u0293\x03\x02\x02\x02\u14A6\u14A7\x07\u01CA\x02\x02\u14A7\u14AC\x05\u032E" +
		"\u0198\x02\u14A8\u14A9\x07\u01CC\x02\x02\u14A9\u14AB\x05\u032E\u0198\x02" +
		"\u14AA\u14A8\x03\x02\x02\x02\u14AB\u14AE\x03\x02\x02\x02\u14AC\u14AA\x03" +
		"\x02\x02\x02\u14AC\u14AD\x03\x02\x02\x02\u14AD\u14AF\x03\x02\x02\x02\u14AE" +
		"\u14AC\x03\x02\x02\x02\u14AF\u14B0\x07\u01CB\x02\x02\u14B0\u0295\x03\x02" +
		"\x02\x02\u14B1\u14B3\x07\u016A\x02\x02\u14B2\u14B1\x03\x02\x02\x02\u14B2" +
		"\u14B3\x03\x02\x02\x02\u14B3\u14B4\x03\x02\x02\x02\u14B4\u14B5\t\x1C\x02" +
		"\x02\u14B5\u14B6\x07\u01CA\x02\x02\u14B6\u14BB\x05\u0332\u019A\x02\u14B7" +
		"\u14B8\x07\u01CC\x02\x02\u14B8\u14BA\x05\u0332\u019A\x02\u14B9\u14B7\x03" +
		"\x02\x02\x02\u14BA\u14BD\x03\x02\x02\x02\u14BB\u14B9\x03\x02\x02\x02\u14BB" +
		"\u14BC\x03\x02\x02\x02\u14BC\u14BE\x03\x02\x02\x02\u14BD\u14BB\x03\x02" +
		"\x02\x02\u14BE\u14BF\x07\u01CB\x02\x02\u14BF\u14C7\x03\x02\x02\x02\u14C0" +
		"\u14C2\x07\u016A\x02\x02\u14C1\u14C0\x03\x02\x02\x02\u14C1\u14C2\x03\x02" +
		"\x02\x02\u14C2\u14C3\x03\x02\x02\x02\u14C3\u14C4\t\x1C\x02\x02\u14C4\u14C7" +
		"\x05\u0332\u019A\x02\u14C5\u14C7\x05\u0298\u014D\x02\u14C6\u14B2\x03\x02" +
		"\x02\x02\u14C6\u14C1\x03\x02\x02\x02\u14C6\u14C5\x03\x02\x02\x02\u14C7" +
		"\u0297\x03\x02\x02\x02\u14C8\u14C9\x07\u0104\x02\x02\u14C9\u14CA\x07\u01CA" +
		"\x02\x02\u14CA\u14CF\x05\u02EE\u0178\x02\u14CB\u14CC\x07\u01CC\x02\x02" +
		"\u14CC\u14CE\x05\u02EE\u0178\x02\u14CD\u14CB\x03\x02\x02\x02\u14CE\u14D1" +
		"\x03\x02\x02\x02\u14CF\u14CD\x03\x02\x02\x02\u14CF\u14D0\x03\x02\x02\x02" +
		"\u14D0\u14D2\x03\x02\x02\x02\u14D1\u14CF\x03\x02\x02\x02\u14D2\u14D3\x07" +
		"\u01CB\x02\x02\u14D3\u0299\x03\x02\x02\x02\u14D4\u14D5\x07\u0168\x02\x02" +
		"\u14D5\u14D6\x07\u01CA\x02\x02\u14D6\u14DB\x07\u01BA\x02\x02\u14D7\u14D8" +
		"\x07\u01CC\x02\x02\u14D8\u14DA\x07\u01BA\x02\x02\u14D9\u14D7\x03\x02\x02" +
		"\x02\u14DA\u14DD\x03\x02\x02\x02\u14DB\u14D9\x03\x02\x02\x02\u14DB\u14DC" +
		"\x03\x02\x02\x02\u14DC\u14DE\x03\x02\x02\x02\u14DD\u14DB\x03\x02\x02\x02" +
		"\u14DE\u14DF\x07\u01CB\x02\x02\u14DF\u029B\x03\x02\x02\x02\u14E0\u14E1" +
		"\x07\u01CA\x02\x02\u14E1\u14E6\x05\u029E\u0150\x02\u14E2\u14E3\x07\u01CC" +
		"\x02\x02\u14E3\u14E5\x05\u029E\u0150\x02\u14E4\u14E2\x03\x02\x02\x02\u14E5" +
		"\u14E8\x03\x02\x02\x02\u14E6\u14E4\x03\x02\x02\x02\u14E6\u14E7\x03\x02" +
		"\x02\x02\u14E7\u14E9\x03\x02\x02\x02\u14E8\u14E6\x03\x02\x02\x02\u14E9" +
		"\u14EA\x07\u01CB\x02\x02\u14EA\u029D\x03\x02\x02\x02\u14EB\u14EE\x05\u02A6" +
		"\u0154\x02\u14EC\u14EE\x07`\x02\x02\u14ED\u14EB\x03\x02\x02\x02\u14ED" +
		"\u14EC\x03\x02\x02\x02\u14EE\u029F\x03\x02\x02\x02\u14EF\u14F4\x05\u02A2" +
		"\u0152\x02\u14F0\u14F1\x07\u01CC\x02\x02\u14F1\u14F3\x05\u02A2\u0152\x02" +
		"\u14F2\u14F0\x03\x02\x02\x02\u14F3\u14F6\x03\x02\x02\x02\u14F4\u14F2\x03" +
		"\x02\x02\x02\u14F4\u14F5\x03\x02\x02\x02\u14F5\u02A1\x03\x02\x02\x02\u14F6" +
		"\u14F4\x03\x02\x02\x02\u14F7\u14F8\x05\u02A6\u0154\x02\u14F8\u14F9\x07" +
		"\u01C9\x02\x02\u14F9\u14FA\x05\u02A6\u0154\x02\u14FA\u02A3\x03\x02\x02" +
		"\x02\u14FB\u14FC\x05\u02A6\u0154\x02\u14FC\u14FD\x07\x02\x02\x03\u14FD" +
		"\u02A5\x03\x02\x02\x02\u14FE\u14FF\b\u0154\x01\x02\u14FF\u1503\x05\u02AA" +
		"\u0156\x02\u1500\u1501\x07\xF1\x02\x02\u1501\u1503\x05\u02A6\u0154\x05" +
		"\u1502\u14FE\x03\x02\x02\x02\u1502\u1500\x03\x02\x02\x02\u1503\u150C\x03" +
		"\x02\x02\x02\u1504\u1505\f\x04\x02\x02\u1505\u1506\t\x1D\x02\x02\u1506" +
		"\u150B\x05\u02A6\u0154\x05\u1507\u1508\f\x03\x02\x02\u1508\u1509\t\x1E" +
		"\x02\x02\u1509\u150B\x05\u02A6\u0154\x04\u150A\u1504\x03\x02\x02\x02\u150A" +
		"\u1507\x03\x02\x02\x02\u150B\u150E\x03\x02\x02\x02\u150C\u150A\x03\x02" +
		"\x02\x02\u150C\u150D\x03\x02\x02\x02\u150D\u02A7\x03\x02\x02\x02\u150E" +
		"\u150C\x03\x02\x02\x02\u150F\u1514\x05\u02A6\u0154\x02\u1510\u1511\x07" +
		"\u01CC\x02\x02\u1511\u1513\x05\u02A6\u0154\x02\u1512\u1510\x03\x02\x02" +
		"\x02\u1513\u1516\x03\x02\x02\x02\u1514\u1512\x03\x02\x02\x02\u1514\u1515" +
		"\x03\x02\x02\x02\u1515\u02A9\x03\x02\x02\x02\u1516\u1514\x03\x02\x02\x02" +
		"\u1517\u1518\b\u0156\x01\x02\u1518\u1519\x05\u02AC\u0157\x02\u1519\u152C" +
		"\x03\x02\x02\x02\u151A\u151B\f\x05\x02\x02\u151B\u151D\x07\xBD\x02\x02" +
		"\u151C\u151E\x07\xF1\x02\x02\u151D\u151C\x03\x02\x02\x02\u151D\u151E\x03" +
		"\x02\x02\x02\u151E\u151F\x03\x02\x02\x02\u151F\u152B\x07\xF2\x02\x02\u1520" +
		"\u1521\f\x04\x02\x02\u1521\u1522\x05\u0310\u0189\x02\u1522\u1523\x05\u02AC" +
		"\u0157\x02\u1523\u152B\x03\x02\x02\x02\u1524\u1525\f\x03\x02\x02\u1525" +
		"\u1526\x05\u0310\u0189\x02\u1526\u1527\x07\u01CA\x02\x02\u1527\u1528\x05" +
		"\u0260\u0131\x02\u1528\u1529\x07\u01CB\x02\x02\u1529\u152B\x03\x02\x02" +
		"\x02\u152A\u151A\x03\x02\x02\x02\u152A\u1520\x03\x02\x02\x02\u152A\u1524" +
		"\x03\x02\x02\x02\u152B\u152E\x03\x02\x02\x02\u152C\u152A\x03\x02\x02\x02" +
		"\u152C\u152D\x03\x02\x02\x02\u152D\u02AB\x03\x02\x02\x02\u152E\u152C\x03" +
		"\x02\x02\x02\u152F\u1531\x05\u02B2\u015A\x02\u1530\u1532\x05\u02B0\u0159" +
		"\x02\u1531\u1530\x03\x02\x02\x02\u1531\u1532\x03\x02\x02\x02\u1532\u1535" +
		"\x03\x02\x02\x02\u1533\u1535\x05\u02AE\u0158\x02\u1534\u152F\x03\x02\x02" +
		"\x02\u1534\u1533\x03\x02\x02\x02\u1535\u02AD\x03\x02\x02\x02\u1536\u1537" +
		"\x07\u01CA\x02\x02\u1537\u153A\x05\u02A6\u0154\x02\u1538\u1539\x07\u01CC" +
		"\x02\x02\u1539\u153B\x05\u02A6\u0154\x02\u153A\u1538\x03\x02\x02\x02\u153B" +
		"\u153C\x03\x02\x02\x02\u153C\u153A\x03\x02\x02\x02\u153C\u153D\x03\x02" +
		"\x02\x02\u153D\u153E\x03\x02\x02\x02\u153E\u1540\x07\u01CB\x02\x02\u153F" +
		"\u1541\x07\xF1\x02\x02\u1540\u153F\x03\x02\x02\x02\u1540\u1541\x03\x02" +
		"\x02\x02\u1541\u1542\x03\x02\x02\x02\u1542\u1543\x07\xAB\x02\x02\u1543" +
		"\u1544\x07\u01CA\x02\x02\u1544\u1545\x05\u0260\u0131\x02\u1545\u1546\x07" +
		"\u01CB\x02\x02\u1546\u02AF\x03\x02\x02\x02\u1547\u1549\x07\xF1\x02\x02" +
		"\u1548\u1547\x03\x02\x02\x02\u1548\u1549\x03\x02\x02\x02\u1549\u154A\x03" +
		"\x02\x02\x02\u154A\u154B\x07\xAB\x02\x02\u154B\u154C\x07\u01CA\x02\x02" +
		"\u154C\u154D\x05\u0260\u0131\x02\u154D\u154E\x07\u01CB\x02\x02\u154E\u1565" +
		"\x03\x02\x02\x02\u154F\u1551\x07\xF1\x02\x02\u1550\u154F\x03\x02\x02\x02" +
		"\u1550\u1551\x03\x02\x02\x02\u1551\u1552\x03\x02\x02\x02\u1552\u1553\x07" +
		"\xAB\x02\x02\u1553\u1554\x07\u01CA\x02\x02\u1554\u1555\x05\u02A8\u0155" +
		"\x02\u1555\u1556\x07\u01CB\x02\x02\u1556\u1565\x03\x02\x02\x02\u1557\u1559" +
		"\x07\xF1\x02\x02\u1558\u1557\x03\x02\x02\x02\u1558\u1559\x03\x02\x02\x02" +
		"\u1559\u155A\x03\x02\x02\x02\u155A\u155B\x07\x1E\x02\x02\u155B\u155C\x05" +
		"\u02B2\u015A\x02\u155C\u155D\x07\r\x02\x02\u155D\u155E\x05\u02AC\u0157" +
		"\x02\u155E\u1565\x03\x02\x02\x02\u155F\u1561\x07\xF1\x02\x02\u1560\u155F" +
		"\x03\x02\x02\x02\u1560\u1561\x03\x02\x02\x02\u1561\u1562\x03\x02\x02\x02" +
		"\u1562\u1563\t\x1F\x02\x02\u1563\u1565\x05\u02B2\u015A\x02\u1564\u1548" +
		"\x03\x02\x02\x02\u1564\u1550\x03\x02\x02\x02\u1564\u1558\x03\x02\x02\x02" +
		"\u1564\u1560\x03\x02\x02\x02\u1565\u02B1\x03\x02\x02\x02\u1566\u1567\b" +
		"\u015A\x01\x02\u1567\u1568\x05\u02B4\u015B\x02\u1568\u1583\x03\x02\x02" +
		"\x02\u1569\u156A\f\n\x02\x02\u156A\u156B\x07\u01B3\x02\x02\u156B\u1582" +
		"\x05\u02B2\u015A\v\u156C\u156D\f\t\x02\x02\u156D\u156E\t \x02\x02\u156E" +
		"\u1582\x05\u02B2\u015A\n\u156F\u1570\f\b\x02\x02\u1570\u1571\t!\x02\x02" +
		"\u1571\u1582\x05\u02B2\u015A\t\u1572\u1573\f\x07\x02\x02\u1573\u1574\x07" +
		"\u01B1\x02\x02\u1574\u1582\x05\u02B2\u015A\b\u1575\u1576\f\x06\x02\x02" +
		"\u1576\u1577\x07\u01B2\x02\x02\u1577\u1582\x05\u02B2\u015A\x07\u1578\u1579" +
		"\f\x05\x02\x02\u1579\u157A\x07\u01B5\x02\x02\u157A\u1582\x05\u02B2\u015A" +
		"\x06\u157B\u157C\f\x04\x02\x02\u157C\u157D\x07\u01B6\x02\x02\u157D\u1582" +
		"\x05\u02B2\u015A\x05\u157E\u157F\f\x03\x02\x02\u157F\u1580\x07\u01B7\x02" +
		"\x02\u1580\u1582\x05\u02B2\u015A\x04\u1581\u1569\x03\x02\x02\x02\u1581" +
		"\u156C\x03\x02\x02\x02\u1581\u156F\x03\x02\x02\x02\u1581\u1572\x03\x02" +
		"\x02\x02\u1581\u1575\x03\x02\x02\x02\u1581\u1578\x03\x02\x02\x02\u1581" +
		"\u157B\x03\x02\x02\x02\u1581\u157E\x03\x02\x02\x02\u1582\u1585\x03\x02" +
		"\x02\x02\u1583\u1581\x03\x02\x02\x02\u1583\u1584\x03\x02\x02\x02\u1584" +
		"\u02B3\x03\x02\x02\x02\u1585\u1583\x03\x02\x02\x02\u1586\u1587\b\u015B" +
		"\x01\x02\u1587\u15EB\x05\u02BC\u015F\x02\u1588\u15EB\x05\u02BE\u0160\x02" +
		"\u1589\u15EB\x05\u02B8\u015D\x02\u158A\u158B\x07\u01D0\x02\x02\u158B\u158C" +
		"\x07\x88\x02\x02\u158C\u158D\x05\u02B8\u015D\x02\u158D\u158E\x07\u01D1" +
		"\x02\x02\u158E\u15EB\x03\x02\x02\x02\u158F\u15EB\x05\u02B6\u015C\x02\u1590" +
		"\u15EB\x05\u02C0\u0161\x02\u1591\u1592\t\"\x02\x02\u1592\u15EB\x05\u02B4" +
		"\u015B\x13\u1593\u1594\x07\u01AF\x02\x02\u1594\u15EB\x05\u02B4\u015B\x12" +
		"\u1595\u1596\x07\u01CA\x02\x02\u1596\u1597\x05\u02A6\u0154\x02\u1597\u1598" +
		"\x07\u01CB\x02\x02\u1598\u15EB\x03\x02\x02\x02\u1599\u159A\x07y\x02\x02" +
		"\u159A\u159B\x07\u01CA\x02\x02\u159B\u159C\x05\u0260\u0131\x02\u159C\u159D" +
		"\x07\u01CB\x02\x02\u159D\u15EB\x03\x02\x02\x02\u159E\u15EB\x05\u026A\u0136" +
		"\x02\u159F\u15A0\x07-\x02\x02\u15A0\u15A1\x07\u01CA\x02\x02\u15A1\u15A2" +
		"\x05\u02A6\u0154\x02\u15A2\u15A3\x07\x12\x02\x02\u15A3\u15A4\x05\u031A" +
		"\u018E\x02\u15A4\u15A5\x07\u01CB\x02\x02\u15A5\u15EB\x03\x02\x02\x02\u15A6" +
		"\u15A7\x07F\x02\x02\u15A7\u15A8\x07\u01CA\x02\x02\u15A8\u15A9\x05\u02A6" +
		"\u0154\x02\u15A9\u15AA\x07\u01CC\x02\x02\u15AA\u15AB\x05\u031A\u018E\x02" +
		"\u15AB\u15AC\x07\u01CB\x02\x02\u15AC\u15EB\x03\x02\x02\x02\u15AD\u15AE" +
		"\x07,\x02\x02\u15AE\u15B0\x05\u02A6\u0154\x02\u15AF\u15B1\x05\u02CA\u0166" +
		"\x02\u15B0\u15AF\x03\x02\x02\x02\u15B1\u15B2\x03\x02\x02\x02\u15B2\u15B0" +
		"\x03\x02\x02\x02\u15B2\u15B3\x03\x02\x02\x02\u15B3\u15B6\x03\x02\x02\x02" +
		"\u15B4\u15B5\x07o\x02\x02\u15B5\u15B7\x05\u02A6\u0154\x02\u15B6\u15B4" +
		"\x03\x02\x02\x02\u15B6\u15B7\x03\x02\x02\x02\u15B7\u15B8\x03\x02\x02\x02" +
		"\u15B8\u15B9\x07q\x02\x02\u15B9\u15EB\x03\x02\x02\x02\u15BA\u15BC\x07" +
		",\x02\x02\u15BB\u15BD\x05\u02CA\u0166\x02\u15BC\u15BB\x03\x02\x02\x02" +
		"\u15BD\u15BE\x03\x02\x02\x02\u15BE\u15BC\x03\x02\x02\x02\u15BE\u15BF\x03" +
		"\x02\x02\x02\u15BF\u15C2\x03\x02\x02\x02\u15C0\u15C1\x07o\x02\x02\u15C1" +
		"\u15C3\x05\u02A6\u0154\x02\u15C2\u15C0\x03\x02\x02\x02\u15C2\u15C3\x03" +
		"\x02\x02\x02\u15C3\u15C4\x03\x02\x02\x02\u15C4\u15C5\x07q\x02\x02\u15C5" +
		"\u15EB\x03\x02\x02\x02\u15C6\u15C8\x05\u031C\u018F\x02\u15C7\u15C6\x03" +
		"\x02\x02\x02\u15C7\u15C8\x03\x02\x02\x02\u15C8\u15C9\x03\x02\x02\x02\u15C9" +
		"\u15CB\x07\u01CE\x02\x02\u15CA\u15CC\x05\u02A8\u0155\x02\u15CB\u15CA\x03" +
		"\x02\x02\x02\u15CB\u15CC\x03\x02\x02\x02\u15CC\u15CD\x03\x02\x02\x02\u15CD" +
		"\u15EB\x07\u01CF\x02\x02\u15CE\u15CF\x05\u031E\u0190\x02\u15CF\u15D1\x07" +
		"\u01D0\x02\x02\u15D0\u15D2\x05\u02A0\u0151\x02\u15D1\u15D0\x03\x02\x02" +
		"\x02\u15D1\u15D2\x03\x02\x02\x02\u15D2\u15D3\x03\x02\x02\x02\u15D3\u15D4" +
		"\x07\u01D1\x02\x02\u15D4\u15EB\x03\x02\x02\x02\u15D5\u15D6\x07\xDA\x02" +
		"\x02\u15D6\u15D8\x07\u01D0\x02\x02\u15D7\u15D9\x05\u02A0\u0151\x02\u15D8" +
		"\u15D7\x03\x02\x02\x02\u15D8\u15D9\x03\x02\x02\x02\u15D9\u15DA\x03\x02" +
		"\x02\x02\u15DA\u15EB\x07\u01D1\x02\x02\u15DB\u15DE\x05\u032E\u0198\x02" +
		"\u15DC\u15DE\x05\u0330\u0199\x02\u15DD\u15DB\x03\x02\x02\x02\u15DD\u15DC" +
		"\x03\x02\x02\x02\u15DE\u15DF\x03\x02\x02\x02\u15DF\u15E0\x07\u01B8\x02" +
		"\x02\u15E0\u15E1\x05\u02A6\u0154\x02\u15E1\u15EB\x03\x02\x02\x02\u15E2" +
		"\u15E3\x05\u0330\u0199\x02\u15E3\u15E4\x07\u01B8\x02\x02\u15E4\u15E6\x07" +
		"\u01CA\x02\x02\u15E5\u15E7\x05\u02A8\u0155\x02\u15E6\u15E5\x03\x02\x02" +
		"\x02\u15E6\u15E7\x03\x02\x02\x02\u15E7\u15E8\x03\x02\x02\x02\u15E8\u15E9" +
		"\x07\u01CB\x02\x02\u15E9\u15EB\x03\x02\x02\x02\u15EA\u1586\x03\x02\x02" +
		"\x02\u15EA\u1588\x03\x02\x02\x02\u15EA\u1589\x03\x02\x02\x02\u15EA\u158A" +
		"\x03\x02\x02\x02\u15EA\u158F\x03\x02\x02\x02\u15EA\u1590\x03\x02\x02\x02" +
		"\u15EA\u1591\x03\x02\x02\x02\u15EA\u1593\x03\x02\x02\x02\u15EA\u1595\x03" +
		"\x02\x02\x02\u15EA\u1599\x03\x02\x02\x02\u15EA\u159E\x03\x02\x02\x02\u15EA" +
		"\u159F\x03\x02\x02\x02\u15EA\u15A6\x03\x02\x02\x02\u15EA\u15AD\x03\x02" +
		"\x02\x02\u15EA\u15BA\x03\x02\x02\x02\u15EA\u15C7\x03\x02\x02\x02\u15EA" +
		"\u15CE\x03\x02\x02\x02\u15EA\u15D5\x03\x02\x02\x02\u15EA\u15DD\x03\x02" +
		"\x02\x02\u15EA\u15E2\x03\x02\x02\x02\u15EB\u160F\x03\x02\x02\x02\u15EC" +
		"\u15ED\f\x14\x02\x02\u15ED\u15EE\x07\x03\x02\x02\u15EE\u160E\x05\u02B4" +
		"\u015B\x15\u15EF\u15F0\f\x18\x02\x02\u15F0\u15F3\x079\x02\x02\u15F1\u15F4" +
		"\x05\u032E\u0198\x02\u15F2\u15F4\x05\u030C\u0187\x02\u15F3\u15F1\x03\x02" +
		"\x02\x02\u15F3\u15F2\x03\x02\x02\x02\u15F4\u160E\x03\x02\x02\x02\u15F5" +
		"\u15F9\f\x15\x02\x02\u15F6\u15FA\x07\u01C5\x02\x02\u15F7\u15F8\x07\u01CD" +
		"\x02\x02\u15F8\u15FA\x05\u032E\u0198\x02\u15F9\u15F6\x03\x02\x02\x02\u15F9" +
		"\u15F7\x03\x02\x02\x02\u15FA\u160E\x03\x02\x02\x02\u15FB\u15FC\f\x07\x02" +
		"\x02\u15FC\u15FD\x07\u01CE\x02\x02\u15FD\u15FE\x05\u02B2\u015A\x02\u15FE" +
		"\u15FF\x07\u01CF\x02\x02\u15FF\u160E\x03\x02\x02\x02\u1600\u1601\f\x06" +
		"\x02\x02\u1601\u1603\x07\u01CE\x02\x02\u1602\u1604\x07\u01BA\x02\x02\u1603" +
		"\u1602\x03\x02\x02\x02\u1603\u1604\x03\x02\x02\x02\u1604\u1605\x03\x02" +
		"\x02\x02\u1605\u1607\x07\u01C9\x02\x02\u1606\u1608\x07\u01BA\x02\x02\u1607" +
		"\u1606\x03\x02\x02\x02\u1607\u1608\x03\x02\x02\x02\u1608\u1609\x03\x02" +
		"\x02\x02\u1609\u160E\x07\u01CF\x02\x02\u160A\u160B\f\x05\x02\x02\u160B" +
		"\u160C\x07\u01B8\x02\x02\u160C\u160E\x05\u030C\u0187\x02\u160D\u15EC\x03" +
		"\x02\x02\x02\u160D\u15EF\x03\x02\x02\x02\u160D\u15F5\x03\x02\x02\x02\u160D" +
		"\u15FB\x03\x02\x02\x02\u160D\u1600\x03\x02\x02\x02\u160D\u160A\x03\x02" +
		"\x02\x02\u160E\u1611\x03\x02\x02\x02\u160F\u160D\x03\x02\x02\x02\u160F" +
		"\u1610\x03\x02\x02\x02\u1610\u02B5\x03\x02\x02\x02\u1611\u160F\x03\x02" +
		"\x02\x02\u1612\u161C\x07\xF2\x02\x02\u1613\u161C\x05\u0312\u018A\x02\u1614" +
		"\u161C\x05\u033E\u01A0\x02\u1615\u1616\t#\x02\x02\u1616\u161C\x05\u030C" +
		"\u0187\x02\u1617\u161C\x05\u030C\u0187\x02\u1618\u161C\x05\u0314\u018B" +
		"\x02\u1619\u161C\x05\u0318\u018D\x02\u161A\u161C\x05\u030E\u0188\x02\u161B" +
		"\u1612\x03\x02\x02\x02\u161B\u1613\x03\x02\x02\x02\u161B\u1614\x03\x02" +
		"\x02\x02\u161B\u1615\x03\x02\x02\x02\u161B\u1617\x03\x02\x02\x02\u161B" +
		"\u1618\x03\x02\x02\x02\u161B\u1619\x03\x02\x02\x02\u161B\u161A\x03\x02" +
		"\x02\x02\u161C\u02B7\x03\x02\x02\x02\u161D\u161E\x07}\x02\x02\u161E\u161F" +
		"\x07\u01CA\x02\x02\u161F\u1620\x05\u032E\u0198\x02\u1620\u1621\x07\x8F" +
		"\x02\x02\u1621\u1622\x05\u02B2\u015A\x02\u1622\u1623\x07\u01CB\x02\x02" +
		"\u1623\u1659\x03\x02\x02\x02\u1624\u1625\x07\x9A\x02\x02\u1625\u162E\x07" +
		"\u01CA\x02\x02\u1626\u162B\x05\u02A6\u0154\x02\u1627\u1628\x07\u01CC\x02" +
		"\x02\u1628\u162A\x05\u02A6\u0154\x02\u1629\u1627\x03\x02\x02\x02\u162A" +
		"\u162D\x03\x02\x02\x02\u162B\u1629\x03\x02\x02\x02\u162B\u162C\x03\x02" +
		"\x02\x02\u162C\u162F\x03\x02\x02\x02\u162D\u162B\x03\x02\x02\x02\u162E" +
		"\u1626\x03\x02\x02\x02\u162E\u162F\x03\x02\x02\x02\u162F\u1630\x03\x02" +
		"\x02\x02\u1630\u1659\x07\u01CB\x02\x02\u1631\u1632\x07\x9B\x02\x02\u1632" +
		"\u163B\x07\u01CA\x02\x02\u1633\u1638\x05\u02A6\u0154\x02\u1634\u1635\x07" +
		"\u01CC\x02\x02\u1635\u1637\x05\u02A6\u0154\x02\u1636\u1634\x03\x02\x02" +
		"\x02\u1637\u163A\x03\x02\x02\x02\u1638\u1636\x03\x02\x02\x02\u1638\u1639" +
		"\x03\x02\x02\x02\u1639\u163C\x03\x02\x02\x02\u163A\u1638\x03\x02\x02\x02" +
		"\u163B\u1633\x03\x02\x02\x02\u163B\u163C\x03\x02\x02\x02\u163C\u163D\x03" +
		"\x02\x02\x02\u163D\u1659\x07\u01CB\x02\x02\u163E\u1659\x05\u02C2\u0162" +
		"\x02\u163F\u1659\x05\u02C4\u0163\x02\u1640\u1659\x05\u02C6\u0164\x02\u1641" +
		"\u1643\x05\u02BA\u015E\x02\u1642\u1644\x05\u02CC\u0167\x02\u1643\u1642" +
		"\x03\x02\x02\x02\u1643\u1644\x03\x02\x02\x02\u1644\u1659\x03\x02\x02\x02" +
		"\u1645\u1646\x05\u02C8\u0165\x02\u1646\u1647\x05\u02CC\u0167\x02\u1647" +
		"\u1659\x03\x02\x02\x02\u1648\u1649\x05\u032C\u0197\x02\u1649\u1652\x07" +
		"\u01CA\x02\x02\u164A\u164F\x05\u02A6\u0154\x02\u164B\u164C\x07\u01CC\x02" +
		"\x02\u164C\u164E\x05\u02A6\u0154\x02\u164D\u164B\x03\x02\x02\x02\u164E" +
		"\u1651\x03\x02\x02\x02\u164F\u164D\x03\x02\x02\x02\u164F\u1650\x03\x02" +
		"\x02\x02\u1650\u1653\x03\x02\x02\x02\u1651\u164F\x03\x02\x02\x02\u1652" +
		"\u164A\x03\x02\x02\x02\u1652\u1653\x03\x02\x02\x02\u1653\u1654\x03\x02" +
		"\x02\x02\u1654\u1656\x07\u01CB\x02\x02\u1655\u1657\x05\u02CC\u0167\x02" +
		"\u1656\u1655\x03\x02\x02\x02\u1656\u1657\x03\x02\x02\x02\u1657\u1659\x03" +
		"\x02\x02\x02\u1658\u161D\x03\x02\x02\x02\u1658\u1624\x03\x02\x02\x02\u1658" +
		"\u1631\x03\x02\x02\x02\u1658\u163E\x03\x02\x02\x02\u1658\u163F\x03\x02" +
		"\x02\x02\u1658\u1640\x03\x02\x02\x02\u1658\u1641\x03\x02\x02\x02\u1658" +
		"\u1645\x03\x02\x02\x02\u1658\u1648\x03\x02\x02\x02\u1659\u02B9\x03\x02" +
		"\x02\x02\u165A\u165B\x07\x18\x02\x02\u165B\u165D\x07\u01CA\x02\x02\u165C" +
		"\u165E\x05\u027C\u013F\x02\u165D\u165C\x03\x02\x02\x02\u165D\u165E\x03" +
		"\x02\x02\x02\u165E\u165F\x03\x02\x02\x02\u165F\u1660\x05\u02A6\u0154\x02" +
		"\u1660\u1661\x07\u01CB\x02\x02\u1661\u16A5\x03\x02\x02\x02\u1662\u1663" +
		"\x07H\x02\x02\u1663\u1665\x07\u01CA\x02\x02\u1664\u1666\x07\u01AA\x02" +
		"\x02\u1665\u1664\x03\x02\x02\x02\u1665\u1666\x03\x02\x02\x02\u1666\u1667" +
		"\x03\x02\x02\x02\u1667\u16A5\x07\u01CB\x02\x02\u1668\u1669\x07H\x02\x02" +
		"\u1669\u166E\x07\u01CA\x02\x02\u166A\u166C\x05\u027C\u013F\x02\u166B\u166D" +
		"\x05\u028C\u0147\x02\u166C\u166B\x03\x02\x02\x02\u166C\u166D\x03\x02\x02" +
		"\x02\u166D\u166F\x03\x02\x02\x02\u166E\u166A\x03\x02\x02\x02\u166E\u166F" +
		"\x03\x02\x02\x02\u166F\u1678\x03\x02\x02\x02\u1670\u1675\x05\u02A6\u0154" +
		"\x02\u1671\u1672\x07\u01CC\x02\x02\u1672\u1674\x05\u02A6\u0154\x02\u1673" +
		"\u1671\x03\x02\x02\x02\u1674\u1677\x03\x02\x02\x02\u1675\u1673\x03\x02" +
		"\x02\x02\u1675\u1676\x03\x02\x02\x02\u1676\u1679\x03\x02\x02\x02\u1677" +
		"\u1675\x03\x02\x02\x02\u1678\u1670\x03\x02\x02\x02\u1678\u1679\x03\x02" +
		"\x02\x02\u1679\u167A\x03\x02\x02\x02\u167A\u16A5\x07\u01CB\x02\x02\u167B" +
		"\u167C\x07\xDF\x02\x02\u167C\u167E\x07\u01CA\x02\x02\u167D\u167F\x05\u027C" +
		"\u013F\x02\u167E\u167D\x03\x02\x02\x02\u167E\u167F\x03\x02\x02\x02\u167F" +
		"\u1680\x03\x02\x02\x02\u1680\u1681\x05\u02A6\u0154\x02\u1681\u1682\x07" +
		"\u01CB\x02\x02\u1682\u16A5\x03\x02\x02\x02\u1683\u1684\x07\xE2\x02\x02" +
		"\u1684\u1686\x07\u01CA\x02\x02\u1685\u1687\x05\u027C\u013F\x02\u1686\u1685" +
		"\x03\x02\x02\x02\u1686\u1687\x03\x02\x02\x02\u1687\u1688\x03\x02\x02\x02" +
		"\u1688\u1689\x05\u02A6\u0154\x02\u1689\u168A\x07\u01CB\x02\x02\u168A\u16A5" +
		"\x03\x02\x02\x02\u168B\u168C\x07\u015F\x02\x02\u168C\u168E\x07\u01CA\x02" +
		"\x02\u168D\u168F\x05\u027C\u013F\x02\u168E\u168D\x03\x02\x02\x02\u168E" +
		"\u168F\x03\x02\x02\x02\u168F\u1690\x03\x02\x02\x02\u1690\u1691\x05\u02A6" +
		"\u0154\x02\u1691\u1692\x07\u01CB\x02\x02\u1692\u16A5\x03\x02\x02\x02\u1693" +
		"\u1694\x07\x11\x02\x02\u1694\u1695\x07\u01CA\x02\x02\u1695\u16A0\x05\u02A6" +
		"\u0154\x02\u1696\u1697\x07\u0100\x02\x02\u1697\u1698\x07*\x02\x02\u1698" +
		"\u169D\x05\u026E\u0138\x02\u1699\u169A\x07\u01CC\x02\x02\u169A\u169C\x05" +
		"\u026E\u0138\x02\u169B\u1699\x03\x02\x02\x02\u169C\u169F\x03\x02\x02\x02" +
		"\u169D\u169B\x03\x02\x02\x02\u169D\u169E\x03\x02\x02\x02\u169E\u16A1\x03" +
		"\x02\x02\x02\u169F\u169D\x03\x02\x02\x02\u16A0\u1696\x03\x02\x02\x02\u16A0" +
		"\u16A1\x03\x02\x02\x02\u16A1\u16A2\x03\x02\x02\x02\u16A2\u16A3\x07\u01CB" +
		"\x02\x02\u16A3\u16A5\x03\x02\x02\x02\u16A4\u165A\x03\x02\x02\x02\u16A4" +
		"\u1662\x03\x02\x02\x02\u16A4\u1668\x03\x02\x02\x02\u16A4\u167B\x03\x02" +
		"\x02\x02\u16A4\u1683\x03\x02\x02\x02\u16A4\u168B\x03\x02\x02\x02\u16A4" +
		"\u1693\x03\x02\x02\x02\u16A5\u02BB\x03\x02\x02\x02\u16A6\u16A7\x07\u01B9" +
		"\x02\x02\u16A7\u16A8\x05\u0332\u019A\x02\u16A8\u02BD\x03\x02\x02\x02\u16A9" +
		"\u16AA\x07\u01B9\x02\x02\u16AA\u16AE\x07\u01B9\x02\x02\u16AB\u16AC\x05" +
		"\u0304\u0183\x02\u16AC\u16AD\x07\u01CD\x02\x02\u16AD\u16AF\x03\x02\x02" +
		"\x02\u16AE\u16AB\x03\x02\x02\x02\u16AE\u16AF\x03\x02\x02\x02\u16AF\u16B0" +
		"\x03\x02\x02\x02\u16B0\u16B1\x05\u032E\u0198\x02\u16B1\u02BF\x03\x02\x02" +
		"\x02\u16B2\u16B3\x05\u032E\u0198\x02\u16B3\u02C1\x03\x02\x02\x02\u16B4" +
		"\u16B5\x07.\x02\x02\u16B5\u16B6\x07\u01CA\x02\x02\u16B6\u16CB\x07\u01CB" +
		"\x02\x02\u16B7\u16B8\x07U\x02\x02\u16B8\u16B9\x07\u01CA\x02\x02\u16B9" +
		"\u16CB\x07\u01CB\x02\x02\u16BA\u16BB\x07\u0145\x02\x02\u16BB\u16BC\x07" +
		"\u01CA\x02\x02\u16BC\u16CB\x07\u01CB\x02\x02\u16BD\u16BE\x07\u0186\x02" +
		"\x02\u16BE\u16BF\x07\u01CA\x02\x02\u16BF\u16CB\x07\u01CB\x02\x02\u16C0" +
		"\u16C3\x07S\x02\x02\u16C1\u16C2\x07\u01CA\x02\x02\u16C2\u16C4\x07\u01CB" +
		"\x02\x02\u16C3\u16C1\x03\x02\x02\x02\u16C3\u16C4\x03\x02\x02\x02\u16C4" +
		"\u16CB\x03\x02\x02\x02\u16C5\u16C8\x07P\x02\x02\u16C6\u16C7\x07\u01CA" +
		"\x02\x02\u16C7\u16C9\x07\u01CB\x02\x02\u16C8\u16C6\x03\x02\x02\x02\u16C8" +
		"\u16C9\x03\x02\x02\x02\u16C9\u16CB\x03\x02\x02\x02\u16CA\u16B4\x03\x02" +
		"\x02\x02\u16CA\u16B7\x03\x02\x02\x02\u16CA\u16BA\x03\x02\x02\x02\u16CA" +
		"\u16BD\x03\x02\x02\x02\u16CA\u16C0\x03\x02\x02\x02\u16CA\u16C5\x03\x02" +
		"\x02\x02\u16CB\u02C3\x03\x02\x02\x02\u16CC\u16CF\x07O\x02\x02\u16CD\u16CE" +
		"\x07\u01CA\x02\x02\u16CE\u16D0\x07\u01CB\x02\x02\u16CF\u16CD\x03\x02\x02" +
		"\x02\u16CF\u16D0\x03\x02\x02\x02\u16D0\u16E6\x03\x02\x02\x02\u16D1\u16D4" +
		"\x07Q\x02\x02\u16D2\u16D3\x07\u01CA\x02\x02\u16D3\u16D5\x07\u01CB\x02" +
		"\x02\u16D4\u16D2\x03\x02\x02\x02\u16D4\u16D5\x03\x02\x02\x02\u16D5\u16E6" +
		"\x03\x02\x02\x02\u16D6\u16D9\x07R\x02\x02\u16D7\u16D8\x07\u01CA\x02\x02" +
		"\u16D8\u16DA\x07\u01CB\x02\x02\u16D9\u16D7\x03\x02\x02\x02\u16D9\u16DA" +
		"\x03\x02\x02\x02\u16DA\u16E6\x03\x02\x02\x02\u16DB\u16DE\x07\xD4\x02\x02" +
		"\u16DC\u16DD\x07\u01CA\x02\x02\u16DD\u16DF\x07\u01CB\x02\x02\u16DE\u16DC" +
		"\x03\x02\x02\x02\u16DE\u16DF\x03\x02\x02\x02\u16DF\u16E6\x03\x02\x02\x02" +
		"\u16E0\u16E3\x07\xD5\x02\x02\u16E1\u16E2\x07\u01CA\x02\x02\u16E2\u16E4" +
		"\x07\u01CB\x02\x02\u16E3\u16E1\x03\x02\x02\x02\u16E3\u16E4\x03\x02\x02" +
		"\x02\u16E4\u16E6\x03\x02\x02\x02\u16E5\u16CC\x03\x02\x02\x02\u16E5\u16D1" +
		"\x03\x02\x02\x02\u16E5\u16D6\x03\x02\x02\x02\u16E5\u16DB\x03\x02\x02\x02" +
		"\u16E5\u16E0\x03\x02\x02\x02\u16E6\u02C5\x03\x02\x02\x02\u16E7\u16E8\x07" +
		"2\x02\x02\u16E8\u16E9\x07\u01CA\x02\x02\u16E9\u16EA\x05\u02A6\u0154\x02" +
		"\u16EA\u16EB";
	private static readonly _serializedATNSegment11: string =
		"\x07\u01CB\x02\x02\u16EB\u1775\x03\x02\x02\x02\u16EC\u16ED\x07Y\x02\x02" +
		"\u16ED\u16EE\x07\u01CA\x02\x02\u16EE\u16EF\x05\u02A6\u0154\x02\u16EF\u16F0" +
		"\x07\u01CB\x02\x02\u16F0\u1775\x03\x02\x02\x02\u16F1\u16F2\x07\xA3\x02" +
		"\x02\u16F2\u16F3\x07\u01CA\x02\x02\u16F3\u16F4\x05\u02A6\u0154\x02\u16F4" +
		"\u16F5\x07\u01CB\x02\x02\u16F5\u1775\x03\x02\x02\x02\u16F6\u16F7\x07\xA6" +
		"\x02\x02\u16F7\u1700\x07\u01CA\x02\x02\u16F8\u16FD\x05\u02A6\u0154\x02" +
		"\u16F9\u16FA\x07\u01CC\x02\x02\u16FA\u16FC\x05\u02A6\u0154\x02\u16FB\u16F9" +
		"\x03\x02\x02\x02\u16FC\u16FF\x03\x02\x02\x02\u16FD\u16FB\x03\x02\x02\x02" +
		"\u16FD\u16FE\x03\x02\x02\x02\u16FE\u1701\x03\x02\x02\x02\u16FF\u16FD\x03" +
		"\x02\x02\x02\u1700\u16F8\x03\x02\x02\x02\u1700\u1701\x03\x02\x02\x02\u1701" +
		"\u1702\x03\x02\x02\x02\u1702\u1775\x07\u01CB\x02\x02\u1703\u1704\x07\xCC" +
		"\x02\x02\u1704\u1705\x07\u01CA\x02\x02\u1705\u1706\x05\u02A6\u0154\x02" +
		"\u1706\u1707\x07\u01CC\x02\x02\u1707\u1708\x05\u02A6\u0154\x02\u1708\u1709" +
		"\x07\u01CB\x02\x02\u1709\u1775\x03\x02\x02\x02\u170A\u170B\x07\xCF\x02" +
		"\x02\u170B\u170C\x07\u01CA\x02\x02\u170C\u170D\x05\u02A6\u0154\x02\u170D" +
		"\u170E\x07\u01CC\x02\x02\u170E\u170F\x05\u02A6\u0154\x02\u170F\u1710\x07" +
		"\u01CB\x02\x02\u1710\u1775\x03\x02\x02\x02\u1711\u1712\x07\xE3\x02\x02" +
		"\u1712\u1713\x07\u01CA\x02\x02\u1713\u1714\x05\u02A6\u0154\x02\u1714\u1715" +
		"\x07\u01CB\x02\x02\u1715\u1775\x03\x02\x02\x02\u1716\u1717\x07\xE6\x02" +
		"\x02\u1717\u1718\x07\u01CA\x02\x02\u1718\u1719\x05\u02A6\u0154\x02\u1719" +
		"\u171A\x07\u01CC\x02\x02\u171A\u171B\x05\u02A6\u0154\x02\u171B\u171C\x07" +
		"\u01CB\x02\x02\u171C\u1775\x03\x02\x02\x02\u171D\u171E\x07\xE9\x02\x02" +
		"\u171E\u171F\x07\u01CA\x02\x02\u171F\u1720\x05\u02A6\u0154\x02\u1720\u1721" +
		"\x07\u01CB\x02\x02\u1721\u1775\x03\x02\x02\x02\u1722\u1723\x07\u011C\x02" +
		"\x02\u1723\u1724\x07\u01CA\x02\x02\u1724\u1725\x05\u02A6\u0154\x02\u1725" +
		"\u1726\x07\u01CB\x02\x02\u1726\u1775\x03\x02\x02\x02\u1727\u1728\x07\u0127" +
		"\x02\x02\u1728\u1729\x07\u01CA\x02\x02\u1729\u172A\x05\u02A6\u0154\x02" +
		"\u172A\u172B\x07\u01CC\x02\x02\u172B\u172C\x05\u02A6\u0154\x02\u172C\u172D" +
		"\x07\u01CB\x02\x02\u172D\u1775\x03\x02\x02\x02\u172E\u172F\x07\u012D\x02" +
		"\x02\u172F\u1738\x07\u01CA\x02\x02\u1730\u1735\x05\u02A6\u0154\x02\u1731" +
		"\u1732\x07\u01CC\x02\x02\u1732\u1734\x05\u02A6\u0154\x02\u1733\u1731\x03" +
		"\x02\x02\x02\u1734\u1737\x03\x02\x02\x02\u1735\u1733\x03\x02\x02\x02\u1735" +
		"\u1736\x03\x02\x02\x02\u1736\u1739\x03\x02\x02\x02\u1737\u1735\x03\x02" +
		"\x02\x02\u1738\u1730\x03\x02\x02\x02\u1738\u1739\x03\x02\x02\x02\u1739" +
		"\u173A\x03\x02\x02\x02\u173A\u1775\x07\u01CB\x02\x02\u173B\u173C\x07\u0139" +
		"\x02\x02\u173C\u173D\x07\u01CA\x02\x02\u173D\u173E\x05\u02A6\u0154\x02" +
		"\u173E\u173F\x07\u01CC\x02\x02\u173F\u1740\x05\u02A6\u0154\x02\u1740\u1741" +
		"\x07\u01CB\x02\x02\u1741\u1775\x03\x02\x02\x02\u1742\u1743\x07\u013A\x02" +
		"\x02\u1743\u1744\x07\u01CA\x02\x02\u1744\u1745\x05\u02A6\u0154\x02\u1745" +
		"\u1746\x07\u01CC\x02\x02\u1746\u1747\x05\u02A6\u0154\x02\u1747\u1748\x07" +
		"\u01CB\x02\x02\u1748\u1775\x03\x02\x02\x02\u1749\u174A\x07\u0147\x02\x02" +
		"\u174A\u174B\x07\u01CA\x02\x02\u174B\u174C\x05\u02A6\u0154\x02\u174C\u174D" +
		"\x07\u01CB\x02\x02\u174D\u1775\x03\x02\x02\x02\u174E\u174F\x07\u0170\x02" +
		"\x02\u174F\u1750\x07\u01CA\x02\x02\u1750\u1751\x05\u0316\u018C\x02\u1751" +
		"\u1752\x07\u01CC\x02\x02\u1752\u1753\x05\u02A6\u0154\x02\u1753\u1754\x07" +
		"\u01CC\x02\x02\u1754\u1755\x05\u02A6\u0154\x02\u1755\u1756\x07\u01CB\x02" +
		"\x02\u1756\u1775\x03\x02\x02\x02\u1757\u1758\x07\u0171\x02\x02\u1758\u1759" +
		"\x07\u01CA\x02\x02\u1759\u175A\x05\u0316\u018C\x02\u175A\u175B\x07\u01CC" +
		"\x02\x02\u175B\u175C\x05\u02A6\u0154\x02\u175C\u175D\x07\u01CC\x02\x02" +
		"\u175D\u175E\x05\u02A6\u0154\x02\u175E\u175F\x07\u01CB\x02\x02\u175F\u1775" +
		"\x03\x02\x02\x02\u1760\u1761\x07\u019D\x02\x02\u1761\u1762\x07\u01CA\x02" +
		"\x02\u1762\u1763\x05\u02A6\u0154\x02\u1763\u1764\x07\u01CB\x02\x02\u1764" +
		"\u1775\x03\x02\x02\x02\u1765\u1766\x07\u0106\x02\x02\u1766\u1767\x07\u01CA" +
		"\x02\x02\u1767\u1768\x05\u030C\u0187\x02\u1768\u1769\x07\u01CB\x02\x02" +
		"\u1769\u1775\x03\x02\x02\x02\u176A\u176B\x07\x87\x02\x02\u176B\u176C\x07" +
		"\u01CA\x02\x02\u176C\u176D\x05\u02A6\u0154\x02\u176D\u176E\x07\u01CB\x02" +
		"\x02\u176E\u1775\x03\x02\x02\x02\u176F\u1770\x070\x02\x02\u1770\u1771" +
		"\x07\u01CA\x02\x02\u1771\u1772\x05\u02A6\u0154\x02\u1772\u1773\x07\u01CB" +
		"\x02\x02\u1773\u1775\x03\x02\x02\x02\u1774\u16E7\x03\x02\x02\x02\u1774" +
		"\u16EC\x03\x02\x02\x02\u1774\u16F1\x03\x02\x02\x02\u1774\u16F6\x03\x02" +
		"\x02\x02\u1774\u1703\x03\x02\x02\x02\u1774\u170A\x03\x02\x02\x02\u1774" +
		"\u1711\x03\x02\x02\x02\u1774\u1716\x03\x02\x02\x02\u1774\u171D\x03\x02" +
		"\x02\x02\u1774\u1722\x03\x02\x02\x02\u1774\u1727\x03\x02\x02\x02\u1774" +
		"\u172E\x03\x02\x02\x02\u1774\u173B\x03\x02\x02\x02\u1774\u1742\x03\x02" +
		"\x02\x02\u1774\u1749\x03\x02\x02\x02\u1774\u174E\x03\x02\x02\x02\u1774" +
		"\u1757\x03\x02\x02\x02\u1774\u1760\x03\x02\x02\x02\u1774\u1765\x03\x02" +
		"\x02\x02\u1774\u176A\x03\x02\x02\x02\u1774\u176F\x03\x02\x02\x02\u1775" +
		"\u02C7\x03\x02\x02\x02\u1776\u1777\x07\u0142\x02\x02\u1777\u1778\x07\u01CA" +
		"\x02\x02\u1778\u17D8\x07\u01CB\x02\x02\u1779\u177A\x07\u0122\x02\x02\u177A" +
		"\u177B\x07\u01CA\x02\x02\u177B\u17D8\x07\u01CB\x02\x02\u177C\u177D\x07" +
		"b\x02\x02\u177D\u177E\x07\u01CA\x02\x02\u177E\u17D8\x07\u01CB\x02\x02" +
		"\u177F\u1780\x07L\x02\x02\u1780\u1781\x07\u01CA\x02\x02\u1781\u17D8\x07" +
		"\u01CB\x02\x02\u1782\u1783\x07\u010A\x02\x02\u1783\u1784\x07\u01CA\x02" +
		"\x02\u1784\u17D8\x07\u01CB\x02\x02\u1785\u1786\x07d\x02\x02\u1786\u1788" +
		"\x07\u01CA\x02\x02\u1787\u1789\x05\u02A6\u0154\x02\u1788\u1787\x03\x02" +
		"\x02\x02\u1788\u1789\x03\x02\x02\x02\u1789\u178A\x03\x02\x02\x02\u178A" +
		"\u17D8\x07\u01CB\x02\x02\u178B\u178C\x07\xCB\x02\x02\u178C\u1798\x07\u01CA" +
		"\x02\x02\u178D\u178F\x05\u02A6\u0154\x02\u178E\u1790\x05\u02CE\u0168\x02" +
		"\u178F\u178E\x03\x02\x02\x02\u178F\u1790\x03\x02\x02\x02\u1790\u1795\x03" +
		"\x02\x02\x02\u1791\u1792\x07\u01CC\x02\x02\u1792\u1794\x05\u02A6\u0154" +
		"\x02\u1793\u1791\x03\x02\x02\x02\u1794\u1797\x03\x02\x02\x02\u1795\u1793" +
		"\x03\x02\x02\x02\u1795\u1796\x03\x02\x02\x02\u1796\u1799\x03\x02\x02\x02" +
		"\u1797\u1795\x03\x02\x02\x02\u1798\u178D\x03\x02\x02\x02\u1798\u1799\x03" +
		"\x02\x02\x02\u1799\u179A\x03\x02\x02\x02\u179A\u179C\x07\u01CB\x02\x02" +
		"\u179B\u179D\x05\u02CE\u0168\x02\u179C\u179B\x03\x02\x02\x02\u179C\u179D" +
		"\x03\x02\x02\x02\u179D\u17D8\x03\x02\x02\x02\u179E\u179F\x07\xC6\x02\x02" +
		"\u179F\u17AB\x07\u01CA\x02\x02\u17A0\u17A2\x05\u02A6\u0154\x02\u17A1\u17A3" +
		"\x05\u02CE\u0168\x02\u17A2\u17A1\x03\x02\x02\x02\u17A2\u17A3\x03\x02\x02" +
		"\x02\u17A3\u17A8\x03\x02\x02\x02\u17A4\u17A5\x07\u01CC\x02\x02\u17A5\u17A7" +
		"\x05\u02A6\u0154\x02\u17A6\u17A4\x03\x02\x02\x02\u17A7\u17AA\x03\x02\x02" +
		"\x02\u17A8\u17A6\x03\x02\x02\x02\u17A8\u17A9\x03\x02\x02\x02\u17A9\u17AC" +
		"\x03\x02\x02\x02\u17AA\u17A8\x03\x02\x02\x02\u17AB\u17A0\x03\x02\x02\x02" +
		"\u17AB\u17AC\x03\x02\x02\x02\u17AC\u17AD\x03\x02\x02\x02\u17AD\u17AF\x07" +
		"\u01CB\x02\x02\u17AE\u17B0\x05\u02CE\u0168\x02\u17AF\u17AE\x03\x02\x02" +
		"\x02\u17AF\u17B0\x03\x02\x02\x02\u17B0\u17D8\x03\x02\x02\x02\u17B1\u17B2" +
		"\x07\x85\x02\x02\u17B2\u17BE\x07\u01CA\x02\x02\u17B3\u17B5\x05\u02A6\u0154" +
		"\x02\u17B4\u17B6\x05\u02CE\u0168\x02\u17B5\u17B4\x03\x02\x02\x02\u17B5" +
		"\u17B6\x03\x02\x02\x02\u17B6\u17BB\x03\x02\x02\x02\u17B7\u17B8\x07\u01CC" +
		"\x02\x02\u17B8\u17BA\x05\u02A6\u0154\x02\u17B9\u17B7\x03\x02\x02\x02\u17BA" +
		"\u17BD\x03\x02\x02\x02\u17BB\u17B9\x03\x02\x02\x02\u17BB\u17BC\x03\x02" +
		"\x02\x02\u17BC\u17BF\x03\x02\x02\x02\u17BD\u17BB\x03\x02\x02\x02\u17BE" +
		"\u17B3\x03\x02\x02\x02\u17BE\u17BF\x03\x02\x02\x02\u17BF\u17C0\x03\x02" +
		"\x02\x02\u17C0\u17C2\x07\u01CB\x02\x02\u17C1\u17C3\x05\u02CE\u0168\x02" +
		"\u17C2\u17C1\x03\x02\x02\x02\u17C2\u17C3\x03\x02\x02\x02\u17C3\u17D8\x03" +
		"\x02\x02\x02\u17C4\u17C5\x07\xC9\x02\x02\u17C5\u17D1\x07\u01CA\x02\x02" +
		"\u17C6\u17C8\x05\u02A6\u0154\x02\u17C7\u17C9\x05\u02CE\u0168\x02\u17C8" +
		"\u17C7\x03\x02\x02\x02\u17C8\u17C9\x03\x02\x02\x02\u17C9\u17CE\x03\x02" +
		"\x02\x02\u17CA\u17CB\x07\u01CC\x02\x02\u17CB\u17CD\x05\u02A6\u0154\x02" +
		"\u17CC\u17CA\x03\x02\x02\x02\u17CD\u17D0\x03\x02\x02\x02\u17CE\u17CC\x03" +
		"\x02\x02\x02\u17CE\u17CF\x03\x02\x02\x02\u17CF\u17D2\x03\x02\x02\x02\u17D0" +
		"\u17CE\x03\x02\x02\x02\u17D1\u17C6\x03\x02\x02\x02\u17D1\u17D2\x03\x02" +
		"\x02\x02\u17D2\u17D3\x03\x02\x02\x02\u17D3\u17D5\x07\u01CB\x02\x02\u17D4" +
		"\u17D6\x05\u02CE\u0168\x02\u17D5\u17D4\x03\x02\x02\x02\u17D5\u17D6\x03" +
		"\x02\x02\x02\u17D6\u17D8\x03\x02\x02\x02\u17D7\u1776\x03\x02\x02\x02\u17D7" +
		"\u1779\x03\x02\x02\x02\u17D7\u177C\x03\x02\x02\x02\u17D7\u177F\x03\x02" +
		"\x02\x02\u17D7\u1782\x03\x02\x02\x02\u17D7\u1785\x03\x02\x02\x02\u17D7" +
		"\u178B\x03\x02\x02\x02\u17D7\u179E\x03\x02\x02\x02\u17D7\u17B1\x03\x02" +
		"\x02\x02\u17D7\u17C4\x03\x02\x02\x02\u17D8\u02C9\x03\x02\x02\x02\u17D9" +
		"\u17DA\x07\u0197\x02\x02\u17DA\u17DB\x05\u02A6\u0154\x02\u17DB\u17DC\x07" +
		"\u016D\x02\x02\u17DC\u17DD\x05\u02A6\u0154\x02\u17DD\u02CB\x03\x02\x02" +
		"\x02\u17DE\u17DF\x07\u0103\x02\x02\u17DF\u17ED\x07\u01CA\x02\x02\u17E0" +
		"\u17E2\x05\u028C\u0147\x02\u17E1\u17E0\x03\x02\x02\x02\u17E1\u17E2\x03" +
		"\x02\x02\x02\u17E2\u17E3\x03\x02\x02\x02\u17E3\u17E4\x07\u0104\x02\x02" +
		"\u17E4\u17E5\x07*\x02\x02\u17E5\u17EA\x05\u02A6\u0154\x02\u17E6\u17E7" +
		"\x07\u01CC\x02\x02\u17E7\u17E9\x05\u02A6\u0154\x02\u17E8\u17E6\x03\x02" +
		"\x02\x02\u17E9\u17EC\x03\x02\x02\x02\u17EA\u17E8\x03\x02\x02\x02\u17EA" +
		"\u17EB\x03\x02\x02\x02\u17EB\u17EE\x03\x02\x02\x02\u17EC\u17EA\x03\x02" +
		"\x02\x02\u17ED\u17E1\x03\x02\x02\x02\u17ED\u17EE\x03\x02\x02\x02\u17EE" +
		"\u17F9\x03\x02\x02\x02\u17EF\u17F0\x07\u0100\x02\x02\u17F0\u17F1\x07*" +
		"\x02\x02\u17F1\u17F6\x05\u026E\u0138\x02\u17F2\u17F3\x07\u01CC\x02\x02" +
		"\u17F3\u17F5\x05\u026E\u0138\x02\u17F4\u17F2\x03\x02\x02\x02\u17F5\u17F8" +
		"\x03\x02\x02\x02\u17F6\u17F4\x03\x02\x02\x02\u17F6\u17F7\x03\x02\x02\x02" +
		"\u17F7\u17FA\x03\x02\x02\x02\u17F8\u17F6\x03\x02\x02\x02\u17F9\u17EF\x03" +
		"\x02\x02\x02\u17F9\u17FA\x03\x02\x02\x02\u17FA\u17FB\x03\x02\x02\x02\u17FB" +
		"\u17FC\x07\u01CB\x02\x02\u17FC\u02CD\x03\x02\x02\x02\u17FD\u17FE\x07\xA9" +
		"\x02\x02\u17FE\u17FF\x07\xF3\x02\x02\u17FF\u02CF\x03\x02\x02\x02\u1800" +
		"\u1802\x05\u032C\u0197\x02\u1801\u1803\x05\u0296\u014C\x02\u1802\u1801" +
		"\x03\x02\x02\x02\u1802\u1803\x03\x02\x02\x02\u1803\u02D1\x03\x02\x02\x02" +
		"\u1804\u1806\x05\u032C\u0197\x02\u1805\u1807\x05\u0296\u014C\x02\u1806" +
		"\u1805\x03\x02\x02\x02\u1806\u1807\x03\x02\x02\x02\u1807\u180A\x03\x02" +
		"\x02\x02\u1808\u1809\x07\x12\x02\x02\u1809\u180B\x05\u032E\u0198\x02\u180A" +
		"\u1808\x03\x02\x02\x02\u180A\u180B\x03\x02\x02\x02\u180B\u02D3\x03\x02" +
		"\x02\x02\u180C\u180E\t$\x02\x02\u180D\u180F\t%\x02\x02\u180E\u180D\x03" +
		"\x02\x02\x02\u180E\u180F\x03\x02\x02\x02\u180F\u02D5\x03\x02\x02\x02\u1810" +
		"\u1811\x07\u0175\x02\x02\u1811\u1812\t&\x02\x02\u1812\u02D7\x03\x02\x02" +
		"\x02\u1813\u1814\x07\u0104\x02\x02\u1814\u1815\x07*\x02\x02\u1815\u1816" +
		"\x07\u0121\x02\x02\u1816\u1817\x05\u0330\u0199\x02\u1817\u1820\x07\u01CA" +
		"\x02\x02\u1818\u181D\x05\u02E2\u0172\x02\u1819\u181A\x07\u01CC\x02\x02" +
		"\u181A\u181C\x05\u02E2\u0172\x02\u181B\u1819\x03\x02\x02\x02\u181C\u181F" +
		"\x03\x02\x02\x02\u181D\u181B\x03\x02\x02\x02\u181D\u181E\x03\x02\x02\x02" +
		"\u181E\u1821\x03\x02\x02\x02\u181F\u181D\x03\x02\x02\x02\u1820\u1818\x03" +
		"\x02\x02\x02\u1820\u1821\x03\x02\x02\x02\u1821\u1822\x03\x02\x02\x02\u1822" +
		"\u1823\x07\u01CB\x02\x02\u1823\u1862\x03\x02\x02\x02\u1824\u1825\x07\u0104" +
		"\x02\x02\u1825\u1826\x07*\x02\x02\u1826\u1827\x07\u0121\x02\x02\u1827" +
		"\u1828\x05\u02B4\u015B\x02\u1828\u1831\x07\u01CA\x02\x02\u1829\u182E\x05" +
		"\u02E2\u0172\x02\u182A\u182B\x07\u01CC\x02\x02\u182B\u182D\x05\u02E2\u0172" +
		"\x02\u182C\u182A\x03\x02\x02\x02\u182D\u1830\x03\x02\x02\x02\u182E\u182C" +
		"\x03\x02\x02\x02\u182E\u182F\x03\x02\x02\x02\u182F\u1832\x03\x02\x02\x02" +
		"\u1830\u182E\x03\x02\x02\x02\u1831\u1829\x03\x02\x02\x02\u1831\u1832\x03" +
		"\x02\x02\x02\u1832\u1833\x03\x02\x02\x02\u1833\u1834\x07\u01CB\x02\x02" +
		"\u1834\u1862\x03\x02\x02\x02\u1835\u1836\x07\u0104\x02\x02\u1836\u1838" +
		"\x07*\x02\x02\u1837\u1839\x07\xD1\x02\x02\u1838\u1837\x03\x02\x02\x02" +
		"\u1838\u1839\x03\x02\x02\x02\u1839\u183A\x03\x02\x02\x02\u183A\u183B\x05" +
		"\u0330\u0199\x02\u183B\u1844\x07\u01CA\x02\x02\u183C\u1841\x05\u02DA\u016E" +
		"\x02\u183D\u183E\x07\u01CC\x02\x02\u183E\u1840\x05\u02DA\u016E\x02\u183F" +
		"\u183D\x03\x02\x02\x02\u1840\u1843\x03\x02\x02\x02\u1841\u183F\x03\x02" +
		"\x02\x02\u1841\u1842\x03\x02\x02\x02\u1842\u1845\x03\x02\x02\x02\u1843" +
		"\u1841\x03\x02\x02\x02\u1844\u183C\x03\x02\x02\x02\u1844\u1845\x03\x02" +
		"\x02\x02\u1845\u1846\x03\x02\x02\x02\u1846\u1847\x07\u01CB\x02\x02\u1847" +
		"\u1862\x03\x02\x02\x02\u1848\u1849\x07\u0104\x02\x02\u1849\u184B\x07*" +
		"\x02\x02\u184A\u184C\x07\xD1\x02\x02\u184B\u184A\x03\x02\x02\x02\u184B" +
		"\u184C\x03\x02\x02\x02\u184C\u184D\x03\x02\x02\x02\u184D\u1862\x05\u0330" +
		"\u0199\x02\u184E\u184F\x07\u0104\x02\x02\u184F\u1850\x07*\x02\x02\u1850" +
		"\u1851\x05\u02B8\u015D\x02\u1851\u185A\x07\u01CA\x02\x02\u1852\u1857\x05" +
		"\u02E2\u0172\x02\u1853\u1854\x07\u01CC\x02\x02\u1854\u1856\x05\u02E2\u0172" +
		"\x02\u1855\u1853\x03\x02\x02\x02\u1856\u1859\x03\x02\x02\x02\u1857\u1855" +
		"\x03\x02\x02\x02\u1857\u1858\x03\x02\x02\x02\u1858\u185B\x03\x02\x02\x02" +
		"\u1859\u1857\x03\x02\x02\x02\u185A\u1852\x03\x02\x02\x02\u185A\u185B\x03" +
		"\x02\x02\x02\u185B\u185C\x03\x02\x02\x02\u185C\u185D\x07\u01CB\x02\x02" +
		"\u185D\u1862\x03\x02\x02\x02\u185E\u185F\x07\u0104\x02\x02\u185F\u1860" +
		"\x07*\x02\x02\u1860\u1862\x05\u02B8\u015D\x02\u1861\u1813\x03\x02\x02" +
		"\x02\u1861\u1824\x03\x02\x02\x02\u1861\u1835\x03\x02\x02\x02\u1861\u1848" +
		"\x03\x02\x02\x02\u1861\u184E\x03\x02\x02\x02\u1861\u185E\x03\x02\x02\x02" +
		"\u1862\u02D9\x03\x02\x02\x02\u1863\u1866\x05\u02DC\u016F\x02\u1864\u1866" +
		"\x05\u02DE\u0170\x02\u1865\u1863\x03\x02\x02\x02\u1865\u1864\x03\x02\x02" +
		"\x02\u1866\u02DB\x03\x02\x02\x02\u1867\u186B\x07\u0104\x02\x02\u1868\u1869" +
		"\x07\xA6\x02\x02\u1869\u186A\x07\xF1\x02\x02\u186A\u186C\x07y\x02\x02" +
		"\u186B\u1868\x03\x02\x02\x02\u186B\u186C\x03\x02\x02\x02\u186C\u186D\x03" +
		"\x02\x02\x02\u186D\u186E\x05\u032E\u0198\x02\u186E\u186F\x07\u018A\x02" +
		"\x02\u186F\u1870\x07\xAB\x02\x02\u1870\u1872\x05\u02E0\u0171\x02\u1871" +
		"\u1873\x05\u02FE\u0180\x02\u1872\u1871\x03\x02\x02\x02\u1872\u1873\x03" +
		"\x02\x02\x02\u1873\u02DD\x03\x02\x02\x02\u1874\u1878\x07\u0104\x02\x02" +
		"\u1875\u1876\x07\xA6\x02\x02\u1876\u1877\x07\xF1\x02\x02\u1877\u1879\x07" +
		"y\x02\x02\u1878\u1875\x03\x02\x02\x02\u1878\u1879\x03\x02\x02\x02\u1879" +
		"\u187A\x03\x02\x02\x02\u187A\u187B\x05\u032E\u0198\x02\u187B\u187C\x07" +
		"\u018A\x02\x02\u187C\u187D\x07\xAB\x02\x02\u187D\u187E\x07\u01CA\x02\x02" +
		"\u187E\u1883\x05\u02E0\u0171\x02\u187F\u1880\x07\u01CC\x02\x02\u1880\u1882" +
		"\x05\u02E0\u0171\x02\u1881\u187F\x03\x02\x02\x02\u1882\u1885\x03\x02\x02" +
		"\x02\u1883\u1881\x03\x02\x02\x02\u1883\u1884\x03\x02\x02\x02\u1884\u1886" +
		"\x03\x02\x02\x02\u1885\u1883\x03\x02\x02\x02\u1886\u1888\x07\u01CB\x02" +
		"\x02\u1887\u1889\x05\u02FE\u0180\x02\u1888\u1887\x03\x02\x02\x02\u1888" +
		"\u1889\x03\x02\x02\x02\u1889\u02DF\x03\x02\x02\x02\u188A\u188B\x07\u01CA" +
		"\x02\x02\u188B\u1890\x05\u030C\u0187\x02\u188C\u188D\x07\u01CC\x02\x02" +
		"\u188D\u188F\x05\u030C\u0187\x02\u188E\u188C\x03\x02\x02\x02\u188F\u1892" +
		"\x03\x02\x02\x02\u1890\u188E\x03\x02\x02\x02\u1890\u1891\x03\x02\x02\x02" +
		"\u1891\u1893\x03\x02\x02\x02\u1892\u1890\x03\x02\x02\x02\u1893\u1894\x07" +
		"\u01CB\x02\x02\u1894\u02E1\x03\x02\x02\x02\u1895\u1898\x05\u02E4\u0173" +
		"\x02\u1896\u1898\x05\u02E6\u0174\x02\u1897\u1895\x03\x02\x02\x02\u1897" +
		"\u1896\x03\x02\x02\x02\u1898\u02E3\x03\x02\x02\x02\u1899\u189D\x07\u0104" +
		"\x02\x02\u189A\u189B\x07\xA6\x02\x02\u189B\u189C\x07\xF1\x02\x02\u189C" +
		"\u189E\x07y\x02\x02\u189D\u189A\x03\x02\x02\x02\u189D\u189E\x03\x02\x02" +
		"\x02\u189E\u189F\x03\x02\x02\x02\u189F\u18A0\x05\u032E\u0198\x02\u18A0" +
		"\u18A1\x07\u018A\x02\x02\u18A1\u18A3\x05\u02EA\u0176\x02\u18A2\u18A4\x05" +
		"\u02FE\u0180\x02\u18A3\u18A2\x03\x02\x02\x02\u18A3\u18A4\x03\x02\x02\x02" +
		"\u18A4\u02E5\x03\x02\x02\x02\u18A5\u18A6\x07\u0156\x02\x02\u18A6\u18A7" +
		"\x07\u01CA\x02\x02\u18A7\u18A8\x05\u030C\u0187\x02\u18A8\u18A9\x07\u01CB" +
		"\x02\x02\u18A9\u18AA\x07q\x02\x02\u18AA\u18AB\x07\u01CA\x02\x02\u18AB" +
		"\u18AC\x05\u030C\u0187\x02\u18AC\u18AD\x07\u01CB\x02\x02\u18AD\u18AE\x07" +
		"~\x02\x02\u18AE\u18AF\x07\u01CA\x02\x02\u18AF\u18B0\x05\u0314\u018B\x02" +
		"\u18B0\u18B1\x07\u01CB\x02\x02\u18B1\u18C0\x03\x02\x02\x02\u18B2\u18B3" +
		"\x07\u0156\x02\x02\u18B3\u18B4\x07\u01CA\x02\x02\u18B4\u18B5\x05\u030C" +
		"\u0187\x02\u18B5\u18B6\x07\u01CB\x02\x02\u18B6\u18B7\x07q\x02\x02\u18B7" +
		"\u18B8\x07\u01CA\x02\x02\u18B8\u18B9\x05\u030C\u0187\x02\u18B9\u18BA\x07" +
		"\u01CB\x02\x02\u18BA\u18BB\x07~\x02\x02\u18BB\u18BC\x07\u01CA\x02\x02" +
		"\u18BC\u18BD\x07\u01BA\x02\x02\u18BD\u18BE\x07\u01CB\x02\x02\u18BE\u18C0" +
		"\x03\x02\x02\x02\u18BF\u18A5\x03\x02\x02\x02\u18BF\u18B2\x03\x02\x02\x02" +
		"\u18C0\u02E7\x03\x02\x02\x02\u18C1\u18C2\x07\u0156\x02\x02\u18C2\u18C3" +
		"\x07\u01CA\x02\x02\u18C3\u18C4\x05\u030C\u0187\x02\u18C4\u18C5\x07\u01CB" +
		"\x02\x02\u18C5\u18C6\x07q\x02\x02\u18C6\u18C7\x07\u01CA\x02\x02\u18C7" +
		"\u18C8\x05\u030C\u0187\x02\u18C8\u18C9\x07\u01CB\x02\x02\u18C9\u02E9\x03" +
		"\x02\x02\x02\u18CA\u18CB\x07\xCD\x02\x02\u18CB\u18CE\x07\u016C\x02\x02" +
		"\u18CC\u18CF\x07\xE0\x02\x02\u18CD\u18CF\x05\u02EC\u0177\x02\u18CE\u18CC" +
		"\x03\x02\x02\x02\u18CE\u18CD\x03\x02\x02\x02\u18CF\u18D7\x03\x02\x02\x02" +
		"\u18D0\u18D1\x07\u01CE\x02\x02\u18D1\u18D2\x05\u02EC\u0177\x02\u18D2\u18D3" +
		"\x07\u01CC\x02\x02\u18D3\u18D4\x05\u02EC\u0177\x02\u18D4\u18D5\x07\u01CB" +
		"\x02\x02\u18D5\u18D7\x03\x02\x02\x02\u18D6\u18CA\x03\x02\x02\x02\u18D6" +
		"\u18D0\x03\x02\x02\x02\u18D7\u02EB\x03\x02\x02\x02\u18D8\u18D9\x07\u01CA" +
		"\x02\x02\u18D9\u18DE\x05\u02F0\u0179\x02\u18DA\u18DB\x07\u01CC\x02\x02" +
		"\u18DB\u18DD\x05\u02F0\u0179\x02\u18DC\u18DA\x03\x02\x02\x02\u18DD\u18E0" +
		"\x03\x02\x02\x02\u18DE\u18DC\x03\x02\x02\x02\u18DE\u18DF\x03\x02\x02\x02" +
		"\u18DF\u18E1\x03\x02\x02\x02\u18E0\u18DE\x03\x02\x02\x02\u18E1\u18E2\x07" +
		"\u01CB\x02\x02\u18E2\u02ED\x03\x02\x02\x02\u18E3\u18E4\x05\u032E\u0198" +
		"\x02\u18E4\u18E5\x07\u01A1\x02\x02\u18E5\u18E6\x05\u02B6\u015C\x02\u18E6" +
		"\u02EF\x03\x02\x02\x02\u18E7\u18EA\x07\xE0\x02\x02\u18E8\u18EA\x05\u030C" +
		"\u0187\x02\u18E9\u18E7\x03\x02\x02\x02\u18E9\u18E8\x03\x02\x02\x02\u18EA" +
		"\u02F1\x03\x02\x02\x02\u18EB\u18EC\x07h\x02\x02\u18EC\u18ED\x07*\x02\x02" +
		"\u18ED\u18EE\x07\x9C\x02\x02\u18EE\u18F1\x05\u0330\u0199\x02\u18EF\u18F0" +
		"\x07(\x02\x02\u18F0\u18F2\x07\u01BA\x02\x02\u18F1\u18EF\x03\x02\x02\x02" +
		"\u18F1\u18F2\x03\x02\x02\x02\u18F2\u18F8\x03\x02\x02\x02\u18F3\u18F4\x07" +
		"h\x02\x02\u18F4\u18F5\x07*\x02\x02\u18F5\u18F6\x07\x9C\x02\x02\u18F6\u18F8" +
		"\x05\u0330\u0199\x02\u18F7\u18EB\x03\x02\x02\x02\u18F7\u18F3\x03\x02\x02" +
		"\x02\u18F8\u02F3\x03\x02\x02\x02\u18F9\u18FA\x07h\x02\x02\u18FA\u18FB" +
		"\x07*\x02\x02\u18FB\u18FC\x07\x9C\x02\x02\u18FC\u18FF\x05\u0330\u0199" +
		"\x02\u18FD\u18FE\x07(\x02\x02\u18FE\u1900\x07\u01BA\x02\x02\u18FF\u18FD" +
		"\x03\x02\x02\x02\u18FF\u1900\x03\x02\x02\x02\u1900\u190D\x03\x02\x02\x02" +
		"\u1901\u1902\x07h\x02\x02\u1902\u1903\x07*\x02\x02\u1903\u1904\x07\x9C" +
		"\x02\x02\u1904\u190D\x05\u0330\u0199\x02\u1905\u1906\x07h\x02\x02\u1906" +
		"\u1907\x07*\x02\x02\u1907\u190A\x07\u0120\x02\x02\u1908\u1909\x07(\x02" +
		"\x02\u1909\u190B\x07\u01BA\x02\x02\u190A\u1908\x03\x02\x02\x02\u190A\u190B" +
		"\x03\x02\x02\x02\u190B\u190D\x03\x02\x02\x02\u190C\u18F9\x03\x02\x02\x02" +
		"\u190C\u1901\x03\x02\x02\x02\u190C\u1905\x03\x02\x02\x02\u190D\u02F5\x03" +
		"\x02\x02\x02\u190E\u1910\x07\u0125\x02\x02\u190F\u1911\t\'\x02\x02\u1910" +
		"\u190F\x03\x02\x02\x02\u1910\u1911\x03\x02\x02\x02\u1911\u1922\x03\x02" +
		"\x02\x02\u1912\u1923\x07\x14\x02\x02\u1913\u1919\x07\x14\x02\x02\u1914" +
		"\u1915\x07\u0156\x02\x02\u1915\u1916\x07\u01CA\x02\x02\u1916\u1917\x05" +
		"\u030C\u0187\x02\u1917\u1918\x07\u01CB\x02\x02\u1918\u191A\x03\x02\x02" +
		"\x02\u1919\u1914\x03\x02\x02\x02\u1919\u191A\x03\x02\x02\x02\u191A\u191B" +
		"\x03\x02\x02\x02\u191B\u191C\x07~\x02\x02\u191C\u191D\x07\u01CA\x02\x02" +
		"\u191D\u191E\x05\u0314\u018B\x02\u191E\u191F\x07\u01CB\x02\x02\u191F\u1923" +
		"\x03\x02\x02\x02\u1920\u1923\x07\xAD\x02\x02\u1921\u1923\x07\xD9\x02\x02" +
		"\u1922\u1912\x03\x02\x02\x02\u1922\u1913\x03\x02\x02\x02\u1922\u1920\x03" +
		"\x02\x02\x02\u1922\u1921\x03\x02\x02\x02\u1923\u02F7\x03\x02\x02\x02\u1924" +
		"\u1925\t(\x02\x02\u1925\u02F9\x03\x02\x02\x02\u1926\u1927\x07\u0119\x02" +
		"\x02\u1927\u1928\x07\u01CA\x02\x02\u1928\u192D\x05\u0302\u0182\x02\u1929" +
		"\u192A\x07\u01CC\x02\x02\u192A\u192C\x05\u0302\u0182\x02\u192B\u1929\x03" +
		"\x02\x02\x02\u192C\u192F\x03\x02\x02\x02\u192D\u192B\x03\x02\x02\x02\u192D" +
		"\u192E\x03\x02\x02\x02\u192E\u1930\x03\x02\x02\x02\u192F\u192D\x03\x02" +
		"\x02\x02\u1930\u1931\x07\u01CB\x02\x02\u1931\u02FB\x03\x02\x02\x02\u1932" +
		"\u1933\x07\'\x02\x02\u1933\u1934\x05\u02FA\u017E\x02\u1934\u02FD\x03\x02" +
		"\x02\x02\u1935\u1936\x07\u01CA\x02\x02\u1936\u193B\x05\u0302\u0182\x02" +
		"\u1937\u1938\x07\u01CC\x02\x02\u1938\u193A\x05\u0302\u0182\x02\u1939\u1937" +
		"\x03\x02\x02\x02\u193A\u193D\x03\x02\x02\x02\u193B\u1939\x03\x02\x02\x02" +
		"\u193B\u193C\x03\x02\x02\x02\u193C\u193E\x03\x02\x02\x02\u193D\u193B\x03" +
		"\x02\x02\x02\u193E\u193F\x07\u01CB\x02\x02\u193F\u02FF\x03\x02\x02\x02" +
		"\u1940\u1945\x05\u0302\u0182\x02\u1941\u1942\x07\u01CC\x02\x02\u1942\u1944" +
		"\x05\u0302\u0182\x02\u1943\u1941\x03\x02\x02\x02\u1944\u1947\x03\x02\x02" +
		"\x02\u1945\u1943\x03\x02\x02\x02\u1945\u1946\x03\x02\x02\x02\u1946\u0301" +
		"\x03\x02\x02\x02\u1947\u1945\x03\x02\x02\x02\u1948\u1949\x05\u030C\u0187" +
		"\x02\u1949\u194A\x07\u01A1\x02\x02\u194A\u194B\x05\u030C\u0187\x02\u194B" +
		"\u0303\x03\x02\x02\x02\u194C\u194D\t)\x02\x02\u194D\u0305\x03\x02\x02" +
		"\x02\u194E\u194F\x07=\x02\x02\u194F\u1950\x05\u030C\u0187\x02\u1950\u0307" +
		"\x03\x02\x02\x02\u1951\u1952\x07\xBB\x02\x02\u1952\u1953\x07\u0102\x02" +
		"\x02\u1953\u1955\x05\u030C\u0187\x02\u1954\u1956\x05\u030A\u0186\x02\u1955" +
		"\u1954\x03\x02\x02\x02\u1955\u1956\x03\x02\x02\x02\u1956\u1958\x03\x02" +
		"\x02\x02\u1957\u1959\x05\u02FA\u017E\x02\u1958\u1957\x03\x02\x02\x02\u1958" +
		"\u1959\x03\x02\x02\x02\u1959\u0309\x03\x02\x02\x02\u195A\u195B\x07\x8D" +
		"\x02\x02\u195B\u195E\x07\x12\x02\x02\u195C\u195F\x05\u032E\u0198\x02\u195D" +
		"\u195F\x05\u030C\u0187\x02\u195E\u195C\x03\x02\x02\x02\u195E\u195D\x03" +
		"\x02\x02\x02\u195F\u030B\x03\x02\x02\x02\u1960\u1961\t*\x02\x02\u1961" +
		"\u030D\x03\x02\x02\x02\u1962\u1963\t+\x02\x02\u1963\u030F\x03\x02\x02" +
		"\x02\u1964\u1965\t,\x02\x02\u1965\u0311\x03\x02\x02\x02\u1966\u1967\t" +
		"-\x02\x02\u1967\u0313\x03\x02\x02\x02\u1968\u1969\x07\xBA\x02\x02\u1969" +
		"\u196A\x05\u02A6\u0154\x02\u196A\u196B\x05\u0316\u018C\x02\u196B\u0315" +
		"\x03\x02\x02\x02\u196C\u196D\t.\x02\x02\u196D\u0317\x03\x02\x02\x02\u196E" +
		"\u196F\t/\x02\x02\u196F\u0319\x03\x02\x02\x02\u1970\u1976\x05\u0328\u0195" +
		"\x02\u1971\u1976\x05\u032A\u0196\x02\u1972\u1976\x05\u031C\u018F\x02\u1973" +
		"\u1976\x05\u0324\u0193\x02\u1974\u1976\x05\u031E\u0190\x02\u1975\u1970" +
		"\x03\x02\x02\x02\u1975\u1971\x03\x02\x02\x02\u1975\u1972\x03\x02\x02\x02" +
		"\u1975\u1973\x03\x02\x02\x02\u1975\u1974\x03\x02\x02\x02\u1976\u031B\x03" +
		"\x02\x02\x02\u1977\u1978\x07\x10\x02\x02\u1978\u1979\x07\u01A3\x02\x02" +
		"\u1979\u197A\x05\u031A\u018E\x02\u197A\u197B\x07\u01A5\x02\x02\u197B\u031D" +
		"\x03\x02\x02\x02\u197C\u197D\x07\xDA\x02\x02\u197D\u197E\x07\u01A3\x02" +
		"\x02\u197E\u197F\x05\u031A\u018E\x02\u197F\u1980\x07\u01CC\x02\x02\u1980" +
		"\u1981\x05\u031A\u018E\x02\u1981\u1982\x07\u01A5\x02\x02\u1982\u031F\x03" +
		"\x02\x02\x02\u1983\u1984\x05\u032E\u0198\x02\u1984\u1985\x05\u031A\u018E" +
		"\x02\u1985\u0321\x03\x02\x02\x02\u1986\u198B\x05\u0320\u0191\x02\u1987" +
		"\u1988\x07\u01CC\x02\x02\u1988\u198A\x05\u0320\u0191\x02\u1989\u1987\x03" +
		"\x02\x02\x02\u198A\u198D\x03\x02\x02\x02\u198B\u1989\x03\x02\x02\x02\u198B" +
		"\u198C\x03\x02\x02\x02\u198C\u0323\x03\x02\x02\x02\u198D\u198B\x03\x02" +
		"\x02\x02\u198E\u198F\x07\u0165\x02\x02\u198F\u1990\x07\u01A3\x02\x02\u1990" +
		"\u1991\x05\u0322\u0192\x02\u1991\u1992\x07\u01A5\x02\x02\u1992\u0325\x03" +
		"\x02\x02\x02\u1993\u1994\x07\u01CA\x02\x02\u1994\u1995\x07\u01BA\x02\x02" +
		"\u1995\u1996\x07\u01CB\x02\x02\u1996\u0327\x03\x02\x02\x02\u1997\u19DC" +
		"\x07%\x02\x02\u1998\u199A\x07\u0172\x02\x02\u1999\u199B\x05\u0326\u0194" +
		"\x02\u199A\u1999\x03\x02\x02\x02\u199A\u199B\x03\x02\x02\x02\u199B\u19DC" +
		"\x03\x02\x02\x02\u199C\u199E\x07\u0153\x02\x02\u199D\u199F\x05\u0326\u0194" +
		"\x02\u199E\u199D\x03\x02\x02\x02\u199E\u199F\x03\x02\x02\x02\u199F\u19DC" +
		"\x03\x02\x02\x02\u19A0\u19A2\x07\u0150\x02\x02\u19A1\u19A3\x07\xB4\x02" +
		"\x02\u19A2\u19A1\x03\x02\x02\x02\u19A2\u19A3\x03\x02\x02\x02\u19A3\u19DC" +
		"\x03\x02\x02\x02\u19A4\u19A6\x07\u0150\x02\x02\u19A5\u19A7\x07\xB5\x02" +
		"\x02\u19A6\u19A5\x03\x02\x02\x02\u19A6\u19A7\x03\x02\x02\x02\u19A7\u19DC" +
		"\x03\x02\x02\x02\u19A8\u19AA\x07\u0182\x02\x02\u19A9\u19AB\x07\xB4\x02" +
		"\x02\u19AA\u19A9\x03\x02\x02\x02\u19AA\u19AB\x03\x02\x02\x02\u19AB\u19DC" +
		"\x03\x02\x02\x02\u19AC\u19AE\x07\u0182\x02\x02\u19AD\u19AF\x07\xB5\x02" +
		"\x02\u19AE\u19AD\x03\x02\x02\x02\u19AE\u19AF\x03\x02\x02\x02\u19AF\u19DC" +
		"\x03\x02\x02\x02\u19B0\u19B2\x07\xB4\x02\x02\u19B1\u19B3\x05\u0326\u0194" +
		"\x02\u19B2\u19B1\x03\x02\x02\x02\u19B2\u19B3\x03\x02\x02\x02\u19B3\u19DC" +
		"\x03\x02\x02\x02\u19B4\u19B6\x07\xB5\x02\x02\u19B5\u19B7\x05\u0326";
	private static readonly _serializedATNSegment12: string =
		"\u0194\x02\u19B6\u19B5\x03\x02\x02\x02\u19B6\u19B7\x03\x02\x02\x02\u19B7" +
		"\u19DC\x03\x02\x02\x02\u19B8\u19BA\x07\x1F\x02\x02\u19B9\u19BB\x05\u0326" +
		"\u0194\x02\u19BA\u19B9\x03\x02\x02\x02\u19BA\u19BB\x03\x02\x02\x02\u19BB" +
		"\u19DC\x03\x02\x02\x02\u19BC\u19BE\x07\xC7\x02\x02\u19BD\u19BF\x05\u0326" +
		"\u0194\x02\u19BE\u19BD\x03\x02\x02\x02\u19BE\u19BF\x03\x02\x02\x02\u19BF" +
		"\u19DC\x03\x02\x02\x02\u19C0\u19DC\x07\x86\x02\x02\u19C1\u19DC\x07j\x02" +
		"\x02\u19C2\u19DC\x07W\x02\x02\u19C3\u19DC\x07X\x02\x02\u19C4\u19DC\x07" +
		"\u016E\x02\x02\u19C5\u19C7\x072\x02\x02\u19C6\u19C8\x05\u0326\u0194\x02" +
		"\u19C7\u19C6\x03\x02\x02\x02\u19C7\u19C8\x03\x02\x02\x02\u19C8\u19DC\x03" +
		"\x02\x02\x02\u19C9\u19CB\x07\u018C\x02\x02\u19CA\u19CC\x05\u0326\u0194" +
		"\x02\u19CB\u19CA\x03\x02\x02\x02\u19CB\u19CC\x03\x02\x02\x02\u19CC\u19DC" +
		"\x03\x02\x02\x02\u19CD\u19DC\x07\u015C\x02\x02\u19CE\u19DC\x07\u015D\x02" +
		"\x02\u19CF\u19DC\x07!\x02\x02\u19D0\u19DC\x07\xA0\x02\x02\u19D1\u19DC" +
		"\x07\u010B\x02\x02\u19D2\u19DC\x07\xC1\x02\x02\u19D3\u19D5\x07\u018B\x02" +
		"\x02\u19D4\u19D6\x05\u0326\u0194\x02\u19D5\u19D4\x03\x02\x02\x02\u19D5" +
		"\u19D6\x03\x02\x02\x02\u19D6\u19DC\x03\x02\x02\x02\u19D7\u19D9\x07 \x02" +
		"\x02\u19D8\u19DA\x05\u0326\u0194\x02\u19D9\u19D8\x03\x02\x02\x02\u19D9" +
		"\u19DA\x03\x02\x02\x02\u19DA\u19DC\x03\x02\x02\x02\u19DB\u1997\x03\x02" +
		"\x02\x02\u19DB\u1998\x03\x02\x02\x02\u19DB\u199C\x03\x02\x02\x02\u19DB" +
		"\u19A0\x03\x02\x02\x02\u19DB\u19A4\x03\x02\x02\x02\u19DB\u19A8\x03\x02" +
		"\x02\x02\u19DB\u19AC\x03\x02\x02\x02\u19DB\u19B0\x03\x02\x02\x02\u19DB" +
		"\u19B4\x03\x02\x02\x02\u19DB\u19B8\x03\x02\x02\x02\u19DB\u19BC\x03\x02" +
		"\x02\x02\u19DB\u19C0\x03\x02\x02\x02\u19DB\u19C1\x03\x02\x02\x02\u19DB" +
		"\u19C2\x03\x02\x02\x02\u19DB\u19C3\x03\x02\x02\x02\u19DB\u19C4\x03\x02" +
		"\x02\x02\u19DB\u19C5\x03\x02\x02\x02\u19DB\u19C9\x03\x02\x02\x02\u19DB" +
		"\u19CD\x03\x02\x02\x02\u19DB\u19CE\x03\x02\x02\x02\u19DB\u19CF\x03\x02" +
		"\x02\x02\u19DB\u19D0\x03\x02\x02\x02\u19DB\u19D1\x03\x02\x02\x02\u19DB" +
		"\u19D2\x03\x02\x02\x02\u19DB\u19D3\x03\x02\x02\x02\u19DB\u19D7\x03\x02" +
		"\x02\x02\u19DC\u0329\x03\x02\x02\x02\u19DD\u19E5\t0\x02\x02\u19DE\u19DF" +
		"\x07\u01CA\x02\x02\u19DF\u19E2\x07\u01BA\x02\x02\u19E0\u19E1\x07\u01CC" +
		"\x02\x02\u19E1\u19E3\x07\u01BA\x02\x02\u19E2\u19E0\x03\x02\x02\x02\u19E2" +
		"\u19E3\x03\x02\x02\x02\u19E3\u19E4\x03\x02\x02\x02\u19E4\u19E6\x07\u01CB" +
		"\x02\x02\u19E5\u19DE\x03\x02\x02\x02\u19E5\u19E6\x03\x02\x02\x02\u19E6" +
		"\u032B\x03\x02\x02\x02\u19E7\u19ED\x05\u032E\u0198\x02\u19E8\u19EC\x07" +
		"\u01C5\x02\x02\u19E9\u19EA\x07\u01CD\x02\x02\u19EA\u19EC\x05\u032E\u0198" +
		"\x02\u19EB\u19E8\x03\x02\x02\x02\u19EB\u19E9\x03\x02\x02\x02\u19EC\u19EF" +
		"\x03\x02\x02\x02\u19ED\u19EB\x03\x02\x02\x02\u19ED\u19EE\x03\x02\x02\x02" +
		"\u19EE\u032D\x03\x02\x02\x02\u19EF\u19ED\x03\x02\x02\x02\u19F0\u19F5\x07" +
		"\u01C1\x02\x02\u19F1\u19F5\x05\u0340\u01A1\x02\u19F2\u19F5\x07\u01C2\x02" +
		"\x02\u19F3\u19F5\x07\u01C4\x02\x02\u19F4\u19F0\x03\x02\x02\x02\u19F4\u19F1" +
		"\x03\x02\x02\x02\u19F4\u19F2\x03\x02\x02\x02\u19F4\u19F3\x03\x02\x02\x02" +
		"\u19F5\u032F\x03\x02\x02\x02\u19F6\u19F7\x07\u01CA\x02\x02\u19F7\u19FC" +
		"\x05\u032E\u0198\x02\u19F8\u19F9\x07\u01CC\x02\x02\u19F9\u19FB\x05\u032E" +
		"\u0198\x02\u19FA\u19F8\x03\x02\x02\x02\u19FB\u19FE\x03\x02\x02\x02\u19FC" +
		"\u19FA\x03\x02\x02\x02\u19FC\u19FD\x03\x02\x02\x02\u19FD\u19FF\x03\x02" +
		"\x02\x02\u19FE\u19FC\x03\x02\x02\x02\u19FF\u1A00\x07\u01CB\x02\x02\u1A00" +
		"\u0331\x03\x02\x02\x02\u1A01\u1A04\x05\u032E\u0198\x02\u1A02\u1A04\x05" +
		"\u030C\u0187\x02\u1A03\u1A01\x03\x02\x02\x02\u1A03\u1A02\x03\x02\x02\x02" +
		"\u1A04\u0333\x03\x02\x02\x02\u1A05\u1A0A\x05\u0332\u019A\x02\u1A06\u1A07" +
		"\x07\u01CC\x02\x02\u1A07\u1A09\x05\u0332\u019A\x02\u1A08\u1A06\x03\x02" +
		"\x02\x02\u1A09\u1A0C\x03\x02\x02\x02\u1A0A\u1A08\x03\x02\x02\x02\u1A0A" +
		"\u1A0B\x03\x02\x02\x02\u1A0B\u0335\x03\x02\x02\x02\u1A0C\u1A0A\x03\x02" +
		"\x02\x02\u1A0D\u1A11\x07\u01AA\x02\x02\u1A0E\u1A11\x05\u032E\u0198\x02" +
		"\u1A0F\u1A11\x05\u030C\u0187\x02\u1A10\u1A0D\x03\x02\x02\x02\u1A10\u1A0E" +
		"\x03\x02\x02\x02\u1A10\u1A0F\x03\x02\x02\x02\u1A11\u0337\x03\x02\x02\x02" +
		"\u1A12\u1A1E\x05\u0332\u019A\x02\u1A13\u1A14\x05\u0332\u019A\x02\u1A14" +
		"\u1A15\x07\u01B9\x02\x02\u1A15\u1A16\x05\u0332\u019A\x02\u1A16\u1A1E\x03" +
		"\x02\x02\x02\u1A17\u1A18\x05\u0332\u019A\x02\u1A18\u1A19\x07\u01B9\x02" +
		"\x02\u1A19\u1A1A\x07\u01CE\x02\x02\u1A1A\u1A1B\x05\u0332\u019A\x02\u1A1B" +
		"\u1A1C\x07\u01CF\x02\x02\u1A1C\u1A1E\x03\x02\x02\x02\u1A1D\u1A12\x03\x02" +
		"\x02\x02\u1A1D\u1A13\x03\x02\x02\x02\u1A1D\u1A17\x03\x02\x02\x02\u1A1E" +
		"\u0339\x03\x02\x02\x02\u1A1F\u1A20\x05\u032E\u0198\x02\u1A20\u1A21\x07" +
		"\u01A1\x02\x02\u1A21\u1A22\x05\u029E\u0150\x02\u1A22\u033B\x03\x02\x02" +
		"\x02\u1A23\u1A28\x05\u033A\u019E\x02\u1A24\u1A25\x07\u01CC\x02\x02\u1A25" +
		"\u1A27\x05\u033A\u019E\x02\u1A26\u1A24\x03\x02\x02\x02\u1A27\u1A2A\x03" +
		"\x02\x02\x02\u1A28\u1A26\x03\x02\x02\x02\u1A28\u1A29\x03\x02\x02\x02\u1A29" +
		"\u033D\x03\x02\x02\x02\u1A2A\u1A28\x03\x02\x02\x02\u1A2B\u1A2F\x07\u01BB" +
		"\x02\x02\u1A2C\u1A2F\x07\u01BC\x02\x02\u1A2D\u1A2F\x07\u01BA\x02\x02\u1A2E" +
		"\u1A2B\x03\x02\x02\x02\u1A2E\u1A2C\x03\x02\x02\x02\u1A2E\u1A2D\x03\x02" +
		"\x02\x02\u1A2F\u033F\x03\x02\x02\x02\u1A30\u1A31\t1\x02\x02\u1A31\u0341" +
		"\x03\x02\x02\x02\u0307\u0343\u034A\u0351\u041C\u042C\u0432\u043A\u043C" +
		"\u044E\u0455\u045A\u045E\u0461\u0464\u046A\u046F\u0473\u048A\u048E\u0494" +
		"\u049D\u04A4\u04A9\u04AC\u04AF\u04B4\u04B8\u04BB\u04BE\u04C1\u04C4\u04C7" +
		"\u04CA\u04CF\u04D2\u04D5\u04DA\u04DF\u04E2\u04E5\u04EF\u04FB\u0504\u0507" +
		"\u050E\u0515\u0518\u051D\u0521\u0536\u053E\u0541\u0544\u0553\u055C\u0569" +
		"\u0572\u0577\u057A\u057D\u0580\u0583\u0586\u058D\u0592\u0596\u05A0\u05AD" +
		"\u05BA\u05BD\u05C6\u05C9\u05D6\u05DB\u05E1\u05E9\u05EF\u05F7\u05FD\u0604" +
		"\u060A\u0617\u061C\u0624\u0628\u0631\u0634\u0637\u063F\u0643\u064C\u064F" +
		"\u0652\u0654\u0659\u065D\u0663\u0670\u067A\u0680\u068A\u068E\u0696\u069A" +
		"\u06A1\u06AA\u06AD\u06B0\u06BB\u06C1\u06CA\u06CF\u06D4\u06D8\u06E6\u06EB" +
		"\u06FA\u0700\u0706\u0709\u070F\u0714\u071B\u0727\u0730\u0735\u073A\u073E" +
		"\u0743\u0750\u0757\u075D\u0764\u0770\u0784\u078C\u078F\u0794\u07B0\u07B9" +
		"\u07C2\u07C6\u07CD\u07D5\u07DF\u07E2\u07F4\u0800\u0815\u0819\u0821\u0827" +
		"\u083D\u0849\u0851\u085B\u0861\u0872\u0879\u0886\u088B\u08C4\u08DC\u08E6" +
		"\u08EA\u08F3\u0905\u0910\u091B\u0926\u092D\u0934\u0943\u0946\u0960\u0964" +
		"\u0967\u0971\u0977\u097A\u0981\u0984\u098C\u0990\u0993\u099F\u09A2\u09AA" +
		"\u09AF\u09BA\u09C3\u09CC\u09D8\u09DC\u09E1\u09E4\u09E7\u09EB\u09EF\u09F2" +
		"\u09F5\u09F7\u09FB\u0A00\u0A04\u0A10\u0A17\u0A1E\u0A26\u0A2C\u0A31\u0A34" +
		"\u0A3D\u0A40\u0A43\u0A46\u0A4F\u0A52\u0A55\u0A5B\u0A5F\u0A63\u0A6B\u0A72" +
		"\u0A77\u0A80\u0A85\u0A88\u0A93\u0A96\u0A9E\u0AB0\u0AB5\u0AB9\u0AC9\u0AD4" +
		"\u0ADF\u0AE5\u0AED\u0AF0\u0AF4\u0AF8\u0B01\u0B04\u0B07\u0B0F\u0B16\u0B1E" +
		"\u0B21\u0B25\u0B29\u0B32\u0B35\u0B38\u0B3C\u0B46\u0B4B\u0B50\u0B53\u0B64" +
		"\u0B6A\u0B6F\u0B72\u0B7F\u0B85\u0B89\u0B8E\u0B93\u0B98\u0BA2\u0BA7\u0BAA" +
		"\u0BAC\u0BB5\u0BB9\u0BC0\u0BC7\u0BDB\u0BDE\u0BE6\u0BEA\u0BF3\u0BF6\u0BFF" +
		"\u0C13\u0C21\u0C38\u0C3D\u0C47\u0C49\u0C4D\u0C52\u0C67\u0C6A\u0C6F\u0C75" +
		"\u0C79\u0C83\u0C86\u0C91\u0C94\u0C97\u0C9D\u0CA2\u0CA8\u0CAB\u0CAF\u0CB3" +
		"\u0CB9\u0CBE\u0CC0\u0CC5\u0CCF\u0CD8\u0CDE\u0CE4\u0CEA\u0CED\u0CF0\u0CF3" +
		"\u0CFA\u0CFE\u0D02\u0D09\u0D0F\u0D13\u0D17\u0D19\u0D1F\u0D24\u0D29\u0D2E" +
		"\u0D35\u0D3B\u0D3D\u0D43\u0D48\u0D4C\u0D50\u0D59\u0D5C\u0D5F\u0D66\u0D6A" +
		"\u0D6D\u0D74\u0D7A\u0D7E\u0D86\u0D8A\u0DA0\u0DA6\u0DAE\u0DB4\u0DBC\u0DC2" +
		"\u0DC8\u0DE4\u0DEC\u0DF4\u0DF8\u0DFF\u0E09\u0E0D\u0E16\u0E19\u0E1C\u0E1E" +
		"\u0E24\u0E28\u0E2C\u0E31\u0E37\u0E3D\u0E41\u0E45\u0E4C\u0E51\u0E5B\u0E5F" +
		"\u0E64\u0E6A\u0E72\u0E7B\u0E83\u0E85\u0E91\u0E93\u0E9B\u0EA2\u0EA6\u0EAC" +
		"\u0EB8\u0EC3\u0ECD\u0ED3\u0EDD\u0EEA\u0EEF\u0EF7\u0EFD\u0F02\u0F0D\u0F15" +
		"\u0F20\u0F26\u0F2F\u0F3A\u0F46\u0F53\u0F5A\u0F5C\u0F67\u0F78\u0F99\u0F9E" +
		"\u0FA6\u0FAE\u0FEA\u0FF2\u0FF4\u0FF9\u1000\u100F\u1017\u101C\u1032\u1043" +
		"\u1052\u1064\u1069\u1070\u107A\u1083\u108A\u108E\u1095\u10A2\u10AF\u10B6" +
		"\u10BD\u10C8\u10D0\u10DA\u10E3\u10EB\u10EF\u10F7\u1105\u1113\u111A\u1122" +
		"\u113A\u113F\u1143\u1149\u114F\u115D\u1162\u1166\u116C\u1172\u1176\u117E" +
		"\u1183\u118A\u1191\u11A2\u11AF\u11B4\u11B7\u11BD\u11C3\u11C9\u11CF\u11D8" +
		"\u11DB\u11DE\u11E5\u11F0\u11F9\u1201\u1209\u1211\u1215\u121A\u121F\u1221" +
		"\u122B\u1237\u123E\u1249\u124D\u1259\u125F\u126C\u1272\u1278\u1281\u128F" +
		"\u1293\u1297\u129B\u129E\u12A1\u12A4\u12A8\u12AC\u12AF\u12B2\u12B5\u12BE" +
		"\u12C3\u12C7\u12CA\u12D0\u12D3\u12D6\u12DA\u12DE\u12E1\u12EB\u12F6\u12F9" +
		"\u12FC\u1318\u131D\u1322\u1328\u132B\u132D\u133A\u133E\u1344\u134A\u1350" +
		"\u1354\u135B\u1361\u1366\u136A\u1371\u1375\u1379\u137E\u1384\u138F\u1395" +
		"\u1399\u139F\u13A6\u13B1\u13B5\u13B7\u13BE\u13C3\u13C8\u13CF\u13D7\u13DC" +
		"\u13E0\u13E3\u13E6\u13E9\u13EC\u13EF\u13F8\u13FD\u1401\u1403\u1407\u140B" +
		"\u140D\u1414\u1418\u141A\u1424\u1428\u142A\u142F\u1433\u1435\u143B\u143F" +
		"\u1442\u1446\u144A\u144D\u1452\u145A\u1477\u147F\u148C\u149F\u14A4\u14AC" +
		"\u14B2\u14BB\u14C1\u14C6\u14CF\u14DB\u14E6\u14ED\u14F4\u1502\u150A\u150C" +
		"\u1514\u151D\u152A\u152C\u1531\u1534\u153C\u1540\u1548\u1550\u1558\u1560" +
		"\u1564\u1581\u1583\u15B2\u15B6\u15BE\u15C2\u15C7\u15CB\u15D1\u15D8\u15DD" +
		"\u15E6\u15EA\u15F3\u15F9\u1603\u1607\u160D\u160F\u161B\u162B\u162E\u1638" +
		"\u163B\u1643\u164F\u1652\u1656\u1658\u165D\u1665\u166C\u166E\u1675\u1678" +
		"\u167E\u1686\u168E\u169D\u16A0\u16A4\u16AE\u16C3\u16C8\u16CA\u16CF\u16D4" +
		"\u16D9\u16DE\u16E3\u16E5\u16FD\u1700\u1735\u1738\u1774\u1788\u178F\u1795" +
		"\u1798\u179C\u17A2\u17A8\u17AB\u17AF\u17B5\u17BB\u17BE\u17C2\u17C8\u17CE" +
		"\u17D1\u17D5\u17D7\u17E1\u17EA\u17ED\u17F6\u17F9\u1802\u1806\u180A\u180E" +
		"\u181D\u1820\u182E\u1831\u1838\u1841\u1844\u184B\u1857\u185A\u1861\u1865" +
		"\u186B\u1872\u1878\u1883\u1888\u1890\u1897\u189D\u18A3\u18BF\u18CE\u18D6" +
		"\u18DE\u18E9\u18F1\u18F7\u18FF\u190A\u190C\u1910\u1919\u1922\u192D\u193B" +
		"\u1945\u1955\u1958\u195E\u1975\u198B\u199A\u199E\u19A2\u19A6\u19AA\u19AE" +
		"\u19B2\u19B6\u19BA\u19BE\u19C7\u19CB\u19D5\u19D9\u19DB\u19E2\u19E5\u19EB" +
		"\u19ED\u19F4\u19FC\u1A03\u1A0A\u1A10\u1A1D\u1A28\u1A2E";
	public static readonly _serializedATN: string = Utils.join(
		[
			StarRocksSqlParser._serializedATNSegment0,
			StarRocksSqlParser._serializedATNSegment1,
			StarRocksSqlParser._serializedATNSegment2,
			StarRocksSqlParser._serializedATNSegment3,
			StarRocksSqlParser._serializedATNSegment4,
			StarRocksSqlParser._serializedATNSegment5,
			StarRocksSqlParser._serializedATNSegment6,
			StarRocksSqlParser._serializedATNSegment7,
			StarRocksSqlParser._serializedATNSegment8,
			StarRocksSqlParser._serializedATNSegment9,
			StarRocksSqlParser._serializedATNSegment10,
			StarRocksSqlParser._serializedATNSegment11,
			StarRocksSqlParser._serializedATNSegment12,
		],
		"",
	);
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!StarRocksSqlParser.__ATN) {
			StarRocksSqlParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(StarRocksSqlParser._serializedATN));
		}

		return StarRocksSqlParser.__ATN;
	}

}

export class ProgramContext extends ParserRuleContext {
	public EOF(): TerminalNode { return this.getToken(StarRocksSqlParser.EOF, 0); }
	public sqlStatements(): SqlStatementsContext | undefined {
		return this.tryGetRuleContext(0, SqlStatementsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_program; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterProgram) {
			listener.enterProgram(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitProgram) {
			listener.exitProgram(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitProgram) {
			return visitor.visitProgram(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SqlStatementsContext extends ParserRuleContext {
	public EOF(): TerminalNode { return this.getToken(StarRocksSqlParser.EOF, 0); }
	public singleStatement(): SingleStatementContext[];
	public singleStatement(i: number): SingleStatementContext;
	public singleStatement(i?: number): SingleStatementContext | SingleStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SingleStatementContext);
		} else {
			return this.getRuleContext(i, SingleStatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_sqlStatements; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSqlStatements) {
			listener.enterSqlStatements(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSqlStatements) {
			listener.exitSqlStatements(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSqlStatements) {
			return visitor.visitSqlStatements(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SingleStatementContext extends ParserRuleContext {
	public statement(): StatementContext {
		return this.getRuleContext(0, StatementContext);
	}
	public SEMICOLON(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SEMICOLON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_singleStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSingleStatement) {
			listener.enterSingleStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSingleStatement) {
			listener.exitSingleStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSingleStatement) {
			return visitor.visitSingleStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StatementContext extends ParserRuleContext {
	public queryStatement(): QueryStatementContext | undefined {
		return this.tryGetRuleContext(0, QueryStatementContext);
	}
	public createWarehouseStatement(): CreateWarehouseStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateWarehouseStatementContext);
	}
	public dropWarehouseStatement(): DropWarehouseStatementContext | undefined {
		return this.tryGetRuleContext(0, DropWarehouseStatementContext);
	}
	public showWarehousesStatement(): ShowWarehousesStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowWarehousesStatementContext);
	}
	public alterWarehouseStatement(): AlterWarehouseStatementContext | undefined {
		return this.tryGetRuleContext(0, AlterWarehouseStatementContext);
	}
	public showClustersStatement(): ShowClustersStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowClustersStatementContext);
	}
	public suspendWarehouseStatement(): SuspendWarehouseStatementContext | undefined {
		return this.tryGetRuleContext(0, SuspendWarehouseStatementContext);
	}
	public resumeWarehouseStatement(): ResumeWarehouseStatementContext | undefined {
		return this.tryGetRuleContext(0, ResumeWarehouseStatementContext);
	}
	public useDatabaseStatement(): UseDatabaseStatementContext | undefined {
		return this.tryGetRuleContext(0, UseDatabaseStatementContext);
	}
	public useCatalogStatement(): UseCatalogStatementContext | undefined {
		return this.tryGetRuleContext(0, UseCatalogStatementContext);
	}
	public setCatalogStatement(): SetCatalogStatementContext | undefined {
		return this.tryGetRuleContext(0, SetCatalogStatementContext);
	}
	public showDatabasesStatement(): ShowDatabasesStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowDatabasesStatementContext);
	}
	public alterDbQuotaStatement(): AlterDbQuotaStatementContext | undefined {
		return this.tryGetRuleContext(0, AlterDbQuotaStatementContext);
	}
	public createDbStatement(): CreateDbStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateDbStatementContext);
	}
	public dropDbStatement(): DropDbStatementContext | undefined {
		return this.tryGetRuleContext(0, DropDbStatementContext);
	}
	public showCreateDbStatement(): ShowCreateDbStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowCreateDbStatementContext);
	}
	public alterDatabaseRenameStatement(): AlterDatabaseRenameStatementContext | undefined {
		return this.tryGetRuleContext(0, AlterDatabaseRenameStatementContext);
	}
	public recoverDbStmt(): RecoverDbStmtContext | undefined {
		return this.tryGetRuleContext(0, RecoverDbStmtContext);
	}
	public showDataStmt(): ShowDataStmtContext | undefined {
		return this.tryGetRuleContext(0, ShowDataStmtContext);
	}
	public createTableStatement(): CreateTableStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateTableStatementContext);
	}
	public createTableAsSelectStatement(): CreateTableAsSelectStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateTableAsSelectStatementContext);
	}
	public createTemporaryTableStatement(): CreateTemporaryTableStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateTemporaryTableStatementContext);
	}
	public createTableLikeStatement(): CreateTableLikeStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateTableLikeStatementContext);
	}
	public showCreateTableStatement(): ShowCreateTableStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowCreateTableStatementContext);
	}
	public dropTableStatement(): DropTableStatementContext | undefined {
		return this.tryGetRuleContext(0, DropTableStatementContext);
	}
	public recoverTableStatement(): RecoverTableStatementContext | undefined {
		return this.tryGetRuleContext(0, RecoverTableStatementContext);
	}
	public truncateTableStatement(): TruncateTableStatementContext | undefined {
		return this.tryGetRuleContext(0, TruncateTableStatementContext);
	}
	public showTableStatement(): ShowTableStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowTableStatementContext);
	}
	public descTableStatement(): DescTableStatementContext | undefined {
		return this.tryGetRuleContext(0, DescTableStatementContext);
	}
	public showTableStatusStatement(): ShowTableStatusStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowTableStatusStatementContext);
	}
	public showColumnStatement(): ShowColumnStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowColumnStatementContext);
	}
	public refreshTableStatement(): RefreshTableStatementContext | undefined {
		return this.tryGetRuleContext(0, RefreshTableStatementContext);
	}
	public alterTableStatement(): AlterTableStatementContext | undefined {
		return this.tryGetRuleContext(0, AlterTableStatementContext);
	}
	public cancelAlterTableStatement(): CancelAlterTableStatementContext | undefined {
		return this.tryGetRuleContext(0, CancelAlterTableStatementContext);
	}
	public showAlterStatement(): ShowAlterStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowAlterStatementContext);
	}
	public createViewStatement(): CreateViewStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateViewStatementContext);
	}
	public alterViewStatement(): AlterViewStatementContext | undefined {
		return this.tryGetRuleContext(0, AlterViewStatementContext);
	}
	public dropViewStatement(): DropViewStatementContext | undefined {
		return this.tryGetRuleContext(0, DropViewStatementContext);
	}
	public showPartitionsStatement(): ShowPartitionsStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowPartitionsStatementContext);
	}
	public recoverPartitionStatement(): RecoverPartitionStatementContext | undefined {
		return this.tryGetRuleContext(0, RecoverPartitionStatementContext);
	}
	public createIndexStatement(): CreateIndexStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateIndexStatementContext);
	}
	public dropIndexStatement(): DropIndexStatementContext | undefined {
		return this.tryGetRuleContext(0, DropIndexStatementContext);
	}
	public showIndexStatement(): ShowIndexStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowIndexStatementContext);
	}
	public submitTaskStatement(): SubmitTaskStatementContext | undefined {
		return this.tryGetRuleContext(0, SubmitTaskStatementContext);
	}
	public dropTaskStatement(): DropTaskStatementContext | undefined {
		return this.tryGetRuleContext(0, DropTaskStatementContext);
	}
	public createMaterializedViewStatement(): CreateMaterializedViewStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateMaterializedViewStatementContext);
	}
	public showMaterializedViewsStatement(): ShowMaterializedViewsStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowMaterializedViewsStatementContext);
	}
	public dropMaterializedViewStatement(): DropMaterializedViewStatementContext | undefined {
		return this.tryGetRuleContext(0, DropMaterializedViewStatementContext);
	}
	public alterMaterializedViewStatement(): AlterMaterializedViewStatementContext | undefined {
		return this.tryGetRuleContext(0, AlterMaterializedViewStatementContext);
	}
	public refreshMaterializedViewStatement(): RefreshMaterializedViewStatementContext | undefined {
		return this.tryGetRuleContext(0, RefreshMaterializedViewStatementContext);
	}
	public cancelRefreshMaterializedViewStatement(): CancelRefreshMaterializedViewStatementContext | undefined {
		return this.tryGetRuleContext(0, CancelRefreshMaterializedViewStatementContext);
	}
	public createExternalCatalogStatement(): CreateExternalCatalogStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateExternalCatalogStatementContext);
	}
	public dropExternalCatalogStatement(): DropExternalCatalogStatementContext | undefined {
		return this.tryGetRuleContext(0, DropExternalCatalogStatementContext);
	}
	public showCatalogsStatement(): ShowCatalogsStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowCatalogsStatementContext);
	}
	public showCreateExternalCatalogStatement(): ShowCreateExternalCatalogStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowCreateExternalCatalogStatementContext);
	}
	public insertStatement(): InsertStatementContext | undefined {
		return this.tryGetRuleContext(0, InsertStatementContext);
	}
	public updateStatement(): UpdateStatementContext | undefined {
		return this.tryGetRuleContext(0, UpdateStatementContext);
	}
	public deleteStatement(): DeleteStatementContext | undefined {
		return this.tryGetRuleContext(0, DeleteStatementContext);
	}
	public createRoutineLoadStatement(): CreateRoutineLoadStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateRoutineLoadStatementContext);
	}
	public alterRoutineLoadStatement(): AlterRoutineLoadStatementContext | undefined {
		return this.tryGetRuleContext(0, AlterRoutineLoadStatementContext);
	}
	public stopRoutineLoadStatement(): StopRoutineLoadStatementContext | undefined {
		return this.tryGetRuleContext(0, StopRoutineLoadStatementContext);
	}
	public resumeRoutineLoadStatement(): ResumeRoutineLoadStatementContext | undefined {
		return this.tryGetRuleContext(0, ResumeRoutineLoadStatementContext);
	}
	public pauseRoutineLoadStatement(): PauseRoutineLoadStatementContext | undefined {
		return this.tryGetRuleContext(0, PauseRoutineLoadStatementContext);
	}
	public showRoutineLoadStatement(): ShowRoutineLoadStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowRoutineLoadStatementContext);
	}
	public showRoutineLoadTaskStatement(): ShowRoutineLoadTaskStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowRoutineLoadTaskStatementContext);
	}
	public showStreamLoadStatement(): ShowStreamLoadStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowStreamLoadStatementContext);
	}
	public adminSetConfigStatement(): AdminSetConfigStatementContext | undefined {
		return this.tryGetRuleContext(0, AdminSetConfigStatementContext);
	}
	public adminSetReplicaStatusStatement(): AdminSetReplicaStatusStatementContext | undefined {
		return this.tryGetRuleContext(0, AdminSetReplicaStatusStatementContext);
	}
	public adminShowConfigStatement(): AdminShowConfigStatementContext | undefined {
		return this.tryGetRuleContext(0, AdminShowConfigStatementContext);
	}
	public adminShowReplicaDistributionStatement(): AdminShowReplicaDistributionStatementContext | undefined {
		return this.tryGetRuleContext(0, AdminShowReplicaDistributionStatementContext);
	}
	public adminShowReplicaStatusStatement(): AdminShowReplicaStatusStatementContext | undefined {
		return this.tryGetRuleContext(0, AdminShowReplicaStatusStatementContext);
	}
	public adminRepairTableStatement(): AdminRepairTableStatementContext | undefined {
		return this.tryGetRuleContext(0, AdminRepairTableStatementContext);
	}
	public adminCancelRepairTableStatement(): AdminCancelRepairTableStatementContext | undefined {
		return this.tryGetRuleContext(0, AdminCancelRepairTableStatementContext);
	}
	public adminCheckTabletsStatement(): AdminCheckTabletsStatementContext | undefined {
		return this.tryGetRuleContext(0, AdminCheckTabletsStatementContext);
	}
	public killStatement(): KillStatementContext | undefined {
		return this.tryGetRuleContext(0, KillStatementContext);
	}
	public syncStatement(): SyncStatementContext | undefined {
		return this.tryGetRuleContext(0, SyncStatementContext);
	}
	public executeScriptStatement(): ExecuteScriptStatementContext | undefined {
		return this.tryGetRuleContext(0, ExecuteScriptStatementContext);
	}
	public alterSystemStatement(): AlterSystemStatementContext | undefined {
		return this.tryGetRuleContext(0, AlterSystemStatementContext);
	}
	public cancelAlterSystemStatement(): CancelAlterSystemStatementContext | undefined {
		return this.tryGetRuleContext(0, CancelAlterSystemStatementContext);
	}
	public showComputeNodesStatement(): ShowComputeNodesStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowComputeNodesStatementContext);
	}
	public analyzeStatement(): AnalyzeStatementContext | undefined {
		return this.tryGetRuleContext(0, AnalyzeStatementContext);
	}
	public dropStatsStatement(): DropStatsStatementContext | undefined {
		return this.tryGetRuleContext(0, DropStatsStatementContext);
	}
	public createAnalyzeStatement(): CreateAnalyzeStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateAnalyzeStatementContext);
	}
	public dropAnalyzeJobStatement(): DropAnalyzeJobStatementContext | undefined {
		return this.tryGetRuleContext(0, DropAnalyzeJobStatementContext);
	}
	public analyzeHistogramStatement(): AnalyzeHistogramStatementContext | undefined {
		return this.tryGetRuleContext(0, AnalyzeHistogramStatementContext);
	}
	public dropHistogramStatement(): DropHistogramStatementContext | undefined {
		return this.tryGetRuleContext(0, DropHistogramStatementContext);
	}
	public showAnalyzeStatement(): ShowAnalyzeStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowAnalyzeStatementContext);
	}
	public showStatsMetaStatement(): ShowStatsMetaStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowStatsMetaStatementContext);
	}
	public showHistogramMetaStatement(): ShowHistogramMetaStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowHistogramMetaStatementContext);
	}
	public killAnalyzeStatement(): KillAnalyzeStatementContext | undefined {
		return this.tryGetRuleContext(0, KillAnalyzeStatementContext);
	}
	public analyzeProfileStatement(): AnalyzeProfileStatementContext | undefined {
		return this.tryGetRuleContext(0, AnalyzeProfileStatementContext);
	}
	public createResourceGroupStatement(): CreateResourceGroupStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateResourceGroupStatementContext);
	}
	public dropResourceGroupStatement(): DropResourceGroupStatementContext | undefined {
		return this.tryGetRuleContext(0, DropResourceGroupStatementContext);
	}
	public alterResourceGroupStatement(): AlterResourceGroupStatementContext | undefined {
		return this.tryGetRuleContext(0, AlterResourceGroupStatementContext);
	}
	public showResourceGroupStatement(): ShowResourceGroupStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowResourceGroupStatementContext);
	}
	public createResourceStatement(): CreateResourceStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateResourceStatementContext);
	}
	public alterResourceStatement(): AlterResourceStatementContext | undefined {
		return this.tryGetRuleContext(0, AlterResourceStatementContext);
	}
	public dropResourceStatement(): DropResourceStatementContext | undefined {
		return this.tryGetRuleContext(0, DropResourceStatementContext);
	}
	public showResourceStatement(): ShowResourceStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowResourceStatementContext);
	}
	public showFunctionsStatement(): ShowFunctionsStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowFunctionsStatementContext);
	}
	public dropFunctionStatement(): DropFunctionStatementContext | undefined {
		return this.tryGetRuleContext(0, DropFunctionStatementContext);
	}
	public createFunctionStatement(): CreateFunctionStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateFunctionStatementContext);
	}
	public loadStatement(): LoadStatementContext | undefined {
		return this.tryGetRuleContext(0, LoadStatementContext);
	}
	public showLoadStatement(): ShowLoadStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowLoadStatementContext);
	}
	public showLoadWarningsStatement(): ShowLoadWarningsStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowLoadWarningsStatementContext);
	}
	public cancelLoadStatement(): CancelLoadStatementContext | undefined {
		return this.tryGetRuleContext(0, CancelLoadStatementContext);
	}
	public alterLoadStatement(): AlterLoadStatementContext | undefined {
		return this.tryGetRuleContext(0, AlterLoadStatementContext);
	}
	public showAuthorStatement(): ShowAuthorStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowAuthorStatementContext);
	}
	public showBackendsStatement(): ShowBackendsStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowBackendsStatementContext);
	}
	public showBrokerStatement(): ShowBrokerStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowBrokerStatementContext);
	}
	public showCharsetStatement(): ShowCharsetStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowCharsetStatementContext);
	}
	public showCollationStatement(): ShowCollationStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowCollationStatementContext);
	}
	public showDeleteStatement(): ShowDeleteStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowDeleteStatementContext);
	}
	public showDynamicPartitionStatement(): ShowDynamicPartitionStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowDynamicPartitionStatementContext);
	}
	public showEventsStatement(): ShowEventsStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowEventsStatementContext);
	}
	public showEnginesStatement(): ShowEnginesStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowEnginesStatementContext);
	}
	public showFrontendsStatement(): ShowFrontendsStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowFrontendsStatementContext);
	}
	public showPluginsStatement(): ShowPluginsStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowPluginsStatementContext);
	}
	public showRepositoriesStatement(): ShowRepositoriesStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowRepositoriesStatementContext);
	}
	public showOpenTableStatement(): ShowOpenTableStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowOpenTableStatementContext);
	}
	public showPrivilegesStatement(): ShowPrivilegesStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowPrivilegesStatementContext);
	}
	public showProcedureStatement(): ShowProcedureStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowProcedureStatementContext);
	}
	public showProcStatement(): ShowProcStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowProcStatementContext);
	}
	public showProcesslistStatement(): ShowProcesslistStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowProcesslistStatementContext);
	}
	public showProfilelistStatement(): ShowProfilelistStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowProfilelistStatementContext);
	}
	public showStatusStatement(): ShowStatusStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowStatusStatementContext);
	}
	public showTabletStatement(): ShowTabletStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowTabletStatementContext);
	}
	public showTransactionStatement(): ShowTransactionStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowTransactionStatementContext);
	}
	public showTriggersStatement(): ShowTriggersStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowTriggersStatementContext);
	}
	public showUserPropertyStatement(): ShowUserPropertyStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowUserPropertyStatementContext);
	}
	public showVariablesStatement(): ShowVariablesStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowVariablesStatementContext);
	}
	public showWarningStatement(): ShowWarningStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowWarningStatementContext);
	}
	public helpStatement(): HelpStatementContext | undefined {
		return this.tryGetRuleContext(0, HelpStatementContext);
	}
	public createUserStatement(): CreateUserStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateUserStatementContext);
	}
	public dropUserStatement(): DropUserStatementContext | undefined {
		return this.tryGetRuleContext(0, DropUserStatementContext);
	}
	public alterUserStatement(): AlterUserStatementContext | undefined {
		return this.tryGetRuleContext(0, AlterUserStatementContext);
	}
	public showUserStatement(): ShowUserStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowUserStatementContext);
	}
	public showAuthenticationStatement(): ShowAuthenticationStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowAuthenticationStatementContext);
	}
	public executeAsStatement(): ExecuteAsStatementContext | undefined {
		return this.tryGetRuleContext(0, ExecuteAsStatementContext);
	}
	public createRoleStatement(): CreateRoleStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateRoleStatementContext);
	}
	public alterRoleStatement(): AlterRoleStatementContext | undefined {
		return this.tryGetRuleContext(0, AlterRoleStatementContext);
	}
	public dropRoleStatement(): DropRoleStatementContext | undefined {
		return this.tryGetRuleContext(0, DropRoleStatementContext);
	}
	public showRolesStatement(): ShowRolesStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowRolesStatementContext);
	}
	public grantRoleStatement(): GrantRoleStatementContext | undefined {
		return this.tryGetRuleContext(0, GrantRoleStatementContext);
	}
	public revokeRoleStatement(): RevokeRoleStatementContext | undefined {
		return this.tryGetRuleContext(0, RevokeRoleStatementContext);
	}
	public setRoleStatement(): SetRoleStatementContext | undefined {
		return this.tryGetRuleContext(0, SetRoleStatementContext);
	}
	public setDefaultRoleStatement(): SetDefaultRoleStatementContext | undefined {
		return this.tryGetRuleContext(0, SetDefaultRoleStatementContext);
	}
	public grantPrivilegeStatement(): GrantPrivilegeStatementContext | undefined {
		return this.tryGetRuleContext(0, GrantPrivilegeStatementContext);
	}
	public revokePrivilegeStatement(): RevokePrivilegeStatementContext | undefined {
		return this.tryGetRuleContext(0, RevokePrivilegeStatementContext);
	}
	public showGrantsStatement(): ShowGrantsStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowGrantsStatementContext);
	}
	public createSecurityIntegrationStatement(): CreateSecurityIntegrationStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateSecurityIntegrationStatementContext);
	}
	public alterSecurityIntegrationStatement(): AlterSecurityIntegrationStatementContext | undefined {
		return this.tryGetRuleContext(0, AlterSecurityIntegrationStatementContext);
	}
	public dropSecurityIntegrationStatement(): DropSecurityIntegrationStatementContext | undefined {
		return this.tryGetRuleContext(0, DropSecurityIntegrationStatementContext);
	}
	public showSecurityIntegrationStatement(): ShowSecurityIntegrationStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowSecurityIntegrationStatementContext);
	}
	public showCreateSecurityIntegrationStatement(): ShowCreateSecurityIntegrationStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowCreateSecurityIntegrationStatementContext);
	}
	public createRoleMappingStatement(): CreateRoleMappingStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateRoleMappingStatementContext);
	}
	public alterRoleMappingStatement(): AlterRoleMappingStatementContext | undefined {
		return this.tryGetRuleContext(0, AlterRoleMappingStatementContext);
	}
	public dropRoleMappingStatement(): DropRoleMappingStatementContext | undefined {
		return this.tryGetRuleContext(0, DropRoleMappingStatementContext);
	}
	public showRoleMappingStatement(): ShowRoleMappingStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowRoleMappingStatementContext);
	}
	public refreshRoleMappingStatement(): RefreshRoleMappingStatementContext | undefined {
		return this.tryGetRuleContext(0, RefreshRoleMappingStatementContext);
	}
	public createMaskingPolicyStatement(): CreateMaskingPolicyStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateMaskingPolicyStatementContext);
	}
	public dropMaskingPolicyStatement(): DropMaskingPolicyStatementContext | undefined {
		return this.tryGetRuleContext(0, DropMaskingPolicyStatementContext);
	}
	public alterMaskingPolicyStatement(): AlterMaskingPolicyStatementContext | undefined {
		return this.tryGetRuleContext(0, AlterMaskingPolicyStatementContext);
	}
	public showMaskingPolicyStatement(): ShowMaskingPolicyStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowMaskingPolicyStatementContext);
	}
	public showCreateMaskingPolicyStatement(): ShowCreateMaskingPolicyStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowCreateMaskingPolicyStatementContext);
	}
	public createRowAccessPolicyStatement(): CreateRowAccessPolicyStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateRowAccessPolicyStatementContext);
	}
	public dropRowAccessPolicyStatement(): DropRowAccessPolicyStatementContext | undefined {
		return this.tryGetRuleContext(0, DropRowAccessPolicyStatementContext);
	}
	public alterRowAccessPolicyStatement(): AlterRowAccessPolicyStatementContext | undefined {
		return this.tryGetRuleContext(0, AlterRowAccessPolicyStatementContext);
	}
	public showRowAccessPolicyStatement(): ShowRowAccessPolicyStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowRowAccessPolicyStatementContext);
	}
	public showCreateRowAccessPolicyStatement(): ShowCreateRowAccessPolicyStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowCreateRowAccessPolicyStatementContext);
	}
	public backupStatement(): BackupStatementContext | undefined {
		return this.tryGetRuleContext(0, BackupStatementContext);
	}
	public cancelBackupStatement(): CancelBackupStatementContext | undefined {
		return this.tryGetRuleContext(0, CancelBackupStatementContext);
	}
	public showBackupStatement(): ShowBackupStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowBackupStatementContext);
	}
	public restoreStatement(): RestoreStatementContext | undefined {
		return this.tryGetRuleContext(0, RestoreStatementContext);
	}
	public cancelRestoreStatement(): CancelRestoreStatementContext | undefined {
		return this.tryGetRuleContext(0, CancelRestoreStatementContext);
	}
	public showRestoreStatement(): ShowRestoreStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowRestoreStatementContext);
	}
	public showSnapshotStatement(): ShowSnapshotStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowSnapshotStatementContext);
	}
	public createRepositoryStatement(): CreateRepositoryStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateRepositoryStatementContext);
	}
	public dropRepositoryStatement(): DropRepositoryStatementContext | undefined {
		return this.tryGetRuleContext(0, DropRepositoryStatementContext);
	}
	public addSqlBlackListStatement(): AddSqlBlackListStatementContext | undefined {
		return this.tryGetRuleContext(0, AddSqlBlackListStatementContext);
	}
	public delSqlBlackListStatement(): DelSqlBlackListStatementContext | undefined {
		return this.tryGetRuleContext(0, DelSqlBlackListStatementContext);
	}
	public showSqlBlackListStatement(): ShowSqlBlackListStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowSqlBlackListStatementContext);
	}
	public showWhiteListStatement(): ShowWhiteListStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowWhiteListStatementContext);
	}
	public exportStatement(): ExportStatementContext | undefined {
		return this.tryGetRuleContext(0, ExportStatementContext);
	}
	public cancelExportStatement(): CancelExportStatementContext | undefined {
		return this.tryGetRuleContext(0, CancelExportStatementContext);
	}
	public showExportStatement(): ShowExportStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowExportStatementContext);
	}
	public installPluginStatement(): InstallPluginStatementContext | undefined {
		return this.tryGetRuleContext(0, InstallPluginStatementContext);
	}
	public uninstallPluginStatement(): UninstallPluginStatementContext | undefined {
		return this.tryGetRuleContext(0, UninstallPluginStatementContext);
	}
	public createFileStatement(): CreateFileStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateFileStatementContext);
	}
	public dropFileStatement(): DropFileStatementContext | undefined {
		return this.tryGetRuleContext(0, DropFileStatementContext);
	}
	public showSmallFilesStatement(): ShowSmallFilesStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowSmallFilesStatementContext);
	}
	public setStatement(): SetStatementContext | undefined {
		return this.tryGetRuleContext(0, SetStatementContext);
	}
	public setUserPropertyStatement(): SetUserPropertyStatementContext | undefined {
		return this.tryGetRuleContext(0, SetUserPropertyStatementContext);
	}
	public createStorageVolumeStatement(): CreateStorageVolumeStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateStorageVolumeStatementContext);
	}
	public alterStorageVolumeStatement(): AlterStorageVolumeStatementContext | undefined {
		return this.tryGetRuleContext(0, AlterStorageVolumeStatementContext);
	}
	public dropStorageVolumeStatement(): DropStorageVolumeStatementContext | undefined {
		return this.tryGetRuleContext(0, DropStorageVolumeStatementContext);
	}
	public showStorageVolumesStatement(): ShowStorageVolumesStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowStorageVolumesStatementContext);
	}
	public descStorageVolumeStatement(): DescStorageVolumeStatementContext | undefined {
		return this.tryGetRuleContext(0, DescStorageVolumeStatementContext);
	}
	public setDefaultStorageVolumeStatement(): SetDefaultStorageVolumeStatementContext | undefined {
		return this.tryGetRuleContext(0, SetDefaultStorageVolumeStatementContext);
	}
	public cancelCompactionStatement(): CancelCompactionStatementContext | undefined {
		return this.tryGetRuleContext(0, CancelCompactionStatementContext);
	}
	public unsupportedStatement(): UnsupportedStatementContext | undefined {
		return this.tryGetRuleContext(0, UnsupportedStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_statement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterStatement) {
			listener.enterStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitStatement) {
			listener.exitStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitStatement) {
			return visitor.visitStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UseDatabaseStatementContext extends ParserRuleContext {
	public USE(): TerminalNode { return this.getToken(StarRocksSqlParser.USE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_useDatabaseStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterUseDatabaseStatement) {
			listener.enterUseDatabaseStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitUseDatabaseStatement) {
			listener.exitUseDatabaseStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitUseDatabaseStatement) {
			return visitor.visitUseDatabaseStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UseCatalogStatementContext extends ParserRuleContext {
	public USE(): TerminalNode { return this.getToken(StarRocksSqlParser.USE, 0); }
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_useCatalogStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterUseCatalogStatement) {
			listener.enterUseCatalogStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitUseCatalogStatement) {
			listener.exitUseCatalogStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitUseCatalogStatement) {
			return visitor.visitUseCatalogStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetCatalogStatementContext extends ParserRuleContext {
	public SET(): TerminalNode { return this.getToken(StarRocksSqlParser.SET, 0); }
	public CATALOG(): TerminalNode { return this.getToken(StarRocksSqlParser.CATALOG, 0); }
	public identifierOrString(): IdentifierOrStringContext {
		return this.getRuleContext(0, IdentifierOrStringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_setCatalogStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSetCatalogStatement) {
			listener.enterSetCatalogStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSetCatalogStatement) {
			listener.exitSetCatalogStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSetCatalogStatement) {
			return visitor.visitSetCatalogStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowDatabasesStatementContext extends ParserRuleContext {
	public _catalog!: QualifiedNameContext;
	public _pattern!: StringContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public DATABASES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DATABASES, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IN, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LIKE, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	public SCHEMAS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SCHEMAS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showDatabasesStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowDatabasesStatement) {
			listener.enterShowDatabasesStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowDatabasesStatement) {
			listener.exitShowDatabasesStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowDatabasesStatement) {
			return visitor.visitShowDatabasesStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterDbQuotaStatementContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(StarRocksSqlParser.ALTER, 0); }
	public DATABASE(): TerminalNode { return this.getToken(StarRocksSqlParser.DATABASE, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public SET(): TerminalNode { return this.getToken(StarRocksSqlParser.SET, 0); }
	public DATA(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DATA, 0); }
	public QUOTA(): TerminalNode { return this.getToken(StarRocksSqlParser.QUOTA, 0); }
	public REPLICA(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.REPLICA, 0); }
	public INTEGER_VALUE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INTEGER_VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_alterDbQuotaStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAlterDbQuotaStatement) {
			listener.enterAlterDbQuotaStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAlterDbQuotaStatement) {
			listener.exitAlterDbQuotaStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAlterDbQuotaStatement) {
			return visitor.visitAlterDbQuotaStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateDbStatementContext extends ParserRuleContext {
	public _catalog!: IdentifierContext;
	public _database!: IdentifierContext;
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DATABASE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SCHEMA, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DOT, 0); }
	public charsetDesc(): CharsetDescContext | undefined {
		return this.tryGetRuleContext(0, CharsetDescContext);
	}
	public collateDesc(): CollateDescContext | undefined {
		return this.tryGetRuleContext(0, CollateDescContext);
	}
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_createDbStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCreateDbStatement) {
			listener.enterCreateDbStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCreateDbStatement) {
			listener.exitCreateDbStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCreateDbStatement) {
			return visitor.visitCreateDbStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropDbStatementContext extends ParserRuleContext {
	public _catalog!: IdentifierContext;
	public _database!: IdentifierContext;
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DATABASE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SCHEMA, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DOT, 0); }
	public FORCE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FORCE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropDbStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropDbStatement) {
			listener.enterDropDbStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropDbStatement) {
			listener.exitDropDbStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropDbStatement) {
			return visitor.visitDropDbStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowCreateDbStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DATABASE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SCHEMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showCreateDbStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowCreateDbStatement) {
			listener.enterShowCreateDbStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowCreateDbStatement) {
			listener.exitShowCreateDbStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowCreateDbStatement) {
			return visitor.visitShowCreateDbStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterDatabaseRenameStatementContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(StarRocksSqlParser.ALTER, 0); }
	public DATABASE(): TerminalNode { return this.getToken(StarRocksSqlParser.DATABASE, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public RENAME(): TerminalNode { return this.getToken(StarRocksSqlParser.RENAME, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_alterDatabaseRenameStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAlterDatabaseRenameStatement) {
			listener.enterAlterDatabaseRenameStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAlterDatabaseRenameStatement) {
			listener.exitAlterDatabaseRenameStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAlterDatabaseRenameStatement) {
			return visitor.visitAlterDatabaseRenameStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RecoverDbStmtContext extends ParserRuleContext {
	public RECOVER(): TerminalNode { return this.getToken(StarRocksSqlParser.RECOVER, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DATABASE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SCHEMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_recoverDbStmt; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterRecoverDbStmt) {
			listener.enterRecoverDbStmt(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitRecoverDbStmt) {
			listener.exitRecoverDbStmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitRecoverDbStmt) {
			return visitor.visitRecoverDbStmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowDataStmtContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public DATA(): TerminalNode { return this.getToken(StarRocksSqlParser.DATA, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showDataStmt; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowDataStmt) {
			listener.enterShowDataStmt(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowDataStmt) {
			listener.exitShowDataStmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowDataStmt) {
			return visitor.visitShowDataStmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateTableStatementContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public TABLE(): TerminalNode { return this.getToken(StarRocksSqlParser.TABLE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public columnDesc(): ColumnDescContext[];
	public columnDesc(i: number): ColumnDescContext;
	public columnDesc(i?: number): ColumnDescContext | ColumnDescContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnDescContext);
		} else {
			return this.getRuleContext(i, ColumnDescContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXTERNAL, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	public indexDesc(): IndexDescContext[];
	public indexDesc(i: number): IndexDescContext;
	public indexDesc(i?: number): IndexDescContext | IndexDescContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexDescContext);
		} else {
			return this.getRuleContext(i, IndexDescContext);
		}
	}
	public engineDesc(): EngineDescContext | undefined {
		return this.tryGetRuleContext(0, EngineDescContext);
	}
	public charsetDesc(): CharsetDescContext | undefined {
		return this.tryGetRuleContext(0, CharsetDescContext);
	}
	public keyDesc(): KeyDescContext | undefined {
		return this.tryGetRuleContext(0, KeyDescContext);
	}
	public withRowAccessPolicy(): WithRowAccessPolicyContext[];
	public withRowAccessPolicy(i: number): WithRowAccessPolicyContext;
	public withRowAccessPolicy(i?: number): WithRowAccessPolicyContext | WithRowAccessPolicyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(WithRowAccessPolicyContext);
		} else {
			return this.getRuleContext(i, WithRowAccessPolicyContext);
		}
	}
	public comment(): CommentContext | undefined {
		return this.tryGetRuleContext(0, CommentContext);
	}
	public partitionDesc(): PartitionDescContext | undefined {
		return this.tryGetRuleContext(0, PartitionDescContext);
	}
	public distributionDesc(): DistributionDescContext | undefined {
		return this.tryGetRuleContext(0, DistributionDescContext);
	}
	public orderByDesc(): OrderByDescContext | undefined {
		return this.tryGetRuleContext(0, OrderByDescContext);
	}
	public rollupDesc(): RollupDescContext | undefined {
		return this.tryGetRuleContext(0, RollupDescContext);
	}
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	public extProperties(): ExtPropertiesContext | undefined {
		return this.tryGetRuleContext(0, ExtPropertiesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_createTableStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCreateTableStatement) {
			listener.enterCreateTableStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCreateTableStatement) {
			listener.exitCreateTableStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCreateTableStatement) {
			return visitor.visitCreateTableStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnDescContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public type(): TypeContext {
		return this.getRuleContext(0, TypeContext);
	}
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.KEY, 0); }
	public aggDesc(): AggDescContext | undefined {
		return this.tryGetRuleContext(0, AggDescContext);
	}
	public NULL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NULL, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NOT, 0); }
	public defaultDesc(): DefaultDescContext | undefined {
		return this.tryGetRuleContext(0, DefaultDescContext);
	}
	public AUTO_INCREMENT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.AUTO_INCREMENT, 0); }
	public materializedColumnDesc(): MaterializedColumnDescContext | undefined {
		return this.tryGetRuleContext(0, MaterializedColumnDescContext);
	}
	public withMaskingPolicy(): WithMaskingPolicyContext | undefined {
		return this.tryGetRuleContext(0, WithMaskingPolicyContext);
	}
	public comment(): CommentContext | undefined {
		return this.tryGetRuleContext(0, CommentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_columnDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterColumnDesc) {
			listener.enterColumnDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitColumnDesc) {
			listener.exitColumnDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitColumnDesc) {
			return visitor.visitColumnDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CharsetNameContext extends ParserRuleContext {
	public CHAR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CHAR, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SET, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public CHARSET(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CHARSET, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CHARACTER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_charsetName; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCharsetName) {
			listener.enterCharsetName(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCharsetName) {
			listener.exitCharsetName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCharsetName) {
			return visitor.visitCharsetName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DefaultDescContext extends ParserRuleContext {
	public DEFAULT(): TerminalNode { return this.getToken(StarRocksSqlParser.DEFAULT, 0); }
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	public NULL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NULL, 0); }
	public CURRENT_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CURRENT_TIMESTAMP, 0); }
	public LEFT_PAREN(): TerminalNode[];
	public LEFT_PAREN(i: number): TerminalNode;
	public LEFT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.LEFT_PAREN);
		} else {
			return this.getToken(StarRocksSqlParser.LEFT_PAREN, i);
		}
	}
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	public RIGHT_PAREN(): TerminalNode[];
	public RIGHT_PAREN(i: number): TerminalNode;
	public RIGHT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.RIGHT_PAREN);
		} else {
			return this.getToken(StarRocksSqlParser.RIGHT_PAREN, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_defaultDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDefaultDesc) {
			listener.enterDefaultDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDefaultDesc) {
			listener.exitDefaultDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDefaultDesc) {
			return visitor.visitDefaultDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MaterializedColumnDescContext extends ParserRuleContext {
	public AS(): TerminalNode { return this.getToken(StarRocksSqlParser.AS, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_materializedColumnDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterMaterializedColumnDesc) {
			listener.enterMaterializedColumnDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitMaterializedColumnDesc) {
			listener.exitMaterializedColumnDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitMaterializedColumnDesc) {
			return visitor.visitMaterializedColumnDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IndexDescContext extends ParserRuleContext {
	public _indexName!: IdentifierContext;
	public INDEX(): TerminalNode { return this.getToken(StarRocksSqlParser.INDEX, 0); }
	public identifierList(): IdentifierListContext {
		return this.getRuleContext(0, IdentifierListContext);
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public indexType(): IndexTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeContext);
	}
	public comment(): CommentContext | undefined {
		return this.tryGetRuleContext(0, CommentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_indexDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterIndexDesc) {
			listener.enterIndexDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitIndexDesc) {
			listener.exitIndexDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitIndexDesc) {
			return visitor.visitIndexDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EngineDescContext extends ParserRuleContext {
	public ENGINE(): TerminalNode { return this.getToken(StarRocksSqlParser.ENGINE, 0); }
	public EQ(): TerminalNode { return this.getToken(StarRocksSqlParser.EQ, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_engineDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterEngineDesc) {
			listener.enterEngineDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitEngineDesc) {
			listener.exitEngineDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitEngineDesc) {
			return visitor.visitEngineDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CharsetDescContext extends ParserRuleContext {
	public identifierOrString(): IdentifierOrStringContext {
		return this.getRuleContext(0, IdentifierOrStringContext);
	}
	public CHAR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CHAR, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SET, 0); }
	public CHARSET(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CHARSET, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CHARACTER, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DEFAULT, 0); }
	public EQ(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EQ, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_charsetDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCharsetDesc) {
			listener.enterCharsetDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCharsetDesc) {
			listener.exitCharsetDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCharsetDesc) {
			return visitor.visitCharsetDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CollateDescContext extends ParserRuleContext {
	public COLLATE(): TerminalNode { return this.getToken(StarRocksSqlParser.COLLATE, 0); }
	public identifierOrString(): IdentifierOrStringContext {
		return this.getRuleContext(0, IdentifierOrStringContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DEFAULT, 0); }
	public EQ(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EQ, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_collateDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCollateDesc) {
			listener.enterCollateDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCollateDesc) {
			listener.exitCollateDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCollateDesc) {
			return visitor.visitCollateDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class KeyDescContext extends ParserRuleContext {
	public KEY(): TerminalNode { return this.getToken(StarRocksSqlParser.KEY, 0); }
	public identifierList(): IdentifierListContext {
		return this.getRuleContext(0, IdentifierListContext);
	}
	public AGGREGATE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.AGGREGATE, 0); }
	public UNIQUE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.UNIQUE, 0); }
	public PRIMARY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PRIMARY, 0); }
	public DUPLICATE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DUPLICATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_keyDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterKeyDesc) {
			listener.enterKeyDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitKeyDesc) {
			listener.exitKeyDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitKeyDesc) {
			return visitor.visitKeyDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OrderByDescContext extends ParserRuleContext {
	public ORDER(): TerminalNode { return this.getToken(StarRocksSqlParser.ORDER, 0); }
	public BY(): TerminalNode { return this.getToken(StarRocksSqlParser.BY, 0); }
	public identifierList(): IdentifierListContext {
		return this.getRuleContext(0, IdentifierListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_orderByDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterOrderByDesc) {
			listener.enterOrderByDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitOrderByDesc) {
			listener.exitOrderByDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitOrderByDesc) {
			return visitor.visitOrderByDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AggDescContext extends ParserRuleContext {
	public SUM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SUM, 0); }
	public MAX(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MAX, 0); }
	public MIN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MIN, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.REPLACE, 0); }
	public HLL_UNION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.HLL_UNION, 0); }
	public BITMAP_UNION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BITMAP_UNION, 0); }
	public PERCENTILE_UNION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PERCENTILE_UNION, 0); }
	public REPLACE_IF_NOT_NULL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.REPLACE_IF_NOT_NULL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_aggDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAggDesc) {
			listener.enterAggDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAggDesc) {
			listener.exitAggDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAggDesc) {
			return visitor.visitAggDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RollupDescContext extends ParserRuleContext {
	public ROLLUP(): TerminalNode { return this.getToken(StarRocksSqlParser.ROLLUP, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public rollupItem(): RollupItemContext[];
	public rollupItem(i: number): RollupItemContext;
	public rollupItem(i?: number): RollupItemContext | RollupItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RollupItemContext);
		} else {
			return this.getRuleContext(i, RollupItemContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_rollupDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterRollupDesc) {
			listener.enterRollupDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitRollupDesc) {
			listener.exitRollupDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitRollupDesc) {
			return visitor.visitRollupDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RollupItemContext extends ParserRuleContext {
	public _rollupName!: IdentifierContext;
	public identifierList(): IdentifierListContext {
		return this.getRuleContext(0, IdentifierListContext);
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public dupKeys(): DupKeysContext | undefined {
		return this.tryGetRuleContext(0, DupKeysContext);
	}
	public fromRollup(): FromRollupContext | undefined {
		return this.tryGetRuleContext(0, FromRollupContext);
	}
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_rollupItem; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterRollupItem) {
			listener.enterRollupItem(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitRollupItem) {
			listener.exitRollupItem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitRollupItem) {
			return visitor.visitRollupItem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DupKeysContext extends ParserRuleContext {
	public DUPLICATE(): TerminalNode { return this.getToken(StarRocksSqlParser.DUPLICATE, 0); }
	public KEY(): TerminalNode { return this.getToken(StarRocksSqlParser.KEY, 0); }
	public identifierList(): IdentifierListContext {
		return this.getRuleContext(0, IdentifierListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dupKeys; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDupKeys) {
			listener.enterDupKeys(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDupKeys) {
			listener.exitDupKeys(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDupKeys) {
			return visitor.visitDupKeys(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FromRollupContext extends ParserRuleContext {
	public FROM(): TerminalNode { return this.getToken(StarRocksSqlParser.FROM, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_fromRollup; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterFromRollup) {
			listener.enterFromRollup(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitFromRollup) {
			listener.exitFromRollup(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitFromRollup) {
			return visitor.visitFromRollup(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WithMaskingPolicyContext extends ParserRuleContext {
	public _policyName!: QualifiedNameContext;
	public WITH(): TerminalNode { return this.getToken(StarRocksSqlParser.WITH, 0); }
	public MASKING(): TerminalNode { return this.getToken(StarRocksSqlParser.MASKING, 0); }
	public POLICY(): TerminalNode { return this.getToken(StarRocksSqlParser.POLICY, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.USING, 0); }
	public identifierList(): IdentifierListContext | undefined {
		return this.tryGetRuleContext(0, IdentifierListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_withMaskingPolicy; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterWithMaskingPolicy) {
			listener.enterWithMaskingPolicy(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitWithMaskingPolicy) {
			listener.exitWithMaskingPolicy(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitWithMaskingPolicy) {
			return visitor.visitWithMaskingPolicy(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WithRowAccessPolicyContext extends ParserRuleContext {
	public _policyName!: QualifiedNameContext;
	public WITH(): TerminalNode { return this.getToken(StarRocksSqlParser.WITH, 0); }
	public ROW(): TerminalNode { return this.getToken(StarRocksSqlParser.ROW, 0); }
	public ACCESS(): TerminalNode { return this.getToken(StarRocksSqlParser.ACCESS, 0); }
	public POLICY(): TerminalNode { return this.getToken(StarRocksSqlParser.POLICY, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ON, 0); }
	public identifierList(): IdentifierListContext | undefined {
		return this.tryGetRuleContext(0, IdentifierListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_withRowAccessPolicy; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterWithRowAccessPolicy) {
			listener.enterWithRowAccessPolicy(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitWithRowAccessPolicy) {
			listener.exitWithRowAccessPolicy(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitWithRowAccessPolicy) {
			return visitor.visitWithRowAccessPolicy(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateTemporaryTableStatementContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public TEMPORARY(): TerminalNode { return this.getToken(StarRocksSqlParser.TEMPORARY, 0); }
	public TABLE(): TerminalNode { return this.getToken(StarRocksSqlParser.TABLE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public queryStatement(): QueryStatementContext {
		return this.getRuleContext(0, QueryStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_createTemporaryTableStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCreateTemporaryTableStatement) {
			listener.enterCreateTemporaryTableStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCreateTemporaryTableStatement) {
			listener.exitCreateTemporaryTableStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCreateTemporaryTableStatement) {
			return visitor.visitCreateTemporaryTableStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateTableAsSelectStatementContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public TABLE(): TerminalNode { return this.getToken(StarRocksSqlParser.TABLE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public AS(): TerminalNode { return this.getToken(StarRocksSqlParser.AS, 0); }
	public queryStatement(): QueryStatementContext {
		return this.getRuleContext(0, QueryStatementContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public keyDesc(): KeyDescContext | undefined {
		return this.tryGetRuleContext(0, KeyDescContext);
	}
	public comment(): CommentContext | undefined {
		return this.tryGetRuleContext(0, CommentContext);
	}
	public partitionDesc(): PartitionDescContext | undefined {
		return this.tryGetRuleContext(0, PartitionDescContext);
	}
	public distributionDesc(): DistributionDescContext | undefined {
		return this.tryGetRuleContext(0, DistributionDescContext);
	}
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_createTableAsSelectStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCreateTableAsSelectStatement) {
			listener.enterCreateTableAsSelectStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCreateTableAsSelectStatement) {
			listener.exitCreateTableAsSelectStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCreateTableAsSelectStatement) {
			return visitor.visitCreateTableAsSelectStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropTableStatementContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public TABLE(): TerminalNode { return this.getToken(StarRocksSqlParser.TABLE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TEMPORARY, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	public FORCE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FORCE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropTableStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropTableStatement) {
			listener.enterDropTableStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropTableStatement) {
			listener.exitDropTableStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropTableStatement) {
			return visitor.visitDropTableStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterTableStatementContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(StarRocksSqlParser.ALTER, 0); }
	public TABLE(): TerminalNode { return this.getToken(StarRocksSqlParser.TABLE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public alterClause(): AlterClauseContext[];
	public alterClause(i: number): AlterClauseContext;
	public alterClause(i?: number): AlterClauseContext | AlterClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AlterClauseContext);
		} else {
			return this.getRuleContext(i, AlterClauseContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	public ADD(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ADD, 0); }
	public ROLLUP(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ROLLUP, 0); }
	public rollupItem(): RollupItemContext[];
	public rollupItem(i: number): RollupItemContext;
	public rollupItem(i?: number): RollupItemContext | RollupItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RollupItemContext);
		} else {
			return this.getRuleContext(i, RollupItemContext);
		}
	}
	public DROP(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DROP, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_alterTableStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAlterTableStatement) {
			listener.enterAlterTableStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAlterTableStatement) {
			listener.exitAlterTableStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAlterTableStatement) {
			return visitor.visitAlterTableStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateIndexStatementContext extends ParserRuleContext {
	public _indexName!: IdentifierContext;
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public INDEX(): TerminalNode { return this.getToken(StarRocksSqlParser.INDEX, 0); }
	public ON(): TerminalNode { return this.getToken(StarRocksSqlParser.ON, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public identifierList(): IdentifierListContext {
		return this.getRuleContext(0, IdentifierListContext);
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public indexType(): IndexTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeContext);
	}
	public comment(): CommentContext | undefined {
		return this.tryGetRuleContext(0, CommentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_createIndexStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCreateIndexStatement) {
			listener.enterCreateIndexStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCreateIndexStatement) {
			listener.exitCreateIndexStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCreateIndexStatement) {
			return visitor.visitCreateIndexStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropIndexStatementContext extends ParserRuleContext {
	public _indexName!: IdentifierContext;
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public INDEX(): TerminalNode { return this.getToken(StarRocksSqlParser.INDEX, 0); }
	public ON(): TerminalNode { return this.getToken(StarRocksSqlParser.ON, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropIndexStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropIndexStatement) {
			listener.enterDropIndexStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropIndexStatement) {
			listener.exitDropIndexStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropIndexStatement) {
			return visitor.visitDropIndexStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IndexTypeContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(StarRocksSqlParser.USING, 0); }
	public BITMAP(): TerminalNode { return this.getToken(StarRocksSqlParser.BITMAP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_indexType; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterIndexType) {
			listener.enterIndexType(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitIndexType) {
			listener.exitIndexType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitIndexType) {
			return visitor.visitIndexType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowTableStatementContext extends ParserRuleContext {
	public _db!: QualifiedNameContext;
	public _pattern!: StringContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public TABLES(): TerminalNode { return this.getToken(StarRocksSqlParser.TABLES, 0); }
	public FULL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FULL, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IN, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LIKE, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showTableStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowTableStatement) {
			listener.enterShowTableStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowTableStatement) {
			listener.exitShowTableStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowTableStatement) {
			return visitor.visitShowTableStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowCreateTableStatementContext extends ParserRuleContext {
	public _table!: QualifiedNameContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TABLE, 0); }
	public VIEW(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.VIEW, 0); }
	public MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MATERIALIZED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showCreateTableStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowCreateTableStatement) {
			listener.enterShowCreateTableStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowCreateTableStatement) {
			listener.exitShowCreateTableStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowCreateTableStatement) {
			return visitor.visitShowCreateTableStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowColumnStatementContext extends ParserRuleContext {
	public _table!: QualifiedNameContext;
	public _db!: QualifiedNameContext;
	public _pattern!: StringContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public COLUMNS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.COLUMNS, 0); }
	public FIELDS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FIELDS, 0); }
	public FULL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FULL, 0); }
	public FROM(): TerminalNode[];
	public FROM(i: number): TerminalNode;
	public FROM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.FROM);
		} else {
			return this.getToken(StarRocksSqlParser.FROM, i);
		}
	}
	public IN(): TerminalNode[];
	public IN(i: number): TerminalNode;
	public IN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.IN);
		} else {
			return this.getToken(StarRocksSqlParser.IN, i);
		}
	}
	public qualifiedName(): QualifiedNameContext[];
	public qualifiedName(i: number): QualifiedNameContext;
	public qualifiedName(i?: number): QualifiedNameContext | QualifiedNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(QualifiedNameContext);
		} else {
			return this.getRuleContext(i, QualifiedNameContext);
		}
	}
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LIKE, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showColumnStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowColumnStatement) {
			listener.enterShowColumnStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowColumnStatement) {
			listener.exitShowColumnStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowColumnStatement) {
			return visitor.visitShowColumnStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowTableStatusStatementContext extends ParserRuleContext {
	public _db!: QualifiedNameContext;
	public _pattern!: StringContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public TABLE(): TerminalNode { return this.getToken(StarRocksSqlParser.TABLE, 0); }
	public STATUS(): TerminalNode { return this.getToken(StarRocksSqlParser.STATUS, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IN, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LIKE, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showTableStatusStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowTableStatusStatement) {
			listener.enterShowTableStatusStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowTableStatusStatement) {
			listener.exitShowTableStatusStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowTableStatusStatement) {
			return visitor.visitShowTableStatusStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RefreshTableStatementContext extends ParserRuleContext {
	public REFRESH(): TerminalNode { return this.getToken(StarRocksSqlParser.REFRESH, 0); }
	public EXTERNAL(): TerminalNode { return this.getToken(StarRocksSqlParser.EXTERNAL, 0); }
	public TABLE(): TerminalNode { return this.getToken(StarRocksSqlParser.TABLE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PARTITION, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public string(): StringContext[];
	public string(i: number): StringContext;
	public string(i?: number): StringContext | StringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringContext);
		} else {
			return this.getRuleContext(i, StringContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_refreshTableStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterRefreshTableStatement) {
			listener.enterRefreshTableStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitRefreshTableStatement) {
			listener.exitRefreshTableStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitRefreshTableStatement) {
			return visitor.visitRefreshTableStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowAlterStatementContext extends ParserRuleContext {
	public _db!: QualifiedNameContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public ALTER(): TerminalNode { return this.getToken(StarRocksSqlParser.ALTER, 0); }
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TABLE, 0); }
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.COLUMN, 0); }
	public ROLLUP(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ROLLUP, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ORDER, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BY, 0); }
	public sortItem(): SortItemContext[];
	public sortItem(i: number): SortItemContext;
	public sortItem(i?: number): SortItemContext | SortItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SortItemContext);
		} else {
			return this.getRuleContext(i, SortItemContext);
		}
	}
	public limitElement(): LimitElementContext | undefined {
		return this.tryGetRuleContext(0, LimitElementContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IN, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	public MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MATERIALIZED, 0); }
	public VIEW(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.VIEW, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showAlterStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowAlterStatement) {
			listener.enterShowAlterStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowAlterStatement) {
			listener.exitShowAlterStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowAlterStatement) {
			return visitor.visitShowAlterStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DescTableStatementContext extends ParserRuleContext {
	public _table!: QualifiedNameContext;
	public DESC(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DESC, 0); }
	public DESCRIBE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DESCRIBE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_descTableStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDescTableStatement) {
			listener.enterDescTableStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDescTableStatement) {
			listener.exitDescTableStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDescTableStatement) {
			return visitor.visitDescTableStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateTableLikeStatementContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public TABLE(): TerminalNode { return this.getToken(StarRocksSqlParser.TABLE, 0); }
	public qualifiedName(): QualifiedNameContext[];
	public qualifiedName(i: number): QualifiedNameContext;
	public qualifiedName(i?: number): QualifiedNameContext | QualifiedNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(QualifiedNameContext);
		} else {
			return this.getRuleContext(i, QualifiedNameContext);
		}
	}
	public LIKE(): TerminalNode { return this.getToken(StarRocksSqlParser.LIKE, 0); }
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXTERNAL, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_createTableLikeStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCreateTableLikeStatement) {
			listener.enterCreateTableLikeStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCreateTableLikeStatement) {
			listener.exitCreateTableLikeStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCreateTableLikeStatement) {
			return visitor.visitCreateTableLikeStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowIndexStatementContext extends ParserRuleContext {
	public _table!: QualifiedNameContext;
	public _db!: QualifiedNameContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INDEX, 0); }
	public INDEXES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INDEXES, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.KEY, 0); }
	public KEYS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.KEYS, 0); }
	public FROM(): TerminalNode[];
	public FROM(i: number): TerminalNode;
	public FROM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.FROM);
		} else {
			return this.getToken(StarRocksSqlParser.FROM, i);
		}
	}
	public IN(): TerminalNode[];
	public IN(i: number): TerminalNode;
	public IN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.IN);
		} else {
			return this.getToken(StarRocksSqlParser.IN, i);
		}
	}
	public qualifiedName(): QualifiedNameContext[];
	public qualifiedName(i: number): QualifiedNameContext;
	public qualifiedName(i?: number): QualifiedNameContext | QualifiedNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(QualifiedNameContext);
		} else {
			return this.getRuleContext(i, QualifiedNameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showIndexStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowIndexStatement) {
			listener.enterShowIndexStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowIndexStatement) {
			listener.exitShowIndexStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowIndexStatement) {
			return visitor.visitShowIndexStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RecoverTableStatementContext extends ParserRuleContext {
	public RECOVER(): TerminalNode { return this.getToken(StarRocksSqlParser.RECOVER, 0); }
	public TABLE(): TerminalNode { return this.getToken(StarRocksSqlParser.TABLE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_recoverTableStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterRecoverTableStatement) {
			listener.enterRecoverTableStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitRecoverTableStatement) {
			listener.exitRecoverTableStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitRecoverTableStatement) {
			return visitor.visitRecoverTableStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TruncateTableStatementContext extends ParserRuleContext {
	public TRUNCATE(): TerminalNode { return this.getToken(StarRocksSqlParser.TRUNCATE, 0); }
	public TABLE(): TerminalNode { return this.getToken(StarRocksSqlParser.TABLE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public partitionNames(): PartitionNamesContext | undefined {
		return this.tryGetRuleContext(0, PartitionNamesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_truncateTableStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterTruncateTableStatement) {
			listener.enterTruncateTableStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitTruncateTableStatement) {
			listener.exitTruncateTableStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitTruncateTableStatement) {
			return visitor.visitTruncateTableStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CancelAlterTableStatementContext extends ParserRuleContext {
	public CANCEL(): TerminalNode { return this.getToken(StarRocksSqlParser.CANCEL, 0); }
	public ALTER(): TerminalNode { return this.getToken(StarRocksSqlParser.ALTER, 0); }
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TABLE, 0); }
	public FROM(): TerminalNode { return this.getToken(StarRocksSqlParser.FROM, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public INTEGER_VALUE(): TerminalNode[];
	public INTEGER_VALUE(i: number): TerminalNode;
	public INTEGER_VALUE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.INTEGER_VALUE);
		} else {
			return this.getToken(StarRocksSqlParser.INTEGER_VALUE, i);
		}
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.COLUMN, 0); }
	public ROLLUP(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ROLLUP, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	public MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MATERIALIZED, 0); }
	public VIEW(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.VIEW, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_cancelAlterTableStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCancelAlterTableStatement) {
			listener.enterCancelAlterTableStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCancelAlterTableStatement) {
			listener.exitCancelAlterTableStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCancelAlterTableStatement) {
			return visitor.visitCancelAlterTableStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowPartitionsStatementContext extends ParserRuleContext {
	public _table!: QualifiedNameContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public PARTITIONS(): TerminalNode { return this.getToken(StarRocksSqlParser.PARTITIONS, 0); }
	public FROM(): TerminalNode { return this.getToken(StarRocksSqlParser.FROM, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TEMPORARY, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ORDER, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BY, 0); }
	public sortItem(): SortItemContext[];
	public sortItem(i: number): SortItemContext;
	public sortItem(i?: number): SortItemContext | SortItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SortItemContext);
		} else {
			return this.getRuleContext(i, SortItemContext);
		}
	}
	public limitElement(): LimitElementContext | undefined {
		return this.tryGetRuleContext(0, LimitElementContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showPartitionsStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowPartitionsStatement) {
			listener.enterShowPartitionsStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowPartitionsStatement) {
			listener.exitShowPartitionsStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowPartitionsStatement) {
			return visitor.visitShowPartitionsStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RecoverPartitionStatementContext extends ParserRuleContext {
	public _table!: QualifiedNameContext;
	public RECOVER(): TerminalNode { return this.getToken(StarRocksSqlParser.RECOVER, 0); }
	public PARTITION(): TerminalNode { return this.getToken(StarRocksSqlParser.PARTITION, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public FROM(): TerminalNode { return this.getToken(StarRocksSqlParser.FROM, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_recoverPartitionStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterRecoverPartitionStatement) {
			listener.enterRecoverPartitionStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitRecoverPartitionStatement) {
			listener.exitRecoverPartitionStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitRecoverPartitionStatement) {
			return visitor.visitRecoverPartitionStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateViewStatementContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public VIEW(): TerminalNode { return this.getToken(StarRocksSqlParser.VIEW, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public AS(): TerminalNode { return this.getToken(StarRocksSqlParser.AS, 0); }
	public queryStatement(): QueryStatementContext {
		return this.getRuleContext(0, QueryStatementContext);
	}
	public OR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.OR, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.REPLACE, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public columnNameWithComment(): ColumnNameWithCommentContext[];
	public columnNameWithComment(i: number): ColumnNameWithCommentContext;
	public columnNameWithComment(i?: number): ColumnNameWithCommentContext | ColumnNameWithCommentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnNameWithCommentContext);
		} else {
			return this.getRuleContext(i, ColumnNameWithCommentContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public withRowAccessPolicy(): WithRowAccessPolicyContext[];
	public withRowAccessPolicy(i: number): WithRowAccessPolicyContext;
	public withRowAccessPolicy(i?: number): WithRowAccessPolicyContext | WithRowAccessPolicyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(WithRowAccessPolicyContext);
		} else {
			return this.getRuleContext(i, WithRowAccessPolicyContext);
		}
	}
	public comment(): CommentContext | undefined {
		return this.tryGetRuleContext(0, CommentContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_createViewStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCreateViewStatement) {
			listener.enterCreateViewStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCreateViewStatement) {
			listener.exitCreateViewStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCreateViewStatement) {
			return visitor.visitCreateViewStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterViewStatementContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(StarRocksSqlParser.ALTER, 0); }
	public VIEW(): TerminalNode { return this.getToken(StarRocksSqlParser.VIEW, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.AS, 0); }
	public queryStatement(): QueryStatementContext | undefined {
		return this.tryGetRuleContext(0, QueryStatementContext);
	}
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public columnNameWithComment(): ColumnNameWithCommentContext[];
	public columnNameWithComment(i: number): ColumnNameWithCommentContext;
	public columnNameWithComment(i?: number): ColumnNameWithCommentContext | ColumnNameWithCommentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnNameWithCommentContext);
		} else {
			return this.getRuleContext(i, ColumnNameWithCommentContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	public applyMaskingPolicyClause(): ApplyMaskingPolicyClauseContext | undefined {
		return this.tryGetRuleContext(0, ApplyMaskingPolicyClauseContext);
	}
	public applyRowAccessPolicyClause(): ApplyRowAccessPolicyClauseContext | undefined {
		return this.tryGetRuleContext(0, ApplyRowAccessPolicyClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_alterViewStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAlterViewStatement) {
			listener.enterAlterViewStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAlterViewStatement) {
			listener.exitAlterViewStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAlterViewStatement) {
			return visitor.visitAlterViewStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropViewStatementContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public VIEW(): TerminalNode { return this.getToken(StarRocksSqlParser.VIEW, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropViewStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropViewStatement) {
			listener.enterDropViewStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropViewStatement) {
			listener.exitDropViewStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropViewStatement) {
			return visitor.visitDropViewStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnNameWithCommentContext extends ParserRuleContext {
	public _columnName!: IdentifierContext;
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public withMaskingPolicy(): WithMaskingPolicyContext | undefined {
		return this.tryGetRuleContext(0, WithMaskingPolicyContext);
	}
	public comment(): CommentContext | undefined {
		return this.tryGetRuleContext(0, CommentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_columnNameWithComment; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterColumnNameWithComment) {
			listener.enterColumnNameWithComment(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitColumnNameWithComment) {
			listener.exitColumnNameWithComment(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitColumnNameWithComment) {
			return visitor.visitColumnNameWithComment(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubmitTaskStatementContext extends ParserRuleContext {
	public SUBMIT(): TerminalNode { return this.getToken(StarRocksSqlParser.SUBMIT, 0); }
	public TASK(): TerminalNode { return this.getToken(StarRocksSqlParser.TASK, 0); }
	public AS(): TerminalNode { return this.getToken(StarRocksSqlParser.AS, 0); }
	public taskExecSql(): TaskExecSqlContext {
		return this.getRuleContext(0, TaskExecSqlContext);
	}
	public setVarHint(): SetVarHintContext[];
	public setVarHint(i: number): SetVarHintContext;
	public setVarHint(i?: number): SetVarHintContext | SetVarHintContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SetVarHintContext);
		} else {
			return this.getRuleContext(i, SetVarHintContext);
		}
	}
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_submitTaskStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSubmitTaskStatement) {
			listener.enterSubmitTaskStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSubmitTaskStatement) {
			listener.exitSubmitTaskStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSubmitTaskStatement) {
			return visitor.visitSubmitTaskStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TaskExecSqlContext extends ParserRuleContext {
	public createTableAsSelectStatement(): CreateTableAsSelectStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateTableAsSelectStatementContext);
	}
	public insertStatement(): InsertStatementContext | undefined {
		return this.tryGetRuleContext(0, InsertStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_taskExecSql; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterTaskExecSql) {
			listener.enterTaskExecSql(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitTaskExecSql) {
			listener.exitTaskExecSql(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitTaskExecSql) {
			return visitor.visitTaskExecSql(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropTaskStatementContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public TASK(): TerminalNode { return this.getToken(StarRocksSqlParser.TASK, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropTaskStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropTaskStatement) {
			listener.enterDropTaskStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropTaskStatement) {
			listener.exitDropTaskStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropTaskStatement) {
			return visitor.visitDropTaskStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateMaterializedViewStatementContext extends ParserRuleContext {
	public _mvName!: QualifiedNameContext;
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public MATERIALIZED(): TerminalNode { return this.getToken(StarRocksSqlParser.MATERIALIZED, 0); }
	public VIEW(): TerminalNode { return this.getToken(StarRocksSqlParser.VIEW, 0); }
	public AS(): TerminalNode { return this.getToken(StarRocksSqlParser.AS, 0); }
	public queryStatement(): QueryStatementContext {
		return this.getRuleContext(0, QueryStatementContext);
	}
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public columnNameWithComment(): ColumnNameWithCommentContext[];
	public columnNameWithComment(i: number): ColumnNameWithCommentContext;
	public columnNameWithComment(i?: number): ColumnNameWithCommentContext | ColumnNameWithCommentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnNameWithCommentContext);
		} else {
			return this.getRuleContext(i, ColumnNameWithCommentContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public withRowAccessPolicy(): WithRowAccessPolicyContext[];
	public withRowAccessPolicy(i: number): WithRowAccessPolicyContext;
	public withRowAccessPolicy(i?: number): WithRowAccessPolicyContext | WithRowAccessPolicyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(WithRowAccessPolicyContext);
		} else {
			return this.getRuleContext(i, WithRowAccessPolicyContext);
		}
	}
	public comment(): CommentContext | undefined {
		return this.tryGetRuleContext(0, CommentContext);
	}
	public materializedViewDesc(): MaterializedViewDescContext[];
	public materializedViewDesc(i: number): MaterializedViewDescContext;
	public materializedViewDesc(i?: number): MaterializedViewDescContext | MaterializedViewDescContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MaterializedViewDescContext);
		} else {
			return this.getRuleContext(i, MaterializedViewDescContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_createMaterializedViewStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCreateMaterializedViewStatement) {
			listener.enterCreateMaterializedViewStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCreateMaterializedViewStatement) {
			listener.exitCreateMaterializedViewStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCreateMaterializedViewStatement) {
			return visitor.visitCreateMaterializedViewStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MaterializedViewDescContext extends ParserRuleContext {
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PARTITION, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BY, 0); }
	public primaryExpression(): PrimaryExpressionContext | undefined {
		return this.tryGetRuleContext(0, PrimaryExpressionContext);
	}
	public distributionDesc(): DistributionDescContext | undefined {
		return this.tryGetRuleContext(0, DistributionDescContext);
	}
	public orderByDesc(): OrderByDescContext | undefined {
		return this.tryGetRuleContext(0, OrderByDescContext);
	}
	public refreshSchemeDesc(): RefreshSchemeDescContext | undefined {
		return this.tryGetRuleContext(0, RefreshSchemeDescContext);
	}
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_materializedViewDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterMaterializedViewDesc) {
			listener.enterMaterializedViewDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitMaterializedViewDesc) {
			listener.exitMaterializedViewDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitMaterializedViewDesc) {
			return visitor.visitMaterializedViewDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowMaterializedViewsStatementContext extends ParserRuleContext {
	public _db!: QualifiedNameContext;
	public _pattern!: StringContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public MATERIALIZED(): TerminalNode { return this.getToken(StarRocksSqlParser.MATERIALIZED, 0); }
	public VIEWS(): TerminalNode { return this.getToken(StarRocksSqlParser.VIEWS, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IN, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LIKE, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showMaterializedViewsStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowMaterializedViewsStatement) {
			listener.enterShowMaterializedViewsStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowMaterializedViewsStatement) {
			listener.exitShowMaterializedViewsStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowMaterializedViewsStatement) {
			return visitor.visitShowMaterializedViewsStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropMaterializedViewStatementContext extends ParserRuleContext {
	public _mvName!: QualifiedNameContext;
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public MATERIALIZED(): TerminalNode { return this.getToken(StarRocksSqlParser.MATERIALIZED, 0); }
	public VIEW(): TerminalNode { return this.getToken(StarRocksSqlParser.VIEW, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropMaterializedViewStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropMaterializedViewStatement) {
			listener.enterDropMaterializedViewStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropMaterializedViewStatement) {
			listener.exitDropMaterializedViewStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropMaterializedViewStatement) {
			return visitor.visitDropMaterializedViewStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterMaterializedViewStatementContext extends ParserRuleContext {
	public _mvName!: QualifiedNameContext;
	public ALTER(): TerminalNode { return this.getToken(StarRocksSqlParser.ALTER, 0); }
	public MATERIALIZED(): TerminalNode { return this.getToken(StarRocksSqlParser.MATERIALIZED, 0); }
	public VIEW(): TerminalNode { return this.getToken(StarRocksSqlParser.VIEW, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public refreshSchemeDesc(): RefreshSchemeDescContext | undefined {
		return this.tryGetRuleContext(0, RefreshSchemeDescContext);
	}
	public tableRenameClause(): TableRenameClauseContext | undefined {
		return this.tryGetRuleContext(0, TableRenameClauseContext);
	}
	public modifyTablePropertiesClause(): ModifyTablePropertiesClauseContext | undefined {
		return this.tryGetRuleContext(0, ModifyTablePropertiesClauseContext);
	}
	public swapTableClause(): SwapTableClauseContext | undefined {
		return this.tryGetRuleContext(0, SwapTableClauseContext);
	}
	public statusDesc(): StatusDescContext | undefined {
		return this.tryGetRuleContext(0, StatusDescContext);
	}
	public applyMaskingPolicyClause(): ApplyMaskingPolicyClauseContext | undefined {
		return this.tryGetRuleContext(0, ApplyMaskingPolicyClauseContext);
	}
	public applyRowAccessPolicyClause(): ApplyRowAccessPolicyClauseContext | undefined {
		return this.tryGetRuleContext(0, ApplyRowAccessPolicyClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_alterMaterializedViewStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAlterMaterializedViewStatement) {
			listener.enterAlterMaterializedViewStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAlterMaterializedViewStatement) {
			listener.exitAlterMaterializedViewStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAlterMaterializedViewStatement) {
			return visitor.visitAlterMaterializedViewStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RefreshMaterializedViewStatementContext extends ParserRuleContext {
	public _mvName!: QualifiedNameContext;
	public REFRESH(): TerminalNode { return this.getToken(StarRocksSqlParser.REFRESH, 0); }
	public MATERIALIZED(): TerminalNode { return this.getToken(StarRocksSqlParser.MATERIALIZED, 0); }
	public VIEW(): TerminalNode { return this.getToken(StarRocksSqlParser.VIEW, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PARTITION, 0); }
	public partitionRangeDesc(): PartitionRangeDescContext | undefined {
		return this.tryGetRuleContext(0, PartitionRangeDescContext);
	}
	public FORCE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FORCE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WITH, 0); }
	public MODE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MODE, 0); }
	public SYNC(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SYNC, 0); }
	public ASYNC(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ASYNC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_refreshMaterializedViewStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterRefreshMaterializedViewStatement) {
			listener.enterRefreshMaterializedViewStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitRefreshMaterializedViewStatement) {
			listener.exitRefreshMaterializedViewStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitRefreshMaterializedViewStatement) {
			return visitor.visitRefreshMaterializedViewStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CancelRefreshMaterializedViewStatementContext extends ParserRuleContext {
	public _mvName!: QualifiedNameContext;
	public CANCEL(): TerminalNode { return this.getToken(StarRocksSqlParser.CANCEL, 0); }
	public REFRESH(): TerminalNode { return this.getToken(StarRocksSqlParser.REFRESH, 0); }
	public MATERIALIZED(): TerminalNode { return this.getToken(StarRocksSqlParser.MATERIALIZED, 0); }
	public VIEW(): TerminalNode { return this.getToken(StarRocksSqlParser.VIEW, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_cancelRefreshMaterializedViewStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCancelRefreshMaterializedViewStatement) {
			listener.enterCancelRefreshMaterializedViewStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCancelRefreshMaterializedViewStatement) {
			listener.exitCancelRefreshMaterializedViewStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCancelRefreshMaterializedViewStatement) {
			return visitor.visitCancelRefreshMaterializedViewStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AdminSetConfigStatementContext extends ParserRuleContext {
	public ADMIN(): TerminalNode { return this.getToken(StarRocksSqlParser.ADMIN, 0); }
	public SET(): TerminalNode { return this.getToken(StarRocksSqlParser.SET, 0); }
	public FRONTEND(): TerminalNode { return this.getToken(StarRocksSqlParser.FRONTEND, 0); }
	public CONFIG(): TerminalNode { return this.getToken(StarRocksSqlParser.CONFIG, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public property(): PropertyContext {
		return this.getRuleContext(0, PropertyContext);
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_adminSetConfigStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAdminSetConfigStatement) {
			listener.enterAdminSetConfigStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAdminSetConfigStatement) {
			listener.exitAdminSetConfigStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAdminSetConfigStatement) {
			return visitor.visitAdminSetConfigStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AdminSetReplicaStatusStatementContext extends ParserRuleContext {
	public ADMIN(): TerminalNode { return this.getToken(StarRocksSqlParser.ADMIN, 0); }
	public SET(): TerminalNode { return this.getToken(StarRocksSqlParser.SET, 0); }
	public REPLICA(): TerminalNode { return this.getToken(StarRocksSqlParser.REPLICA, 0); }
	public STATUS(): TerminalNode { return this.getToken(StarRocksSqlParser.STATUS, 0); }
	public properties(): PropertiesContext {
		return this.getRuleContext(0, PropertiesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_adminSetReplicaStatusStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAdminSetReplicaStatusStatement) {
			listener.enterAdminSetReplicaStatusStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAdminSetReplicaStatusStatement) {
			listener.exitAdminSetReplicaStatusStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAdminSetReplicaStatusStatement) {
			return visitor.visitAdminSetReplicaStatusStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AdminShowConfigStatementContext extends ParserRuleContext {
	public _pattern!: StringContext;
	public ADMIN(): TerminalNode { return this.getToken(StarRocksSqlParser.ADMIN, 0); }
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public FRONTEND(): TerminalNode { return this.getToken(StarRocksSqlParser.FRONTEND, 0); }
	public CONFIG(): TerminalNode { return this.getToken(StarRocksSqlParser.CONFIG, 0); }
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LIKE, 0); }
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_adminShowConfigStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAdminShowConfigStatement) {
			listener.enterAdminShowConfigStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAdminShowConfigStatement) {
			listener.exitAdminShowConfigStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAdminShowConfigStatement) {
			return visitor.visitAdminShowConfigStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AdminShowReplicaDistributionStatementContext extends ParserRuleContext {
	public ADMIN(): TerminalNode { return this.getToken(StarRocksSqlParser.ADMIN, 0); }
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public REPLICA(): TerminalNode { return this.getToken(StarRocksSqlParser.REPLICA, 0); }
	public DISTRIBUTION(): TerminalNode { return this.getToken(StarRocksSqlParser.DISTRIBUTION, 0); }
	public FROM(): TerminalNode { return this.getToken(StarRocksSqlParser.FROM, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public partitionNames(): PartitionNamesContext | undefined {
		return this.tryGetRuleContext(0, PartitionNamesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_adminShowReplicaDistributionStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAdminShowReplicaDistributionStatement) {
			listener.enterAdminShowReplicaDistributionStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAdminShowReplicaDistributionStatement) {
			listener.exitAdminShowReplicaDistributionStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAdminShowReplicaDistributionStatement) {
			return visitor.visitAdminShowReplicaDistributionStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AdminShowReplicaStatusStatementContext extends ParserRuleContext {
	public _where!: ExpressionContext;
	public ADMIN(): TerminalNode { return this.getToken(StarRocksSqlParser.ADMIN, 0); }
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public REPLICA(): TerminalNode { return this.getToken(StarRocksSqlParser.REPLICA, 0); }
	public STATUS(): TerminalNode { return this.getToken(StarRocksSqlParser.STATUS, 0); }
	public FROM(): TerminalNode { return this.getToken(StarRocksSqlParser.FROM, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public partitionNames(): PartitionNamesContext | undefined {
		return this.tryGetRuleContext(0, PartitionNamesContext);
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_adminShowReplicaStatusStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAdminShowReplicaStatusStatement) {
			listener.enterAdminShowReplicaStatusStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAdminShowReplicaStatusStatement) {
			listener.exitAdminShowReplicaStatusStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAdminShowReplicaStatusStatement) {
			return visitor.visitAdminShowReplicaStatusStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AdminRepairTableStatementContext extends ParserRuleContext {
	public ADMIN(): TerminalNode { return this.getToken(StarRocksSqlParser.ADMIN, 0); }
	public REPAIR(): TerminalNode { return this.getToken(StarRocksSqlParser.REPAIR, 0); }
	public TABLE(): TerminalNode { return this.getToken(StarRocksSqlParser.TABLE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public partitionNames(): PartitionNamesContext | undefined {
		return this.tryGetRuleContext(0, PartitionNamesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_adminRepairTableStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAdminRepairTableStatement) {
			listener.enterAdminRepairTableStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAdminRepairTableStatement) {
			listener.exitAdminRepairTableStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAdminRepairTableStatement) {
			return visitor.visitAdminRepairTableStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AdminCancelRepairTableStatementContext extends ParserRuleContext {
	public ADMIN(): TerminalNode { return this.getToken(StarRocksSqlParser.ADMIN, 0); }
	public CANCEL(): TerminalNode { return this.getToken(StarRocksSqlParser.CANCEL, 0); }
	public REPAIR(): TerminalNode { return this.getToken(StarRocksSqlParser.REPAIR, 0); }
	public TABLE(): TerminalNode { return this.getToken(StarRocksSqlParser.TABLE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public partitionNames(): PartitionNamesContext | undefined {
		return this.tryGetRuleContext(0, PartitionNamesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_adminCancelRepairTableStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAdminCancelRepairTableStatement) {
			listener.enterAdminCancelRepairTableStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAdminCancelRepairTableStatement) {
			listener.exitAdminCancelRepairTableStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAdminCancelRepairTableStatement) {
			return visitor.visitAdminCancelRepairTableStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AdminCheckTabletsStatementContext extends ParserRuleContext {
	public ADMIN(): TerminalNode { return this.getToken(StarRocksSqlParser.ADMIN, 0); }
	public CHECK(): TerminalNode { return this.getToken(StarRocksSqlParser.CHECK, 0); }
	public tabletList(): TabletListContext {
		return this.getRuleContext(0, TabletListContext);
	}
	public PROPERTIES(): TerminalNode { return this.getToken(StarRocksSqlParser.PROPERTIES, 0); }
	public LEFT_PARENpropertyRIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PARENpropertyRIGHT_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_adminCheckTabletsStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAdminCheckTabletsStatement) {
			listener.enterAdminCheckTabletsStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAdminCheckTabletsStatement) {
			listener.exitAdminCheckTabletsStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAdminCheckTabletsStatement) {
			return visitor.visitAdminCheckTabletsStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class KillStatementContext extends ParserRuleContext {
	public KILL(): TerminalNode { return this.getToken(StarRocksSqlParser.KILL, 0); }
	public INTEGER_VALUE(): TerminalNode { return this.getToken(StarRocksSqlParser.INTEGER_VALUE, 0); }
	public QUERY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.QUERY, 0); }
	public CONNECTION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CONNECTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_killStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterKillStatement) {
			listener.enterKillStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitKillStatement) {
			listener.exitKillStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitKillStatement) {
			return visitor.visitKillStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SyncStatementContext extends ParserRuleContext {
	public SYNC(): TerminalNode { return this.getToken(StarRocksSqlParser.SYNC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_syncStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSyncStatement) {
			listener.enterSyncStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSyncStatement) {
			listener.exitSyncStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSyncStatement) {
			return visitor.visitSyncStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterSystemStatementContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(StarRocksSqlParser.ALTER, 0); }
	public SYSTEM(): TerminalNode { return this.getToken(StarRocksSqlParser.SYSTEM, 0); }
	public alterClause(): AlterClauseContext {
		return this.getRuleContext(0, AlterClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_alterSystemStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAlterSystemStatement) {
			listener.enterAlterSystemStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAlterSystemStatement) {
			listener.exitAlterSystemStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAlterSystemStatement) {
			return visitor.visitAlterSystemStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CancelAlterSystemStatementContext extends ParserRuleContext {
	public CANCEL(): TerminalNode { return this.getToken(StarRocksSqlParser.CANCEL, 0); }
	public DECOMMISSION(): TerminalNode { return this.getToken(StarRocksSqlParser.DECOMMISSION, 0); }
	public BACKEND(): TerminalNode { return this.getToken(StarRocksSqlParser.BACKEND, 0); }
	public string(): StringContext[];
	public string(i: number): StringContext;
	public string(i?: number): StringContext | StringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringContext);
		} else {
			return this.getRuleContext(i, StringContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_cancelAlterSystemStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCancelAlterSystemStatement) {
			listener.enterCancelAlterSystemStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCancelAlterSystemStatement) {
			listener.exitCancelAlterSystemStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCancelAlterSystemStatement) {
			return visitor.visitCancelAlterSystemStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowComputeNodesStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public COMPUTE(): TerminalNode { return this.getToken(StarRocksSqlParser.COMPUTE, 0); }
	public NODES(): TerminalNode { return this.getToken(StarRocksSqlParser.NODES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showComputeNodesStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowComputeNodesStatement) {
			listener.enterShowComputeNodesStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowComputeNodesStatement) {
			listener.exitShowComputeNodesStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowComputeNodesStatement) {
			return visitor.visitShowComputeNodesStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateExternalCatalogStatementContext extends ParserRuleContext {
	public _catalogName!: IdentifierOrStringContext;
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public EXTERNAL(): TerminalNode { return this.getToken(StarRocksSqlParser.EXTERNAL, 0); }
	public CATALOG(): TerminalNode { return this.getToken(StarRocksSqlParser.CATALOG, 0); }
	public properties(): PropertiesContext {
		return this.getRuleContext(0, PropertiesContext);
	}
	public identifierOrString(): IdentifierOrStringContext {
		return this.getRuleContext(0, IdentifierOrStringContext);
	}
	public comment(): CommentContext | undefined {
		return this.tryGetRuleContext(0, CommentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_createExternalCatalogStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCreateExternalCatalogStatement) {
			listener.enterCreateExternalCatalogStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCreateExternalCatalogStatement) {
			listener.exitCreateExternalCatalogStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCreateExternalCatalogStatement) {
			return visitor.visitCreateExternalCatalogStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowCreateExternalCatalogStatementContext extends ParserRuleContext {
	public _catalogName!: IdentifierOrStringContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public CATALOG(): TerminalNode { return this.getToken(StarRocksSqlParser.CATALOG, 0); }
	public identifierOrString(): IdentifierOrStringContext {
		return this.getRuleContext(0, IdentifierOrStringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showCreateExternalCatalogStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowCreateExternalCatalogStatement) {
			listener.enterShowCreateExternalCatalogStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowCreateExternalCatalogStatement) {
			listener.exitShowCreateExternalCatalogStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowCreateExternalCatalogStatement) {
			return visitor.visitShowCreateExternalCatalogStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropExternalCatalogStatementContext extends ParserRuleContext {
	public _catalogName!: IdentifierOrStringContext;
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public CATALOG(): TerminalNode { return this.getToken(StarRocksSqlParser.CATALOG, 0); }
	public identifierOrString(): IdentifierOrStringContext {
		return this.getRuleContext(0, IdentifierOrStringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropExternalCatalogStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropExternalCatalogStatement) {
			listener.enterDropExternalCatalogStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropExternalCatalogStatement) {
			listener.exitDropExternalCatalogStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropExternalCatalogStatement) {
			return visitor.visitDropExternalCatalogStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowCatalogsStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public CATALOGS(): TerminalNode { return this.getToken(StarRocksSqlParser.CATALOGS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showCatalogsStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowCatalogsStatement) {
			listener.enterShowCatalogsStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowCatalogsStatement) {
			listener.exitShowCatalogsStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowCatalogsStatement) {
			return visitor.visitShowCatalogsStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateWarehouseStatementContext extends ParserRuleContext {
	public _warehouseName!: IdentifierOrStringContext;
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public identifierOrString(): IdentifierOrStringContext {
		return this.getRuleContext(0, IdentifierOrStringContext);
	}
	public WAREHOUSE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WAREHOUSE, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_createWarehouseStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCreateWarehouseStatement) {
			listener.enterCreateWarehouseStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCreateWarehouseStatement) {
			listener.exitCreateWarehouseStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCreateWarehouseStatement) {
			return visitor.visitCreateWarehouseStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowWarehousesStatementContext extends ParserRuleContext {
	public _pattern!: StringContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public WAREHOUSES(): TerminalNode { return this.getToken(StarRocksSqlParser.WAREHOUSES, 0); }
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LIKE, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showWarehousesStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowWarehousesStatement) {
			listener.enterShowWarehousesStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowWarehousesStatement) {
			listener.exitShowWarehousesStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowWarehousesStatement) {
			return visitor.visitShowWarehousesStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropWarehouseStatementContext extends ParserRuleContext {
	public _warehouseName!: IdentifierOrStringContext;
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public WAREHOUSE(): TerminalNode { return this.getToken(StarRocksSqlParser.WAREHOUSE, 0); }
	public identifierOrString(): IdentifierOrStringContext {
		return this.getRuleContext(0, IdentifierOrStringContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropWarehouseStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropWarehouseStatement) {
			listener.enterDropWarehouseStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropWarehouseStatement) {
			listener.exitDropWarehouseStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropWarehouseStatement) {
			return visitor.visitDropWarehouseStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterWarehouseStatementContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(StarRocksSqlParser.ALTER, 0); }
	public WAREHOUSE(): TerminalNode { return this.getToken(StarRocksSqlParser.WAREHOUSE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public ADD(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ADD, 0); }
	public CLUSTER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CLUSTER, 0); }
	public REMOVE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.REMOVE, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SET, 0); }
	public propertyList(): PropertyListContext | undefined {
		return this.tryGetRuleContext(0, PropertyListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_alterWarehouseStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAlterWarehouseStatement) {
			listener.enterAlterWarehouseStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAlterWarehouseStatement) {
			listener.exitAlterWarehouseStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAlterWarehouseStatement) {
			return visitor.visitAlterWarehouseStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowClustersStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public CLUSTERS(): TerminalNode { return this.getToken(StarRocksSqlParser.CLUSTERS, 0); }
	public FROM(): TerminalNode { return this.getToken(StarRocksSqlParser.FROM, 0); }
	public WAREHOUSE(): TerminalNode { return this.getToken(StarRocksSqlParser.WAREHOUSE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showClustersStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowClustersStatement) {
			listener.enterShowClustersStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowClustersStatement) {
			listener.exitShowClustersStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowClustersStatement) {
			return visitor.visitShowClustersStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SuspendWarehouseStatementContext extends ParserRuleContext {
	public SUSPEND(): TerminalNode { return this.getToken(StarRocksSqlParser.SUSPEND, 0); }
	public WAREHOUSE(): TerminalNode { return this.getToken(StarRocksSqlParser.WAREHOUSE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_suspendWarehouseStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSuspendWarehouseStatement) {
			listener.enterSuspendWarehouseStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSuspendWarehouseStatement) {
			listener.exitSuspendWarehouseStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSuspendWarehouseStatement) {
			return visitor.visitSuspendWarehouseStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ResumeWarehouseStatementContext extends ParserRuleContext {
	public RESUME(): TerminalNode { return this.getToken(StarRocksSqlParser.RESUME, 0); }
	public WAREHOUSE(): TerminalNode { return this.getToken(StarRocksSqlParser.WAREHOUSE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_resumeWarehouseStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterResumeWarehouseStatement) {
			listener.enterResumeWarehouseStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitResumeWarehouseStatement) {
			listener.exitResumeWarehouseStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitResumeWarehouseStatement) {
			return visitor.visitResumeWarehouseStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateStorageVolumeStatementContext extends ParserRuleContext {
	public _storageVolumeName!: IdentifierOrStringContext;
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public STORAGE(): TerminalNode { return this.getToken(StarRocksSqlParser.STORAGE, 0); }
	public VOLUME(): TerminalNode { return this.getToken(StarRocksSqlParser.VOLUME, 0); }
	public typeDesc(): TypeDescContext {
		return this.getRuleContext(0, TypeDescContext);
	}
	public locationsDesc(): LocationsDescContext {
		return this.getRuleContext(0, LocationsDescContext);
	}
	public properties(): PropertiesContext {
		return this.getRuleContext(0, PropertiesContext);
	}
	public identifierOrString(): IdentifierOrStringContext {
		return this.getRuleContext(0, IdentifierOrStringContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	public comment(): CommentContext | undefined {
		return this.tryGetRuleContext(0, CommentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_createStorageVolumeStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCreateStorageVolumeStatement) {
			listener.enterCreateStorageVolumeStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCreateStorageVolumeStatement) {
			listener.exitCreateStorageVolumeStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCreateStorageVolumeStatement) {
			return visitor.visitCreateStorageVolumeStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TypeDescContext extends ParserRuleContext {
	public TYPE(): TerminalNode { return this.getToken(StarRocksSqlParser.TYPE, 0); }
	public EQ(): TerminalNode { return this.getToken(StarRocksSqlParser.EQ, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_typeDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterTypeDesc) {
			listener.enterTypeDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitTypeDesc) {
			listener.exitTypeDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitTypeDesc) {
			return visitor.visitTypeDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LocationsDescContext extends ParserRuleContext {
	public LOCATIONS(): TerminalNode { return this.getToken(StarRocksSqlParser.LOCATIONS, 0); }
	public EQ(): TerminalNode { return this.getToken(StarRocksSqlParser.EQ, 0); }
	public stringList(): StringListContext {
		return this.getRuleContext(0, StringListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_locationsDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterLocationsDesc) {
			listener.enterLocationsDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitLocationsDesc) {
			listener.exitLocationsDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitLocationsDesc) {
			return visitor.visitLocationsDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowStorageVolumesStatementContext extends ParserRuleContext {
	public _pattern!: StringContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public STORAGE(): TerminalNode { return this.getToken(StarRocksSqlParser.STORAGE, 0); }
	public VOLUMES(): TerminalNode { return this.getToken(StarRocksSqlParser.VOLUMES, 0); }
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LIKE, 0); }
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showStorageVolumesStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowStorageVolumesStatement) {
			listener.enterShowStorageVolumesStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowStorageVolumesStatement) {
			listener.exitShowStorageVolumesStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowStorageVolumesStatement) {
			return visitor.visitShowStorageVolumesStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropStorageVolumeStatementContext extends ParserRuleContext {
	public _storageVolumeName!: IdentifierOrStringContext;
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public STORAGE(): TerminalNode { return this.getToken(StarRocksSqlParser.STORAGE, 0); }
	public VOLUME(): TerminalNode { return this.getToken(StarRocksSqlParser.VOLUME, 0); }
	public identifierOrString(): IdentifierOrStringContext {
		return this.getRuleContext(0, IdentifierOrStringContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropStorageVolumeStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropStorageVolumeStatement) {
			listener.enterDropStorageVolumeStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropStorageVolumeStatement) {
			listener.exitDropStorageVolumeStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropStorageVolumeStatement) {
			return visitor.visitDropStorageVolumeStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStorageVolumeStatementContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(StarRocksSqlParser.ALTER, 0); }
	public STORAGE(): TerminalNode { return this.getToken(StarRocksSqlParser.STORAGE, 0); }
	public VOLUME(): TerminalNode { return this.getToken(StarRocksSqlParser.VOLUME, 0); }
	public identifierOrString(): IdentifierOrStringContext {
		return this.getRuleContext(0, IdentifierOrStringContext);
	}
	public alterStorageVolumeClause(): AlterStorageVolumeClauseContext[];
	public alterStorageVolumeClause(i: number): AlterStorageVolumeClauseContext;
	public alterStorageVolumeClause(i?: number): AlterStorageVolumeClauseContext | AlterStorageVolumeClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AlterStorageVolumeClauseContext);
		} else {
			return this.getRuleContext(i, AlterStorageVolumeClauseContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_alterStorageVolumeStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAlterStorageVolumeStatement) {
			listener.enterAlterStorageVolumeStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAlterStorageVolumeStatement) {
			listener.exitAlterStorageVolumeStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAlterStorageVolumeStatement) {
			return visitor.visitAlterStorageVolumeStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStorageVolumeClauseContext extends ParserRuleContext {
	public modifyStorageVolumeCommentClause(): ModifyStorageVolumeCommentClauseContext | undefined {
		return this.tryGetRuleContext(0, ModifyStorageVolumeCommentClauseContext);
	}
	public modifyStorageVolumePropertiesClause(): ModifyStorageVolumePropertiesClauseContext | undefined {
		return this.tryGetRuleContext(0, ModifyStorageVolumePropertiesClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_alterStorageVolumeClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAlterStorageVolumeClause) {
			listener.enterAlterStorageVolumeClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAlterStorageVolumeClause) {
			listener.exitAlterStorageVolumeClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAlterStorageVolumeClause) {
			return visitor.visitAlterStorageVolumeClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ModifyStorageVolumePropertiesClauseContext extends ParserRuleContext {
	public SET(): TerminalNode { return this.getToken(StarRocksSqlParser.SET, 0); }
	public propertyList(): PropertyListContext {
		return this.getRuleContext(0, PropertyListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_modifyStorageVolumePropertiesClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterModifyStorageVolumePropertiesClause) {
			listener.enterModifyStorageVolumePropertiesClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitModifyStorageVolumePropertiesClause) {
			listener.exitModifyStorageVolumePropertiesClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitModifyStorageVolumePropertiesClause) {
			return visitor.visitModifyStorageVolumePropertiesClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ModifyStorageVolumeCommentClauseContext extends ParserRuleContext {
	public COMMENT(): TerminalNode { return this.getToken(StarRocksSqlParser.COMMENT, 0); }
	public EQ(): TerminalNode { return this.getToken(StarRocksSqlParser.EQ, 0); }
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_modifyStorageVolumeCommentClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterModifyStorageVolumeCommentClause) {
			listener.enterModifyStorageVolumeCommentClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitModifyStorageVolumeCommentClause) {
			listener.exitModifyStorageVolumeCommentClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitModifyStorageVolumeCommentClause) {
			return visitor.visitModifyStorageVolumeCommentClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DescStorageVolumeStatementContext extends ParserRuleContext {
	public STORAGE(): TerminalNode { return this.getToken(StarRocksSqlParser.STORAGE, 0); }
	public VOLUME(): TerminalNode { return this.getToken(StarRocksSqlParser.VOLUME, 0); }
	public identifierOrString(): IdentifierOrStringContext {
		return this.getRuleContext(0, IdentifierOrStringContext);
	}
	public DESC(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DESC, 0); }
	public DESCRIBE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DESCRIBE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_descStorageVolumeStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDescStorageVolumeStatement) {
			listener.enterDescStorageVolumeStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDescStorageVolumeStatement) {
			listener.exitDescStorageVolumeStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDescStorageVolumeStatement) {
			return visitor.visitDescStorageVolumeStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetDefaultStorageVolumeStatementContext extends ParserRuleContext {
	public SET(): TerminalNode { return this.getToken(StarRocksSqlParser.SET, 0); }
	public identifierOrString(): IdentifierOrStringContext {
		return this.getRuleContext(0, IdentifierOrStringContext);
	}
	public AS(): TerminalNode { return this.getToken(StarRocksSqlParser.AS, 0); }
	public DEFAULT(): TerminalNode { return this.getToken(StarRocksSqlParser.DEFAULT, 0); }
	public STORAGE(): TerminalNode { return this.getToken(StarRocksSqlParser.STORAGE, 0); }
	public VOLUME(): TerminalNode { return this.getToken(StarRocksSqlParser.VOLUME, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_setDefaultStorageVolumeStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSetDefaultStorageVolumeStatement) {
			listener.enterSetDefaultStorageVolumeStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSetDefaultStorageVolumeStatement) {
			listener.exitSetDefaultStorageVolumeStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSetDefaultStorageVolumeStatement) {
			return visitor.visitSetDefaultStorageVolumeStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterClauseContext extends ParserRuleContext {
	public addFrontendClause(): AddFrontendClauseContext | undefined {
		return this.tryGetRuleContext(0, AddFrontendClauseContext);
	}
	public dropFrontendClause(): DropFrontendClauseContext | undefined {
		return this.tryGetRuleContext(0, DropFrontendClauseContext);
	}
	public modifyFrontendHostClause(): ModifyFrontendHostClauseContext | undefined {
		return this.tryGetRuleContext(0, ModifyFrontendHostClauseContext);
	}
	public addBackendClause(): AddBackendClauseContext | undefined {
		return this.tryGetRuleContext(0, AddBackendClauseContext);
	}
	public dropBackendClause(): DropBackendClauseContext | undefined {
		return this.tryGetRuleContext(0, DropBackendClauseContext);
	}
	public decommissionBackendClause(): DecommissionBackendClauseContext | undefined {
		return this.tryGetRuleContext(0, DecommissionBackendClauseContext);
	}
	public modifyBackendHostClause(): ModifyBackendHostClauseContext | undefined {
		return this.tryGetRuleContext(0, ModifyBackendHostClauseContext);
	}
	public addComputeNodeClause(): AddComputeNodeClauseContext | undefined {
		return this.tryGetRuleContext(0, AddComputeNodeClauseContext);
	}
	public dropComputeNodeClause(): DropComputeNodeClauseContext | undefined {
		return this.tryGetRuleContext(0, DropComputeNodeClauseContext);
	}
	public modifyBrokerClause(): ModifyBrokerClauseContext | undefined {
		return this.tryGetRuleContext(0, ModifyBrokerClauseContext);
	}
	public alterLoadErrorUrlClause(): AlterLoadErrorUrlClauseContext | undefined {
		return this.tryGetRuleContext(0, AlterLoadErrorUrlClauseContext);
	}
	public createImageClause(): CreateImageClauseContext | undefined {
		return this.tryGetRuleContext(0, CreateImageClauseContext);
	}
	public cleanTabletSchedQClause(): CleanTabletSchedQClauseContext | undefined {
		return this.tryGetRuleContext(0, CleanTabletSchedQClauseContext);
	}
	public createIndexClause(): CreateIndexClauseContext | undefined {
		return this.tryGetRuleContext(0, CreateIndexClauseContext);
	}
	public dropIndexClause(): DropIndexClauseContext | undefined {
		return this.tryGetRuleContext(0, DropIndexClauseContext);
	}
	public tableRenameClause(): TableRenameClauseContext | undefined {
		return this.tryGetRuleContext(0, TableRenameClauseContext);
	}
	public swapTableClause(): SwapTableClauseContext | undefined {
		return this.tryGetRuleContext(0, SwapTableClauseContext);
	}
	public modifyTablePropertiesClause(): ModifyTablePropertiesClauseContext | undefined {
		return this.tryGetRuleContext(0, ModifyTablePropertiesClauseContext);
	}
	public addColumnClause(): AddColumnClauseContext | undefined {
		return this.tryGetRuleContext(0, AddColumnClauseContext);
	}
	public addColumnsClause(): AddColumnsClauseContext | undefined {
		return this.tryGetRuleContext(0, AddColumnsClauseContext);
	}
	public dropColumnClause(): DropColumnClauseContext | undefined {
		return this.tryGetRuleContext(0, DropColumnClauseContext);
	}
	public modifyColumnClause(): ModifyColumnClauseContext | undefined {
		return this.tryGetRuleContext(0, ModifyColumnClauseContext);
	}
	public columnRenameClause(): ColumnRenameClauseContext | undefined {
		return this.tryGetRuleContext(0, ColumnRenameClauseContext);
	}
	public reorderColumnsClause(): ReorderColumnsClauseContext | undefined {
		return this.tryGetRuleContext(0, ReorderColumnsClauseContext);
	}
	public rollupRenameClause(): RollupRenameClauseContext | undefined {
		return this.tryGetRuleContext(0, RollupRenameClauseContext);
	}
	public compactionClause(): CompactionClauseContext | undefined {
		return this.tryGetRuleContext(0, CompactionClauseContext);
	}
	public modifyCommentClause(): ModifyCommentClauseContext | undefined {
		return this.tryGetRuleContext(0, ModifyCommentClauseContext);
	}
	public applyMaskingPolicyClause(): ApplyMaskingPolicyClauseContext | undefined {
		return this.tryGetRuleContext(0, ApplyMaskingPolicyClauseContext);
	}
	public applyRowAccessPolicyClause(): ApplyRowAccessPolicyClauseContext | undefined {
		return this.tryGetRuleContext(0, ApplyRowAccessPolicyClauseContext);
	}
	public addPartitionClause(): AddPartitionClauseContext | undefined {
		return this.tryGetRuleContext(0, AddPartitionClauseContext);
	}
	public dropPartitionClause(): DropPartitionClauseContext | undefined {
		return this.tryGetRuleContext(0, DropPartitionClauseContext);
	}
	public distributionClause(): DistributionClauseContext | undefined {
		return this.tryGetRuleContext(0, DistributionClauseContext);
	}
	public truncatePartitionClause(): TruncatePartitionClauseContext | undefined {
		return this.tryGetRuleContext(0, TruncatePartitionClauseContext);
	}
	public modifyPartitionClause(): ModifyPartitionClauseContext | undefined {
		return this.tryGetRuleContext(0, ModifyPartitionClauseContext);
	}
	public replacePartitionClause(): ReplacePartitionClauseContext | undefined {
		return this.tryGetRuleContext(0, ReplacePartitionClauseContext);
	}
	public partitionRenameClause(): PartitionRenameClauseContext | undefined {
		return this.tryGetRuleContext(0, PartitionRenameClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_alterClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAlterClause) {
			listener.enterAlterClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAlterClause) {
			listener.exitAlterClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAlterClause) {
			return visitor.visitAlterClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AddFrontendClauseContext extends ParserRuleContext {
	public ADD(): TerminalNode { return this.getToken(StarRocksSqlParser.ADD, 0); }
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	public FOLLOWER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FOLLOWER, 0); }
	public OBSERVER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.OBSERVER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_addFrontendClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAddFrontendClause) {
			listener.enterAddFrontendClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAddFrontendClause) {
			listener.exitAddFrontendClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAddFrontendClause) {
			return visitor.visitAddFrontendClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropFrontendClauseContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	public FOLLOWER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FOLLOWER, 0); }
	public OBSERVER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.OBSERVER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropFrontendClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropFrontendClause) {
			listener.enterDropFrontendClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropFrontendClause) {
			listener.exitDropFrontendClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropFrontendClause) {
			return visitor.visitDropFrontendClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ModifyFrontendHostClauseContext extends ParserRuleContext {
	public MODIFY(): TerminalNode { return this.getToken(StarRocksSqlParser.MODIFY, 0); }
	public FRONTEND(): TerminalNode { return this.getToken(StarRocksSqlParser.FRONTEND, 0); }
	public HOST(): TerminalNode { return this.getToken(StarRocksSqlParser.HOST, 0); }
	public string(): StringContext[];
	public string(i: number): StringContext;
	public string(i?: number): StringContext | StringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringContext);
		} else {
			return this.getRuleContext(i, StringContext);
		}
	}
	public TO(): TerminalNode { return this.getToken(StarRocksSqlParser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_modifyFrontendHostClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterModifyFrontendHostClause) {
			listener.enterModifyFrontendHostClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitModifyFrontendHostClause) {
			listener.exitModifyFrontendHostClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitModifyFrontendHostClause) {
			return visitor.visitModifyFrontendHostClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AddBackendClauseContext extends ParserRuleContext {
	public ADD(): TerminalNode { return this.getToken(StarRocksSqlParser.ADD, 0); }
	public BACKEND(): TerminalNode { return this.getToken(StarRocksSqlParser.BACKEND, 0); }
	public string(): StringContext[];
	public string(i: number): StringContext;
	public string(i?: number): StringContext | StringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringContext);
		} else {
			return this.getRuleContext(i, StringContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_addBackendClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAddBackendClause) {
			listener.enterAddBackendClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAddBackendClause) {
			listener.exitAddBackendClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAddBackendClause) {
			return visitor.visitAddBackendClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropBackendClauseContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public BACKEND(): TerminalNode { return this.getToken(StarRocksSqlParser.BACKEND, 0); }
	public string(): StringContext[];
	public string(i: number): StringContext;
	public string(i?: number): StringContext | StringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringContext);
		} else {
			return this.getRuleContext(i, StringContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	public FORCE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FORCE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropBackendClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropBackendClause) {
			listener.enterDropBackendClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropBackendClause) {
			listener.exitDropBackendClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropBackendClause) {
			return visitor.visitDropBackendClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DecommissionBackendClauseContext extends ParserRuleContext {
	public DECOMMISSION(): TerminalNode { return this.getToken(StarRocksSqlParser.DECOMMISSION, 0); }
	public BACKEND(): TerminalNode { return this.getToken(StarRocksSqlParser.BACKEND, 0); }
	public string(): StringContext[];
	public string(i: number): StringContext;
	public string(i?: number): StringContext | StringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringContext);
		} else {
			return this.getRuleContext(i, StringContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_decommissionBackendClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDecommissionBackendClause) {
			listener.enterDecommissionBackendClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDecommissionBackendClause) {
			listener.exitDecommissionBackendClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDecommissionBackendClause) {
			return visitor.visitDecommissionBackendClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ModifyBackendHostClauseContext extends ParserRuleContext {
	public MODIFY(): TerminalNode { return this.getToken(StarRocksSqlParser.MODIFY, 0); }
	public BACKEND(): TerminalNode { return this.getToken(StarRocksSqlParser.BACKEND, 0); }
	public HOST(): TerminalNode { return this.getToken(StarRocksSqlParser.HOST, 0); }
	public string(): StringContext[];
	public string(i: number): StringContext;
	public string(i?: number): StringContext | StringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringContext);
		} else {
			return this.getRuleContext(i, StringContext);
		}
	}
	public TO(): TerminalNode { return this.getToken(StarRocksSqlParser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_modifyBackendHostClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterModifyBackendHostClause) {
			listener.enterModifyBackendHostClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitModifyBackendHostClause) {
			listener.exitModifyBackendHostClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitModifyBackendHostClause) {
			return visitor.visitModifyBackendHostClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AddComputeNodeClauseContext extends ParserRuleContext {
	public ADD(): TerminalNode { return this.getToken(StarRocksSqlParser.ADD, 0); }
	public COMPUTE(): TerminalNode { return this.getToken(StarRocksSqlParser.COMPUTE, 0); }
	public NODE(): TerminalNode { return this.getToken(StarRocksSqlParser.NODE, 0); }
	public string(): StringContext[];
	public string(i: number): StringContext;
	public string(i?: number): StringContext | StringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringContext);
		} else {
			return this.getRuleContext(i, StringContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_addComputeNodeClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAddComputeNodeClause) {
			listener.enterAddComputeNodeClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAddComputeNodeClause) {
			listener.exitAddComputeNodeClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAddComputeNodeClause) {
			return visitor.visitAddComputeNodeClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropComputeNodeClauseContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public COMPUTE(): TerminalNode { return this.getToken(StarRocksSqlParser.COMPUTE, 0); }
	public NODE(): TerminalNode { return this.getToken(StarRocksSqlParser.NODE, 0); }
	public string(): StringContext[];
	public string(i: number): StringContext;
	public string(i?: number): StringContext | StringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringContext);
		} else {
			return this.getRuleContext(i, StringContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropComputeNodeClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropComputeNodeClause) {
			listener.enterDropComputeNodeClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropComputeNodeClause) {
			listener.exitDropComputeNodeClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropComputeNodeClause) {
			return visitor.visitDropComputeNodeClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ModifyBrokerClauseContext extends ParserRuleContext {
	public ADD(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ADD, 0); }
	public BROKER(): TerminalNode { return this.getToken(StarRocksSqlParser.BROKER, 0); }
	public identifierOrString(): IdentifierOrStringContext {
		return this.getRuleContext(0, IdentifierOrStringContext);
	}
	public string(): StringContext[];
	public string(i: number): StringContext;
	public string(i?: number): StringContext | StringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringContext);
		} else {
			return this.getRuleContext(i, StringContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	public DROP(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DROP, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_modifyBrokerClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterModifyBrokerClause) {
			listener.enterModifyBrokerClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitModifyBrokerClause) {
			listener.exitModifyBrokerClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitModifyBrokerClause) {
			return visitor.visitModifyBrokerClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterLoadErrorUrlClauseContext extends ParserRuleContext {
	public SET(): TerminalNode { return this.getToken(StarRocksSqlParser.SET, 0); }
	public LOAD(): TerminalNode { return this.getToken(StarRocksSqlParser.LOAD, 0); }
	public ERRORS(): TerminalNode { return this.getToken(StarRocksSqlParser.ERRORS, 0); }
	public HUB(): TerminalNode { return this.getToken(StarRocksSqlParser.HUB, 0); }
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_alterLoadErrorUrlClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAlterLoadErrorUrlClause) {
			listener.enterAlterLoadErrorUrlClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAlterLoadErrorUrlClause) {
			listener.exitAlterLoadErrorUrlClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAlterLoadErrorUrlClause) {
			return visitor.visitAlterLoadErrorUrlClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateImageClauseContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public IMAGE(): TerminalNode { return this.getToken(StarRocksSqlParser.IMAGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_createImageClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCreateImageClause) {
			listener.enterCreateImageClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCreateImageClause) {
			listener.exitCreateImageClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCreateImageClause) {
			return visitor.visitCreateImageClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CleanTabletSchedQClauseContext extends ParserRuleContext {
	public CLEAN(): TerminalNode { return this.getToken(StarRocksSqlParser.CLEAN, 0); }
	public TABLET(): TerminalNode { return this.getToken(StarRocksSqlParser.TABLET, 0); }
	public SCHEDULER(): TerminalNode { return this.getToken(StarRocksSqlParser.SCHEDULER, 0); }
	public QUEUE(): TerminalNode { return this.getToken(StarRocksSqlParser.QUEUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_cleanTabletSchedQClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCleanTabletSchedQClause) {
			listener.enterCleanTabletSchedQClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCleanTabletSchedQClause) {
			listener.exitCleanTabletSchedQClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCleanTabletSchedQClause) {
			return visitor.visitCleanTabletSchedQClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateIndexClauseContext extends ParserRuleContext {
	public _indexName!: IdentifierContext;
	public ADD(): TerminalNode { return this.getToken(StarRocksSqlParser.ADD, 0); }
	public INDEX(): TerminalNode { return this.getToken(StarRocksSqlParser.INDEX, 0); }
	public identifierList(): IdentifierListContext {
		return this.getRuleContext(0, IdentifierListContext);
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public indexType(): IndexTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeContext);
	}
	public comment(): CommentContext | undefined {
		return this.tryGetRuleContext(0, CommentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_createIndexClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCreateIndexClause) {
			listener.enterCreateIndexClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCreateIndexClause) {
			listener.exitCreateIndexClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCreateIndexClause) {
			return visitor.visitCreateIndexClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropIndexClauseContext extends ParserRuleContext {
	public _indexName!: IdentifierContext;
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public INDEX(): TerminalNode { return this.getToken(StarRocksSqlParser.INDEX, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropIndexClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropIndexClause) {
			listener.enterDropIndexClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropIndexClause) {
			listener.exitDropIndexClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropIndexClause) {
			return visitor.visitDropIndexClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableRenameClauseContext extends ParserRuleContext {
	public RENAME(): TerminalNode { return this.getToken(StarRocksSqlParser.RENAME, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_tableRenameClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterTableRenameClause) {
			listener.enterTableRenameClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitTableRenameClause) {
			listener.exitTableRenameClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitTableRenameClause) {
			return visitor.visitTableRenameClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SwapTableClauseContext extends ParserRuleContext {
	public SWAP(): TerminalNode { return this.getToken(StarRocksSqlParser.SWAP, 0); }
	public WITH(): TerminalNode { return this.getToken(StarRocksSqlParser.WITH, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_swapTableClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSwapTableClause) {
			listener.enterSwapTableClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSwapTableClause) {
			listener.exitSwapTableClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSwapTableClause) {
			return visitor.visitSwapTableClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ModifyTablePropertiesClauseContext extends ParserRuleContext {
	public SET(): TerminalNode { return this.getToken(StarRocksSqlParser.SET, 0); }
	public propertyList(): PropertyListContext {
		return this.getRuleContext(0, PropertyListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_modifyTablePropertiesClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterModifyTablePropertiesClause) {
			listener.enterModifyTablePropertiesClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitModifyTablePropertiesClause) {
			listener.exitModifyTablePropertiesClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitModifyTablePropertiesClause) {
			return visitor.visitModifyTablePropertiesClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ModifyCommentClauseContext extends ParserRuleContext {
	public COMMENT(): TerminalNode { return this.getToken(StarRocksSqlParser.COMMENT, 0); }
	public EQ(): TerminalNode { return this.getToken(StarRocksSqlParser.EQ, 0); }
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_modifyCommentClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterModifyCommentClause) {
			listener.enterModifyCommentClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitModifyCommentClause) {
			listener.exitModifyCommentClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitModifyCommentClause) {
			return visitor.visitModifyCommentClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AddColumnClauseContext extends ParserRuleContext {
	public _rollupName!: IdentifierContext;
	public ADD(): TerminalNode { return this.getToken(StarRocksSqlParser.ADD, 0); }
	public COLUMN(): TerminalNode { return this.getToken(StarRocksSqlParser.COLUMN, 0); }
	public columnDesc(): ColumnDescContext {
		return this.getRuleContext(0, ColumnDescContext);
	}
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FIRST, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.AFTER, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TO, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_addColumnClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAddColumnClause) {
			listener.enterAddColumnClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAddColumnClause) {
			listener.exitAddColumnClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAddColumnClause) {
			return visitor.visitAddColumnClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AddColumnsClauseContext extends ParserRuleContext {
	public _rollupName!: IdentifierContext;
	public ADD(): TerminalNode { return this.getToken(StarRocksSqlParser.ADD, 0); }
	public COLUMN(): TerminalNode { return this.getToken(StarRocksSqlParser.COLUMN, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public columnDesc(): ColumnDescContext[];
	public columnDesc(i: number): ColumnDescContext;
	public columnDesc(i?: number): ColumnDescContext | ColumnDescContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnDescContext);
		} else {
			return this.getRuleContext(i, ColumnDescContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TO, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IN, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_addColumnsClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAddColumnsClause) {
			listener.enterAddColumnsClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAddColumnsClause) {
			listener.exitAddColumnsClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAddColumnsClause) {
			return visitor.visitAddColumnsClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropColumnClauseContext extends ParserRuleContext {
	public _rollupName!: IdentifierContext;
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public COLUMN(): TerminalNode { return this.getToken(StarRocksSqlParser.COLUMN, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropColumnClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropColumnClause) {
			listener.enterDropColumnClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropColumnClause) {
			listener.exitDropColumnClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropColumnClause) {
			return visitor.visitDropColumnClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ModifyColumnClauseContext extends ParserRuleContext {
	public _rollupName!: IdentifierContext;
	public MODIFY(): TerminalNode { return this.getToken(StarRocksSqlParser.MODIFY, 0); }
	public COLUMN(): TerminalNode { return this.getToken(StarRocksSqlParser.COLUMN, 0); }
	public columnDesc(): ColumnDescContext {
		return this.getRuleContext(0, ColumnDescContext);
	}
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FIRST, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.AFTER, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_modifyColumnClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterModifyColumnClause) {
			listener.enterModifyColumnClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitModifyColumnClause) {
			listener.exitModifyColumnClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitModifyColumnClause) {
			return visitor.visitModifyColumnClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnRenameClauseContext extends ParserRuleContext {
	public _oldColumn!: IdentifierContext;
	public _newColumn!: IdentifierContext;
	public RENAME(): TerminalNode { return this.getToken(StarRocksSqlParser.RENAME, 0); }
	public COLUMN(): TerminalNode { return this.getToken(StarRocksSqlParser.COLUMN, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_columnRenameClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterColumnRenameClause) {
			listener.enterColumnRenameClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitColumnRenameClause) {
			listener.exitColumnRenameClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitColumnRenameClause) {
			return visitor.visitColumnRenameClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReorderColumnsClauseContext extends ParserRuleContext {
	public _rollupName!: IdentifierContext;
	public ORDER(): TerminalNode { return this.getToken(StarRocksSqlParser.ORDER, 0); }
	public BY(): TerminalNode { return this.getToken(StarRocksSqlParser.BY, 0); }
	public identifierList(): IdentifierListContext {
		return this.getRuleContext(0, IdentifierListContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_reorderColumnsClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterReorderColumnsClause) {
			listener.enterReorderColumnsClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitReorderColumnsClause) {
			listener.exitReorderColumnsClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitReorderColumnsClause) {
			return visitor.visitReorderColumnsClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RollupRenameClauseContext extends ParserRuleContext {
	public _rollupName!: IdentifierContext;
	public _newRollupName!: IdentifierContext;
	public RENAME(): TerminalNode { return this.getToken(StarRocksSqlParser.RENAME, 0); }
	public ROLLUP(): TerminalNode { return this.getToken(StarRocksSqlParser.ROLLUP, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_rollupRenameClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterRollupRenameClause) {
			listener.enterRollupRenameClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitRollupRenameClause) {
			listener.exitRollupRenameClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitRollupRenameClause) {
			return visitor.visitRollupRenameClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CompactionClauseContext extends ParserRuleContext {
	public COMPACT(): TerminalNode { return this.getToken(StarRocksSqlParser.COMPACT, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public identifierList(): IdentifierListContext | undefined {
		return this.tryGetRuleContext(0, IdentifierListContext);
	}
	public BASE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BASE, 0); }
	public CUMULATIVE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CUMULATIVE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_compactionClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCompactionClause) {
			listener.enterCompactionClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCompactionClause) {
			listener.exitCompactionClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCompactionClause) {
			return visitor.visitCompactionClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ApplyMaskingPolicyClauseContext extends ParserRuleContext {
	public _columnName!: IdentifierContext;
	public _policyName!: QualifiedNameContext;
	public MODIFY(): TerminalNode { return this.getToken(StarRocksSqlParser.MODIFY, 0); }
	public COLUMN(): TerminalNode { return this.getToken(StarRocksSqlParser.COLUMN, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SET, 0); }
	public MASKING(): TerminalNode { return this.getToken(StarRocksSqlParser.MASKING, 0); }
	public POLICY(): TerminalNode { return this.getToken(StarRocksSqlParser.POLICY, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.USING, 0); }
	public identifierList(): IdentifierListContext | undefined {
		return this.tryGetRuleContext(0, IdentifierListContext);
	}
	public UNSET(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.UNSET, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_applyMaskingPolicyClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterApplyMaskingPolicyClause) {
			listener.enterApplyMaskingPolicyClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitApplyMaskingPolicyClause) {
			listener.exitApplyMaskingPolicyClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitApplyMaskingPolicyClause) {
			return visitor.visitApplyMaskingPolicyClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ApplyRowAccessPolicyClauseContext extends ParserRuleContext {
	public _policyName!: QualifiedNameContext;
	public ADD(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ADD, 0); }
	public ROW(): TerminalNode { return this.getToken(StarRocksSqlParser.ROW, 0); }
	public ACCESS(): TerminalNode { return this.getToken(StarRocksSqlParser.ACCESS, 0); }
	public POLICY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.POLICY, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ON, 0); }
	public identifierList(): IdentifierListContext | undefined {
		return this.tryGetRuleContext(0, IdentifierListContext);
	}
	public DROP(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DROP, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ALL, 0); }
	public POLICIES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.POLICIES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_applyRowAccessPolicyClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterApplyRowAccessPolicyClause) {
			listener.enterApplyRowAccessPolicyClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitApplyRowAccessPolicyClause) {
			listener.exitApplyRowAccessPolicyClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitApplyRowAccessPolicyClause) {
			return visitor.visitApplyRowAccessPolicyClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AddPartitionClauseContext extends ParserRuleContext {
	public ADD(): TerminalNode { return this.getToken(StarRocksSqlParser.ADD, 0); }
	public singleRangePartition(): SingleRangePartitionContext | undefined {
		return this.tryGetRuleContext(0, SingleRangePartitionContext);
	}
	public PARTITIONS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PARTITIONS, 0); }
	public multiRangePartition(): MultiRangePartitionContext | undefined {
		return this.tryGetRuleContext(0, MultiRangePartitionContext);
	}
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TEMPORARY, 0); }
	public distributionDesc(): DistributionDescContext | undefined {
		return this.tryGetRuleContext(0, DistributionDescContext);
	}
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	public singleItemListPartitionDesc(): SingleItemListPartitionDescContext | undefined {
		return this.tryGetRuleContext(0, SingleItemListPartitionDescContext);
	}
	public multiItemListPartitionDesc(): MultiItemListPartitionDescContext | undefined {
		return this.tryGetRuleContext(0, MultiItemListPartitionDescContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_addPartitionClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAddPartitionClause) {
			listener.enterAddPartitionClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAddPartitionClause) {
			listener.exitAddPartitionClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAddPartitionClause) {
			return visitor.visitAddPartitionClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropPartitionClauseContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public PARTITION(): TerminalNode { return this.getToken(StarRocksSqlParser.PARTITION, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TEMPORARY, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	public FORCE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FORCE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropPartitionClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropPartitionClause) {
			listener.enterDropPartitionClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropPartitionClause) {
			listener.exitDropPartitionClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropPartitionClause) {
			return visitor.visitDropPartitionClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TruncatePartitionClauseContext extends ParserRuleContext {
	public TRUNCATE(): TerminalNode { return this.getToken(StarRocksSqlParser.TRUNCATE, 0); }
	public partitionNames(): PartitionNamesContext {
		return this.getRuleContext(0, PartitionNamesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_truncatePartitionClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterTruncatePartitionClause) {
			listener.enterTruncatePartitionClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitTruncatePartitionClause) {
			listener.exitTruncatePartitionClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitTruncatePartitionClause) {
			return visitor.visitTruncatePartitionClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ModifyPartitionClauseContext extends ParserRuleContext {
	public MODIFY(): TerminalNode { return this.getToken(StarRocksSqlParser.MODIFY, 0); }
	public PARTITION(): TerminalNode { return this.getToken(StarRocksSqlParser.PARTITION, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SET, 0); }
	public propertyList(): PropertyListContext | undefined {
		return this.tryGetRuleContext(0, PropertyListContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public identifierList(): IdentifierListContext | undefined {
		return this.tryGetRuleContext(0, IdentifierListContext);
	}
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public ASTERISK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ASTERISK_SYMBOL, 0); }
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public distributionDesc(): DistributionDescContext | undefined {
		return this.tryGetRuleContext(0, DistributionDescContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_modifyPartitionClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterModifyPartitionClause) {
			listener.enterModifyPartitionClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitModifyPartitionClause) {
			listener.exitModifyPartitionClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitModifyPartitionClause) {
			return visitor.visitModifyPartitionClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReplacePartitionClauseContext extends ParserRuleContext {
	public _parName!: PartitionNamesContext;
	public _tempParName!: PartitionNamesContext;
	public REPLACE(): TerminalNode { return this.getToken(StarRocksSqlParser.REPLACE, 0); }
	public WITH(): TerminalNode { return this.getToken(StarRocksSqlParser.WITH, 0); }
	public partitionNames(): PartitionNamesContext[];
	public partitionNames(i: number): PartitionNamesContext;
	public partitionNames(i?: number): PartitionNamesContext | PartitionNamesContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionNamesContext);
		} else {
			return this.getRuleContext(i, PartitionNamesContext);
		}
	}
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_replacePartitionClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterReplacePartitionClause) {
			listener.enterReplacePartitionClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitReplacePartitionClause) {
			listener.exitReplacePartitionClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitReplacePartitionClause) {
			return visitor.visitReplacePartitionClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionRenameClauseContext extends ParserRuleContext {
	public _parName!: IdentifierContext;
	public _newParName!: IdentifierContext;
	public RENAME(): TerminalNode { return this.getToken(StarRocksSqlParser.RENAME, 0); }
	public PARTITION(): TerminalNode { return this.getToken(StarRocksSqlParser.PARTITION, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_partitionRenameClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterPartitionRenameClause) {
			listener.enterPartitionRenameClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitPartitionRenameClause) {
			listener.exitPartitionRenameClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionRenameClause) {
			return visitor.visitPartitionRenameClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InsertStatementContext extends ParserRuleContext {
	public _label!: IdentifierContext;
	public INSERT(): TerminalNode { return this.getToken(StarRocksSqlParser.INSERT, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public INTO(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INTO, 0); }
	public OVERWRITE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.OVERWRITE, 0); }
	public queryStatement(): QueryStatementContext | undefined {
		return this.tryGetRuleContext(0, QueryStatementContext);
	}
	public explainDesc(): ExplainDescContext | undefined {
		return this.tryGetRuleContext(0, ExplainDescContext);
	}
	public partitionNames(): PartitionNamesContext | undefined {
		return this.tryGetRuleContext(0, PartitionNamesContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WITH, 0); }
	public LABEL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LABEL, 0); }
	public columnAliases(): ColumnAliasesContext | undefined {
		return this.tryGetRuleContext(0, ColumnAliasesContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public VALUES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.VALUES, 0); }
	public expressionsWithDefault(): ExpressionsWithDefaultContext[];
	public expressionsWithDefault(i: number): ExpressionsWithDefaultContext;
	public expressionsWithDefault(i?: number): ExpressionsWithDefaultContext | ExpressionsWithDefaultContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionsWithDefaultContext);
		} else {
			return this.getRuleContext(i, ExpressionsWithDefaultContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_insertStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterInsertStatement) {
			listener.enterInsertStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitInsertStatement) {
			listener.exitInsertStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitInsertStatement) {
			return visitor.visitInsertStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UpdateStatementContext extends ParserRuleContext {
	public _where!: ExpressionContext;
	public UPDATE(): TerminalNode { return this.getToken(StarRocksSqlParser.UPDATE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public SET(): TerminalNode { return this.getToken(StarRocksSqlParser.SET, 0); }
	public assignmentList(): AssignmentListContext {
		return this.getRuleContext(0, AssignmentListContext);
	}
	public fromClause(): FromClauseContext {
		return this.getRuleContext(0, FromClauseContext);
	}
	public explainDesc(): ExplainDescContext | undefined {
		return this.tryGetRuleContext(0, ExplainDescContext);
	}
	public withClause(): WithClauseContext | undefined {
		return this.tryGetRuleContext(0, WithClauseContext);
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_updateStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterUpdateStatement) {
			listener.enterUpdateStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitUpdateStatement) {
			listener.exitUpdateStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitUpdateStatement) {
			return visitor.visitUpdateStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DeleteStatementContext extends ParserRuleContext {
	public _using!: RelationsContext;
	public _where!: ExpressionContext;
	public DELETE(): TerminalNode { return this.getToken(StarRocksSqlParser.DELETE, 0); }
	public FROM(): TerminalNode { return this.getToken(StarRocksSqlParser.FROM, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public explainDesc(): ExplainDescContext | undefined {
		return this.tryGetRuleContext(0, ExplainDescContext);
	}
	public withClause(): WithClauseContext | undefined {
		return this.tryGetRuleContext(0, WithClauseContext);
	}
	public partitionNames(): PartitionNamesContext | undefined {
		return this.tryGetRuleContext(0, PartitionNamesContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.USING, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public relations(): RelationsContext | undefined {
		return this.tryGetRuleContext(0, RelationsContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_deleteStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDeleteStatement) {
			listener.enterDeleteStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDeleteStatement) {
			listener.exitDeleteStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDeleteStatement) {
			return visitor.visitDeleteStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateRoutineLoadStatementContext extends ParserRuleContext {
	public _db!: QualifiedNameContext;
	public _name!: IdentifierContext;
	public _table!: QualifiedNameContext;
	public _source!: IdentifierContext;
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public ROUTINE(): TerminalNode { return this.getToken(StarRocksSqlParser.ROUTINE, 0); }
	public LOAD(): TerminalNode { return this.getToken(StarRocksSqlParser.LOAD, 0); }
	public ON(): TerminalNode { return this.getToken(StarRocksSqlParser.ON, 0); }
	public loadPropertiesExpr(): LoadPropertiesExprContext {
		return this.getRuleContext(0, LoadPropertiesExprContext);
	}
	public FROM(): TerminalNode { return this.getToken(StarRocksSqlParser.FROM, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public qualifiedName(): QualifiedNameContext[];
	public qualifiedName(i: number): QualifiedNameContext;
	public qualifiedName(i?: number): QualifiedNameContext | QualifiedNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(QualifiedNameContext);
		} else {
			return this.getRuleContext(i, QualifiedNameContext);
		}
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DOT, 0); }
	public jobProperties(): JobPropertiesContext | undefined {
		return this.tryGetRuleContext(0, JobPropertiesContext);
	}
	public dataSourceProperties(): DataSourcePropertiesContext | undefined {
		return this.tryGetRuleContext(0, DataSourcePropertiesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_createRoutineLoadStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCreateRoutineLoadStatement) {
			listener.enterCreateRoutineLoadStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCreateRoutineLoadStatement) {
			listener.exitCreateRoutineLoadStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCreateRoutineLoadStatement) {
			return visitor.visitCreateRoutineLoadStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterRoutineLoadStatementContext extends ParserRuleContext {
	public _db!: QualifiedNameContext;
	public _name!: IdentifierContext;
	public ALTER(): TerminalNode { return this.getToken(StarRocksSqlParser.ALTER, 0); }
	public ROUTINE(): TerminalNode { return this.getToken(StarRocksSqlParser.ROUTINE, 0); }
	public LOAD(): TerminalNode { return this.getToken(StarRocksSqlParser.LOAD, 0); }
	public FOR(): TerminalNode { return this.getToken(StarRocksSqlParser.FOR, 0); }
	public loadPropertiesExpr(): LoadPropertiesExprContext {
		return this.getRuleContext(0, LoadPropertiesExprContext);
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DOT, 0); }
	public jobProperties(): JobPropertiesContext | undefined {
		return this.tryGetRuleContext(0, JobPropertiesContext);
	}
	public dataSource(): DataSourceContext | undefined {
		return this.tryGetRuleContext(0, DataSourceContext);
	}
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_alterRoutineLoadStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAlterRoutineLoadStatement) {
			listener.enterAlterRoutineLoadStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAlterRoutineLoadStatement) {
			listener.exitAlterRoutineLoadStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAlterRoutineLoadStatement) {
			return visitor.visitAlterRoutineLoadStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataSourceContext extends ParserRuleContext {
	public _source!: IdentifierContext;
	public FROM(): TerminalNode { return this.getToken(StarRocksSqlParser.FROM, 0); }
	public dataSourceProperties(): DataSourcePropertiesContext {
		return this.getRuleContext(0, DataSourcePropertiesContext);
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dataSource; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDataSource) {
			listener.enterDataSource(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDataSource) {
			listener.exitDataSource(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDataSource) {
			return visitor.visitDataSource(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LoadPropertiesExprContext extends ParserRuleContext {
	public loadProperties(): LoadPropertiesContext[];
	public loadProperties(i: number): LoadPropertiesContext;
	public loadProperties(i?: number): LoadPropertiesContext | LoadPropertiesContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LoadPropertiesContext);
		} else {
			return this.getRuleContext(i, LoadPropertiesContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_loadPropertiesExpr; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterLoadPropertiesExpr) {
			listener.enterLoadPropertiesExpr(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitLoadPropertiesExpr) {
			listener.exitLoadPropertiesExpr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitLoadPropertiesExpr) {
			return visitor.visitLoadPropertiesExpr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LoadPropertiesContext extends ParserRuleContext {
	public colSeparatorProperty(): ColSeparatorPropertyContext | undefined {
		return this.tryGetRuleContext(0, ColSeparatorPropertyContext);
	}
	public rowDelimiterProperty(): RowDelimiterPropertyContext | undefined {
		return this.tryGetRuleContext(0, RowDelimiterPropertyContext);
	}
	public importColumns(): ImportColumnsContext | undefined {
		return this.tryGetRuleContext(0, ImportColumnsContext);
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public partitionNames(): PartitionNamesContext | undefined {
		return this.tryGetRuleContext(0, PartitionNamesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_loadProperties; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterLoadProperties) {
			listener.enterLoadProperties(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitLoadProperties) {
			listener.exitLoadProperties(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitLoadProperties) {
			return visitor.visitLoadProperties(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColSeparatorPropertyContext extends ParserRuleContext {
	public COLUMNS(): TerminalNode { return this.getToken(StarRocksSqlParser.COLUMNS, 0); }
	public TERMINATED(): TerminalNode { return this.getToken(StarRocksSqlParser.TERMINATED, 0); }
	public BY(): TerminalNode { return this.getToken(StarRocksSqlParser.BY, 0); }
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_colSeparatorProperty; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterColSeparatorProperty) {
			listener.enterColSeparatorProperty(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitColSeparatorProperty) {
			listener.exitColSeparatorProperty(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitColSeparatorProperty) {
			return visitor.visitColSeparatorProperty(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RowDelimiterPropertyContext extends ParserRuleContext {
	public ROWS(): TerminalNode { return this.getToken(StarRocksSqlParser.ROWS, 0); }
	public TERMINATED(): TerminalNode { return this.getToken(StarRocksSqlParser.TERMINATED, 0); }
	public BY(): TerminalNode { return this.getToken(StarRocksSqlParser.BY, 0); }
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_rowDelimiterProperty; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterRowDelimiterProperty) {
			listener.enterRowDelimiterProperty(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitRowDelimiterProperty) {
			listener.exitRowDelimiterProperty(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitRowDelimiterProperty) {
			return visitor.visitRowDelimiterProperty(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ImportColumnsContext extends ParserRuleContext {
	public COLUMNS(): TerminalNode { return this.getToken(StarRocksSqlParser.COLUMNS, 0); }
	public columnProperties(): ColumnPropertiesContext {
		return this.getRuleContext(0, ColumnPropertiesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_importColumns; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterImportColumns) {
			listener.enterImportColumns(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitImportColumns) {
			listener.exitImportColumns(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitImportColumns) {
			return visitor.visitImportColumns(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnPropertiesContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public qualifiedName(): QualifiedNameContext[];
	public qualifiedName(i: number): QualifiedNameContext;
	public qualifiedName(i?: number): QualifiedNameContext | QualifiedNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(QualifiedNameContext);
		} else {
			return this.getRuleContext(i, QualifiedNameContext);
		}
	}
	public assignment(): AssignmentContext[];
	public assignment(i: number): AssignmentContext;
	public assignment(i?: number): AssignmentContext | AssignmentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AssignmentContext);
		} else {
			return this.getRuleContext(i, AssignmentContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_columnProperties; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterColumnProperties) {
			listener.enterColumnProperties(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitColumnProperties) {
			listener.exitColumnProperties(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitColumnProperties) {
			return visitor.visitColumnProperties(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JobPropertiesContext extends ParserRuleContext {
	public properties(): PropertiesContext {
		return this.getRuleContext(0, PropertiesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_jobProperties; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterJobProperties) {
			listener.enterJobProperties(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitJobProperties) {
			listener.exitJobProperties(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitJobProperties) {
			return visitor.visitJobProperties(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataSourcePropertiesContext extends ParserRuleContext {
	public propertyList(): PropertyListContext {
		return this.getRuleContext(0, PropertyListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dataSourceProperties; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDataSourceProperties) {
			listener.enterDataSourceProperties(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDataSourceProperties) {
			listener.exitDataSourceProperties(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDataSourceProperties) {
			return visitor.visitDataSourceProperties(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StopRoutineLoadStatementContext extends ParserRuleContext {
	public _db!: QualifiedNameContext;
	public _name!: IdentifierContext;
	public STOP(): TerminalNode { return this.getToken(StarRocksSqlParser.STOP, 0); }
	public ROUTINE(): TerminalNode { return this.getToken(StarRocksSqlParser.ROUTINE, 0); }
	public LOAD(): TerminalNode { return this.getToken(StarRocksSqlParser.LOAD, 0); }
	public FOR(): TerminalNode { return this.getToken(StarRocksSqlParser.FOR, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DOT, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_stopRoutineLoadStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterStopRoutineLoadStatement) {
			listener.enterStopRoutineLoadStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitStopRoutineLoadStatement) {
			listener.exitStopRoutineLoadStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitStopRoutineLoadStatement) {
			return visitor.visitStopRoutineLoadStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ResumeRoutineLoadStatementContext extends ParserRuleContext {
	public _db!: QualifiedNameContext;
	public _name!: IdentifierContext;
	public RESUME(): TerminalNode { return this.getToken(StarRocksSqlParser.RESUME, 0); }
	public ROUTINE(): TerminalNode { return this.getToken(StarRocksSqlParser.ROUTINE, 0); }
	public LOAD(): TerminalNode { return this.getToken(StarRocksSqlParser.LOAD, 0); }
	public FOR(): TerminalNode { return this.getToken(StarRocksSqlParser.FOR, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DOT, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_resumeRoutineLoadStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterResumeRoutineLoadStatement) {
			listener.enterResumeRoutineLoadStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitResumeRoutineLoadStatement) {
			listener.exitResumeRoutineLoadStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitResumeRoutineLoadStatement) {
			return visitor.visitResumeRoutineLoadStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PauseRoutineLoadStatementContext extends ParserRuleContext {
	public _db!: QualifiedNameContext;
	public _name!: IdentifierContext;
	public PAUSE(): TerminalNode { return this.getToken(StarRocksSqlParser.PAUSE, 0); }
	public ROUTINE(): TerminalNode { return this.getToken(StarRocksSqlParser.ROUTINE, 0); }
	public LOAD(): TerminalNode { return this.getToken(StarRocksSqlParser.LOAD, 0); }
	public FOR(): TerminalNode { return this.getToken(StarRocksSqlParser.FOR, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DOT, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_pauseRoutineLoadStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterPauseRoutineLoadStatement) {
			listener.enterPauseRoutineLoadStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitPauseRoutineLoadStatement) {
			listener.exitPauseRoutineLoadStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitPauseRoutineLoadStatement) {
			return visitor.visitPauseRoutineLoadStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowRoutineLoadStatementContext extends ParserRuleContext {
	public _db!: QualifiedNameContext;
	public _name!: IdentifierContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public ROUTINE(): TerminalNode { return this.getToken(StarRocksSqlParser.ROUTINE, 0); }
	public LOAD(): TerminalNode { return this.getToken(StarRocksSqlParser.LOAD, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ALL, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FOR, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ORDER, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BY, 0); }
	public sortItem(): SortItemContext[];
	public sortItem(i: number): SortItemContext;
	public sortItem(i?: number): SortItemContext | SortItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SortItemContext);
		} else {
			return this.getRuleContext(i, SortItemContext);
		}
	}
	public limitElement(): LimitElementContext | undefined {
		return this.tryGetRuleContext(0, LimitElementContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public qualifiedName(): QualifiedNameContext[];
	public qualifiedName(i: number): QualifiedNameContext;
	public qualifiedName(i?: number): QualifiedNameContext | QualifiedNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(QualifiedNameContext);
		} else {
			return this.getRuleContext(i, QualifiedNameContext);
		}
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DOT, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showRoutineLoadStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowRoutineLoadStatement) {
			listener.enterShowRoutineLoadStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowRoutineLoadStatement) {
			listener.exitShowRoutineLoadStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowRoutineLoadStatement) {
			return visitor.visitShowRoutineLoadStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowRoutineLoadTaskStatementContext extends ParserRuleContext {
	public _db!: QualifiedNameContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public ROUTINE(): TerminalNode { return this.getToken(StarRocksSqlParser.ROUTINE, 0); }
	public LOAD(): TerminalNode { return this.getToken(StarRocksSqlParser.LOAD, 0); }
	public TASK(): TerminalNode { return this.getToken(StarRocksSqlParser.TASK, 0); }
	public WHERE(): TerminalNode { return this.getToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showRoutineLoadTaskStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowRoutineLoadTaskStatement) {
			listener.enterShowRoutineLoadTaskStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowRoutineLoadTaskStatement) {
			listener.exitShowRoutineLoadTaskStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowRoutineLoadTaskStatement) {
			return visitor.visitShowRoutineLoadTaskStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowStreamLoadStatementContext extends ParserRuleContext {
	public _db!: QualifiedNameContext;
	public _name!: IdentifierContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public STREAM(): TerminalNode { return this.getToken(StarRocksSqlParser.STREAM, 0); }
	public LOAD(): TerminalNode { return this.getToken(StarRocksSqlParser.LOAD, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ALL, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FOR, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ORDER, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BY, 0); }
	public sortItem(): SortItemContext[];
	public sortItem(i: number): SortItemContext;
	public sortItem(i?: number): SortItemContext | SortItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SortItemContext);
		} else {
			return this.getRuleContext(i, SortItemContext);
		}
	}
	public limitElement(): LimitElementContext | undefined {
		return this.tryGetRuleContext(0, LimitElementContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public qualifiedName(): QualifiedNameContext[];
	public qualifiedName(i: number): QualifiedNameContext;
	public qualifiedName(i?: number): QualifiedNameContext | QualifiedNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(QualifiedNameContext);
		} else {
			return this.getRuleContext(i, QualifiedNameContext);
		}
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DOT, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showStreamLoadStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowStreamLoadStatement) {
			listener.enterShowStreamLoadStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowStreamLoadStatement) {
			listener.exitShowStreamLoadStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowStreamLoadStatement) {
			return visitor.visitShowStreamLoadStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AnalyzeStatementContext extends ParserRuleContext {
	public ANALYZE(): TerminalNode { return this.getToken(StarRocksSqlParser.ANALYZE, 0); }
	public TABLE(): TerminalNode { return this.getToken(StarRocksSqlParser.TABLE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WITH, 0); }
	public MODE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MODE, 0); }
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	public FULL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FULL, 0); }
	public SAMPLE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SAMPLE, 0); }
	public SYNC(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SYNC, 0); }
	public ASYNC(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ASYNC, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_analyzeStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAnalyzeStatement) {
			listener.enterAnalyzeStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAnalyzeStatement) {
			listener.exitAnalyzeStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAnalyzeStatement) {
			return visitor.visitAnalyzeStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropStatsStatementContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public STATS(): TerminalNode { return this.getToken(StarRocksSqlParser.STATS, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropStatsStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropStatsStatement) {
			listener.enterDropStatsStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropStatsStatement) {
			listener.exitDropStatsStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropStatsStatement) {
			return visitor.visitDropStatsStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AnalyzeHistogramStatementContext extends ParserRuleContext {
	public _bucket!: Token;
	public ANALYZE(): TerminalNode { return this.getToken(StarRocksSqlParser.ANALYZE, 0); }
	public TABLE(): TerminalNode { return this.getToken(StarRocksSqlParser.TABLE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public UPDATE(): TerminalNode { return this.getToken(StarRocksSqlParser.UPDATE, 0); }
	public HISTOGRAM(): TerminalNode { return this.getToken(StarRocksSqlParser.HISTOGRAM, 0); }
	public ON(): TerminalNode { return this.getToken(StarRocksSqlParser.ON, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	public WITH(): TerminalNode[];
	public WITH(i: number): TerminalNode;
	public WITH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.WITH);
		} else {
			return this.getToken(StarRocksSqlParser.WITH, i);
		}
	}
	public MODE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MODE, 0); }
	public BUCKETS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BUCKETS, 0); }
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	public SYNC(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SYNC, 0); }
	public ASYNC(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ASYNC, 0); }
	public INTEGER_VALUE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INTEGER_VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_analyzeHistogramStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAnalyzeHistogramStatement) {
			listener.enterAnalyzeHistogramStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAnalyzeHistogramStatement) {
			listener.exitAnalyzeHistogramStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAnalyzeHistogramStatement) {
			return visitor.visitAnalyzeHistogramStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropHistogramStatementContext extends ParserRuleContext {
	public ANALYZE(): TerminalNode { return this.getToken(StarRocksSqlParser.ANALYZE, 0); }
	public TABLE(): TerminalNode { return this.getToken(StarRocksSqlParser.TABLE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public HISTOGRAM(): TerminalNode { return this.getToken(StarRocksSqlParser.HISTOGRAM, 0); }
	public ON(): TerminalNode { return this.getToken(StarRocksSqlParser.ON, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropHistogramStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropHistogramStatement) {
			listener.enterDropHistogramStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropHistogramStatement) {
			listener.exitDropHistogramStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropHistogramStatement) {
			return visitor.visitDropHistogramStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateAnalyzeStatementContext extends ParserRuleContext {
	public _db!: IdentifierContext;
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public ANALYZE(): TerminalNode { return this.getToken(StarRocksSqlParser.ANALYZE, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ALL, 0); }
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	public FULL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FULL, 0); }
	public SAMPLE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SAMPLE, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DATABASE, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TABLE, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_createAnalyzeStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCreateAnalyzeStatement) {
			listener.enterCreateAnalyzeStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCreateAnalyzeStatement) {
			listener.exitCreateAnalyzeStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCreateAnalyzeStatement) {
			return visitor.visitCreateAnalyzeStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropAnalyzeJobStatementContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public ANALYZE(): TerminalNode { return this.getToken(StarRocksSqlParser.ANALYZE, 0); }
	public INTEGER_VALUE(): TerminalNode { return this.getToken(StarRocksSqlParser.INTEGER_VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropAnalyzeJobStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropAnalyzeJobStatement) {
			listener.enterDropAnalyzeJobStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropAnalyzeJobStatement) {
			listener.exitDropAnalyzeJobStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropAnalyzeJobStatement) {
			return visitor.visitDropAnalyzeJobStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowAnalyzeStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public ANALYZE(): TerminalNode { return this.getToken(StarRocksSqlParser.ANALYZE, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public JOB(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.JOB, 0); }
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.STATUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showAnalyzeStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowAnalyzeStatement) {
			listener.enterShowAnalyzeStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowAnalyzeStatement) {
			listener.exitShowAnalyzeStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowAnalyzeStatement) {
			return visitor.visitShowAnalyzeStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowStatsMetaStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public STATS(): TerminalNode { return this.getToken(StarRocksSqlParser.STATS, 0); }
	public META(): TerminalNode { return this.getToken(StarRocksSqlParser.META, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showStatsMetaStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowStatsMetaStatement) {
			listener.enterShowStatsMetaStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowStatsMetaStatement) {
			listener.exitShowStatsMetaStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowStatsMetaStatement) {
			return visitor.visitShowStatsMetaStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowHistogramMetaStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public HISTOGRAM(): TerminalNode { return this.getToken(StarRocksSqlParser.HISTOGRAM, 0); }
	public META(): TerminalNode { return this.getToken(StarRocksSqlParser.META, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showHistogramMetaStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowHistogramMetaStatement) {
			listener.enterShowHistogramMetaStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowHistogramMetaStatement) {
			listener.exitShowHistogramMetaStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowHistogramMetaStatement) {
			return visitor.visitShowHistogramMetaStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class KillAnalyzeStatementContext extends ParserRuleContext {
	public KILL(): TerminalNode { return this.getToken(StarRocksSqlParser.KILL, 0); }
	public ANALYZE(): TerminalNode { return this.getToken(StarRocksSqlParser.ANALYZE, 0); }
	public INTEGER_VALUE(): TerminalNode { return this.getToken(StarRocksSqlParser.INTEGER_VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_killAnalyzeStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterKillAnalyzeStatement) {
			listener.enterKillAnalyzeStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitKillAnalyzeStatement) {
			listener.exitKillAnalyzeStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitKillAnalyzeStatement) {
			return visitor.visitKillAnalyzeStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AnalyzeProfileStatementContext extends ParserRuleContext {
	public ANALYZE(): TerminalNode { return this.getToken(StarRocksSqlParser.ANALYZE, 0); }
	public PROFILE(): TerminalNode { return this.getToken(StarRocksSqlParser.PROFILE, 0); }
	public FROM(): TerminalNode { return this.getToken(StarRocksSqlParser.FROM, 0); }
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	public INTEGER_VALUE(): TerminalNode[];
	public INTEGER_VALUE(i: number): TerminalNode;
	public INTEGER_VALUE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.INTEGER_VALUE);
		} else {
			return this.getToken(StarRocksSqlParser.INTEGER_VALUE, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_analyzeProfileStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAnalyzeProfileStatement) {
			listener.enterAnalyzeProfileStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAnalyzeProfileStatement) {
			listener.exitAnalyzeProfileStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAnalyzeProfileStatement) {
			return visitor.visitAnalyzeProfileStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateResourceGroupStatementContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public RESOURCE(): TerminalNode { return this.getToken(StarRocksSqlParser.RESOURCE, 0); }
	public GROUP(): TerminalNode { return this.getToken(StarRocksSqlParser.GROUP, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public WITH(): TerminalNode { return this.getToken(StarRocksSqlParser.WITH, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public property(): PropertyContext[];
	public property(i: number): PropertyContext;
	public property(i?: number): PropertyContext | PropertyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PropertyContext);
		} else {
			return this.getRuleContext(i, PropertyContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.OR, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.REPLACE, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TO, 0); }
	public classifier(): ClassifierContext[];
	public classifier(i: number): ClassifierContext;
	public classifier(i?: number): ClassifierContext | ClassifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ClassifierContext);
		} else {
			return this.getRuleContext(i, ClassifierContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_createResourceGroupStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCreateResourceGroupStatement) {
			listener.enterCreateResourceGroupStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCreateResourceGroupStatement) {
			listener.exitCreateResourceGroupStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCreateResourceGroupStatement) {
			return visitor.visitCreateResourceGroupStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropResourceGroupStatementContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public RESOURCE(): TerminalNode { return this.getToken(StarRocksSqlParser.RESOURCE, 0); }
	public GROUP(): TerminalNode { return this.getToken(StarRocksSqlParser.GROUP, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropResourceGroupStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropResourceGroupStatement) {
			listener.enterDropResourceGroupStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropResourceGroupStatement) {
			listener.exitDropResourceGroupStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropResourceGroupStatement) {
			return visitor.visitDropResourceGroupStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterResourceGroupStatementContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(StarRocksSqlParser.ALTER, 0); }
	public RESOURCE(): TerminalNode { return this.getToken(StarRocksSqlParser.RESOURCE, 0); }
	public GROUP(): TerminalNode { return this.getToken(StarRocksSqlParser.GROUP, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public ADD(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ADD, 0); }
	public classifier(): ClassifierContext[];
	public classifier(i: number): ClassifierContext;
	public classifier(i?: number): ClassifierContext | ClassifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ClassifierContext);
		} else {
			return this.getRuleContext(i, ClassifierContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	public DROP(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DROP, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public INTEGER_VALUE(): TerminalNode[];
	public INTEGER_VALUE(i: number): TerminalNode;
	public INTEGER_VALUE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.INTEGER_VALUE);
		} else {
			return this.getToken(StarRocksSqlParser.INTEGER_VALUE, i);
		}
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ALL, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WITH, 0); }
	public property(): PropertyContext[];
	public property(i: number): PropertyContext;
	public property(i?: number): PropertyContext | PropertyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PropertyContext);
		} else {
			return this.getRuleContext(i, PropertyContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_alterResourceGroupStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAlterResourceGroupStatement) {
			listener.enterAlterResourceGroupStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAlterResourceGroupStatement) {
			listener.exitAlterResourceGroupStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAlterResourceGroupStatement) {
			return visitor.visitAlterResourceGroupStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowResourceGroupStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public RESOURCE(): TerminalNode { return this.getToken(StarRocksSqlParser.RESOURCE, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.GROUP, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public GROUPS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.GROUPS, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showResourceGroupStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowResourceGroupStatement) {
			listener.enterShowResourceGroupStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowResourceGroupStatement) {
			listener.exitShowResourceGroupStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowResourceGroupStatement) {
			return visitor.visitShowResourceGroupStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateResourceStatementContext extends ParserRuleContext {
	public _resourceName!: IdentifierOrStringContext;
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public RESOURCE(): TerminalNode { return this.getToken(StarRocksSqlParser.RESOURCE, 0); }
	public identifierOrString(): IdentifierOrStringContext {
		return this.getRuleContext(0, IdentifierOrStringContext);
	}
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXTERNAL, 0); }
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_createResourceStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCreateResourceStatement) {
			listener.enterCreateResourceStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCreateResourceStatement) {
			listener.exitCreateResourceStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCreateResourceStatement) {
			return visitor.visitCreateResourceStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterResourceStatementContext extends ParserRuleContext {
	public _resourceName!: IdentifierOrStringContext;
	public ALTER(): TerminalNode { return this.getToken(StarRocksSqlParser.ALTER, 0); }
	public RESOURCE(): TerminalNode { return this.getToken(StarRocksSqlParser.RESOURCE, 0); }
	public SET(): TerminalNode { return this.getToken(StarRocksSqlParser.SET, 0); }
	public properties(): PropertiesContext {
		return this.getRuleContext(0, PropertiesContext);
	}
	public identifierOrString(): IdentifierOrStringContext {
		return this.getRuleContext(0, IdentifierOrStringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_alterResourceStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAlterResourceStatement) {
			listener.enterAlterResourceStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAlterResourceStatement) {
			listener.exitAlterResourceStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAlterResourceStatement) {
			return visitor.visitAlterResourceStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropResourceStatementContext extends ParserRuleContext {
	public _resourceName!: IdentifierOrStringContext;
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public RESOURCE(): TerminalNode { return this.getToken(StarRocksSqlParser.RESOURCE, 0); }
	public identifierOrString(): IdentifierOrStringContext {
		return this.getRuleContext(0, IdentifierOrStringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropResourceStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropResourceStatement) {
			listener.enterDropResourceStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropResourceStatement) {
			listener.exitDropResourceStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropResourceStatement) {
			return visitor.visitDropResourceStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowResourceStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public RESOURCES(): TerminalNode { return this.getToken(StarRocksSqlParser.RESOURCES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showResourceStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowResourceStatement) {
			listener.enterShowResourceStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowResourceStatement) {
			listener.exitShowResourceStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowResourceStatement) {
			return visitor.visitShowResourceStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ClassifierContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public expressionList(): ExpressionListContext {
		return this.getRuleContext(0, ExpressionListContext);
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_classifier; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterClassifier) {
			listener.enterClassifier(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitClassifier) {
			listener.exitClassifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitClassifier) {
			return visitor.visitClassifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowFunctionsStatementContext extends ParserRuleContext {
	public _db!: QualifiedNameContext;
	public _pattern!: StringContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public FUNCTIONS(): TerminalNode { return this.getToken(StarRocksSqlParser.FUNCTIONS, 0); }
	public FULL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FULL, 0); }
	public BUILTIN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BUILTIN, 0); }
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.GLOBAL, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IN, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LIKE, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showFunctionsStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowFunctionsStatement) {
			listener.enterShowFunctionsStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowFunctionsStatement) {
			listener.exitShowFunctionsStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowFunctionsStatement) {
			return visitor.visitShowFunctionsStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropFunctionStatementContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public FUNCTION(): TerminalNode { return this.getToken(StarRocksSqlParser.FUNCTION, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public typeList(): TypeListContext {
		return this.getRuleContext(0, TypeListContext);
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.GLOBAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropFunctionStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropFunctionStatement) {
			listener.enterDropFunctionStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropFunctionStatement) {
			listener.exitDropFunctionStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropFunctionStatement) {
			return visitor.visitDropFunctionStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateFunctionStatementContext extends ParserRuleContext {
	public _functionType!: Token;
	public _returnType!: TypeContext;
	public _intermediateType!: TypeContext;
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public FUNCTION(): TerminalNode { return this.getToken(StarRocksSqlParser.FUNCTION, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public typeList(): TypeListContext {
		return this.getRuleContext(0, TypeListContext);
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public RETURNS(): TerminalNode { return this.getToken(StarRocksSqlParser.RETURNS, 0); }
	public type(): TypeContext[];
	public type(i: number): TypeContext;
	public type(i?: number): TypeContext | TypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TypeContext);
		} else {
			return this.getRuleContext(i, TypeContext);
		}
	}
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.GLOBAL, 0); }
	public INTERMEDIATE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INTERMEDIATE, 0); }
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TABLE, 0); }
	public AGGREGATE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.AGGREGATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_createFunctionStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCreateFunctionStatement) {
			listener.enterCreateFunctionStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCreateFunctionStatement) {
			listener.exitCreateFunctionStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCreateFunctionStatement) {
			return visitor.visitCreateFunctionStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TypeListContext extends ParserRuleContext {
	public type(): TypeContext[];
	public type(i: number): TypeContext;
	public type(i?: number): TypeContext | TypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TypeContext);
		} else {
			return this.getRuleContext(i, TypeContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	public DOTDOTDOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DOTDOTDOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_typeList; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterTypeList) {
			listener.enterTypeList(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitTypeList) {
			listener.exitTypeList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitTypeList) {
			return visitor.visitTypeList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LoadStatementContext extends ParserRuleContext {
	public _label!: LabelNameContext;
	public _data!: DataDescListContext;
	public _broker!: BrokerDescContext;
	public _system!: IdentifierOrStringContext;
	public _props!: PropertyListContext;
	public _resource!: ResourceDescContext;
	public LOAD(): TerminalNode { return this.getToken(StarRocksSqlParser.LOAD, 0); }
	public LABEL(): TerminalNode { return this.getToken(StarRocksSqlParser.LABEL, 0); }
	public labelName(): LabelNameContext {
		return this.getRuleContext(0, LabelNameContext);
	}
	public BY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BY, 0); }
	public PROPERTIES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PROPERTIES, 0); }
	public dataDescList(): DataDescListContext | undefined {
		return this.tryGetRuleContext(0, DataDescListContext);
	}
	public brokerDesc(): BrokerDescContext | undefined {
		return this.tryGetRuleContext(0, BrokerDescContext);
	}
	public identifierOrString(): IdentifierOrStringContext | undefined {
		return this.tryGetRuleContext(0, IdentifierOrStringContext);
	}
	public propertyList(): PropertyListContext | undefined {
		return this.tryGetRuleContext(0, PropertyListContext);
	}
	public resourceDesc(): ResourceDescContext | undefined {
		return this.tryGetRuleContext(0, ResourceDescContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_loadStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterLoadStatement) {
			listener.enterLoadStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitLoadStatement) {
			listener.exitLoadStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitLoadStatement) {
			return visitor.visitLoadStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LabelNameContext extends ParserRuleContext {
	public _db!: IdentifierContext;
	public _label!: IdentifierContext;
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_labelName; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterLabelName) {
			listener.enterLabelName(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitLabelName) {
			listener.exitLabelName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitLabelName) {
			return visitor.visitLabelName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataDescListContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public dataDesc(): DataDescContext[];
	public dataDesc(i: number): DataDescContext;
	public dataDesc(i?: number): DataDescContext | DataDescContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataDescContext);
		} else {
			return this.getRuleContext(i, DataDescContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dataDescList; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDataDescList) {
			listener.enterDataDescList(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDataDescList) {
			listener.exitDataDescList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDataDescList) {
			return visitor.visitDataDescList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataDescContext extends ParserRuleContext {
	public _srcFiles!: StringListContext;
	public _dstTableName!: IdentifierContext;
	public _partitions!: PartitionNamesContext;
	public _colSep!: StringContext;
	public _rowSep!: StringContext;
	public _format!: FileFormatContext;
	public _formatPropsField!: FormatPropsContext;
	public _colList!: ColumnAliasesContext;
	public _colFromPath!: IdentifierListContext;
	public _colMappingList!: ClassifierContext;
	public _where!: ExpressionContext;
	public _srcTableName!: IdentifierContext;
	public DATA(): TerminalNode { return this.getToken(StarRocksSqlParser.DATA, 0); }
	public INFILE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INFILE, 0); }
	public INTO(): TerminalNode { return this.getToken(StarRocksSqlParser.INTO, 0); }
	public TABLE(): TerminalNode[];
	public TABLE(i: number): TerminalNode;
	public TABLE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.TABLE);
		} else {
			return this.getToken(StarRocksSqlParser.TABLE, i);
		}
	}
	public stringList(): StringListContext | undefined {
		return this.tryGetRuleContext(0, StringListContext);
	}
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public NEGATIVE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NEGATIVE, 0); }
	public COLUMNS(): TerminalNode[];
	public COLUMNS(i: number): TerminalNode;
	public COLUMNS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COLUMNS);
		} else {
			return this.getToken(StarRocksSqlParser.COLUMNS, i);
		}
	}
	public TERMINATED(): TerminalNode[];
	public TERMINATED(i: number): TerminalNode;
	public TERMINATED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.TERMINATED);
		} else {
			return this.getToken(StarRocksSqlParser.TERMINATED, i);
		}
	}
	public BY(): TerminalNode[];
	public BY(i: number): TerminalNode;
	public BY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.BY);
		} else {
			return this.getToken(StarRocksSqlParser.BY, i);
		}
	}
	public ROWS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ROWS, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public PATH(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PATH, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.AS, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SET, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public partitionNames(): PartitionNamesContext | undefined {
		return this.tryGetRuleContext(0, PartitionNamesContext);
	}
	public string(): StringContext[];
	public string(i: number): StringContext;
	public string(i?: number): StringContext | StringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringContext);
		} else {
			return this.getRuleContext(i, StringContext);
		}
	}
	public fileFormat(): FileFormatContext | undefined {
		return this.tryGetRuleContext(0, FileFormatContext);
	}
	public formatProps(): FormatPropsContext | undefined {
		return this.tryGetRuleContext(0, FormatPropsContext);
	}
	public columnAliases(): ColumnAliasesContext | undefined {
		return this.tryGetRuleContext(0, ColumnAliasesContext);
	}
	public identifierList(): IdentifierListContext | undefined {
		return this.tryGetRuleContext(0, IdentifierListContext);
	}
	public classifier(): ClassifierContext | undefined {
		return this.tryGetRuleContext(0, ClassifierContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dataDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDataDesc) {
			listener.enterDataDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDataDesc) {
			listener.exitDataDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDataDesc) {
			return visitor.visitDataDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FormatPropsContext extends ParserRuleContext {
	public _encloseCharacter!: StringContext;
	public _escapeCharacter!: StringContext;
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public SKIP_HEADER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SKIP_HEADER, 0); }
	public EQ(): TerminalNode[];
	public EQ(i: number): TerminalNode;
	public EQ(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.EQ);
		} else {
			return this.getToken(StarRocksSqlParser.EQ, i);
		}
	}
	public INTEGER_VALUE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INTEGER_VALUE, 0); }
	public TRIM_SPACE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TRIM_SPACE, 0); }
	public booleanValue(): BooleanValueContext | undefined {
		return this.tryGetRuleContext(0, BooleanValueContext);
	}
	public ENCLOSE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ENCLOSE, 0); }
	public ESCAPE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ESCAPE, 0); }
	public string(): StringContext[];
	public string(i: number): StringContext;
	public string(i?: number): StringContext | StringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringContext);
		} else {
			return this.getRuleContext(i, StringContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_formatProps; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterFormatProps) {
			listener.enterFormatProps(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitFormatProps) {
			listener.exitFormatProps(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitFormatProps) {
			return visitor.visitFormatProps(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BrokerDescContext extends ParserRuleContext {
	public _props!: PropertyListContext;
	public _name!: IdentifierOrStringContext;
	public WITH(): TerminalNode { return this.getToken(StarRocksSqlParser.WITH, 0); }
	public BROKER(): TerminalNode { return this.getToken(StarRocksSqlParser.BROKER, 0); }
	public propertyList(): PropertyListContext | undefined {
		return this.tryGetRuleContext(0, PropertyListContext);
	}
	public identifierOrString(): IdentifierOrStringContext | undefined {
		return this.tryGetRuleContext(0, IdentifierOrStringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_brokerDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterBrokerDesc) {
			listener.enterBrokerDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitBrokerDesc) {
			listener.exitBrokerDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitBrokerDesc) {
			return visitor.visitBrokerDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ResourceDescContext extends ParserRuleContext {
	public _name!: IdentifierOrStringContext;
	public _props!: PropertyListContext;
	public WITH(): TerminalNode { return this.getToken(StarRocksSqlParser.WITH, 0); }
	public RESOURCE(): TerminalNode { return this.getToken(StarRocksSqlParser.RESOURCE, 0); }
	public identifierOrString(): IdentifierOrStringContext {
		return this.getRuleContext(0, IdentifierOrStringContext);
	}
	public propertyList(): PropertyListContext | undefined {
		return this.tryGetRuleContext(0, PropertyListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_resourceDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterResourceDesc) {
			listener.enterResourceDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitResourceDesc) {
			listener.exitResourceDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitResourceDesc) {
			return visitor.visitResourceDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowLoadStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public LOAD(): TerminalNode { return this.getToken(StarRocksSqlParser.LOAD, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ALL, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ORDER, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BY, 0); }
	public sortItem(): SortItemContext[];
	public sortItem(i: number): SortItemContext;
	public sortItem(i?: number): SortItemContext | SortItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SortItemContext);
		} else {
			return this.getRuleContext(i, SortItemContext);
		}
	}
	public limitElement(): LimitElementContext | undefined {
		return this.tryGetRuleContext(0, LimitElementContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showLoadStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowLoadStatement) {
			listener.enterShowLoadStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowLoadStatement) {
			listener.exitShowLoadStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowLoadStatement) {
			return visitor.visitShowLoadStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowLoadWarningsStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public LOAD(): TerminalNode { return this.getToken(StarRocksSqlParser.LOAD, 0); }
	public WARNINGS(): TerminalNode { return this.getToken(StarRocksSqlParser.WARNINGS, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public limitElement(): LimitElementContext | undefined {
		return this.tryGetRuleContext(0, LimitElementContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ON, 0); }
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showLoadWarningsStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowLoadWarningsStatement) {
			listener.enterShowLoadWarningsStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowLoadWarningsStatement) {
			listener.exitShowLoadWarningsStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowLoadWarningsStatement) {
			return visitor.visitShowLoadWarningsStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CancelLoadStatementContext extends ParserRuleContext {
	public CANCEL(): TerminalNode { return this.getToken(StarRocksSqlParser.CANCEL, 0); }
	public LOAD(): TerminalNode { return this.getToken(StarRocksSqlParser.LOAD, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_cancelLoadStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCancelLoadStatement) {
			listener.enterCancelLoadStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCancelLoadStatement) {
			listener.exitCancelLoadStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCancelLoadStatement) {
			return visitor.visitCancelLoadStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterLoadStatementContext extends ParserRuleContext {
	public _db!: QualifiedNameContext;
	public _name!: IdentifierContext;
	public ALTER(): TerminalNode { return this.getToken(StarRocksSqlParser.ALTER, 0); }
	public LOAD(): TerminalNode { return this.getToken(StarRocksSqlParser.LOAD, 0); }
	public FOR(): TerminalNode { return this.getToken(StarRocksSqlParser.FOR, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DOT, 0); }
	public jobProperties(): JobPropertiesContext | undefined {
		return this.tryGetRuleContext(0, JobPropertiesContext);
	}
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_alterLoadStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAlterLoadStatement) {
			listener.enterAlterLoadStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAlterLoadStatement) {
			listener.exitAlterLoadStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAlterLoadStatement) {
			return visitor.visitAlterLoadStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CancelCompactionStatementContext extends ParserRuleContext {
	public CANCEL(): TerminalNode { return this.getToken(StarRocksSqlParser.CANCEL, 0); }
	public COMPACTION(): TerminalNode { return this.getToken(StarRocksSqlParser.COMPACTION, 0); }
	public WHERE(): TerminalNode { return this.getToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_cancelCompactionStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCancelCompactionStatement) {
			listener.enterCancelCompactionStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCancelCompactionStatement) {
			listener.exitCancelCompactionStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCancelCompactionStatement) {
			return visitor.visitCancelCompactionStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowAuthorStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public AUTHORS(): TerminalNode { return this.getToken(StarRocksSqlParser.AUTHORS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showAuthorStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowAuthorStatement) {
			listener.enterShowAuthorStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowAuthorStatement) {
			listener.exitShowAuthorStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowAuthorStatement) {
			return visitor.visitShowAuthorStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowBackendsStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public BACKENDS(): TerminalNode { return this.getToken(StarRocksSqlParser.BACKENDS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showBackendsStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowBackendsStatement) {
			listener.enterShowBackendsStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowBackendsStatement) {
			listener.exitShowBackendsStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowBackendsStatement) {
			return visitor.visitShowBackendsStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowBrokerStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public BROKER(): TerminalNode { return this.getToken(StarRocksSqlParser.BROKER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showBrokerStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowBrokerStatement) {
			listener.enterShowBrokerStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowBrokerStatement) {
			listener.exitShowBrokerStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowBrokerStatement) {
			return visitor.visitShowBrokerStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowCharsetStatementContext extends ParserRuleContext {
	public _pattern!: StringContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public CHAR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CHAR, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SET, 0); }
	public CHARSET(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CHARSET, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CHARACTER, 0); }
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LIKE, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showCharsetStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowCharsetStatement) {
			listener.enterShowCharsetStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowCharsetStatement) {
			listener.exitShowCharsetStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowCharsetStatement) {
			return visitor.visitShowCharsetStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowCollationStatementContext extends ParserRuleContext {
	public _pattern!: StringContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public COLLATION(): TerminalNode { return this.getToken(StarRocksSqlParser.COLLATION, 0); }
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LIKE, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showCollationStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowCollationStatement) {
			listener.enterShowCollationStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowCollationStatement) {
			listener.exitShowCollationStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowCollationStatement) {
			return visitor.visitShowCollationStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowDeleteStatementContext extends ParserRuleContext {
	public _db!: QualifiedNameContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public DELETE(): TerminalNode { return this.getToken(StarRocksSqlParser.DELETE, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IN, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showDeleteStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowDeleteStatement) {
			listener.enterShowDeleteStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowDeleteStatement) {
			listener.exitShowDeleteStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowDeleteStatement) {
			return visitor.visitShowDeleteStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowDynamicPartitionStatementContext extends ParserRuleContext {
	public _db!: QualifiedNameContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public DYNAMIC(): TerminalNode { return this.getToken(StarRocksSqlParser.DYNAMIC, 0); }
	public PARTITION(): TerminalNode { return this.getToken(StarRocksSqlParser.PARTITION, 0); }
	public TABLES(): TerminalNode { return this.getToken(StarRocksSqlParser.TABLES, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IN, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showDynamicPartitionStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowDynamicPartitionStatement) {
			listener.enterShowDynamicPartitionStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowDynamicPartitionStatement) {
			listener.exitShowDynamicPartitionStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowDynamicPartitionStatement) {
			return visitor.visitShowDynamicPartitionStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowEventsStatementContext extends ParserRuleContext {
	public _catalog!: QualifiedNameContext;
	public _pattern!: StringContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public EVENTS(): TerminalNode { return this.getToken(StarRocksSqlParser.EVENTS, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IN, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LIKE, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showEventsStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowEventsStatement) {
			listener.enterShowEventsStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowEventsStatement) {
			listener.exitShowEventsStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowEventsStatement) {
			return visitor.visitShowEventsStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowEnginesStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public ENGINES(): TerminalNode { return this.getToken(StarRocksSqlParser.ENGINES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showEnginesStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowEnginesStatement) {
			listener.enterShowEnginesStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowEnginesStatement) {
			listener.exitShowEnginesStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowEnginesStatement) {
			return visitor.visitShowEnginesStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowFrontendsStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public FRONTENDS(): TerminalNode { return this.getToken(StarRocksSqlParser.FRONTENDS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showFrontendsStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowFrontendsStatement) {
			listener.enterShowFrontendsStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowFrontendsStatement) {
			listener.exitShowFrontendsStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowFrontendsStatement) {
			return visitor.visitShowFrontendsStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowPluginsStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public PLUGINS(): TerminalNode { return this.getToken(StarRocksSqlParser.PLUGINS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showPluginsStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowPluginsStatement) {
			listener.enterShowPluginsStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowPluginsStatement) {
			listener.exitShowPluginsStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowPluginsStatement) {
			return visitor.visitShowPluginsStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowRepositoriesStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public REPOSITORIES(): TerminalNode { return this.getToken(StarRocksSqlParser.REPOSITORIES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showRepositoriesStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowRepositoriesStatement) {
			listener.enterShowRepositoriesStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowRepositoriesStatement) {
			listener.exitShowRepositoriesStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowRepositoriesStatement) {
			return visitor.visitShowRepositoriesStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowOpenTableStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public OPEN(): TerminalNode { return this.getToken(StarRocksSqlParser.OPEN, 0); }
	public TABLES(): TerminalNode { return this.getToken(StarRocksSqlParser.TABLES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showOpenTableStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowOpenTableStatement) {
			listener.enterShowOpenTableStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowOpenTableStatement) {
			listener.exitShowOpenTableStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowOpenTableStatement) {
			return visitor.visitShowOpenTableStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowPrivilegesStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public PRIVILEGES(): TerminalNode { return this.getToken(StarRocksSqlParser.PRIVILEGES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showPrivilegesStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowPrivilegesStatement) {
			listener.enterShowPrivilegesStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowPrivilegesStatement) {
			listener.exitShowPrivilegesStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowPrivilegesStatement) {
			return visitor.visitShowPrivilegesStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowProcedureStatementContext extends ParserRuleContext {
	public _pattern!: StringContext;
	public _where!: ExpressionContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public STATUS(): TerminalNode { return this.getToken(StarRocksSqlParser.STATUS, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PROCEDURE, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FUNCTION, 0); }
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LIKE, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showProcedureStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowProcedureStatement) {
			listener.enterShowProcedureStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowProcedureStatement) {
			listener.exitShowProcedureStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowProcedureStatement) {
			return visitor.visitShowProcedureStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowProcStatementContext extends ParserRuleContext {
	public _path!: StringContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public PROC(): TerminalNode { return this.getToken(StarRocksSqlParser.PROC, 0); }
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showProcStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowProcStatement) {
			listener.enterShowProcStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowProcStatement) {
			listener.exitShowProcStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowProcStatement) {
			return visitor.visitShowProcStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowProcesslistStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public PROCESSLIST(): TerminalNode { return this.getToken(StarRocksSqlParser.PROCESSLIST, 0); }
	public FULL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FULL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showProcesslistStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowProcesslistStatement) {
			listener.enterShowProcesslistStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowProcesslistStatement) {
			listener.exitShowProcesslistStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowProcesslistStatement) {
			return visitor.visitShowProcesslistStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowProfilelistStatementContext extends ParserRuleContext {
	public _limit!: Token;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public PROFILELIST(): TerminalNode { return this.getToken(StarRocksSqlParser.PROFILELIST, 0); }
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LIMIT, 0); }
	public INTEGER_VALUE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INTEGER_VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showProfilelistStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowProfilelistStatement) {
			listener.enterShowProfilelistStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowProfilelistStatement) {
			listener.exitShowProfilelistStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowProfilelistStatement) {
			return visitor.visitShowProfilelistStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowStatusStatementContext extends ParserRuleContext {
	public _pattern!: StringContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public STATUS(): TerminalNode { return this.getToken(StarRocksSqlParser.STATUS, 0); }
	public varType(): VarTypeContext | undefined {
		return this.tryGetRuleContext(0, VarTypeContext);
	}
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LIKE, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showStatusStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowStatusStatement) {
			listener.enterShowStatusStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowStatusStatement) {
			listener.exitShowStatusStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowStatusStatement) {
			return visitor.visitShowStatusStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowTabletStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public TABLET(): TerminalNode { return this.getToken(StarRocksSqlParser.TABLET, 0); }
	public INTEGER_VALUE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INTEGER_VALUE, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	public partitionNames(): PartitionNamesContext | undefined {
		return this.tryGetRuleContext(0, PartitionNamesContext);
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ORDER, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BY, 0); }
	public sortItem(): SortItemContext[];
	public sortItem(i: number): SortItemContext;
	public sortItem(i?: number): SortItemContext | SortItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SortItemContext);
		} else {
			return this.getRuleContext(i, SortItemContext);
		}
	}
	public limitElement(): LimitElementContext | undefined {
		return this.tryGetRuleContext(0, LimitElementContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showTabletStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowTabletStatement) {
			listener.enterShowTabletStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowTabletStatement) {
			listener.exitShowTabletStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowTabletStatement) {
			return visitor.visitShowTabletStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowTransactionStatementContext extends ParserRuleContext {
	public _db!: QualifiedNameContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public TRANSACTION(): TerminalNode { return this.getToken(StarRocksSqlParser.TRANSACTION, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IN, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showTransactionStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowTransactionStatement) {
			listener.enterShowTransactionStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowTransactionStatement) {
			listener.exitShowTransactionStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowTransactionStatement) {
			return visitor.visitShowTransactionStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowTriggersStatementContext extends ParserRuleContext {
	public _catalog!: QualifiedNameContext;
	public _pattern!: StringContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public TRIGGERS(): TerminalNode { return this.getToken(StarRocksSqlParser.TRIGGERS, 0); }
	public FULL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FULL, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IN, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LIKE, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showTriggersStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowTriggersStatement) {
			listener.enterShowTriggersStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowTriggersStatement) {
			listener.exitShowTriggersStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowTriggersStatement) {
			return visitor.visitShowTriggersStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowUserPropertyStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public PROPERTY(): TerminalNode { return this.getToken(StarRocksSqlParser.PROPERTY, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FOR, 0); }
	public string(): StringContext[];
	public string(i: number): StringContext;
	public string(i?: number): StringContext | StringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringContext);
		} else {
			return this.getRuleContext(i, StringContext);
		}
	}
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LIKE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showUserPropertyStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowUserPropertyStatement) {
			listener.enterShowUserPropertyStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowUserPropertyStatement) {
			listener.exitShowUserPropertyStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowUserPropertyStatement) {
			return visitor.visitShowUserPropertyStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowVariablesStatementContext extends ParserRuleContext {
	public _pattern!: StringContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public VARIABLES(): TerminalNode { return this.getToken(StarRocksSqlParser.VARIABLES, 0); }
	public varType(): VarTypeContext | undefined {
		return this.tryGetRuleContext(0, VarTypeContext);
	}
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LIKE, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showVariablesStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowVariablesStatement) {
			listener.enterShowVariablesStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowVariablesStatement) {
			listener.exitShowVariablesStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowVariablesStatement) {
			return visitor.visitShowVariablesStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowWarningStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public WARNINGS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WARNINGS, 0); }
	public ERRORS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ERRORS, 0); }
	public limitElement(): LimitElementContext | undefined {
		return this.tryGetRuleContext(0, LimitElementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showWarningStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowWarningStatement) {
			listener.enterShowWarningStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowWarningStatement) {
			listener.exitShowWarningStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowWarningStatement) {
			return visitor.visitShowWarningStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HelpStatementContext extends ParserRuleContext {
	public HELP(): TerminalNode { return this.getToken(StarRocksSqlParser.HELP, 0); }
	public identifierOrString(): IdentifierOrStringContext {
		return this.getRuleContext(0, IdentifierOrStringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_helpStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterHelpStatement) {
			listener.enterHelpStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitHelpStatement) {
			listener.exitHelpStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitHelpStatement) {
			return visitor.visitHelpStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateUserStatementContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public USER(): TerminalNode { return this.getToken(StarRocksSqlParser.USER, 0); }
	public user(): UserContext {
		return this.getRuleContext(0, UserContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	public authOption(): AuthOptionContext | undefined {
		return this.tryGetRuleContext(0, AuthOptionContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DEFAULT, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ROLE, 0); }
	public roleList(): RoleListContext | undefined {
		return this.tryGetRuleContext(0, RoleListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_createUserStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCreateUserStatement) {
			listener.enterCreateUserStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCreateUserStatement) {
			listener.exitCreateUserStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCreateUserStatement) {
			return visitor.visitCreateUserStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropUserStatementContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public USER(): TerminalNode { return this.getToken(StarRocksSqlParser.USER, 0); }
	public user(): UserContext {
		return this.getRuleContext(0, UserContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropUserStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropUserStatement) {
			listener.enterDropUserStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropUserStatement) {
			listener.exitDropUserStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropUserStatement) {
			return visitor.visitDropUserStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterUserStatementContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(StarRocksSqlParser.ALTER, 0); }
	public USER(): TerminalNode { return this.getToken(StarRocksSqlParser.USER, 0); }
	public user(): UserContext {
		return this.getRuleContext(0, UserContext);
	}
	public authOption(): AuthOptionContext | undefined {
		return this.tryGetRuleContext(0, AuthOptionContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DEFAULT, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ROLE, 0); }
	public NONE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NONE, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ALL, 0); }
	public roleList(): RoleListContext | undefined {
		return this.tryGetRuleContext(0, RoleListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_alterUserStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAlterUserStatement) {
			listener.enterAlterUserStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAlterUserStatement) {
			listener.exitAlterUserStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAlterUserStatement) {
			return visitor.visitAlterUserStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowUserStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.USER, 0); }
	public USERS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.USERS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showUserStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowUserStatement) {
			listener.enterShowUserStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowUserStatement) {
			listener.exitShowUserStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowUserStatement) {
			return visitor.visitShowUserStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowAuthenticationStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showAuthenticationStatement; }
	public copyFrom(ctx: ShowAuthenticationStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class ShowAllAuthenticationContext extends ShowAuthenticationStatementContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public ALL(): TerminalNode { return this.getToken(StarRocksSqlParser.ALL, 0); }
	public AUTHENTICATION(): TerminalNode { return this.getToken(StarRocksSqlParser.AUTHENTICATION, 0); }
	constructor(ctx: ShowAuthenticationStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowAllAuthentication) {
			listener.enterShowAllAuthentication(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowAllAuthentication) {
			listener.exitShowAllAuthentication(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowAllAuthentication) {
			return visitor.visitShowAllAuthentication(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowAuthenticationForUserContext extends ShowAuthenticationStatementContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public AUTHENTICATION(): TerminalNode { return this.getToken(StarRocksSqlParser.AUTHENTICATION, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FOR, 0); }
	public user(): UserContext | undefined {
		return this.tryGetRuleContext(0, UserContext);
	}
	constructor(ctx: ShowAuthenticationStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowAuthenticationForUser) {
			listener.enterShowAuthenticationForUser(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowAuthenticationForUser) {
			listener.exitShowAuthenticationForUser(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowAuthenticationForUser) {
			return visitor.visitShowAuthenticationForUser(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExecuteAsStatementContext extends ParserRuleContext {
	public EXECUTE(): TerminalNode { return this.getToken(StarRocksSqlParser.EXECUTE, 0); }
	public AS(): TerminalNode { return this.getToken(StarRocksSqlParser.AS, 0); }
	public user(): UserContext {
		return this.getRuleContext(0, UserContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WITH, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NO, 0); }
	public REVERT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.REVERT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_executeAsStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterExecuteAsStatement) {
			listener.enterExecuteAsStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitExecuteAsStatement) {
			listener.exitExecuteAsStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitExecuteAsStatement) {
			return visitor.visitExecuteAsStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateRoleStatementContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public ROLE(): TerminalNode { return this.getToken(StarRocksSqlParser.ROLE, 0); }
	public roleList(): RoleListContext {
		return this.getRuleContext(0, RoleListContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	public comment(): CommentContext | undefined {
		return this.tryGetRuleContext(0, CommentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_createRoleStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCreateRoleStatement) {
			listener.enterCreateRoleStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCreateRoleStatement) {
			listener.exitCreateRoleStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCreateRoleStatement) {
			return visitor.visitCreateRoleStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterRoleStatementContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(StarRocksSqlParser.ALTER, 0); }
	public ROLE(): TerminalNode { return this.getToken(StarRocksSqlParser.ROLE, 0); }
	public roleList(): RoleListContext {
		return this.getRuleContext(0, RoleListContext);
	}
	public SET(): TerminalNode { return this.getToken(StarRocksSqlParser.SET, 0); }
	public COMMENT(): TerminalNode { return this.getToken(StarRocksSqlParser.COMMENT, 0); }
	public EQ(): TerminalNode { return this.getToken(StarRocksSqlParser.EQ, 0); }
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_alterRoleStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAlterRoleStatement) {
			listener.enterAlterRoleStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAlterRoleStatement) {
			listener.exitAlterRoleStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAlterRoleStatement) {
			return visitor.visitAlterRoleStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropRoleStatementContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public ROLE(): TerminalNode { return this.getToken(StarRocksSqlParser.ROLE, 0); }
	public roleList(): RoleListContext {
		return this.getRuleContext(0, RoleListContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropRoleStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropRoleStatement) {
			listener.enterDropRoleStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropRoleStatement) {
			listener.exitDropRoleStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropRoleStatement) {
			return visitor.visitDropRoleStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowRolesStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public ROLES(): TerminalNode { return this.getToken(StarRocksSqlParser.ROLES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showRolesStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowRolesStatement) {
			listener.enterShowRolesStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowRolesStatement) {
			listener.exitShowRolesStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowRolesStatement) {
			return visitor.visitShowRolesStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GrantRoleStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_grantRoleStatement; }
	public copyFrom(ctx: GrantRoleStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class GrantRoleToUserContext extends GrantRoleStatementContext {
	public GRANT(): TerminalNode { return this.getToken(StarRocksSqlParser.GRANT, 0); }
	public identifierOrStringList(): IdentifierOrStringListContext {
		return this.getRuleContext(0, IdentifierOrStringListContext);
	}
	public TO(): TerminalNode { return this.getToken(StarRocksSqlParser.TO, 0); }
	public user(): UserContext {
		return this.getRuleContext(0, UserContext);
	}
	public USER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.USER, 0); }
	constructor(ctx: GrantRoleStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterGrantRoleToUser) {
			listener.enterGrantRoleToUser(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitGrantRoleToUser) {
			listener.exitGrantRoleToUser(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitGrantRoleToUser) {
			return visitor.visitGrantRoleToUser(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class GrantRoleToRoleContext extends GrantRoleStatementContext {
	public GRANT(): TerminalNode { return this.getToken(StarRocksSqlParser.GRANT, 0); }
	public identifierOrStringList(): IdentifierOrStringListContext {
		return this.getRuleContext(0, IdentifierOrStringListContext);
	}
	public TO(): TerminalNode { return this.getToken(StarRocksSqlParser.TO, 0); }
	public ROLE(): TerminalNode { return this.getToken(StarRocksSqlParser.ROLE, 0); }
	public identifierOrString(): IdentifierOrStringContext {
		return this.getRuleContext(0, IdentifierOrStringContext);
	}
	constructor(ctx: GrantRoleStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterGrantRoleToRole) {
			listener.enterGrantRoleToRole(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitGrantRoleToRole) {
			listener.exitGrantRoleToRole(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitGrantRoleToRole) {
			return visitor.visitGrantRoleToRole(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RevokeRoleStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_revokeRoleStatement; }
	public copyFrom(ctx: RevokeRoleStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class RevokeRoleFromUserContext extends RevokeRoleStatementContext {
	public REVOKE(): TerminalNode { return this.getToken(StarRocksSqlParser.REVOKE, 0); }
	public identifierOrStringList(): IdentifierOrStringListContext {
		return this.getRuleContext(0, IdentifierOrStringListContext);
	}
	public FROM(): TerminalNode { return this.getToken(StarRocksSqlParser.FROM, 0); }
	public user(): UserContext {
		return this.getRuleContext(0, UserContext);
	}
	public USER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.USER, 0); }
	constructor(ctx: RevokeRoleStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterRevokeRoleFromUser) {
			listener.enterRevokeRoleFromUser(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitRevokeRoleFromUser) {
			listener.exitRevokeRoleFromUser(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitRevokeRoleFromUser) {
			return visitor.visitRevokeRoleFromUser(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RevokeRoleFromRoleContext extends RevokeRoleStatementContext {
	public REVOKE(): TerminalNode { return this.getToken(StarRocksSqlParser.REVOKE, 0); }
	public identifierOrStringList(): IdentifierOrStringListContext {
		return this.getRuleContext(0, IdentifierOrStringListContext);
	}
	public FROM(): TerminalNode { return this.getToken(StarRocksSqlParser.FROM, 0); }
	public ROLE(): TerminalNode { return this.getToken(StarRocksSqlParser.ROLE, 0); }
	public identifierOrString(): IdentifierOrStringContext {
		return this.getRuleContext(0, IdentifierOrStringContext);
	}
	constructor(ctx: RevokeRoleStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterRevokeRoleFromRole) {
			listener.enterRevokeRoleFromRole(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitRevokeRoleFromRole) {
			listener.exitRevokeRoleFromRole(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitRevokeRoleFromRole) {
			return visitor.visitRevokeRoleFromRole(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetRoleStatementContext extends ParserRuleContext {
	public SET(): TerminalNode { return this.getToken(StarRocksSqlParser.SET, 0); }
	public ROLE(): TerminalNode { return this.getToken(StarRocksSqlParser.ROLE, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DEFAULT, 0); }
	public NONE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NONE, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ALL, 0); }
	public EXCEPT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXCEPT, 0); }
	public roleList(): RoleListContext | undefined {
		return this.tryGetRuleContext(0, RoleListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_setRoleStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSetRoleStatement) {
			listener.enterSetRoleStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSetRoleStatement) {
			listener.exitSetRoleStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSetRoleStatement) {
			return visitor.visitSetRoleStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetDefaultRoleStatementContext extends ParserRuleContext {
	public SET(): TerminalNode { return this.getToken(StarRocksSqlParser.SET, 0); }
	public DEFAULT(): TerminalNode { return this.getToken(StarRocksSqlParser.DEFAULT, 0); }
	public ROLE(): TerminalNode { return this.getToken(StarRocksSqlParser.ROLE, 0); }
	public TO(): TerminalNode { return this.getToken(StarRocksSqlParser.TO, 0); }
	public user(): UserContext {
		return this.getRuleContext(0, UserContext);
	}
	public NONE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NONE, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ALL, 0); }
	public roleList(): RoleListContext | undefined {
		return this.tryGetRuleContext(0, RoleListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_setDefaultRoleStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSetDefaultRoleStatement) {
			listener.enterSetDefaultRoleStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSetDefaultRoleStatement) {
			listener.exitSetDefaultRoleStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSetDefaultRoleStatement) {
			return visitor.visitSetDefaultRoleStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GrantRevokeClauseContext extends ParserRuleContext {
	public user(): UserContext | undefined {
		return this.tryGetRuleContext(0, UserContext);
	}
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ROLE, 0); }
	public identifierOrString(): IdentifierOrStringContext | undefined {
		return this.tryGetRuleContext(0, IdentifierOrStringContext);
	}
	public USER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.USER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_grantRevokeClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterGrantRevokeClause) {
			listener.enterGrantRevokeClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitGrantRevokeClause) {
			listener.exitGrantRevokeClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitGrantRevokeClause) {
			return visitor.visitGrantRevokeClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GrantPrivilegeStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_grantPrivilegeStatement; }
	public copyFrom(ctx: GrantPrivilegeStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class GrantOnUserContext extends GrantPrivilegeStatementContext {
	public GRANT(): TerminalNode[];
	public GRANT(i: number): TerminalNode;
	public GRANT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.GRANT);
		} else {
			return this.getToken(StarRocksSqlParser.GRANT, i);
		}
	}
	public IMPERSONATE(): TerminalNode { return this.getToken(StarRocksSqlParser.IMPERSONATE, 0); }
	public ON(): TerminalNode { return this.getToken(StarRocksSqlParser.ON, 0); }
	public USER(): TerminalNode { return this.getToken(StarRocksSqlParser.USER, 0); }
	public user(): UserContext[];
	public user(i: number): UserContext;
	public user(i?: number): UserContext | UserContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserContext);
		} else {
			return this.getRuleContext(i, UserContext);
		}
	}
	public TO(): TerminalNode { return this.getToken(StarRocksSqlParser.TO, 0); }
	public grantRevokeClause(): GrantRevokeClauseContext {
		return this.getRuleContext(0, GrantRevokeClauseContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WITH, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.OPTION, 0); }
	constructor(ctx: GrantPrivilegeStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterGrantOnUser) {
			listener.enterGrantOnUser(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitGrantOnUser) {
			listener.exitGrantOnUser(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitGrantOnUser) {
			return visitor.visitGrantOnUser(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class GrantOnTableBriefContext extends GrantPrivilegeStatementContext {
	public GRANT(): TerminalNode[];
	public GRANT(i: number): TerminalNode;
	public GRANT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.GRANT);
		} else {
			return this.getToken(StarRocksSqlParser.GRANT, i);
		}
	}
	public privilegeTypeList(): PrivilegeTypeListContext {
		return this.getRuleContext(0, PrivilegeTypeListContext);
	}
	public ON(): TerminalNode { return this.getToken(StarRocksSqlParser.ON, 0); }
	public privObjectNameList(): PrivObjectNameListContext {
		return this.getRuleContext(0, PrivObjectNameListContext);
	}
	public TO(): TerminalNode { return this.getToken(StarRocksSqlParser.TO, 0); }
	public grantRevokeClause(): GrantRevokeClauseContext {
		return this.getRuleContext(0, GrantRevokeClauseContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WITH, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.OPTION, 0); }
	constructor(ctx: GrantPrivilegeStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterGrantOnTableBrief) {
			listener.enterGrantOnTableBrief(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitGrantOnTableBrief) {
			listener.exitGrantOnTableBrief(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitGrantOnTableBrief) {
			return visitor.visitGrantOnTableBrief(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class GrantOnFuncContext extends GrantPrivilegeStatementContext {
	public GRANT(): TerminalNode[];
	public GRANT(i: number): TerminalNode;
	public GRANT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.GRANT);
		} else {
			return this.getToken(StarRocksSqlParser.GRANT, i);
		}
	}
	public privilegeTypeList(): PrivilegeTypeListContext {
		return this.getRuleContext(0, PrivilegeTypeListContext);
	}
	public ON(): TerminalNode { return this.getToken(StarRocksSqlParser.ON, 0); }
	public FUNCTION(): TerminalNode { return this.getToken(StarRocksSqlParser.FUNCTION, 0); }
	public privFunctionObjectNameList(): PrivFunctionObjectNameListContext {
		return this.getRuleContext(0, PrivFunctionObjectNameListContext);
	}
	public TO(): TerminalNode { return this.getToken(StarRocksSqlParser.TO, 0); }
	public grantRevokeClause(): GrantRevokeClauseContext {
		return this.getRuleContext(0, GrantRevokeClauseContext);
	}
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.GLOBAL, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WITH, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.OPTION, 0); }
	constructor(ctx: GrantPrivilegeStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterGrantOnFunc) {
			listener.enterGrantOnFunc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitGrantOnFunc) {
			listener.exitGrantOnFunc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitGrantOnFunc) {
			return visitor.visitGrantOnFunc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class GrantOnSystemContext extends GrantPrivilegeStatementContext {
	public GRANT(): TerminalNode[];
	public GRANT(i: number): TerminalNode;
	public GRANT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.GRANT);
		} else {
			return this.getToken(StarRocksSqlParser.GRANT, i);
		}
	}
	public privilegeTypeList(): PrivilegeTypeListContext {
		return this.getRuleContext(0, PrivilegeTypeListContext);
	}
	public ON(): TerminalNode { return this.getToken(StarRocksSqlParser.ON, 0); }
	public SYSTEM(): TerminalNode { return this.getToken(StarRocksSqlParser.SYSTEM, 0); }
	public TO(): TerminalNode { return this.getToken(StarRocksSqlParser.TO, 0); }
	public grantRevokeClause(): GrantRevokeClauseContext {
		return this.getRuleContext(0, GrantRevokeClauseContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WITH, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.OPTION, 0); }
	constructor(ctx: GrantPrivilegeStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterGrantOnSystem) {
			listener.enterGrantOnSystem(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitGrantOnSystem) {
			listener.exitGrantOnSystem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitGrantOnSystem) {
			return visitor.visitGrantOnSystem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class GrantOnPrimaryObjContext extends GrantPrivilegeStatementContext {
	public GRANT(): TerminalNode[];
	public GRANT(i: number): TerminalNode;
	public GRANT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.GRANT);
		} else {
			return this.getToken(StarRocksSqlParser.GRANT, i);
		}
	}
	public privilegeTypeList(): PrivilegeTypeListContext {
		return this.getRuleContext(0, PrivilegeTypeListContext);
	}
	public ON(): TerminalNode { return this.getToken(StarRocksSqlParser.ON, 0); }
	public privObjectType(): PrivObjectTypeContext {
		return this.getRuleContext(0, PrivObjectTypeContext);
	}
	public privObjectNameList(): PrivObjectNameListContext {
		return this.getRuleContext(0, PrivObjectNameListContext);
	}
	public TO(): TerminalNode { return this.getToken(StarRocksSqlParser.TO, 0); }
	public grantRevokeClause(): GrantRevokeClauseContext {
		return this.getRuleContext(0, GrantRevokeClauseContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WITH, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.OPTION, 0); }
	constructor(ctx: GrantPrivilegeStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterGrantOnPrimaryObj) {
			listener.enterGrantOnPrimaryObj(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitGrantOnPrimaryObj) {
			listener.exitGrantOnPrimaryObj(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitGrantOnPrimaryObj) {
			return visitor.visitGrantOnPrimaryObj(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class GrantOnAllContext extends GrantPrivilegeStatementContext {
	public _isAll!: Token;
	public GRANT(): TerminalNode[];
	public GRANT(i: number): TerminalNode;
	public GRANT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.GRANT);
		} else {
			return this.getToken(StarRocksSqlParser.GRANT, i);
		}
	}
	public privilegeTypeList(): PrivilegeTypeListContext {
		return this.getRuleContext(0, PrivilegeTypeListContext);
	}
	public ON(): TerminalNode { return this.getToken(StarRocksSqlParser.ON, 0); }
	public ALL(): TerminalNode[];
	public ALL(i: number): TerminalNode;
	public ALL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.ALL);
		} else {
			return this.getToken(StarRocksSqlParser.ALL, i);
		}
	}
	public privObjectTypePlural(): PrivObjectTypePluralContext {
		return this.getRuleContext(0, PrivObjectTypePluralContext);
	}
	public TO(): TerminalNode { return this.getToken(StarRocksSqlParser.TO, 0); }
	public grantRevokeClause(): GrantRevokeClauseContext {
		return this.getRuleContext(0, GrantRevokeClauseContext);
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IN, 0); }
	public DATABASES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DATABASES, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DATABASE, 0); }
	public identifierOrString(): IdentifierOrStringContext | undefined {
		return this.tryGetRuleContext(0, IdentifierOrStringContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WITH, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.OPTION, 0); }
	constructor(ctx: GrantPrivilegeStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterGrantOnAll) {
			listener.enterGrantOnAll(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitGrantOnAll) {
			listener.exitGrantOnAll(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitGrantOnAll) {
			return visitor.visitGrantOnAll(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RevokePrivilegeStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_revokePrivilegeStatement; }
	public copyFrom(ctx: RevokePrivilegeStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class RevokeOnUserContext extends RevokePrivilegeStatementContext {
	public REVOKE(): TerminalNode { return this.getToken(StarRocksSqlParser.REVOKE, 0); }
	public IMPERSONATE(): TerminalNode { return this.getToken(StarRocksSqlParser.IMPERSONATE, 0); }
	public ON(): TerminalNode { return this.getToken(StarRocksSqlParser.ON, 0); }
	public USER(): TerminalNode { return this.getToken(StarRocksSqlParser.USER, 0); }
	public user(): UserContext[];
	public user(i: number): UserContext;
	public user(i?: number): UserContext | UserContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserContext);
		} else {
			return this.getRuleContext(i, UserContext);
		}
	}
	public FROM(): TerminalNode { return this.getToken(StarRocksSqlParser.FROM, 0); }
	public grantRevokeClause(): GrantRevokeClauseContext {
		return this.getRuleContext(0, GrantRevokeClauseContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(ctx: RevokePrivilegeStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterRevokeOnUser) {
			listener.enterRevokeOnUser(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitRevokeOnUser) {
			listener.exitRevokeOnUser(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitRevokeOnUser) {
			return visitor.visitRevokeOnUser(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RevokeOnTableBriefContext extends RevokePrivilegeStatementContext {
	public REVOKE(): TerminalNode { return this.getToken(StarRocksSqlParser.REVOKE, 0); }
	public privilegeTypeList(): PrivilegeTypeListContext {
		return this.getRuleContext(0, PrivilegeTypeListContext);
	}
	public ON(): TerminalNode { return this.getToken(StarRocksSqlParser.ON, 0); }
	public privObjectNameList(): PrivObjectNameListContext {
		return this.getRuleContext(0, PrivObjectNameListContext);
	}
	public FROM(): TerminalNode { return this.getToken(StarRocksSqlParser.FROM, 0); }
	public grantRevokeClause(): GrantRevokeClauseContext {
		return this.getRuleContext(0, GrantRevokeClauseContext);
	}
	constructor(ctx: RevokePrivilegeStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterRevokeOnTableBrief) {
			listener.enterRevokeOnTableBrief(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitRevokeOnTableBrief) {
			listener.exitRevokeOnTableBrief(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitRevokeOnTableBrief) {
			return visitor.visitRevokeOnTableBrief(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RevokeOnFuncContext extends RevokePrivilegeStatementContext {
	public REVOKE(): TerminalNode { return this.getToken(StarRocksSqlParser.REVOKE, 0); }
	public privilegeTypeList(): PrivilegeTypeListContext {
		return this.getRuleContext(0, PrivilegeTypeListContext);
	}
	public ON(): TerminalNode { return this.getToken(StarRocksSqlParser.ON, 0); }
	public FUNCTION(): TerminalNode { return this.getToken(StarRocksSqlParser.FUNCTION, 0); }
	public privFunctionObjectNameList(): PrivFunctionObjectNameListContext {
		return this.getRuleContext(0, PrivFunctionObjectNameListContext);
	}
	public FROM(): TerminalNode { return this.getToken(StarRocksSqlParser.FROM, 0); }
	public grantRevokeClause(): GrantRevokeClauseContext {
		return this.getRuleContext(0, GrantRevokeClauseContext);
	}
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.GLOBAL, 0); }
	constructor(ctx: RevokePrivilegeStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterRevokeOnFunc) {
			listener.enterRevokeOnFunc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitRevokeOnFunc) {
			listener.exitRevokeOnFunc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitRevokeOnFunc) {
			return visitor.visitRevokeOnFunc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RevokeOnSystemContext extends RevokePrivilegeStatementContext {
	public REVOKE(): TerminalNode { return this.getToken(StarRocksSqlParser.REVOKE, 0); }
	public privilegeTypeList(): PrivilegeTypeListContext {
		return this.getRuleContext(0, PrivilegeTypeListContext);
	}
	public ON(): TerminalNode { return this.getToken(StarRocksSqlParser.ON, 0); }
	public SYSTEM(): TerminalNode { return this.getToken(StarRocksSqlParser.SYSTEM, 0); }
	public FROM(): TerminalNode { return this.getToken(StarRocksSqlParser.FROM, 0); }
	public grantRevokeClause(): GrantRevokeClauseContext {
		return this.getRuleContext(0, GrantRevokeClauseContext);
	}
	constructor(ctx: RevokePrivilegeStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterRevokeOnSystem) {
			listener.enterRevokeOnSystem(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitRevokeOnSystem) {
			listener.exitRevokeOnSystem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitRevokeOnSystem) {
			return visitor.visitRevokeOnSystem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RevokeOnPrimaryObjContext extends RevokePrivilegeStatementContext {
	public REVOKE(): TerminalNode { return this.getToken(StarRocksSqlParser.REVOKE, 0); }
	public privilegeTypeList(): PrivilegeTypeListContext {
		return this.getRuleContext(0, PrivilegeTypeListContext);
	}
	public ON(): TerminalNode { return this.getToken(StarRocksSqlParser.ON, 0); }
	public privObjectType(): PrivObjectTypeContext {
		return this.getRuleContext(0, PrivObjectTypeContext);
	}
	public privObjectNameList(): PrivObjectNameListContext {
		return this.getRuleContext(0, PrivObjectNameListContext);
	}
	public FROM(): TerminalNode { return this.getToken(StarRocksSqlParser.FROM, 0); }
	public grantRevokeClause(): GrantRevokeClauseContext {
		return this.getRuleContext(0, GrantRevokeClauseContext);
	}
	constructor(ctx: RevokePrivilegeStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterRevokeOnPrimaryObj) {
			listener.enterRevokeOnPrimaryObj(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitRevokeOnPrimaryObj) {
			listener.exitRevokeOnPrimaryObj(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitRevokeOnPrimaryObj) {
			return visitor.visitRevokeOnPrimaryObj(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RevokeOnAllContext extends RevokePrivilegeStatementContext {
	public _isAll!: Token;
	public REVOKE(): TerminalNode { return this.getToken(StarRocksSqlParser.REVOKE, 0); }
	public privilegeTypeList(): PrivilegeTypeListContext {
		return this.getRuleContext(0, PrivilegeTypeListContext);
	}
	public ON(): TerminalNode { return this.getToken(StarRocksSqlParser.ON, 0); }
	public ALL(): TerminalNode[];
	public ALL(i: number): TerminalNode;
	public ALL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.ALL);
		} else {
			return this.getToken(StarRocksSqlParser.ALL, i);
		}
	}
	public privObjectTypePlural(): PrivObjectTypePluralContext {
		return this.getRuleContext(0, PrivObjectTypePluralContext);
	}
	public FROM(): TerminalNode { return this.getToken(StarRocksSqlParser.FROM, 0); }
	public grantRevokeClause(): GrantRevokeClauseContext {
		return this.getRuleContext(0, GrantRevokeClauseContext);
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IN, 0); }
	public DATABASES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DATABASES, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DATABASE, 0); }
	public identifierOrString(): IdentifierOrStringContext | undefined {
		return this.tryGetRuleContext(0, IdentifierOrStringContext);
	}
	constructor(ctx: RevokePrivilegeStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterRevokeOnAll) {
			listener.enterRevokeOnAll(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitRevokeOnAll) {
			listener.exitRevokeOnAll(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitRevokeOnAll) {
			return visitor.visitRevokeOnAll(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowGrantsStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public GRANTS(): TerminalNode { return this.getToken(StarRocksSqlParser.GRANTS, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FOR, 0); }
	public user(): UserContext | undefined {
		return this.tryGetRuleContext(0, UserContext);
	}
	public USER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.USER, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ROLE, 0); }
	public identifierOrString(): IdentifierOrStringContext | undefined {
		return this.tryGetRuleContext(0, IdentifierOrStringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showGrantsStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowGrantsStatement) {
			listener.enterShowGrantsStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowGrantsStatement) {
			listener.exitShowGrantsStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowGrantsStatement) {
			return visitor.visitShowGrantsStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateSecurityIntegrationStatementContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public SECURITY(): TerminalNode { return this.getToken(StarRocksSqlParser.SECURITY, 0); }
	public INTEGRATION(): TerminalNode { return this.getToken(StarRocksSqlParser.INTEGRATION, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public properties(): PropertiesContext {
		return this.getRuleContext(0, PropertiesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_createSecurityIntegrationStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCreateSecurityIntegrationStatement) {
			listener.enterCreateSecurityIntegrationStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCreateSecurityIntegrationStatement) {
			listener.exitCreateSecurityIntegrationStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCreateSecurityIntegrationStatement) {
			return visitor.visitCreateSecurityIntegrationStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterSecurityIntegrationStatementContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(StarRocksSqlParser.ALTER, 0); }
	public SECURITY(): TerminalNode { return this.getToken(StarRocksSqlParser.SECURITY, 0); }
	public INTEGRATION(): TerminalNode { return this.getToken(StarRocksSqlParser.INTEGRATION, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public SET(): TerminalNode { return this.getToken(StarRocksSqlParser.SET, 0); }
	public propertyList(): PropertyListContext {
		return this.getRuleContext(0, PropertyListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_alterSecurityIntegrationStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAlterSecurityIntegrationStatement) {
			listener.enterAlterSecurityIntegrationStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAlterSecurityIntegrationStatement) {
			listener.exitAlterSecurityIntegrationStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAlterSecurityIntegrationStatement) {
			return visitor.visitAlterSecurityIntegrationStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropSecurityIntegrationStatementContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public SECURITY(): TerminalNode { return this.getToken(StarRocksSqlParser.SECURITY, 0); }
	public INTEGRATION(): TerminalNode { return this.getToken(StarRocksSqlParser.INTEGRATION, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropSecurityIntegrationStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropSecurityIntegrationStatement) {
			listener.enterDropSecurityIntegrationStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropSecurityIntegrationStatement) {
			listener.exitDropSecurityIntegrationStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropSecurityIntegrationStatement) {
			return visitor.visitDropSecurityIntegrationStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowSecurityIntegrationStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public SECURITY(): TerminalNode { return this.getToken(StarRocksSqlParser.SECURITY, 0); }
	public INTEGRATIONS(): TerminalNode { return this.getToken(StarRocksSqlParser.INTEGRATIONS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showSecurityIntegrationStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowSecurityIntegrationStatement) {
			listener.enterShowSecurityIntegrationStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowSecurityIntegrationStatement) {
			listener.exitShowSecurityIntegrationStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowSecurityIntegrationStatement) {
			return visitor.visitShowSecurityIntegrationStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowCreateSecurityIntegrationStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public SECURITY(): TerminalNode { return this.getToken(StarRocksSqlParser.SECURITY, 0); }
	public INTEGRATION(): TerminalNode { return this.getToken(StarRocksSqlParser.INTEGRATION, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showCreateSecurityIntegrationStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowCreateSecurityIntegrationStatement) {
			listener.enterShowCreateSecurityIntegrationStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowCreateSecurityIntegrationStatement) {
			listener.exitShowCreateSecurityIntegrationStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowCreateSecurityIntegrationStatement) {
			return visitor.visitShowCreateSecurityIntegrationStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateRoleMappingStatementContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public ROLE(): TerminalNode { return this.getToken(StarRocksSqlParser.ROLE, 0); }
	public MAPPING(): TerminalNode { return this.getToken(StarRocksSqlParser.MAPPING, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public properties(): PropertiesContext {
		return this.getRuleContext(0, PropertiesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_createRoleMappingStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCreateRoleMappingStatement) {
			listener.enterCreateRoleMappingStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCreateRoleMappingStatement) {
			listener.exitCreateRoleMappingStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCreateRoleMappingStatement) {
			return visitor.visitCreateRoleMappingStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterRoleMappingStatementContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(StarRocksSqlParser.ALTER, 0); }
	public ROLE(): TerminalNode { return this.getToken(StarRocksSqlParser.ROLE, 0); }
	public MAPPING(): TerminalNode { return this.getToken(StarRocksSqlParser.MAPPING, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public SET(): TerminalNode { return this.getToken(StarRocksSqlParser.SET, 0); }
	public propertyList(): PropertyListContext {
		return this.getRuleContext(0, PropertyListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_alterRoleMappingStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAlterRoleMappingStatement) {
			listener.enterAlterRoleMappingStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAlterRoleMappingStatement) {
			listener.exitAlterRoleMappingStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAlterRoleMappingStatement) {
			return visitor.visitAlterRoleMappingStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropRoleMappingStatementContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public ROLE(): TerminalNode { return this.getToken(StarRocksSqlParser.ROLE, 0); }
	public MAPPING(): TerminalNode { return this.getToken(StarRocksSqlParser.MAPPING, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropRoleMappingStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropRoleMappingStatement) {
			listener.enterDropRoleMappingStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropRoleMappingStatement) {
			listener.exitDropRoleMappingStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropRoleMappingStatement) {
			return visitor.visitDropRoleMappingStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowRoleMappingStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public ROLE(): TerminalNode { return this.getToken(StarRocksSqlParser.ROLE, 0); }
	public MAPPINGS(): TerminalNode { return this.getToken(StarRocksSqlParser.MAPPINGS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showRoleMappingStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowRoleMappingStatement) {
			listener.enterShowRoleMappingStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowRoleMappingStatement) {
			listener.exitShowRoleMappingStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowRoleMappingStatement) {
			return visitor.visitShowRoleMappingStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RefreshRoleMappingStatementContext extends ParserRuleContext {
	public REFRESH(): TerminalNode { return this.getToken(StarRocksSqlParser.REFRESH, 0); }
	public ALL(): TerminalNode { return this.getToken(StarRocksSqlParser.ALL, 0); }
	public ROLE(): TerminalNode { return this.getToken(StarRocksSqlParser.ROLE, 0); }
	public MAPPINGS(): TerminalNode { return this.getToken(StarRocksSqlParser.MAPPINGS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_refreshRoleMappingStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterRefreshRoleMappingStatement) {
			listener.enterRefreshRoleMappingStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitRefreshRoleMappingStatement) {
			listener.exitRefreshRoleMappingStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitRefreshRoleMappingStatement) {
			return visitor.visitRefreshRoleMappingStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AuthOptionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_authOption; }
	public copyFrom(ctx: AuthOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class AuthWithoutPluginContext extends AuthOptionContext {
	public IDENTIFIED(): TerminalNode { return this.getToken(StarRocksSqlParser.IDENTIFIED, 0); }
	public BY(): TerminalNode { return this.getToken(StarRocksSqlParser.BY, 0); }
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PASSWORD, 0); }
	constructor(ctx: AuthOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAuthWithoutPlugin) {
			listener.enterAuthWithoutPlugin(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAuthWithoutPlugin) {
			listener.exitAuthWithoutPlugin(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAuthWithoutPlugin) {
			return visitor.visitAuthWithoutPlugin(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AuthWithPluginContext extends AuthOptionContext {
	public IDENTIFIED(): TerminalNode { return this.getToken(StarRocksSqlParser.IDENTIFIED, 0); }
	public WITH(): TerminalNode { return this.getToken(StarRocksSqlParser.WITH, 0); }
	public identifierOrString(): IdentifierOrStringContext {
		return this.getRuleContext(0, IdentifierOrStringContext);
	}
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	public BY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BY, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.AS, 0); }
	constructor(ctx: AuthOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAuthWithPlugin) {
			listener.enterAuthWithPlugin(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAuthWithPlugin) {
			listener.exitAuthWithPlugin(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAuthWithPlugin) {
			return visitor.visitAuthWithPlugin(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivObjectNameContext extends ParserRuleContext {
	public identifierOrStringOrStar(): IdentifierOrStringOrStarContext[];
	public identifierOrStringOrStar(i: number): IdentifierOrStringOrStarContext;
	public identifierOrStringOrStar(i?: number): IdentifierOrStringOrStarContext | IdentifierOrStringOrStarContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierOrStringOrStarContext);
		} else {
			return this.getRuleContext(i, IdentifierOrStringOrStarContext);
		}
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_privObjectName; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterPrivObjectName) {
			listener.enterPrivObjectName(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitPrivObjectName) {
			listener.exitPrivObjectName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitPrivObjectName) {
			return visitor.visitPrivObjectName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivObjectNameListContext extends ParserRuleContext {
	public privObjectName(): PrivObjectNameContext[];
	public privObjectName(i: number): PrivObjectNameContext;
	public privObjectName(i?: number): PrivObjectNameContext | PrivObjectNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PrivObjectNameContext);
		} else {
			return this.getRuleContext(i, PrivObjectNameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_privObjectNameList; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterPrivObjectNameList) {
			listener.enterPrivObjectNameList(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitPrivObjectNameList) {
			listener.exitPrivObjectNameList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitPrivObjectNameList) {
			return visitor.visitPrivObjectNameList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivFunctionObjectNameListContext extends ParserRuleContext {
	public qualifiedName(): QualifiedNameContext[];
	public qualifiedName(i: number): QualifiedNameContext;
	public qualifiedName(i?: number): QualifiedNameContext | QualifiedNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(QualifiedNameContext);
		} else {
			return this.getRuleContext(i, QualifiedNameContext);
		}
	}
	public LEFT_PAREN(): TerminalNode[];
	public LEFT_PAREN(i: number): TerminalNode;
	public LEFT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.LEFT_PAREN);
		} else {
			return this.getToken(StarRocksSqlParser.LEFT_PAREN, i);
		}
	}
	public typeList(): TypeListContext[];
	public typeList(i: number): TypeListContext;
	public typeList(i?: number): TypeListContext | TypeListContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TypeListContext);
		} else {
			return this.getRuleContext(i, TypeListContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode[];
	public RIGHT_PAREN(i: number): TerminalNode;
	public RIGHT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.RIGHT_PAREN);
		} else {
			return this.getToken(StarRocksSqlParser.RIGHT_PAREN, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_privFunctionObjectNameList; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterPrivFunctionObjectNameList) {
			listener.enterPrivFunctionObjectNameList(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitPrivFunctionObjectNameList) {
			listener.exitPrivFunctionObjectNameList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitPrivFunctionObjectNameList) {
			return visitor.visitPrivFunctionObjectNameList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivilegeTypeListContext extends ParserRuleContext {
	public privilegeType(): PrivilegeTypeContext[];
	public privilegeType(i: number): PrivilegeTypeContext;
	public privilegeType(i?: number): PrivilegeTypeContext | PrivilegeTypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PrivilegeTypeContext);
		} else {
			return this.getRuleContext(i, PrivilegeTypeContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_privilegeTypeList; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterPrivilegeTypeList) {
			listener.enterPrivilegeTypeList(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitPrivilegeTypeList) {
			listener.exitPrivilegeTypeList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitPrivilegeTypeList) {
			return visitor.visitPrivilegeTypeList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivilegeTypeContext extends ParserRuleContext {
	public ALL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ALL, 0); }
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PRIVILEGES, 0); }
	public ALTER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ALTER, 0); }
	public APPLY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.APPLY, 0); }
	public BLACKLIST(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BLACKLIST, 0); }
	public CREATE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CREATE, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DATABASE, 0); }
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TABLE, 0); }
	public VIEW(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.VIEW, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FUNCTION, 0); }
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.GLOBAL, 0); }
	public MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MATERIALIZED, 0); }
	public RESOURCE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RESOURCE, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.GROUP, 0); }
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXTERNAL, 0); }
	public CATALOG(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CATALOG, 0); }
	public POLICY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.POLICY, 0); }
	public STORAGE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.STORAGE, 0); }
	public VOLUME(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.VOLUME, 0); }
	public DELETE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DELETE, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DROP, 0); }
	public EXPORT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXPORT, 0); }
	public FILE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FILE, 0); }
	public IMPERSONATE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IMPERSONATE, 0); }
	public INSERT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INSERT, 0); }
	public GRANT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.GRANT, 0); }
	public NODE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NODE, 0); }
	public OPERATE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.OPERATE, 0); }
	public PLUGIN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PLUGIN, 0); }
	public REPOSITORY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.REPOSITORY, 0); }
	public REFRESH(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.REFRESH, 0); }
	public SELECT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SELECT, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.UPDATE, 0); }
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.USAGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_privilegeType; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterPrivilegeType) {
			listener.enterPrivilegeType(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitPrivilegeType) {
			listener.exitPrivilegeType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitPrivilegeType) {
			return visitor.visitPrivilegeType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivObjectTypeContext extends ParserRuleContext {
	public CATALOG(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CATALOG, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DATABASE, 0); }
	public MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MATERIALIZED, 0); }
	public VIEW(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.VIEW, 0); }
	public POLICY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.POLICY, 0); }
	public RESOURCE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RESOURCE, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.GROUP, 0); }
	public STORAGE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.STORAGE, 0); }
	public VOLUME(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.VOLUME, 0); }
	public SYSTEM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SYSTEM, 0); }
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TABLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_privObjectType; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterPrivObjectType) {
			listener.enterPrivObjectType(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitPrivObjectType) {
			listener.exitPrivObjectType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitPrivObjectType) {
			return visitor.visitPrivObjectType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivObjectTypePluralContext extends ParserRuleContext {
	public CATALOGS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CATALOGS, 0); }
	public DATABASES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DATABASES, 0); }
	public FUNCTIONS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FUNCTIONS, 0); }
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.GLOBAL, 0); }
	public MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MATERIALIZED, 0); }
	public VIEWS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.VIEWS, 0); }
	public POLICIES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.POLICIES, 0); }
	public RESOURCES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RESOURCES, 0); }
	public RESOURCE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RESOURCE, 0); }
	public GROUPS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.GROUPS, 0); }
	public STORAGE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.STORAGE, 0); }
	public VOLUMES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.VOLUMES, 0); }
	public TABLES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TABLES, 0); }
	public USERS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.USERS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_privObjectTypePlural; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterPrivObjectTypePlural) {
			listener.enterPrivObjectTypePlural(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitPrivObjectTypePlural) {
			listener.exitPrivObjectTypePlural(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitPrivObjectTypePlural) {
			return visitor.visitPrivObjectTypePlural(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateMaskingPolicyStatementContext extends ParserRuleContext {
	public _policyName!: QualifiedNameContext;
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public MASKING(): TerminalNode { return this.getToken(StarRocksSqlParser.MASKING, 0); }
	public POLICY(): TerminalNode { return this.getToken(StarRocksSqlParser.POLICY, 0); }
	public AS(): TerminalNode { return this.getToken(StarRocksSqlParser.AS, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public policySignature(): PolicySignatureContext[];
	public policySignature(i: number): PolicySignatureContext;
	public policySignature(i?: number): PolicySignatureContext | PolicySignatureContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PolicySignatureContext);
		} else {
			return this.getRuleContext(i, PolicySignatureContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public RETURNS(): TerminalNode { return this.getToken(StarRocksSqlParser.RETURNS, 0); }
	public type(): TypeContext {
		return this.getRuleContext(0, TypeContext);
	}
	public ARROW(): TerminalNode { return this.getToken(StarRocksSqlParser.ARROW, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public OR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.OR, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.REPLACE, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	public comment(): CommentContext | undefined {
		return this.tryGetRuleContext(0, CommentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_createMaskingPolicyStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCreateMaskingPolicyStatement) {
			listener.enterCreateMaskingPolicyStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCreateMaskingPolicyStatement) {
			listener.exitCreateMaskingPolicyStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCreateMaskingPolicyStatement) {
			return visitor.visitCreateMaskingPolicyStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropMaskingPolicyStatementContext extends ParserRuleContext {
	public _policyName!: QualifiedNameContext;
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public MASKING(): TerminalNode { return this.getToken(StarRocksSqlParser.MASKING, 0); }
	public POLICY(): TerminalNode { return this.getToken(StarRocksSqlParser.POLICY, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	public FORCE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FORCE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropMaskingPolicyStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropMaskingPolicyStatement) {
			listener.enterDropMaskingPolicyStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropMaskingPolicyStatement) {
			listener.exitDropMaskingPolicyStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropMaskingPolicyStatement) {
			return visitor.visitDropMaskingPolicyStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterMaskingPolicyStatementContext extends ParserRuleContext {
	public _policyName!: QualifiedNameContext;
	public _newPolicyName!: IdentifierContext;
	public ALTER(): TerminalNode { return this.getToken(StarRocksSqlParser.ALTER, 0); }
	public MASKING(): TerminalNode { return this.getToken(StarRocksSqlParser.MASKING, 0); }
	public POLICY(): TerminalNode { return this.getToken(StarRocksSqlParser.POLICY, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SET, 0); }
	public BODY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BODY, 0); }
	public ARROW(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ARROW, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.COMMENT, 0); }
	public EQ(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EQ, 0); }
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RENAME, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TO, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_alterMaskingPolicyStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAlterMaskingPolicyStatement) {
			listener.enterAlterMaskingPolicyStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAlterMaskingPolicyStatement) {
			listener.exitAlterMaskingPolicyStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAlterMaskingPolicyStatement) {
			return visitor.visitAlterMaskingPolicyStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowMaskingPolicyStatementContext extends ParserRuleContext {
	public _db!: QualifiedNameContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public MASKING(): TerminalNode { return this.getToken(StarRocksSqlParser.MASKING, 0); }
	public POLICIES(): TerminalNode { return this.getToken(StarRocksSqlParser.POLICIES, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IN, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showMaskingPolicyStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowMaskingPolicyStatement) {
			listener.enterShowMaskingPolicyStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowMaskingPolicyStatement) {
			listener.exitShowMaskingPolicyStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowMaskingPolicyStatement) {
			return visitor.visitShowMaskingPolicyStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowCreateMaskingPolicyStatementContext extends ParserRuleContext {
	public _policyName!: QualifiedNameContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public MASKING(): TerminalNode { return this.getToken(StarRocksSqlParser.MASKING, 0); }
	public POLICY(): TerminalNode { return this.getToken(StarRocksSqlParser.POLICY, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showCreateMaskingPolicyStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowCreateMaskingPolicyStatement) {
			listener.enterShowCreateMaskingPolicyStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowCreateMaskingPolicyStatement) {
			listener.exitShowCreateMaskingPolicyStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowCreateMaskingPolicyStatement) {
			return visitor.visitShowCreateMaskingPolicyStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateRowAccessPolicyStatementContext extends ParserRuleContext {
	public _policyName!: QualifiedNameContext;
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public ROW(): TerminalNode { return this.getToken(StarRocksSqlParser.ROW, 0); }
	public ACCESS(): TerminalNode { return this.getToken(StarRocksSqlParser.ACCESS, 0); }
	public POLICY(): TerminalNode { return this.getToken(StarRocksSqlParser.POLICY, 0); }
	public AS(): TerminalNode { return this.getToken(StarRocksSqlParser.AS, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public policySignature(): PolicySignatureContext[];
	public policySignature(i: number): PolicySignatureContext;
	public policySignature(i?: number): PolicySignatureContext | PolicySignatureContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PolicySignatureContext);
		} else {
			return this.getRuleContext(i, PolicySignatureContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public RETURNS(): TerminalNode { return this.getToken(StarRocksSqlParser.RETURNS, 0); }
	public BOOLEAN(): TerminalNode { return this.getToken(StarRocksSqlParser.BOOLEAN, 0); }
	public ARROW(): TerminalNode { return this.getToken(StarRocksSqlParser.ARROW, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public OR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.OR, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.REPLACE, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	public comment(): CommentContext | undefined {
		return this.tryGetRuleContext(0, CommentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_createRowAccessPolicyStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCreateRowAccessPolicyStatement) {
			listener.enterCreateRowAccessPolicyStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCreateRowAccessPolicyStatement) {
			listener.exitCreateRowAccessPolicyStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCreateRowAccessPolicyStatement) {
			return visitor.visitCreateRowAccessPolicyStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropRowAccessPolicyStatementContext extends ParserRuleContext {
	public _policyName!: QualifiedNameContext;
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public ROW(): TerminalNode { return this.getToken(StarRocksSqlParser.ROW, 0); }
	public ACCESS(): TerminalNode { return this.getToken(StarRocksSqlParser.ACCESS, 0); }
	public POLICY(): TerminalNode { return this.getToken(StarRocksSqlParser.POLICY, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	public FORCE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FORCE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropRowAccessPolicyStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropRowAccessPolicyStatement) {
			listener.enterDropRowAccessPolicyStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropRowAccessPolicyStatement) {
			listener.exitDropRowAccessPolicyStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropRowAccessPolicyStatement) {
			return visitor.visitDropRowAccessPolicyStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterRowAccessPolicyStatementContext extends ParserRuleContext {
	public _policyName!: QualifiedNameContext;
	public _newPolicyName!: IdentifierContext;
	public ALTER(): TerminalNode { return this.getToken(StarRocksSqlParser.ALTER, 0); }
	public ROW(): TerminalNode { return this.getToken(StarRocksSqlParser.ROW, 0); }
	public ACCESS(): TerminalNode { return this.getToken(StarRocksSqlParser.ACCESS, 0); }
	public POLICY(): TerminalNode { return this.getToken(StarRocksSqlParser.POLICY, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SET, 0); }
	public BODY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BODY, 0); }
	public ARROW(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ARROW, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.COMMENT, 0); }
	public EQ(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EQ, 0); }
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RENAME, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TO, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_alterRowAccessPolicyStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAlterRowAccessPolicyStatement) {
			listener.enterAlterRowAccessPolicyStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAlterRowAccessPolicyStatement) {
			listener.exitAlterRowAccessPolicyStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAlterRowAccessPolicyStatement) {
			return visitor.visitAlterRowAccessPolicyStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowRowAccessPolicyStatementContext extends ParserRuleContext {
	public _db!: QualifiedNameContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public ROW(): TerminalNode { return this.getToken(StarRocksSqlParser.ROW, 0); }
	public ACCESS(): TerminalNode { return this.getToken(StarRocksSqlParser.ACCESS, 0); }
	public POLICIES(): TerminalNode { return this.getToken(StarRocksSqlParser.POLICIES, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IN, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showRowAccessPolicyStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowRowAccessPolicyStatement) {
			listener.enterShowRowAccessPolicyStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowRowAccessPolicyStatement) {
			listener.exitShowRowAccessPolicyStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowRowAccessPolicyStatement) {
			return visitor.visitShowRowAccessPolicyStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowCreateRowAccessPolicyStatementContext extends ParserRuleContext {
	public _policyName!: QualifiedNameContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public ROW(): TerminalNode { return this.getToken(StarRocksSqlParser.ROW, 0); }
	public ACCESS(): TerminalNode { return this.getToken(StarRocksSqlParser.ACCESS, 0); }
	public POLICY(): TerminalNode { return this.getToken(StarRocksSqlParser.POLICY, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showCreateRowAccessPolicyStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowCreateRowAccessPolicyStatement) {
			listener.enterShowCreateRowAccessPolicyStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowCreateRowAccessPolicyStatement) {
			listener.exitShowCreateRowAccessPolicyStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowCreateRowAccessPolicyStatement) {
			return visitor.visitShowCreateRowAccessPolicyStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PolicySignatureContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public type(): TypeContext {
		return this.getRuleContext(0, TypeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_policySignature; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterPolicySignature) {
			listener.enterPolicySignature(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitPolicySignature) {
			listener.exitPolicySignature(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitPolicySignature) {
			return visitor.visitPolicySignature(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BackupStatementContext extends ParserRuleContext {
	public BACKUP(): TerminalNode { return this.getToken(StarRocksSqlParser.BACKUP, 0); }
	public SNAPSHOT(): TerminalNode { return this.getToken(StarRocksSqlParser.SNAPSHOT, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public TO(): TerminalNode { return this.getToken(StarRocksSqlParser.TO, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ON, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public tableDesc(): TableDescContext[];
	public tableDesc(i: number): TableDescContext;
	public tableDesc(i?: number): TableDescContext | TableDescContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableDescContext);
		} else {
			return this.getRuleContext(i, TableDescContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public PROPERTIES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PROPERTIES, 0); }
	public propertyList(): PropertyListContext | undefined {
		return this.tryGetRuleContext(0, PropertyListContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_backupStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterBackupStatement) {
			listener.enterBackupStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitBackupStatement) {
			listener.exitBackupStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitBackupStatement) {
			return visitor.visitBackupStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CancelBackupStatementContext extends ParserRuleContext {
	public CANCEL(): TerminalNode { return this.getToken(StarRocksSqlParser.CANCEL, 0); }
	public BACKUP(): TerminalNode { return this.getToken(StarRocksSqlParser.BACKUP, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_cancelBackupStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCancelBackupStatement) {
			listener.enterCancelBackupStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCancelBackupStatement) {
			listener.exitCancelBackupStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCancelBackupStatement) {
			return visitor.visitCancelBackupStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowBackupStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public BACKUP(): TerminalNode { return this.getToken(StarRocksSqlParser.BACKUP, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showBackupStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowBackupStatement) {
			listener.enterShowBackupStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowBackupStatement) {
			listener.exitShowBackupStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowBackupStatement) {
			return visitor.visitShowBackupStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RestoreStatementContext extends ParserRuleContext {
	public RESTORE(): TerminalNode { return this.getToken(StarRocksSqlParser.RESTORE, 0); }
	public SNAPSHOT(): TerminalNode { return this.getToken(StarRocksSqlParser.SNAPSHOT, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public FROM(): TerminalNode { return this.getToken(StarRocksSqlParser.FROM, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ON, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public restoreTableDesc(): RestoreTableDescContext[];
	public restoreTableDesc(i: number): RestoreTableDescContext;
	public restoreTableDesc(i?: number): RestoreTableDescContext | RestoreTableDescContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RestoreTableDescContext);
		} else {
			return this.getRuleContext(i, RestoreTableDescContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public PROPERTIES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PROPERTIES, 0); }
	public propertyList(): PropertyListContext | undefined {
		return this.tryGetRuleContext(0, PropertyListContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_restoreStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterRestoreStatement) {
			listener.enterRestoreStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitRestoreStatement) {
			listener.exitRestoreStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitRestoreStatement) {
			return visitor.visitRestoreStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CancelRestoreStatementContext extends ParserRuleContext {
	public CANCEL(): TerminalNode { return this.getToken(StarRocksSqlParser.CANCEL, 0); }
	public RESTORE(): TerminalNode { return this.getToken(StarRocksSqlParser.RESTORE, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_cancelRestoreStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCancelRestoreStatement) {
			listener.enterCancelRestoreStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCancelRestoreStatement) {
			listener.exitCancelRestoreStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCancelRestoreStatement) {
			return visitor.visitCancelRestoreStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowRestoreStatementContext extends ParserRuleContext {
	public _where!: ExpressionContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public RESTORE(): TerminalNode { return this.getToken(StarRocksSqlParser.RESTORE, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IN, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showRestoreStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowRestoreStatement) {
			listener.enterShowRestoreStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowRestoreStatement) {
			listener.exitShowRestoreStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowRestoreStatement) {
			return visitor.visitShowRestoreStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowSnapshotStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public SNAPSHOT(): TerminalNode { return this.getToken(StarRocksSqlParser.SNAPSHOT, 0); }
	public ON(): TerminalNode { return this.getToken(StarRocksSqlParser.ON, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showSnapshotStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowSnapshotStatement) {
			listener.enterShowSnapshotStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowSnapshotStatement) {
			listener.exitShowSnapshotStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowSnapshotStatement) {
			return visitor.visitShowSnapshotStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateRepositoryStatementContext extends ParserRuleContext {
	public _repoName!: IdentifierContext;
	public _brokerName!: IdentifierOrStringContext;
	public _location!: StringContext;
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public REPOSITORY(): TerminalNode { return this.getToken(StarRocksSqlParser.REPOSITORY, 0); }
	public WITH(): TerminalNode { return this.getToken(StarRocksSqlParser.WITH, 0); }
	public BROKER(): TerminalNode { return this.getToken(StarRocksSqlParser.BROKER, 0); }
	public ON(): TerminalNode { return this.getToken(StarRocksSqlParser.ON, 0); }
	public LOCATION(): TerminalNode { return this.getToken(StarRocksSqlParser.LOCATION, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	public READ(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.READ, 0); }
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ONLY, 0); }
	public PROPERTIES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PROPERTIES, 0); }
	public propertyList(): PropertyListContext | undefined {
		return this.tryGetRuleContext(0, PropertyListContext);
	}
	public identifierOrString(): IdentifierOrStringContext | undefined {
		return this.tryGetRuleContext(0, IdentifierOrStringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_createRepositoryStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCreateRepositoryStatement) {
			listener.enterCreateRepositoryStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCreateRepositoryStatement) {
			listener.exitCreateRepositoryStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCreateRepositoryStatement) {
			return visitor.visitCreateRepositoryStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropRepositoryStatementContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public REPOSITORY(): TerminalNode { return this.getToken(StarRocksSqlParser.REPOSITORY, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropRepositoryStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropRepositoryStatement) {
			listener.enterDropRepositoryStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropRepositoryStatement) {
			listener.exitDropRepositoryStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropRepositoryStatement) {
			return visitor.visitDropRepositoryStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AddSqlBlackListStatementContext extends ParserRuleContext {
	public ADD(): TerminalNode { return this.getToken(StarRocksSqlParser.ADD, 0); }
	public SQLBLACKLIST(): TerminalNode { return this.getToken(StarRocksSqlParser.SQLBLACKLIST, 0); }
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_addSqlBlackListStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAddSqlBlackListStatement) {
			listener.enterAddSqlBlackListStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAddSqlBlackListStatement) {
			listener.exitAddSqlBlackListStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAddSqlBlackListStatement) {
			return visitor.visitAddSqlBlackListStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DelSqlBlackListStatementContext extends ParserRuleContext {
	public DELETE(): TerminalNode { return this.getToken(StarRocksSqlParser.DELETE, 0); }
	public SQLBLACKLIST(): TerminalNode { return this.getToken(StarRocksSqlParser.SQLBLACKLIST, 0); }
	public INTEGER_VALUE(): TerminalNode[];
	public INTEGER_VALUE(i: number): TerminalNode;
	public INTEGER_VALUE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.INTEGER_VALUE);
		} else {
			return this.getToken(StarRocksSqlParser.INTEGER_VALUE, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_delSqlBlackListStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDelSqlBlackListStatement) {
			listener.enterDelSqlBlackListStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDelSqlBlackListStatement) {
			listener.exitDelSqlBlackListStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDelSqlBlackListStatement) {
			return visitor.visitDelSqlBlackListStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowSqlBlackListStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public SQLBLACKLIST(): TerminalNode { return this.getToken(StarRocksSqlParser.SQLBLACKLIST, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showSqlBlackListStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowSqlBlackListStatement) {
			listener.enterShowSqlBlackListStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowSqlBlackListStatement) {
			listener.exitShowSqlBlackListStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowSqlBlackListStatement) {
			return visitor.visitShowSqlBlackListStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowWhiteListStatementContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public WHITELIST(): TerminalNode { return this.getToken(StarRocksSqlParser.WHITELIST, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showWhiteListStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowWhiteListStatement) {
			listener.enterShowWhiteListStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowWhiteListStatement) {
			listener.exitShowWhiteListStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowWhiteListStatement) {
			return visitor.visitShowWhiteListStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExportStatementContext extends ParserRuleContext {
	public EXPORT(): TerminalNode { return this.getToken(StarRocksSqlParser.EXPORT, 0); }
	public TABLE(): TerminalNode { return this.getToken(StarRocksSqlParser.TABLE, 0); }
	public tableDesc(): TableDescContext {
		return this.getRuleContext(0, TableDescContext);
	}
	public TO(): TerminalNode { return this.getToken(StarRocksSqlParser.TO, 0); }
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	public columnAliases(): ColumnAliasesContext | undefined {
		return this.tryGetRuleContext(0, ColumnAliasesContext);
	}
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	public brokerDesc(): BrokerDescContext | undefined {
		return this.tryGetRuleContext(0, BrokerDescContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_exportStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterExportStatement) {
			listener.enterExportStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitExportStatement) {
			listener.exitExportStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitExportStatement) {
			return visitor.visitExportStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CancelExportStatementContext extends ParserRuleContext {
	public _catalog!: QualifiedNameContext;
	public _pattern!: StringContext;
	public CANCEL(): TerminalNode { return this.getToken(StarRocksSqlParser.CANCEL, 0); }
	public EXPORT(): TerminalNode { return this.getToken(StarRocksSqlParser.EXPORT, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IN, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LIKE, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_cancelExportStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCancelExportStatement) {
			listener.enterCancelExportStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCancelExportStatement) {
			listener.exitCancelExportStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCancelExportStatement) {
			return visitor.visitCancelExportStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowExportStatementContext extends ParserRuleContext {
	public _catalog!: QualifiedNameContext;
	public _pattern!: StringContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public EXPORT(): TerminalNode { return this.getToken(StarRocksSqlParser.EXPORT, 0); }
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ORDER, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BY, 0); }
	public sortItem(): SortItemContext[];
	public sortItem(i: number): SortItemContext;
	public sortItem(i?: number): SortItemContext | SortItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SortItemContext);
		} else {
			return this.getRuleContext(i, SortItemContext);
		}
	}
	public limitElement(): LimitElementContext | undefined {
		return this.tryGetRuleContext(0, LimitElementContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IN, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LIKE, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showExportStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowExportStatement) {
			listener.enterShowExportStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowExportStatement) {
			listener.exitShowExportStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowExportStatement) {
			return visitor.visitShowExportStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InstallPluginStatementContext extends ParserRuleContext {
	public INSTALL(): TerminalNode { return this.getToken(StarRocksSqlParser.INSTALL, 0); }
	public PLUGIN(): TerminalNode { return this.getToken(StarRocksSqlParser.PLUGIN, 0); }
	public FROM(): TerminalNode { return this.getToken(StarRocksSqlParser.FROM, 0); }
	public identifierOrString(): IdentifierOrStringContext {
		return this.getRuleContext(0, IdentifierOrStringContext);
	}
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_installPluginStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterInstallPluginStatement) {
			listener.enterInstallPluginStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitInstallPluginStatement) {
			listener.exitInstallPluginStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitInstallPluginStatement) {
			return visitor.visitInstallPluginStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UninstallPluginStatementContext extends ParserRuleContext {
	public UNINSTALL(): TerminalNode { return this.getToken(StarRocksSqlParser.UNINSTALL, 0); }
	public PLUGIN(): TerminalNode { return this.getToken(StarRocksSqlParser.PLUGIN, 0); }
	public identifierOrString(): IdentifierOrStringContext {
		return this.getRuleContext(0, IdentifierOrStringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_uninstallPluginStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterUninstallPluginStatement) {
			listener.enterUninstallPluginStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitUninstallPluginStatement) {
			listener.exitUninstallPluginStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitUninstallPluginStatement) {
			return visitor.visitUninstallPluginStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateFileStatementContext extends ParserRuleContext {
	public _catalog!: QualifiedNameContext;
	public CREATE(): TerminalNode { return this.getToken(StarRocksSqlParser.CREATE, 0); }
	public FILE(): TerminalNode { return this.getToken(StarRocksSqlParser.FILE, 0); }
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	public properties(): PropertiesContext {
		return this.getRuleContext(0, PropertiesContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IN, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_createFileStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCreateFileStatement) {
			listener.enterCreateFileStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCreateFileStatement) {
			listener.exitCreateFileStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCreateFileStatement) {
			return visitor.visitCreateFileStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropFileStatementContext extends ParserRuleContext {
	public _catalog!: QualifiedNameContext;
	public DROP(): TerminalNode { return this.getToken(StarRocksSqlParser.DROP, 0); }
	public FILE(): TerminalNode { return this.getToken(StarRocksSqlParser.FILE, 0); }
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	public properties(): PropertiesContext {
		return this.getRuleContext(0, PropertiesContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IN, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_dropFileStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDropFileStatement) {
			listener.enterDropFileStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDropFileStatement) {
			listener.exitDropFileStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDropFileStatement) {
			return visitor.visitDropFileStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowSmallFilesStatementContext extends ParserRuleContext {
	public _catalog!: QualifiedNameContext;
	public SHOW(): TerminalNode { return this.getToken(StarRocksSqlParser.SHOW, 0); }
	public FILE(): TerminalNode { return this.getToken(StarRocksSqlParser.FILE, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IN, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_showSmallFilesStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterShowSmallFilesStatement) {
			listener.enterShowSmallFilesStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitShowSmallFilesStatement) {
			listener.exitShowSmallFilesStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitShowSmallFilesStatement) {
			return visitor.visitShowSmallFilesStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetStatementContext extends ParserRuleContext {
	public SET(): TerminalNode { return this.getToken(StarRocksSqlParser.SET, 0); }
	public setVar(): SetVarContext[];
	public setVar(i: number): SetVarContext;
	public setVar(i?: number): SetVarContext | SetVarContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SetVarContext);
		} else {
			return this.getRuleContext(i, SetVarContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_setStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSetStatement) {
			listener.enterSetStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSetStatement) {
			listener.exitSetStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSetStatement) {
			return visitor.visitSetStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetVarContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_setVar; }
	public copyFrom(ctx: SetVarContext): void {
		super.copyFrom(ctx);
	}
}
export class SetNamesContext extends SetVarContext {
	public _charset!: IdentifierOrStringContext;
	public _collate!: IdentifierOrStringContext;
	public CHAR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CHAR, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SET, 0); }
	public CHARSET(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CHARSET, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CHARACTER, 0); }
	public identifierOrString(): IdentifierOrStringContext[];
	public identifierOrString(i: number): IdentifierOrStringContext;
	public identifierOrString(i?: number): IdentifierOrStringContext | IdentifierOrStringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierOrStringContext);
		} else {
			return this.getRuleContext(i, IdentifierOrStringContext);
		}
	}
	public DEFAULT(): TerminalNode[];
	public DEFAULT(i: number): TerminalNode;
	public DEFAULT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.DEFAULT);
		} else {
			return this.getToken(StarRocksSqlParser.DEFAULT, i);
		}
	}
	public NAMES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NAMES, 0); }
	public COLLATE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.COLLATE, 0); }
	constructor(ctx: SetVarContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSetNames) {
			listener.enterSetNames(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSetNames) {
			listener.exitSetNames(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSetNames) {
			return visitor.visitSetNames(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SetPasswordContext extends SetVarContext {
	public PASSWORD(): TerminalNode[];
	public PASSWORD(i: number): TerminalNode;
	public PASSWORD(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.PASSWORD);
		} else {
			return this.getToken(StarRocksSqlParser.PASSWORD, i);
		}
	}
	public EQ(): TerminalNode { return this.getToken(StarRocksSqlParser.EQ, 0); }
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FOR, 0); }
	public user(): UserContext | undefined {
		return this.tryGetRuleContext(0, UserContext);
	}
	constructor(ctx: SetVarContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSetPassword) {
			listener.enterSetPassword(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSetPassword) {
			listener.exitSetPassword(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSetPassword) {
			return visitor.visitSetPassword(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SetUserVarContext extends SetVarContext {
	public userVariable(): UserVariableContext {
		return this.getRuleContext(0, UserVariableContext);
	}
	public EQ(): TerminalNode { return this.getToken(StarRocksSqlParser.EQ, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(ctx: SetVarContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSetUserVar) {
			listener.enterSetUserVar(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSetUserVar) {
			listener.exitSetUserVar(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSetUserVar) {
			return visitor.visitSetUserVar(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SetSystemVarContext extends SetVarContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public EQ(): TerminalNode { return this.getToken(StarRocksSqlParser.EQ, 0); }
	public setExprOrDefault(): SetExprOrDefaultContext {
		return this.getRuleContext(0, SetExprOrDefaultContext);
	}
	public varType(): VarTypeContext | undefined {
		return this.tryGetRuleContext(0, VarTypeContext);
	}
	public systemVariable(): SystemVariableContext | undefined {
		return this.tryGetRuleContext(0, SystemVariableContext);
	}
	constructor(ctx: SetVarContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSetSystemVar) {
			listener.enterSetSystemVar(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSetSystemVar) {
			listener.exitSetSystemVar(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSetSystemVar) {
			return visitor.visitSetSystemVar(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SetTransactionContext extends SetVarContext {
	public TRANSACTION(): TerminalNode { return this.getToken(StarRocksSqlParser.TRANSACTION, 0); }
	public transaction_characteristics(): Transaction_characteristicsContext {
		return this.getRuleContext(0, Transaction_characteristicsContext);
	}
	public varType(): VarTypeContext | undefined {
		return this.tryGetRuleContext(0, VarTypeContext);
	}
	constructor(ctx: SetVarContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSetTransaction) {
			listener.enterSetTransaction(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSetTransaction) {
			listener.exitSetTransaction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSetTransaction) {
			return visitor.visitSetTransaction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Transaction_characteristicsContext extends ParserRuleContext {
	public transaction_access_mode(): Transaction_access_modeContext | undefined {
		return this.tryGetRuleContext(0, Transaction_access_modeContext);
	}
	public isolation_level(): Isolation_levelContext | undefined {
		return this.tryGetRuleContext(0, Isolation_levelContext);
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.COMMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_transaction_characteristics; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterTransaction_characteristics) {
			listener.enterTransaction_characteristics(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitTransaction_characteristics) {
			listener.exitTransaction_characteristics(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitTransaction_characteristics) {
			return visitor.visitTransaction_characteristics(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Transaction_access_modeContext extends ParserRuleContext {
	public READ(): TerminalNode { return this.getToken(StarRocksSqlParser.READ, 0); }
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ONLY, 0); }
	public WRITE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WRITE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_transaction_access_mode; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterTransaction_access_mode) {
			listener.enterTransaction_access_mode(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitTransaction_access_mode) {
			listener.exitTransaction_access_mode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitTransaction_access_mode) {
			return visitor.visitTransaction_access_mode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Isolation_levelContext extends ParserRuleContext {
	public ISOLATION(): TerminalNode { return this.getToken(StarRocksSqlParser.ISOLATION, 0); }
	public LEVEL(): TerminalNode { return this.getToken(StarRocksSqlParser.LEVEL, 0); }
	public isolation_types(): Isolation_typesContext {
		return this.getRuleContext(0, Isolation_typesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_isolation_level; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterIsolation_level) {
			listener.enterIsolation_level(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitIsolation_level) {
			listener.exitIsolation_level(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitIsolation_level) {
			return visitor.visitIsolation_level(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Isolation_typesContext extends ParserRuleContext {
	public READ(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.READ, 0); }
	public UNCOMMITTED(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.UNCOMMITTED, 0); }
	public COMMITTED(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.COMMITTED, 0); }
	public REPEATABLE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.REPEATABLE, 0); }
	public SERIALIZABLE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SERIALIZABLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_isolation_types; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterIsolation_types) {
			listener.enterIsolation_types(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitIsolation_types) {
			listener.exitIsolation_types(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitIsolation_types) {
			return visitor.visitIsolation_types(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetExprOrDefaultContext extends ParserRuleContext {
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DEFAULT, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ON, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ALL, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_setExprOrDefault; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSetExprOrDefault) {
			listener.enterSetExprOrDefault(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSetExprOrDefault) {
			listener.exitSetExprOrDefault(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSetExprOrDefault) {
			return visitor.visitSetExprOrDefault(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetUserPropertyStatementContext extends ParserRuleContext {
	public SET(): TerminalNode { return this.getToken(StarRocksSqlParser.SET, 0); }
	public PROPERTY(): TerminalNode { return this.getToken(StarRocksSqlParser.PROPERTY, 0); }
	public userPropertyList(): UserPropertyListContext {
		return this.getRuleContext(0, UserPropertyListContext);
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FOR, 0); }
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_setUserPropertyStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSetUserPropertyStatement) {
			listener.enterSetUserPropertyStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSetUserPropertyStatement) {
			listener.exitSetUserPropertyStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSetUserPropertyStatement) {
			return visitor.visitSetUserPropertyStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RoleListContext extends ParserRuleContext {
	public identifierOrString(): IdentifierOrStringContext[];
	public identifierOrString(i: number): IdentifierOrStringContext;
	public identifierOrString(i?: number): IdentifierOrStringContext | IdentifierOrStringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierOrStringContext);
		} else {
			return this.getRuleContext(i, IdentifierOrStringContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_roleList; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterRoleList) {
			listener.enterRoleList(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitRoleList) {
			listener.exitRoleList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitRoleList) {
			return visitor.visitRoleList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExecuteScriptStatementContext extends ParserRuleContext {
	public ADMIN(): TerminalNode { return this.getToken(StarRocksSqlParser.ADMIN, 0); }
	public EXECUTE(): TerminalNode { return this.getToken(StarRocksSqlParser.EXECUTE, 0); }
	public ON(): TerminalNode { return this.getToken(StarRocksSqlParser.ON, 0); }
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	public FRONTEND(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FRONTEND, 0); }
	public INTEGER_VALUE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INTEGER_VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_executeScriptStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterExecuteScriptStatement) {
			listener.enterExecuteScriptStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitExecuteScriptStatement) {
			listener.exitExecuteScriptStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitExecuteScriptStatement) {
			return visitor.visitExecuteScriptStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnsupportedStatementContext extends ParserRuleContext {
	public START(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.START, 0); }
	public TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TRANSACTION, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WITH, 0); }
	public CONSISTENT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CONSISTENT, 0); }
	public SNAPSHOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SNAPSHOT, 0); }
	public BEGIN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BEGIN, 0); }
	public WORK(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WORK, 0); }
	public COMMIT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.COMMIT, 0); }
	public AND(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.AND, 0); }
	public CHAIN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CHAIN, 0); }
	public RELEASE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RELEASE, 0); }
	public NO(): TerminalNode[];
	public NO(i: number): TerminalNode;
	public NO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.NO);
		} else {
			return this.getToken(StarRocksSqlParser.NO, i);
		}
	}
	public ROLLBACK(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ROLLBACK, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LOCK, 0); }
	public TABLES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TABLES, 0); }
	public lock_item(): Lock_itemContext[];
	public lock_item(i: number): Lock_itemContext;
	public lock_item(i?: number): Lock_itemContext | Lock_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Lock_itemContext);
		} else {
			return this.getRuleContext(i, Lock_itemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	public UNLOCK(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.UNLOCK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_unsupportedStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterUnsupportedStatement) {
			listener.enterUnsupportedStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitUnsupportedStatement) {
			listener.exitUnsupportedStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitUnsupportedStatement) {
			return visitor.visitUnsupportedStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Lock_itemContext extends ParserRuleContext {
	public _alias!: IdentifierContext;
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public lock_type(): Lock_typeContext {
		return this.getRuleContext(0, Lock_typeContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_lock_item; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterLock_item) {
			listener.enterLock_item(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitLock_item) {
			listener.exitLock_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitLock_item) {
			return visitor.visitLock_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Lock_typeContext extends ParserRuleContext {
	public READ(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.READ, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LOCAL, 0); }
	public WRITE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WRITE, 0); }
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LOW_PRIORITY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_lock_type; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterLock_type) {
			listener.enterLock_type(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitLock_type) {
			listener.exitLock_type(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitLock_type) {
			return visitor.visitLock_type(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QueryStatementContext extends ParserRuleContext {
	public queryRelation(): QueryRelationContext {
		return this.getRuleContext(0, QueryRelationContext);
	}
	public explainDesc(): ExplainDescContext | undefined {
		return this.tryGetRuleContext(0, ExplainDescContext);
	}
	public optimizerTrace(): OptimizerTraceContext | undefined {
		return this.tryGetRuleContext(0, OptimizerTraceContext);
	}
	public outfile(): OutfileContext | undefined {
		return this.tryGetRuleContext(0, OutfileContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_queryStatement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterQueryStatement) {
			listener.enterQueryStatement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitQueryStatement) {
			listener.exitQueryStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitQueryStatement) {
			return visitor.visitQueryStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QueryRelationContext extends ParserRuleContext {
	public queryNoWith(): QueryNoWithContext {
		return this.getRuleContext(0, QueryNoWithContext);
	}
	public withClause(): WithClauseContext | undefined {
		return this.tryGetRuleContext(0, WithClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_queryRelation; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterQueryRelation) {
			listener.enterQueryRelation(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitQueryRelation) {
			listener.exitQueryRelation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitQueryRelation) {
			return visitor.visitQueryRelation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WithClauseContext extends ParserRuleContext {
	public WITH(): TerminalNode { return this.getToken(StarRocksSqlParser.WITH, 0); }
	public commonTableExpression(): CommonTableExpressionContext[];
	public commonTableExpression(i: number): CommonTableExpressionContext;
	public commonTableExpression(i?: number): CommonTableExpressionContext | CommonTableExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CommonTableExpressionContext);
		} else {
			return this.getRuleContext(i, CommonTableExpressionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_withClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterWithClause) {
			listener.enterWithClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitWithClause) {
			listener.exitWithClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitWithClause) {
			return visitor.visitWithClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QueryNoWithContext extends ParserRuleContext {
	public queryPrimary(): QueryPrimaryContext {
		return this.getRuleContext(0, QueryPrimaryContext);
	}
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ORDER, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BY, 0); }
	public sortItem(): SortItemContext[];
	public sortItem(i: number): SortItemContext;
	public sortItem(i?: number): SortItemContext | SortItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SortItemContext);
		} else {
			return this.getRuleContext(i, SortItemContext);
		}
	}
	public limitElement(): LimitElementContext | undefined {
		return this.tryGetRuleContext(0, LimitElementContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_queryNoWith; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterQueryNoWith) {
			listener.enterQueryNoWith(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitQueryNoWith) {
			listener.exitQueryNoWith(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitQueryNoWith) {
			return visitor.visitQueryNoWith(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TemporalClauseContext extends ParserRuleContext {
	public AS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.AS, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.OF, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FOR, 0); }
	public SYSTEM_TIME(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SYSTEM_TIME, 0); }
	public TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TIMESTAMP, 0); }
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	public BETWEEN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BETWEEN, 0); }
	public AND(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.AND, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TO, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_temporalClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterTemporalClause) {
			listener.enterTemporalClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitTemporalClause) {
			listener.exitTemporalClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitTemporalClause) {
			return visitor.visitTemporalClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QueryPrimaryContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_queryPrimary; }
	public copyFrom(ctx: QueryPrimaryContext): void {
		super.copyFrom(ctx);
	}
}
export class QueryPrimaryDefaultContext extends QueryPrimaryContext {
	public querySpecification(): QuerySpecificationContext {
		return this.getRuleContext(0, QuerySpecificationContext);
	}
	constructor(ctx: QueryPrimaryContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterQueryPrimaryDefault) {
			listener.enterQueryPrimaryDefault(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitQueryPrimaryDefault) {
			listener.exitQueryPrimaryDefault(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitQueryPrimaryDefault) {
			return visitor.visitQueryPrimaryDefault(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class QueryWithParenthesesContext extends QueryPrimaryContext {
	public subquery(): SubqueryContext {
		return this.getRuleContext(0, SubqueryContext);
	}
	constructor(ctx: QueryPrimaryContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterQueryWithParentheses) {
			listener.enterQueryWithParentheses(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitQueryWithParentheses) {
			listener.exitQueryWithParentheses(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitQueryWithParentheses) {
			return visitor.visitQueryWithParentheses(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SetOperationContext extends QueryPrimaryContext {
	public _left!: QueryPrimaryContext;
	public _operator!: Token;
	public _right!: QueryPrimaryContext;
	public queryPrimary(): QueryPrimaryContext[];
	public queryPrimary(i: number): QueryPrimaryContext;
	public queryPrimary(i?: number): QueryPrimaryContext | QueryPrimaryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(QueryPrimaryContext);
		} else {
			return this.getRuleContext(i, QueryPrimaryContext);
		}
	}
	public INTERSECT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INTERSECT, 0); }
	public setQuantifier(): SetQuantifierContext | undefined {
		return this.tryGetRuleContext(0, SetQuantifierContext);
	}
	public UNION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.UNION, 0); }
	public EXCEPT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXCEPT, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MINUS, 0); }
	constructor(ctx: QueryPrimaryContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSetOperation) {
			listener.enterSetOperation(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSetOperation) {
			listener.exitSetOperation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSetOperation) {
			return visitor.visitSetOperation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubqueryContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public queryRelation(): QueryRelationContext {
		return this.getRuleContext(0, QueryRelationContext);
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_subquery; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSubquery) {
			listener.enterSubquery(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSubquery) {
			listener.exitSubquery(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSubquery) {
			return visitor.visitSubquery(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RowConstructorContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public expressionList(): ExpressionListContext {
		return this.getRuleContext(0, ExpressionListContext);
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_rowConstructor; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterRowConstructor) {
			listener.enterRowConstructor(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitRowConstructor) {
			listener.exitRowConstructor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitRowConstructor) {
			return visitor.visitRowConstructor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SortItemContext extends ParserRuleContext {
	public _ordering!: Token;
	public _nullOrdering!: Token;
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public NULLS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NULLS, 0); }
	public ASC(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ASC, 0); }
	public DESC(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DESC, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FIRST, 0); }
	public LAST(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LAST, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_sortItem; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSortItem) {
			listener.enterSortItem(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSortItem) {
			listener.exitSortItem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSortItem) {
			return visitor.visitSortItem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LimitElementContext extends ParserRuleContext {
	public _limit!: Token;
	public _offset!: Token;
	public LIMIT(): TerminalNode { return this.getToken(StarRocksSqlParser.LIMIT, 0); }
	public INTEGER_VALUE(): TerminalNode[];
	public INTEGER_VALUE(i: number): TerminalNode;
	public INTEGER_VALUE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.INTEGER_VALUE);
		} else {
			return this.getToken(StarRocksSqlParser.INTEGER_VALUE, i);
		}
	}
	public OFFSET(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.OFFSET, 0); }
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.COMMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_limitElement; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterLimitElement) {
			listener.enterLimitElement(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitLimitElement) {
			listener.exitLimitElement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitLimitElement) {
			return visitor.visitLimitElement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QuerySpecificationContext extends ParserRuleContext {
	public _where!: ExpressionContext;
	public _having!: ExpressionContext;
	public _qualifyFunction!: SelectItemContext;
	public _limit!: Token;
	public SELECT(): TerminalNode { return this.getToken(StarRocksSqlParser.SELECT, 0); }
	public selectItem(): SelectItemContext[];
	public selectItem(i: number): SelectItemContext;
	public selectItem(i?: number): SelectItemContext | SelectItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectItemContext);
		} else {
			return this.getRuleContext(i, SelectItemContext);
		}
	}
	public fromClause(): FromClauseContext {
		return this.getRuleContext(0, FromClauseContext);
	}
	public setVarHint(): SetVarHintContext[];
	public setVarHint(i: number): SetVarHintContext;
	public setVarHint(i?: number): SetVarHintContext | SetVarHintContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SetVarHintContext);
		} else {
			return this.getRuleContext(i, SetVarHintContext);
		}
	}
	public setQuantifier(): SetQuantifierContext | undefined {
		return this.tryGetRuleContext(0, SetQuantifierContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHERE, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.GROUP, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BY, 0); }
	public groupingElement(): GroupingElementContext | undefined {
		return this.tryGetRuleContext(0, GroupingElementContext);
	}
	public HAVING(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.HAVING, 0); }
	public QUALIFY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.QUALIFY, 0); }
	public comparisonOperator(): ComparisonOperatorContext | undefined {
		return this.tryGetRuleContext(0, ComparisonOperatorContext);
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public INTEGER_VALUE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INTEGER_VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_querySpecification; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterQuerySpecification) {
			listener.enterQuerySpecification(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitQuerySpecification) {
			listener.exitQuerySpecification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitQuerySpecification) {
			return visitor.visitQuerySpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FromClauseContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_fromClause; }
	public copyFrom(ctx: FromClauseContext): void {
		super.copyFrom(ctx);
	}
}
export class FromContext extends FromClauseContext {
	public FROM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FROM, 0); }
	public relations(): RelationsContext | undefined {
		return this.tryGetRuleContext(0, RelationsContext);
	}
	constructor(ctx: FromClauseContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterFrom) {
			listener.enterFrom(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitFrom) {
			listener.exitFrom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitFrom) {
			return visitor.visitFrom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DualContext extends FromClauseContext {
	public FROM(): TerminalNode { return this.getToken(StarRocksSqlParser.FROM, 0); }
	public DUAL(): TerminalNode { return this.getToken(StarRocksSqlParser.DUAL, 0); }
	constructor(ctx: FromClauseContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDual) {
			listener.enterDual(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDual) {
			listener.exitDual(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDual) {
			return visitor.visitDual(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GroupingElementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_groupingElement; }
	public copyFrom(ctx: GroupingElementContext): void {
		super.copyFrom(ctx);
	}
}
export class RollupContext extends GroupingElementContext {
	public ROLLUP(): TerminalNode { return this.getToken(StarRocksSqlParser.ROLLUP, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public expressionList(): ExpressionListContext | undefined {
		return this.tryGetRuleContext(0, ExpressionListContext);
	}
	constructor(ctx: GroupingElementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterRollup) {
			listener.enterRollup(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitRollup) {
			listener.exitRollup(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitRollup) {
			return visitor.visitRollup(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CubeContext extends GroupingElementContext {
	public CUBE(): TerminalNode { return this.getToken(StarRocksSqlParser.CUBE, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public expressionList(): ExpressionListContext | undefined {
		return this.tryGetRuleContext(0, ExpressionListContext);
	}
	constructor(ctx: GroupingElementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCube) {
			listener.enterCube(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCube) {
			listener.exitCube(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCube) {
			return visitor.visitCube(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class MultipleGroupingSetsContext extends GroupingElementContext {
	public GROUPING(): TerminalNode { return this.getToken(StarRocksSqlParser.GROUPING, 0); }
	public SETS(): TerminalNode { return this.getToken(StarRocksSqlParser.SETS, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public groupingSet(): GroupingSetContext[];
	public groupingSet(i: number): GroupingSetContext;
	public groupingSet(i?: number): GroupingSetContext | GroupingSetContext[] {
		if (i === undefined) {
			return this.getRuleContexts(GroupingSetContext);
		} else {
			return this.getRuleContext(i, GroupingSetContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(ctx: GroupingElementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterMultipleGroupingSets) {
			listener.enterMultipleGroupingSets(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitMultipleGroupingSets) {
			listener.exitMultipleGroupingSets(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitMultipleGroupingSets) {
			return visitor.visitMultipleGroupingSets(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SingleGroupingSetContext extends GroupingElementContext {
	public expressionList(): ExpressionListContext {
		return this.getRuleContext(0, ExpressionListContext);
	}
	constructor(ctx: GroupingElementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSingleGroupingSet) {
			listener.enterSingleGroupingSet(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSingleGroupingSet) {
			listener.exitSingleGroupingSet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSingleGroupingSet) {
			return visitor.visitSingleGroupingSet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GroupingSetContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_groupingSet; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterGroupingSet) {
			listener.enterGroupingSet(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitGroupingSet) {
			listener.exitGroupingSet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitGroupingSet) {
			return visitor.visitGroupingSet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CommonTableExpressionContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public AS(): TerminalNode { return this.getToken(StarRocksSqlParser.AS, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public queryRelation(): QueryRelationContext {
		return this.getRuleContext(0, QueryRelationContext);
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public columnAliases(): ColumnAliasesContext | undefined {
		return this.tryGetRuleContext(0, ColumnAliasesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_commonTableExpression; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCommonTableExpression) {
			listener.enterCommonTableExpression(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCommonTableExpression) {
			listener.exitCommonTableExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCommonTableExpression) {
			return visitor.visitCommonTableExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetQuantifierContext extends ParserRuleContext {
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DISTINCT, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_setQuantifier; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSetQuantifier) {
			listener.enterSetQuantifier(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSetQuantifier) {
			listener.exitSetQuantifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSetQuantifier) {
			return visitor.visitSetQuantifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectItemContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_selectItem; }
	public copyFrom(ctx: SelectItemContext): void {
		super.copyFrom(ctx);
	}
}
export class SelectSingleContext extends SelectItemContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.AS, 0); }
	constructor(ctx: SelectItemContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSelectSingle) {
			listener.enterSelectSingle(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSelectSingle) {
			listener.exitSelectSingle(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSelectSingle) {
			return visitor.visitSelectSingle(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectAllContext extends SelectItemContext {
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DOT, 0); }
	public ASTERISK_SYMBOL(): TerminalNode { return this.getToken(StarRocksSqlParser.ASTERISK_SYMBOL, 0); }
	constructor(ctx: SelectItemContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSelectAll) {
			listener.enterSelectAll(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSelectAll) {
			listener.exitSelectAll(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSelectAll) {
			return visitor.visitSelectAll(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RelationsContext extends ParserRuleContext {
	public relation(): RelationContext[];
	public relation(i: number): RelationContext;
	public relation(i?: number): RelationContext | RelationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RelationContext);
		} else {
			return this.getRuleContext(i, RelationContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	public LATERAL(): TerminalNode[];
	public LATERAL(i: number): TerminalNode;
	public LATERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.LATERAL);
		} else {
			return this.getToken(StarRocksSqlParser.LATERAL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_relations; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterRelations) {
			listener.enterRelations(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitRelations) {
			listener.exitRelations(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitRelations) {
			return visitor.visitRelations(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RelationContext extends ParserRuleContext {
	public relationPrimary(): RelationPrimaryContext {
		return this.getRuleContext(0, RelationPrimaryContext);
	}
	public joinRelation(): JoinRelationContext[];
	public joinRelation(i: number): JoinRelationContext;
	public joinRelation(i?: number): JoinRelationContext | JoinRelationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(JoinRelationContext);
		} else {
			return this.getRuleContext(i, JoinRelationContext);
		}
	}
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_relation; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterRelation) {
			listener.enterRelation(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitRelation) {
			listener.exitRelation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitRelation) {
			return visitor.visitRelation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RelationPrimaryContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_relationPrimary; }
	public copyFrom(ctx: RelationPrimaryContext): void {
		super.copyFrom(ctx);
	}
}
export class TableAtomContext extends RelationPrimaryContext {
	public _alias!: IdentifierContext;
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public temporalClause(): TemporalClauseContext | undefined {
		return this.tryGetRuleContext(0, TemporalClauseContext);
	}
	public partitionNames(): PartitionNamesContext | undefined {
		return this.tryGetRuleContext(0, PartitionNamesContext);
	}
	public tabletList(): TabletListContext | undefined {
		return this.tryGetRuleContext(0, TabletListContext);
	}
	public bracketHint(): BracketHintContext | undefined {
		return this.tryGetRuleContext(0, BracketHintContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.AS, 0); }
	constructor(ctx: RelationPrimaryContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterTableAtom) {
			listener.enterTableAtom(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitTableAtom) {
			listener.exitTableAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitTableAtom) {
			return visitor.visitTableAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class InlineTableContext extends RelationPrimaryContext {
	public _alias!: IdentifierContext;
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public VALUES(): TerminalNode { return this.getToken(StarRocksSqlParser.VALUES, 0); }
	public rowConstructor(): RowConstructorContext[];
	public rowConstructor(i: number): RowConstructorContext;
	public rowConstructor(i?: number): RowConstructorContext | RowConstructorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RowConstructorContext);
		} else {
			return this.getRuleContext(i, RowConstructorContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.AS, 0); }
	public columnAliases(): ColumnAliasesContext | undefined {
		return this.tryGetRuleContext(0, ColumnAliasesContext);
	}
	constructor(ctx: RelationPrimaryContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterInlineTable) {
			listener.enterInlineTable(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitInlineTable) {
			listener.exitInlineTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitInlineTable) {
			return visitor.visitInlineTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SubqueryWithAliasContext extends RelationPrimaryContext {
	public _alias!: IdentifierContext;
	public subquery(): SubqueryContext {
		return this.getRuleContext(0, SubqueryContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.AS, 0); }
	public columnAliases(): ColumnAliasesContext | undefined {
		return this.tryGetRuleContext(0, ColumnAliasesContext);
	}
	constructor(ctx: RelationPrimaryContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSubqueryWithAlias) {
			listener.enterSubqueryWithAlias(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSubqueryWithAlias) {
			listener.exitSubqueryWithAlias(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSubqueryWithAlias) {
			return visitor.visitSubqueryWithAlias(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableFunctionContext extends RelationPrimaryContext {
	public _alias!: IdentifierContext;
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public expressionList(): ExpressionListContext {
		return this.getRuleContext(0, ExpressionListContext);
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.AS, 0); }
	public columnAliases(): ColumnAliasesContext | undefined {
		return this.tryGetRuleContext(0, ColumnAliasesContext);
	}
	constructor(ctx: RelationPrimaryContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterTableFunction) {
			listener.enterTableFunction(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitTableFunction) {
			listener.exitTableFunction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitTableFunction) {
			return visitor.visitTableFunction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NormalizedTableFunctionContext extends RelationPrimaryContext {
	public _alias!: IdentifierContext;
	public TABLE(): TerminalNode { return this.getToken(StarRocksSqlParser.TABLE, 0); }
	public LEFT_PAREN(): TerminalNode[];
	public LEFT_PAREN(i: number): TerminalNode;
	public LEFT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.LEFT_PAREN);
		} else {
			return this.getToken(StarRocksSqlParser.LEFT_PAREN, i);
		}
	}
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public expressionList(): ExpressionListContext {
		return this.getRuleContext(0, ExpressionListContext);
	}
	public RIGHT_PAREN(): TerminalNode[];
	public RIGHT_PAREN(i: number): TerminalNode;
	public RIGHT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.RIGHT_PAREN);
		} else {
			return this.getToken(StarRocksSqlParser.RIGHT_PAREN, i);
		}
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.AS, 0); }
	public columnAliases(): ColumnAliasesContext | undefined {
		return this.tryGetRuleContext(0, ColumnAliasesContext);
	}
	constructor(ctx: RelationPrimaryContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterNormalizedTableFunction) {
			listener.enterNormalizedTableFunction(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitNormalizedTableFunction) {
			listener.exitNormalizedTableFunction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitNormalizedTableFunction) {
			return visitor.visitNormalizedTableFunction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class FileTableFunctionContext extends RelationPrimaryContext {
	public _alias!: IdentifierContext;
	public FILES(): TerminalNode { return this.getToken(StarRocksSqlParser.FILES, 0); }
	public propertyList(): PropertyListContext {
		return this.getRuleContext(0, PropertyListContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.AS, 0); }
	public columnAliases(): ColumnAliasesContext | undefined {
		return this.tryGetRuleContext(0, ColumnAliasesContext);
	}
	constructor(ctx: RelationPrimaryContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterFileTableFunction) {
			listener.enterFileTableFunction(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitFileTableFunction) {
			listener.exitFileTableFunction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitFileTableFunction) {
			return visitor.visitFileTableFunction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ParenthesizedRelationContext extends RelationPrimaryContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public relations(): RelationsContext {
		return this.getRuleContext(0, RelationsContext);
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	constructor(ctx: RelationPrimaryContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterParenthesizedRelation) {
			listener.enterParenthesizedRelation(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitParenthesizedRelation) {
			listener.exitParenthesizedRelation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitParenthesizedRelation) {
			return visitor.visitParenthesizedRelation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JoinRelationContext extends ParserRuleContext {
	public _rightRelation!: RelationPrimaryContext;
	public crossOrInnerJoinType(): CrossOrInnerJoinTypeContext | undefined {
		return this.tryGetRuleContext(0, CrossOrInnerJoinTypeContext);
	}
	public relationPrimary(): RelationPrimaryContext {
		return this.getRuleContext(0, RelationPrimaryContext);
	}
	public bracketHint(): BracketHintContext | undefined {
		return this.tryGetRuleContext(0, BracketHintContext);
	}
	public LATERAL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LATERAL, 0); }
	public joinCriteria(): JoinCriteriaContext | undefined {
		return this.tryGetRuleContext(0, JoinCriteriaContext);
	}
	public outerAndSemiJoinType(): OuterAndSemiJoinTypeContext | undefined {
		return this.tryGetRuleContext(0, OuterAndSemiJoinTypeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_joinRelation; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterJoinRelation) {
			listener.enterJoinRelation(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitJoinRelation) {
			listener.exitJoinRelation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitJoinRelation) {
			return visitor.visitJoinRelation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CrossOrInnerJoinTypeContext extends ParserRuleContext {
	public JOIN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.JOIN, 0); }
	public INNER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INNER, 0); }
	public CROSS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CROSS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_crossOrInnerJoinType; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCrossOrInnerJoinType) {
			listener.enterCrossOrInnerJoinType(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCrossOrInnerJoinType) {
			listener.exitCrossOrInnerJoinType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCrossOrInnerJoinType) {
			return visitor.visitCrossOrInnerJoinType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OuterAndSemiJoinTypeContext extends ParserRuleContext {
	public LEFT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LEFT, 0); }
	public JOIN(): TerminalNode { return this.getToken(StarRocksSqlParser.JOIN, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RIGHT, 0); }
	public FULL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FULL, 0); }
	public OUTER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.OUTER, 0); }
	public SEMI(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SEMI, 0); }
	public ANTI(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ANTI, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_outerAndSemiJoinType; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterOuterAndSemiJoinType) {
			listener.enterOuterAndSemiJoinType(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitOuterAndSemiJoinType) {
			listener.exitOuterAndSemiJoinType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitOuterAndSemiJoinType) {
			return visitor.visitOuterAndSemiJoinType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BracketHintContext extends ParserRuleContext {
	public LEFT_BRACKET(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_BRACKET, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public RIGHT_BRACKET(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_bracketHint; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterBracketHint) {
			listener.enterBracketHint(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitBracketHint) {
			listener.exitBracketHint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitBracketHint) {
			return visitor.visitBracketHint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetVarHintContext extends ParserRuleContext {
	public HENT_START(): TerminalNode { return this.getToken(StarRocksSqlParser.HENT_START, 0); }
	public SET_VAR(): TerminalNode { return this.getToken(StarRocksSqlParser.SET_VAR, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public hintMap(): HintMapContext[];
	public hintMap(i: number): HintMapContext;
	public hintMap(i?: number): HintMapContext | HintMapContext[] {
		if (i === undefined) {
			return this.getRuleContexts(HintMapContext);
		} else {
			return this.getRuleContext(i, HintMapContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public HENT_END(): TerminalNode { return this.getToken(StarRocksSqlParser.HENT_END, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_setVarHint; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSetVarHint) {
			listener.enterSetVarHint(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSetVarHint) {
			listener.exitSetVarHint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSetVarHint) {
			return visitor.visitSetVarHint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HintMapContext extends ParserRuleContext {
	public _k!: IdentifierOrStringContext;
	public _v!: LiteralExpressionContext;
	public EQ(): TerminalNode { return this.getToken(StarRocksSqlParser.EQ, 0); }
	public identifierOrString(): IdentifierOrStringContext {
		return this.getRuleContext(0, IdentifierOrStringContext);
	}
	public literalExpression(): LiteralExpressionContext {
		return this.getRuleContext(0, LiteralExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_hintMap; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterHintMap) {
			listener.enterHintMap(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitHintMap) {
			listener.exitHintMap(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitHintMap) {
			return visitor.visitHintMap(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JoinCriteriaContext extends ParserRuleContext {
	public ON(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ON, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.USING, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_joinCriteria; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterJoinCriteria) {
			listener.enterJoinCriteria(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitJoinCriteria) {
			listener.exitJoinCriteria(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitJoinCriteria) {
			return visitor.visitJoinCriteria(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnAliasesContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_columnAliases; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterColumnAliases) {
			listener.enterColumnAliases(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitColumnAliases) {
			listener.exitColumnAliases(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitColumnAliases) {
			return visitor.visitColumnAliases(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionNamesContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public identifierOrString(): IdentifierOrStringContext[];
	public identifierOrString(i: number): IdentifierOrStringContext;
	public identifierOrString(i?: number): IdentifierOrStringContext | IdentifierOrStringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierOrStringContext);
		} else {
			return this.getRuleContext(i, IdentifierOrStringContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PARTITION, 0); }
	public PARTITIONS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PARTITIONS, 0); }
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TEMPORARY, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	public keyPartitions(): KeyPartitionsContext | undefined {
		return this.tryGetRuleContext(0, KeyPartitionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_partitionNames; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterPartitionNames) {
			listener.enterPartitionNames(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitPartitionNames) {
			listener.exitPartitionNames(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionNames) {
			return visitor.visitPartitionNames(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class KeyPartitionsContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_keyPartitions; }
	public copyFrom(ctx: KeyPartitionsContext): void {
		super.copyFrom(ctx);
	}
}
export class KeyPartitionListContext extends KeyPartitionsContext {
	public PARTITION(): TerminalNode { return this.getToken(StarRocksSqlParser.PARTITION, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public keyPartition(): KeyPartitionContext[];
	public keyPartition(i: number): KeyPartitionContext;
	public keyPartition(i?: number): KeyPartitionContext | KeyPartitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(KeyPartitionContext);
		} else {
			return this.getRuleContext(i, KeyPartitionContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(ctx: KeyPartitionsContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterKeyPartitionList) {
			listener.enterKeyPartitionList(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitKeyPartitionList) {
			listener.exitKeyPartitionList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitKeyPartitionList) {
			return visitor.visitKeyPartitionList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TabletListContext extends ParserRuleContext {
	public TABLET(): TerminalNode { return this.getToken(StarRocksSqlParser.TABLET, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public INTEGER_VALUE(): TerminalNode[];
	public INTEGER_VALUE(i: number): TerminalNode;
	public INTEGER_VALUE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.INTEGER_VALUE);
		} else {
			return this.getToken(StarRocksSqlParser.INTEGER_VALUE, i);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_tabletList; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterTabletList) {
			listener.enterTabletList(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitTabletList) {
			listener.exitTabletList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitTabletList) {
			return visitor.visitTabletList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionsWithDefaultContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public expressionOrDefault(): ExpressionOrDefaultContext[];
	public expressionOrDefault(i: number): ExpressionOrDefaultContext;
	public expressionOrDefault(i?: number): ExpressionOrDefaultContext | ExpressionOrDefaultContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionOrDefaultContext);
		} else {
			return this.getRuleContext(i, ExpressionOrDefaultContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_expressionsWithDefault; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterExpressionsWithDefault) {
			listener.enterExpressionsWithDefault(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitExpressionsWithDefault) {
			listener.exitExpressionsWithDefault(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitExpressionsWithDefault) {
			return visitor.visitExpressionsWithDefault(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionOrDefaultContext extends ParserRuleContext {
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_expressionOrDefault; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterExpressionOrDefault) {
			listener.enterExpressionOrDefault(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitExpressionOrDefault) {
			listener.exitExpressionOrDefault(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitExpressionOrDefault) {
			return visitor.visitExpressionOrDefault(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MapExpressionListContext extends ParserRuleContext {
	public mapExpression(): MapExpressionContext[];
	public mapExpression(i: number): MapExpressionContext;
	public mapExpression(i?: number): MapExpressionContext | MapExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MapExpressionContext);
		} else {
			return this.getRuleContext(i, MapExpressionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_mapExpressionList; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterMapExpressionList) {
			listener.enterMapExpressionList(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitMapExpressionList) {
			listener.exitMapExpressionList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitMapExpressionList) {
			return visitor.visitMapExpressionList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MapExpressionContext extends ParserRuleContext {
	public _key!: ExpressionContext;
	public _value!: ExpressionContext;
	public COLON(): TerminalNode { return this.getToken(StarRocksSqlParser.COLON, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_mapExpression; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterMapExpression) {
			listener.enterMapExpression(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitMapExpression) {
			listener.exitMapExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitMapExpression) {
			return visitor.visitMapExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionSingletonContext extends ParserRuleContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public EOF(): TerminalNode { return this.getToken(StarRocksSqlParser.EOF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_expressionSingleton; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterExpressionSingleton) {
			listener.enterExpressionSingleton(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitExpressionSingleton) {
			listener.exitExpressionSingleton(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitExpressionSingleton) {
			return visitor.visitExpressionSingleton(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_expression; }
	public copyFrom(ctx: ExpressionContext): void {
		super.copyFrom(ctx);
	}
}
export class ExpressionDefaultContext extends ExpressionContext {
	public booleanExpression(): BooleanExpressionContext {
		return this.getRuleContext(0, BooleanExpressionContext);
	}
	constructor(ctx: ExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterExpressionDefault) {
			listener.enterExpressionDefault(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitExpressionDefault) {
			listener.exitExpressionDefault(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitExpressionDefault) {
			return visitor.visitExpressionDefault(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LogicalNotContext extends ExpressionContext {
	public NOT(): TerminalNode { return this.getToken(StarRocksSqlParser.NOT, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(ctx: ExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterLogicalNot) {
			listener.enterLogicalNot(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitLogicalNot) {
			listener.exitLogicalNot(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitLogicalNot) {
			return visitor.visitLogicalNot(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LogicalBinaryContext extends ExpressionContext {
	public _left!: ExpressionContext;
	public _operator!: Token;
	public _right!: ExpressionContext;
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public AND(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.AND, 0); }
	public LOGICAL_AND(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LOGICAL_AND, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.OR, 0); }
	public LOGICAL_OR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LOGICAL_OR, 0); }
	constructor(ctx: ExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterLogicalBinary) {
			listener.enterLogicalBinary(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitLogicalBinary) {
			listener.exitLogicalBinary(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitLogicalBinary) {
			return visitor.visitLogicalBinary(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionListContext extends ParserRuleContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_expressionList; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterExpressionList) {
			listener.enterExpressionList(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitExpressionList) {
			listener.exitExpressionList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitExpressionList) {
			return visitor.visitExpressionList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BooleanExpressionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_booleanExpression; }
	public copyFrom(ctx: BooleanExpressionContext): void {
		super.copyFrom(ctx);
	}
}
export class BooleanExpressionDefaultContext extends BooleanExpressionContext {
	public predicate(): PredicateContext {
		return this.getRuleContext(0, PredicateContext);
	}
	constructor(ctx: BooleanExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterBooleanExpressionDefault) {
			listener.enterBooleanExpressionDefault(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitBooleanExpressionDefault) {
			listener.exitBooleanExpressionDefault(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitBooleanExpressionDefault) {
			return visitor.visitBooleanExpressionDefault(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class IsNullContext extends BooleanExpressionContext {
	public booleanExpression(): BooleanExpressionContext {
		return this.getRuleContext(0, BooleanExpressionContext);
	}
	public IS(): TerminalNode { return this.getToken(StarRocksSqlParser.IS, 0); }
	public NULL(): TerminalNode { return this.getToken(StarRocksSqlParser.NULL, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NOT, 0); }
	constructor(ctx: BooleanExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterIsNull) {
			listener.enterIsNull(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitIsNull) {
			listener.exitIsNull(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitIsNull) {
			return visitor.visitIsNull(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ComparisonContext extends BooleanExpressionContext {
	public _left!: BooleanExpressionContext;
	public _right!: PredicateContext;
	public comparisonOperator(): ComparisonOperatorContext {
		return this.getRuleContext(0, ComparisonOperatorContext);
	}
	public booleanExpression(): BooleanExpressionContext {
		return this.getRuleContext(0, BooleanExpressionContext);
	}
	public predicate(): PredicateContext {
		return this.getRuleContext(0, PredicateContext);
	}
	constructor(ctx: BooleanExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterComparison) {
			listener.enterComparison(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitComparison) {
			listener.exitComparison(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitComparison) {
			return visitor.visitComparison(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScalarSubqueryContext extends BooleanExpressionContext {
	public booleanExpression(): BooleanExpressionContext {
		return this.getRuleContext(0, BooleanExpressionContext);
	}
	public comparisonOperator(): ComparisonOperatorContext {
		return this.getRuleContext(0, ComparisonOperatorContext);
	}
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public queryRelation(): QueryRelationContext {
		return this.getRuleContext(0, QueryRelationContext);
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	constructor(ctx: BooleanExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterScalarSubquery) {
			listener.enterScalarSubquery(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitScalarSubquery) {
			listener.exitScalarSubquery(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitScalarSubquery) {
			return visitor.visitScalarSubquery(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PredicateContext extends ParserRuleContext {
	public _valueExpression!: ValueExpressionContext;
	public valueExpression(): ValueExpressionContext | undefined {
		return this.tryGetRuleContext(0, ValueExpressionContext);
	}
	public predicateOperations(): PredicateOperationsContext | undefined {
		return this.tryGetRuleContext(0, PredicateOperationsContext);
	}
	public tupleInSubquery(): TupleInSubqueryContext | undefined {
		return this.tryGetRuleContext(0, TupleInSubqueryContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_predicate; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterPredicate) {
			listener.enterPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitPredicate) {
			listener.exitPredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitPredicate) {
			return visitor.visitPredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TupleInSubqueryContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode[];
	public LEFT_PAREN(i: number): TerminalNode;
	public LEFT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.LEFT_PAREN);
		} else {
			return this.getToken(StarRocksSqlParser.LEFT_PAREN, i);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode[];
	public RIGHT_PAREN(i: number): TerminalNode;
	public RIGHT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.RIGHT_PAREN);
		} else {
			return this.getToken(StarRocksSqlParser.RIGHT_PAREN, i);
		}
	}
	public IN(): TerminalNode { return this.getToken(StarRocksSqlParser.IN, 0); }
	public queryRelation(): QueryRelationContext {
		return this.getRuleContext(0, QueryRelationContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_tupleInSubquery; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterTupleInSubquery) {
			listener.enterTupleInSubquery(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitTupleInSubquery) {
			listener.exitTupleInSubquery(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitTupleInSubquery) {
			return visitor.visitTupleInSubquery(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PredicateOperationsContext extends ParserRuleContext {
	public value: ParserRuleContext;
	constructor(parent: ParserRuleContext | undefined, invokingState: number, value: ParserRuleContext) {
		super(parent, invokingState);
		this.value = value;
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_predicateOperations; }
	public copyFrom(ctx: PredicateOperationsContext): void {
		super.copyFrom(ctx);
		this.value = ctx.value;
	}
}
export class InSubqueryContext extends PredicateOperationsContext {
	public IN(): TerminalNode { return this.getToken(StarRocksSqlParser.IN, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public queryRelation(): QueryRelationContext {
		return this.getRuleContext(0, QueryRelationContext);
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NOT, 0); }
	constructor(ctx: PredicateOperationsContext) {
		super(ctx.parent, ctx.invokingState, ctx.value);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterInSubquery) {
			listener.enterInSubquery(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitInSubquery) {
			listener.exitInSubquery(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitInSubquery) {
			return visitor.visitInSubquery(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class InListContext extends PredicateOperationsContext {
	public IN(): TerminalNode { return this.getToken(StarRocksSqlParser.IN, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public expressionList(): ExpressionListContext {
		return this.getRuleContext(0, ExpressionListContext);
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NOT, 0); }
	constructor(ctx: PredicateOperationsContext) {
		super(ctx.parent, ctx.invokingState, ctx.value);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterInList) {
			listener.enterInList(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitInList) {
			listener.exitInList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitInList) {
			return visitor.visitInList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BetweenContext extends PredicateOperationsContext {
	public _lower!: ValueExpressionContext;
	public _upper!: PredicateContext;
	public BETWEEN(): TerminalNode { return this.getToken(StarRocksSqlParser.BETWEEN, 0); }
	public AND(): TerminalNode { return this.getToken(StarRocksSqlParser.AND, 0); }
	public valueExpression(): ValueExpressionContext {
		return this.getRuleContext(0, ValueExpressionContext);
	}
	public predicate(): PredicateContext {
		return this.getRuleContext(0, PredicateContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NOT, 0); }
	constructor(ctx: PredicateOperationsContext) {
		super(ctx.parent, ctx.invokingState, ctx.value);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterBetween) {
			listener.enterBetween(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitBetween) {
			listener.exitBetween(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitBetween) {
			return visitor.visitBetween(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LikeContext extends PredicateOperationsContext {
	public _pattern!: ValueExpressionContext;
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LIKE, 0); }
	public RLIKE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RLIKE, 0); }
	public REGEXP(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.REGEXP, 0); }
	public valueExpression(): ValueExpressionContext {
		return this.getRuleContext(0, ValueExpressionContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NOT, 0); }
	constructor(ctx: PredicateOperationsContext) {
		super(ctx.parent, ctx.invokingState, ctx.value);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterLike) {
			listener.enterLike(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitLike) {
			listener.exitLike(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitLike) {
			return visitor.visitLike(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ValueExpressionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_valueExpression; }
	public copyFrom(ctx: ValueExpressionContext): void {
		super.copyFrom(ctx);
	}
}
export class ValueExpressionDefaultContext extends ValueExpressionContext {
	public primaryExpression(): PrimaryExpressionContext {
		return this.getRuleContext(0, PrimaryExpressionContext);
	}
	constructor(ctx: ValueExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterValueExpressionDefault) {
			listener.enterValueExpressionDefault(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitValueExpressionDefault) {
			listener.exitValueExpressionDefault(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitValueExpressionDefault) {
			return visitor.visitValueExpressionDefault(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ArithmeticBinaryContext extends ValueExpressionContext {
	public _left!: ValueExpressionContext;
	public _operator!: Token;
	public _right!: ValueExpressionContext;
	public valueExpression(): ValueExpressionContext[];
	public valueExpression(i: number): ValueExpressionContext;
	public valueExpression(i?: number): ValueExpressionContext | ValueExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ValueExpressionContext);
		} else {
			return this.getRuleContext(i, ValueExpressionContext);
		}
	}
	public BITXOR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BITXOR, 0); }
	public ASTERISK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ASTERISK_SYMBOL, 0); }
	public SLASH_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SLASH_SYMBOL, 0); }
	public PERCENT_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PERCENT_SYMBOL, 0); }
	public INT_DIV(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INT_DIV, 0); }
	public MOD(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MOD, 0); }
	public PLUS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PLUS_SYMBOL, 0); }
	public MINUS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MINUS_SYMBOL, 0); }
	public BITAND(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BITAND, 0); }
	public BITOR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BITOR, 0); }
	public BIT_SHIFT_LEFT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BIT_SHIFT_LEFT, 0); }
	public BIT_SHIFT_RIGHT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BIT_SHIFT_RIGHT, 0); }
	public BIT_SHIFT_RIGHT_LOGICAL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BIT_SHIFT_RIGHT_LOGICAL, 0); }
	constructor(ctx: ValueExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterArithmeticBinary) {
			listener.enterArithmeticBinary(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitArithmeticBinary) {
			listener.exitArithmeticBinary(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitArithmeticBinary) {
			return visitor.visitArithmeticBinary(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrimaryExpressionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_primaryExpression; }
	public copyFrom(ctx: PrimaryExpressionContext): void {
		super.copyFrom(ctx);
	}
}
export class UserVariableExpressionContext extends PrimaryExpressionContext {
	public userVariable(): UserVariableContext {
		return this.getRuleContext(0, UserVariableContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterUserVariableExpression) {
			listener.enterUserVariableExpression(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitUserVariableExpression) {
			listener.exitUserVariableExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitUserVariableExpression) {
			return visitor.visitUserVariableExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SystemVariableExpressionContext extends PrimaryExpressionContext {
	public systemVariable(): SystemVariableContext {
		return this.getRuleContext(0, SystemVariableContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSystemVariableExpression) {
			listener.enterSystemVariableExpression(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSystemVariableExpression) {
			listener.exitSystemVariableExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSystemVariableExpression) {
			return visitor.visitSystemVariableExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class FunctionCallExpressionContext extends PrimaryExpressionContext {
	public functionCall(): FunctionCallContext {
		return this.getRuleContext(0, FunctionCallContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterFunctionCallExpression) {
			listener.enterFunctionCallExpression(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitFunctionCallExpression) {
			listener.exitFunctionCallExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitFunctionCallExpression) {
			return visitor.visitFunctionCallExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class OdbcFunctionCallExpressionContext extends PrimaryExpressionContext {
	public LEFT_BRACE(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_BRACE, 0); }
	public FN(): TerminalNode { return this.getToken(StarRocksSqlParser.FN, 0); }
	public functionCall(): FunctionCallContext {
		return this.getRuleContext(0, FunctionCallContext);
	}
	public RIGHT_BRACE(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_BRACE, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterOdbcFunctionCallExpression) {
			listener.enterOdbcFunctionCallExpression(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitOdbcFunctionCallExpression) {
			listener.exitOdbcFunctionCallExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitOdbcFunctionCallExpression) {
			return visitor.visitOdbcFunctionCallExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CollateContext extends PrimaryExpressionContext {
	public primaryExpression(): PrimaryExpressionContext {
		return this.getRuleContext(0, PrimaryExpressionContext);
	}
	public COLLATE(): TerminalNode { return this.getToken(StarRocksSqlParser.COLLATE, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCollate) {
			listener.enterCollate(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCollate) {
			listener.exitCollate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCollate) {
			return visitor.visitCollate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LiteralContext extends PrimaryExpressionContext {
	public literalExpression(): LiteralExpressionContext {
		return this.getRuleContext(0, LiteralExpressionContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterLiteral) {
			listener.enterLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitLiteral) {
			listener.exitLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitLiteral) {
			return visitor.visitLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ColumnRefContext extends PrimaryExpressionContext {
	public columnReference(): ColumnReferenceContext {
		return this.getRuleContext(0, ColumnReferenceContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterColumnRef) {
			listener.enterColumnRef(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitColumnRef) {
			listener.exitColumnRef(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitColumnRef) {
			return visitor.visitColumnRef(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DereferenceContext extends PrimaryExpressionContext {
	public _base!: PrimaryExpressionContext;
	public _fieldName!: IdentifierContext;
	public primaryExpression(): PrimaryExpressionContext {
		return this.getRuleContext(0, PrimaryExpressionContext);
	}
	public DOT_IDENTIFIER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DOT_IDENTIFIER, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DOT, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDereference) {
			listener.enterDereference(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDereference) {
			listener.exitDereference(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDereference) {
			return visitor.visitDereference(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ConcatContext extends PrimaryExpressionContext {
	public _left!: PrimaryExpressionContext;
	public _right!: PrimaryExpressionContext;
	public CONCAT(): TerminalNode { return this.getToken(StarRocksSqlParser.CONCAT, 0); }
	public primaryExpression(): PrimaryExpressionContext[];
	public primaryExpression(i: number): PrimaryExpressionContext;
	public primaryExpression(i?: number): PrimaryExpressionContext | PrimaryExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PrimaryExpressionContext);
		} else {
			return this.getRuleContext(i, PrimaryExpressionContext);
		}
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterConcat) {
			listener.enterConcat(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitConcat) {
			listener.exitConcat(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitConcat) {
			return visitor.visitConcat(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ArithmeticUnaryContext extends PrimaryExpressionContext {
	public _operator!: Token;
	public primaryExpression(): PrimaryExpressionContext {
		return this.getRuleContext(0, PrimaryExpressionContext);
	}
	public MINUS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MINUS_SYMBOL, 0); }
	public PLUS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PLUS_SYMBOL, 0); }
	public BITNOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BITNOT, 0); }
	public LOGICAL_NOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LOGICAL_NOT, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterArithmeticUnary) {
			listener.enterArithmeticUnary(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitArithmeticUnary) {
			listener.exitArithmeticUnary(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitArithmeticUnary) {
			return visitor.visitArithmeticUnary(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ParenthesizedExpressionContext extends PrimaryExpressionContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterParenthesizedExpression) {
			listener.enterParenthesizedExpression(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitParenthesizedExpression) {
			listener.exitParenthesizedExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitParenthesizedExpression) {
			return visitor.visitParenthesizedExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExistsContext extends PrimaryExpressionContext {
	public EXISTS(): TerminalNode { return this.getToken(StarRocksSqlParser.EXISTS, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public queryRelation(): QueryRelationContext {
		return this.getRuleContext(0, QueryRelationContext);
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterExists) {
			listener.enterExists(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitExists) {
			listener.exitExists(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitExists) {
			return visitor.visitExists(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SubqueryExpressionContext extends PrimaryExpressionContext {
	public subquery(): SubqueryContext {
		return this.getRuleContext(0, SubqueryContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSubqueryExpression) {
			listener.enterSubqueryExpression(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSubqueryExpression) {
			listener.exitSubqueryExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSubqueryExpression) {
			return visitor.visitSubqueryExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CastContext extends PrimaryExpressionContext {
	public CAST(): TerminalNode { return this.getToken(StarRocksSqlParser.CAST, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public AS(): TerminalNode { return this.getToken(StarRocksSqlParser.AS, 0); }
	public type(): TypeContext {
		return this.getRuleContext(0, TypeContext);
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCast) {
			listener.enterCast(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCast) {
			listener.exitCast(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCast) {
			return visitor.visitCast(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ConvertContext extends PrimaryExpressionContext {
	public CONVERT(): TerminalNode { return this.getToken(StarRocksSqlParser.CONVERT, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public COMMA(): TerminalNode { return this.getToken(StarRocksSqlParser.COMMA, 0); }
	public type(): TypeContext {
		return this.getRuleContext(0, TypeContext);
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterConvert) {
			listener.enterConvert(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitConvert) {
			listener.exitConvert(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitConvert) {
			return visitor.visitConvert(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SimpleCaseContext extends PrimaryExpressionContext {
	public _caseExpr!: ExpressionContext;
	public _elseExpression!: ExpressionContext;
	public CASE(): TerminalNode { return this.getToken(StarRocksSqlParser.CASE, 0); }
	public END(): TerminalNode { return this.getToken(StarRocksSqlParser.END, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public whenClause(): WhenClauseContext[];
	public whenClause(i: number): WhenClauseContext;
	public whenClause(i?: number): WhenClauseContext | WhenClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(WhenClauseContext);
		} else {
			return this.getRuleContext(i, WhenClauseContext);
		}
	}
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ELSE, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSimpleCase) {
			listener.enterSimpleCase(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSimpleCase) {
			listener.exitSimpleCase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSimpleCase) {
			return visitor.visitSimpleCase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SearchedCaseContext extends PrimaryExpressionContext {
	public _elseExpression!: ExpressionContext;
	public CASE(): TerminalNode { return this.getToken(StarRocksSqlParser.CASE, 0); }
	public END(): TerminalNode { return this.getToken(StarRocksSqlParser.END, 0); }
	public whenClause(): WhenClauseContext[];
	public whenClause(i: number): WhenClauseContext;
	public whenClause(i?: number): WhenClauseContext | WhenClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(WhenClauseContext);
		} else {
			return this.getRuleContext(i, WhenClauseContext);
		}
	}
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ELSE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSearchedCase) {
			listener.enterSearchedCase(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSearchedCase) {
			listener.exitSearchedCase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSearchedCase) {
			return visitor.visitSearchedCase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ArrayConstructorContext extends PrimaryExpressionContext {
	public LEFT_BRACKET(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_BRACKET, 0); }
	public RIGHT_BRACKET(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_BRACKET, 0); }
	public arrayType(): ArrayTypeContext | undefined {
		return this.tryGetRuleContext(0, ArrayTypeContext);
	}
	public expressionList(): ExpressionListContext | undefined {
		return this.tryGetRuleContext(0, ExpressionListContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterArrayConstructor) {
			listener.enterArrayConstructor(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitArrayConstructor) {
			listener.exitArrayConstructor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitArrayConstructor) {
			return visitor.visitArrayConstructor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class MapConstructorContext extends PrimaryExpressionContext {
	public mapType(): MapTypeContext | undefined {
		return this.tryGetRuleContext(0, MapTypeContext);
	}
	public LEFT_BRACE(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_BRACE, 0); }
	public RIGHT_BRACE(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_BRACE, 0); }
	public mapExpressionList(): MapExpressionListContext | undefined {
		return this.tryGetRuleContext(0, MapExpressionListContext);
	}
	public MAP(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MAP, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterMapConstructor) {
			listener.enterMapConstructor(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitMapConstructor) {
			listener.exitMapConstructor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitMapConstructor) {
			return visitor.visitMapConstructor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CollectionSubscriptContext extends PrimaryExpressionContext {
	public _value!: PrimaryExpressionContext;
	public _index!: ValueExpressionContext;
	public LEFT_BRACKET(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_BRACKET, 0); }
	public RIGHT_BRACKET(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_BRACKET, 0); }
	public primaryExpression(): PrimaryExpressionContext {
		return this.getRuleContext(0, PrimaryExpressionContext);
	}
	public valueExpression(): ValueExpressionContext {
		return this.getRuleContext(0, ValueExpressionContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterCollectionSubscript) {
			listener.enterCollectionSubscript(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitCollectionSubscript) {
			listener.exitCollectionSubscript(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitCollectionSubscript) {
			return visitor.visitCollectionSubscript(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ArraySliceContext extends PrimaryExpressionContext {
	public _start!: Token;
	public _end!: Token;
	public primaryExpression(): PrimaryExpressionContext {
		return this.getRuleContext(0, PrimaryExpressionContext);
	}
	public LEFT_BRACKET(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_BRACKET, 0); }
	public COLON(): TerminalNode { return this.getToken(StarRocksSqlParser.COLON, 0); }
	public RIGHT_BRACKET(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_BRACKET, 0); }
	public INTEGER_VALUE(): TerminalNode[];
	public INTEGER_VALUE(i: number): TerminalNode;
	public INTEGER_VALUE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.INTEGER_VALUE);
		} else {
			return this.getToken(StarRocksSqlParser.INTEGER_VALUE, i);
		}
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterArraySlice) {
			listener.enterArraySlice(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitArraySlice) {
			listener.exitArraySlice(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitArraySlice) {
			return visitor.visitArraySlice(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ArrowExpressionContext extends PrimaryExpressionContext {
	public primaryExpression(): PrimaryExpressionContext {
		return this.getRuleContext(0, PrimaryExpressionContext);
	}
	public ARROW(): TerminalNode { return this.getToken(StarRocksSqlParser.ARROW, 0); }
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterArrowExpression) {
			listener.enterArrowExpression(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitArrowExpression) {
			listener.exitArrowExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitArrowExpression) {
			return visitor.visitArrowExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LambdaFunctionExprContext extends PrimaryExpressionContext {
	public ARROW(): TerminalNode { return this.getToken(StarRocksSqlParser.ARROW, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public identifierList(): IdentifierListContext | undefined {
		return this.tryGetRuleContext(0, IdentifierListContext);
	}
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public expressionList(): ExpressionListContext | undefined {
		return this.tryGetRuleContext(0, ExpressionListContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterLambdaFunctionExpr) {
			listener.enterLambdaFunctionExpr(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitLambdaFunctionExpr) {
			listener.exitLambdaFunctionExpr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitLambdaFunctionExpr) {
			return visitor.visitLambdaFunctionExpr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LiteralExpressionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_literalExpression; }
	public copyFrom(ctx: LiteralExpressionContext): void {
		super.copyFrom(ctx);
	}
}
export class NullLiteralContext extends LiteralExpressionContext {
	public NULL(): TerminalNode { return this.getToken(StarRocksSqlParser.NULL, 0); }
	constructor(ctx: LiteralExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterNullLiteral) {
			listener.enterNullLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitNullLiteral) {
			listener.exitNullLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitNullLiteral) {
			return visitor.visitNullLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BooleanLiteralContext extends LiteralExpressionContext {
	public booleanValue(): BooleanValueContext {
		return this.getRuleContext(0, BooleanValueContext);
	}
	constructor(ctx: LiteralExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterBooleanLiteral) {
			listener.enterBooleanLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitBooleanLiteral) {
			listener.exitBooleanLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitBooleanLiteral) {
			return visitor.visitBooleanLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NumericLiteralContext extends LiteralExpressionContext {
	public number(): NumberContext {
		return this.getRuleContext(0, NumberContext);
	}
	constructor(ctx: LiteralExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterNumericLiteral) {
			listener.enterNumericLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitNumericLiteral) {
			listener.exitNumericLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitNumericLiteral) {
			return visitor.visitNumericLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DateLiteralContext extends LiteralExpressionContext {
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	public DATE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DATE, 0); }
	public DATETIME(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DATETIME, 0); }
	constructor(ctx: LiteralExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDateLiteral) {
			listener.enterDateLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDateLiteral) {
			listener.exitDateLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDateLiteral) {
			return visitor.visitDateLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class StringLiteralContext extends LiteralExpressionContext {
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	constructor(ctx: LiteralExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterStringLiteral) {
			listener.enterStringLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitStringLiteral) {
			listener.exitStringLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitStringLiteral) {
			return visitor.visitStringLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class IntervalLiteralContext extends LiteralExpressionContext {
	public interval(): IntervalContext {
		return this.getRuleContext(0, IntervalContext);
	}
	constructor(ctx: LiteralExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterIntervalLiteral) {
			listener.enterIntervalLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitIntervalLiteral) {
			listener.exitIntervalLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitIntervalLiteral) {
			return visitor.visitIntervalLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class UnitBoundaryLiteralContext extends LiteralExpressionContext {
	public unitBoundary(): UnitBoundaryContext {
		return this.getRuleContext(0, UnitBoundaryContext);
	}
	constructor(ctx: LiteralExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterUnitBoundaryLiteral) {
			listener.enterUnitBoundaryLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitUnitBoundaryLiteral) {
			listener.exitUnitBoundaryLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitUnitBoundaryLiteral) {
			return visitor.visitUnitBoundaryLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BinaryLiteralContext extends LiteralExpressionContext {
	public binary(): BinaryContext {
		return this.getRuleContext(0, BinaryContext);
	}
	constructor(ctx: LiteralExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterBinaryLiteral) {
			listener.enterBinaryLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitBinaryLiteral) {
			listener.exitBinaryLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitBinaryLiteral) {
			return visitor.visitBinaryLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FunctionCallContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_functionCall; }
	public copyFrom(ctx: FunctionCallContext): void {
		super.copyFrom(ctx);
	}
}
export class ExtractContext extends FunctionCallContext {
	public EXTRACT(): TerminalNode { return this.getToken(StarRocksSqlParser.EXTRACT, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public FROM(): TerminalNode { return this.getToken(StarRocksSqlParser.FROM, 0); }
	public valueExpression(): ValueExpressionContext {
		return this.getRuleContext(0, ValueExpressionContext);
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	constructor(ctx: FunctionCallContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterExtract) {
			listener.enterExtract(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitExtract) {
			listener.exitExtract(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitExtract) {
			return visitor.visitExtract(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class GroupingOperationContext extends FunctionCallContext {
	public GROUPING(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.GROUPING, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	public GROUPING_ID(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.GROUPING_ID, 0); }
	constructor(ctx: FunctionCallContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterGroupingOperation) {
			listener.enterGroupingOperation(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitGroupingOperation) {
			listener.exitGroupingOperation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitGroupingOperation) {
			return visitor.visitGroupingOperation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class InformationFunctionContext extends FunctionCallContext {
	public informationFunctionExpression(): InformationFunctionExpressionContext {
		return this.getRuleContext(0, InformationFunctionExpressionContext);
	}
	constructor(ctx: FunctionCallContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterInformationFunction) {
			listener.enterInformationFunction(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitInformationFunction) {
			listener.exitInformationFunction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitInformationFunction) {
			return visitor.visitInformationFunction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SpecialDateTimeContext extends FunctionCallContext {
	public specialDateTimeExpression(): SpecialDateTimeExpressionContext {
		return this.getRuleContext(0, SpecialDateTimeExpressionContext);
	}
	constructor(ctx: FunctionCallContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSpecialDateTime) {
			listener.enterSpecialDateTime(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSpecialDateTime) {
			listener.exitSpecialDateTime(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSpecialDateTime) {
			return visitor.visitSpecialDateTime(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SpecialFunctionContext extends FunctionCallContext {
	public specialFunctionExpression(): SpecialFunctionExpressionContext {
		return this.getRuleContext(0, SpecialFunctionExpressionContext);
	}
	constructor(ctx: FunctionCallContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSpecialFunction) {
			listener.enterSpecialFunction(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSpecialFunction) {
			listener.exitSpecialFunction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSpecialFunction) {
			return visitor.visitSpecialFunction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AggregationFunctionCallContext extends FunctionCallContext {
	public aggregationFunction(): AggregationFunctionContext {
		return this.getRuleContext(0, AggregationFunctionContext);
	}
	public over(): OverContext | undefined {
		return this.tryGetRuleContext(0, OverContext);
	}
	constructor(ctx: FunctionCallContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAggregationFunctionCall) {
			listener.enterAggregationFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAggregationFunctionCall) {
			listener.exitAggregationFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAggregationFunctionCall) {
			return visitor.visitAggregationFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class WindowFunctionCallContext extends FunctionCallContext {
	public windowFunction(): WindowFunctionContext {
		return this.getRuleContext(0, WindowFunctionContext);
	}
	public over(): OverContext {
		return this.getRuleContext(0, OverContext);
	}
	constructor(ctx: FunctionCallContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterWindowFunctionCall) {
			listener.enterWindowFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitWindowFunctionCall) {
			listener.exitWindowFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitWindowFunctionCall) {
			return visitor.visitWindowFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SimpleFunctionCallContext extends FunctionCallContext {
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public over(): OverContext | undefined {
		return this.tryGetRuleContext(0, OverContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(ctx: FunctionCallContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSimpleFunctionCall) {
			listener.enterSimpleFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSimpleFunctionCall) {
			listener.exitSimpleFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSimpleFunctionCall) {
			return visitor.visitSimpleFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AggregationFunctionContext extends ParserRuleContext {
	public AVG(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.AVG, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public setQuantifier(): SetQuantifierContext | undefined {
		return this.tryGetRuleContext(0, SetQuantifierContext);
	}
	public COUNT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.COUNT, 0); }
	public ASTERISK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ASTERISK_SYMBOL, 0); }
	public bracketHint(): BracketHintContext | undefined {
		return this.tryGetRuleContext(0, BracketHintContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	public MAX(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MAX, 0); }
	public MIN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MIN, 0); }
	public SUM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SUM, 0); }
	public ARRAY_AGG(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ARRAY_AGG, 0); }
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ORDER, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BY, 0); }
	public sortItem(): SortItemContext[];
	public sortItem(i: number): SortItemContext;
	public sortItem(i?: number): SortItemContext | SortItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SortItemContext);
		} else {
			return this.getRuleContext(i, SortItemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_aggregationFunction; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAggregationFunction) {
			listener.enterAggregationFunction(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAggregationFunction) {
			listener.exitAggregationFunction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAggregationFunction) {
			return visitor.visitAggregationFunction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UserVariableContext extends ParserRuleContext {
	public AT(): TerminalNode { return this.getToken(StarRocksSqlParser.AT, 0); }
	public identifierOrString(): IdentifierOrStringContext {
		return this.getRuleContext(0, IdentifierOrStringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_userVariable; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterUserVariable) {
			listener.enterUserVariable(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitUserVariable) {
			listener.exitUserVariable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitUserVariable) {
			return visitor.visitUserVariable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SystemVariableContext extends ParserRuleContext {
	public AT(): TerminalNode[];
	public AT(i: number): TerminalNode;
	public AT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.AT);
		} else {
			return this.getToken(StarRocksSqlParser.AT, i);
		}
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public varType(): VarTypeContext | undefined {
		return this.tryGetRuleContext(0, VarTypeContext);
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_systemVariable; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSystemVariable) {
			listener.enterSystemVariable(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSystemVariable) {
			listener.exitSystemVariable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSystemVariable) {
			return visitor.visitSystemVariable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnReferenceContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_columnReference; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterColumnReference) {
			listener.enterColumnReference(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitColumnReference) {
			listener.exitColumnReference(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitColumnReference) {
			return visitor.visitColumnReference(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InformationFunctionExpressionContext extends ParserRuleContext {
	public _name!: Token;
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public CATALOG(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CATALOG, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DATABASE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SCHEMA, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.USER, 0); }
	public CURRENT_USER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CURRENT_USER, 0); }
	public CURRENT_ROLE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CURRENT_ROLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_informationFunctionExpression; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterInformationFunctionExpression) {
			listener.enterInformationFunctionExpression(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitInformationFunctionExpression) {
			listener.exitInformationFunctionExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitInformationFunctionExpression) {
			return visitor.visitInformationFunctionExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SpecialDateTimeExpressionContext extends ParserRuleContext {
	public _name!: Token;
	public CURRENT_DATE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CURRENT_DATE, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public CURRENT_TIME(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CURRENT_TIME, 0); }
	public CURRENT_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CURRENT_TIMESTAMP, 0); }
	public LOCALTIME(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LOCALTIME, 0); }
	public LOCALTIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LOCALTIMESTAMP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_specialDateTimeExpression; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSpecialDateTimeExpression) {
			listener.enterSpecialDateTimeExpression(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSpecialDateTimeExpression) {
			listener.exitSpecialDateTimeExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSpecialDateTimeExpression) {
			return visitor.visitSpecialDateTimeExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SpecialFunctionExpressionContext extends ParserRuleContext {
	public CHAR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CHAR, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public DAY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DAY, 0); }
	public HOUR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.HOUR, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	public LEFT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LEFT, 0); }
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LIKE, 0); }
	public MINUTE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MINUTE, 0); }
	public MOD(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MOD, 0); }
	public MONTH(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MONTH, 0); }
	public QUARTER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.QUARTER, 0); }
	public REGEXP(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.REGEXP, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.REPLACE, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RIGHT, 0); }
	public RLIKE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RLIKE, 0); }
	public SECOND(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SECOND, 0); }
	public TIMESTAMPADD(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TIMESTAMPADD, 0); }
	public unitIdentifier(): UnitIdentifierContext | undefined {
		return this.tryGetRuleContext(0, UnitIdentifierContext);
	}
	public TIMESTAMPDIFF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TIMESTAMPDIFF, 0); }
	public YEAR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.YEAR, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PASSWORD, 0); }
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	public FLOOR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FLOOR, 0); }
	public CEIL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CEIL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_specialFunctionExpression; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSpecialFunctionExpression) {
			listener.enterSpecialFunctionExpression(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSpecialFunctionExpression) {
			listener.exitSpecialFunctionExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSpecialFunctionExpression) {
			return visitor.visitSpecialFunctionExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WindowFunctionContext extends ParserRuleContext {
	public _name!: Token;
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public ROW_NUMBER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ROW_NUMBER, 0); }
	public RANK(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RANK, 0); }
	public DENSE_RANK(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DENSE_RANK, 0); }
	public CUME_DIST(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CUME_DIST, 0); }
	public PERCENT_RANK(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PERCENT_RANK, 0); }
	public NTILE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NTILE, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public LEAD(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LEAD, 0); }
	public ignoreNulls(): IgnoreNullsContext[];
	public ignoreNulls(i: number): IgnoreNullsContext;
	public ignoreNulls(i?: number): IgnoreNullsContext | IgnoreNullsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IgnoreNullsContext);
		} else {
			return this.getRuleContext(i, IgnoreNullsContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	public LAG(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LAG, 0); }
	public FIRST_VALUE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FIRST_VALUE, 0); }
	public LAST_VALUE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LAST_VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_windowFunction; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterWindowFunction) {
			listener.enterWindowFunction(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitWindowFunction) {
			listener.exitWindowFunction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitWindowFunction) {
			return visitor.visitWindowFunction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WhenClauseContext extends ParserRuleContext {
	public _condition!: ExpressionContext;
	public _result!: ExpressionContext;
	public WHEN(): TerminalNode { return this.getToken(StarRocksSqlParser.WHEN, 0); }
	public THEN(): TerminalNode { return this.getToken(StarRocksSqlParser.THEN, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_whenClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterWhenClause) {
			listener.enterWhenClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitWhenClause) {
			listener.exitWhenClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitWhenClause) {
			return visitor.visitWhenClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OverContext extends ParserRuleContext {
	public _expression!: ExpressionContext;
	public _partition: ExpressionContext[] = [];
	public OVER(): TerminalNode { return this.getToken(StarRocksSqlParser.OVER, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PARTITION, 0); }
	public BY(): TerminalNode[];
	public BY(i: number): TerminalNode;
	public BY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.BY);
		} else {
			return this.getToken(StarRocksSqlParser.BY, i);
		}
	}
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ORDER, 0); }
	public sortItem(): SortItemContext[];
	public sortItem(i: number): SortItemContext;
	public sortItem(i?: number): SortItemContext | SortItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SortItemContext);
		} else {
			return this.getRuleContext(i, SortItemContext);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public bracketHint(): BracketHintContext | undefined {
		return this.tryGetRuleContext(0, BracketHintContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_over; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterOver) {
			listener.enterOver(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitOver) {
			listener.exitOver(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitOver) {
			return visitor.visitOver(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IgnoreNullsContext extends ParserRuleContext {
	public IGNORE(): TerminalNode { return this.getToken(StarRocksSqlParser.IGNORE, 0); }
	public NULLS(): TerminalNode { return this.getToken(StarRocksSqlParser.NULLS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_ignoreNulls; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterIgnoreNulls) {
			listener.enterIgnoreNulls(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitIgnoreNulls) {
			listener.exitIgnoreNulls(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitIgnoreNulls) {
			return visitor.visitIgnoreNulls(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableDescContext extends ParserRuleContext {
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public partitionNames(): PartitionNamesContext | undefined {
		return this.tryGetRuleContext(0, PartitionNamesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_tableDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterTableDesc) {
			listener.enterTableDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitTableDesc) {
			listener.exitTableDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitTableDesc) {
			return visitor.visitTableDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RestoreTableDescContext extends ParserRuleContext {
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public partitionNames(): PartitionNamesContext | undefined {
		return this.tryGetRuleContext(0, PartitionNamesContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.AS, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_restoreTableDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterRestoreTableDesc) {
			listener.enterRestoreTableDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitRestoreTableDesc) {
			listener.exitRestoreTableDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitRestoreTableDesc) {
			return visitor.visitRestoreTableDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExplainDescContext extends ParserRuleContext {
	public DESC(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DESC, 0); }
	public DESCRIBE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DESCRIBE, 0); }
	public EXPLAIN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXPLAIN, 0); }
	public LOGICAL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LOGICAL, 0); }
	public ANALYZE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ANALYZE, 0); }
	public VERBOSE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.VERBOSE, 0); }
	public COSTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.COSTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_explainDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterExplainDesc) {
			listener.enterExplainDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitExplainDesc) {
			listener.exitExplainDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitExplainDesc) {
			return visitor.visitExplainDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OptimizerTraceContext extends ParserRuleContext {
	public TRACE(): TerminalNode { return this.getToken(StarRocksSqlParser.TRACE, 0); }
	public OPTIMIZER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.OPTIMIZER, 0); }
	public REWRITE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.REWRITE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_optimizerTrace; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterOptimizerTrace) {
			listener.enterOptimizerTrace(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitOptimizerTrace) {
			listener.exitOptimizerTrace(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitOptimizerTrace) {
			return visitor.visitOptimizerTrace(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionDescContext extends ParserRuleContext {
	public PARTITION(): TerminalNode { return this.getToken(StarRocksSqlParser.PARTITION, 0); }
	public BY(): TerminalNode { return this.getToken(StarRocksSqlParser.BY, 0); }
	public RANGE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RANGE, 0); }
	public identifierList(): IdentifierListContext | undefined {
		return this.tryGetRuleContext(0, IdentifierListContext);
	}
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public rangePartitionDesc(): RangePartitionDescContext[];
	public rangePartitionDesc(i: number): RangePartitionDescContext;
	public rangePartitionDesc(i?: number): RangePartitionDescContext | RangePartitionDescContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RangePartitionDescContext);
		} else {
			return this.getRuleContext(i, RangePartitionDescContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	public primaryExpression(): PrimaryExpressionContext | undefined {
		return this.tryGetRuleContext(0, PrimaryExpressionContext);
	}
	public LIST(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LIST, 0); }
	public listPartitionDesc(): ListPartitionDescContext[];
	public listPartitionDesc(i: number): ListPartitionDescContext;
	public listPartitionDesc(i?: number): ListPartitionDescContext | ListPartitionDescContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ListPartitionDescContext);
		} else {
			return this.getRuleContext(i, ListPartitionDescContext);
		}
	}
	public functionCall(): FunctionCallContext | undefined {
		return this.tryGetRuleContext(0, FunctionCallContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_partitionDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterPartitionDesc) {
			listener.enterPartitionDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitPartitionDesc) {
			listener.exitPartitionDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionDesc) {
			return visitor.visitPartitionDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ListPartitionDescContext extends ParserRuleContext {
	public singleItemListPartitionDesc(): SingleItemListPartitionDescContext | undefined {
		return this.tryGetRuleContext(0, SingleItemListPartitionDescContext);
	}
	public multiItemListPartitionDesc(): MultiItemListPartitionDescContext | undefined {
		return this.tryGetRuleContext(0, MultiItemListPartitionDescContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_listPartitionDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterListPartitionDesc) {
			listener.enterListPartitionDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitListPartitionDesc) {
			listener.exitListPartitionDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitListPartitionDesc) {
			return visitor.visitListPartitionDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SingleItemListPartitionDescContext extends ParserRuleContext {
	public PARTITION(): TerminalNode { return this.getToken(StarRocksSqlParser.PARTITION, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public VALUES(): TerminalNode { return this.getToken(StarRocksSqlParser.VALUES, 0); }
	public IN(): TerminalNode { return this.getToken(StarRocksSqlParser.IN, 0); }
	public stringList(): StringListContext {
		return this.getRuleContext(0, StringListContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	public propertyList(): PropertyListContext | undefined {
		return this.tryGetRuleContext(0, PropertyListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_singleItemListPartitionDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSingleItemListPartitionDesc) {
			listener.enterSingleItemListPartitionDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSingleItemListPartitionDesc) {
			listener.exitSingleItemListPartitionDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSingleItemListPartitionDesc) {
			return visitor.visitSingleItemListPartitionDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MultiItemListPartitionDescContext extends ParserRuleContext {
	public PARTITION(): TerminalNode { return this.getToken(StarRocksSqlParser.PARTITION, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public VALUES(): TerminalNode { return this.getToken(StarRocksSqlParser.VALUES, 0); }
	public IN(): TerminalNode { return this.getToken(StarRocksSqlParser.IN, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public stringList(): StringListContext[];
	public stringList(i: number): StringListContext;
	public stringList(i?: number): StringListContext | StringListContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringListContext);
		} else {
			return this.getRuleContext(i, StringListContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	public propertyList(): PropertyListContext | undefined {
		return this.tryGetRuleContext(0, PropertyListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_multiItemListPartitionDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterMultiItemListPartitionDesc) {
			listener.enterMultiItemListPartitionDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitMultiItemListPartitionDesc) {
			listener.exitMultiItemListPartitionDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitMultiItemListPartitionDesc) {
			return visitor.visitMultiItemListPartitionDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StringListContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public string(): StringContext[];
	public string(i: number): StringContext;
	public string(i?: number): StringContext | StringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringContext);
		} else {
			return this.getRuleContext(i, StringContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_stringList; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterStringList) {
			listener.enterStringList(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitStringList) {
			listener.exitStringList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitStringList) {
			return visitor.visitStringList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RangePartitionDescContext extends ParserRuleContext {
	public singleRangePartition(): SingleRangePartitionContext | undefined {
		return this.tryGetRuleContext(0, SingleRangePartitionContext);
	}
	public multiRangePartition(): MultiRangePartitionContext | undefined {
		return this.tryGetRuleContext(0, MultiRangePartitionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_rangePartitionDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterRangePartitionDesc) {
			listener.enterRangePartitionDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitRangePartitionDesc) {
			listener.exitRangePartitionDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitRangePartitionDesc) {
			return visitor.visitRangePartitionDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SingleRangePartitionContext extends ParserRuleContext {
	public PARTITION(): TerminalNode { return this.getToken(StarRocksSqlParser.PARTITION, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public VALUES(): TerminalNode { return this.getToken(StarRocksSqlParser.VALUES, 0); }
	public partitionKeyDesc(): PartitionKeyDescContext {
		return this.getRuleContext(0, PartitionKeyDescContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXISTS, 0); }
	public propertyList(): PropertyListContext | undefined {
		return this.tryGetRuleContext(0, PropertyListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_singleRangePartition; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSingleRangePartition) {
			listener.enterSingleRangePartition(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSingleRangePartition) {
			listener.exitSingleRangePartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSingleRangePartition) {
			return visitor.visitSingleRangePartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MultiRangePartitionContext extends ParserRuleContext {
	public START(): TerminalNode { return this.getToken(StarRocksSqlParser.START, 0); }
	public LEFT_PAREN(): TerminalNode[];
	public LEFT_PAREN(i: number): TerminalNode;
	public LEFT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.LEFT_PAREN);
		} else {
			return this.getToken(StarRocksSqlParser.LEFT_PAREN, i);
		}
	}
	public string(): StringContext[];
	public string(i: number): StringContext;
	public string(i?: number): StringContext | StringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringContext);
		} else {
			return this.getRuleContext(i, StringContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode[];
	public RIGHT_PAREN(i: number): TerminalNode;
	public RIGHT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.RIGHT_PAREN);
		} else {
			return this.getToken(StarRocksSqlParser.RIGHT_PAREN, i);
		}
	}
	public END(): TerminalNode { return this.getToken(StarRocksSqlParser.END, 0); }
	public EVERY(): TerminalNode { return this.getToken(StarRocksSqlParser.EVERY, 0); }
	public interval(): IntervalContext | undefined {
		return this.tryGetRuleContext(0, IntervalContext);
	}
	public INTEGER_VALUE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INTEGER_VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_multiRangePartition; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterMultiRangePartition) {
			listener.enterMultiRangePartition(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitMultiRangePartition) {
			listener.exitMultiRangePartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitMultiRangePartition) {
			return visitor.visitMultiRangePartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionRangeDescContext extends ParserRuleContext {
	public START(): TerminalNode { return this.getToken(StarRocksSqlParser.START, 0); }
	public LEFT_PAREN(): TerminalNode[];
	public LEFT_PAREN(i: number): TerminalNode;
	public LEFT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.LEFT_PAREN);
		} else {
			return this.getToken(StarRocksSqlParser.LEFT_PAREN, i);
		}
	}
	public string(): StringContext[];
	public string(i: number): StringContext;
	public string(i?: number): StringContext | StringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringContext);
		} else {
			return this.getRuleContext(i, StringContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode[];
	public RIGHT_PAREN(i: number): TerminalNode;
	public RIGHT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.RIGHT_PAREN);
		} else {
			return this.getToken(StarRocksSqlParser.RIGHT_PAREN, i);
		}
	}
	public END(): TerminalNode { return this.getToken(StarRocksSqlParser.END, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_partitionRangeDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterPartitionRangeDesc) {
			listener.enterPartitionRangeDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitPartitionRangeDesc) {
			listener.exitPartitionRangeDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionRangeDesc) {
			return visitor.visitPartitionRangeDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionKeyDescContext extends ParserRuleContext {
	public LESS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LESS, 0); }
	public THAN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.THAN, 0); }
	public MAXVALUE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MAXVALUE, 0); }
	public partitionValueList(): PartitionValueListContext[];
	public partitionValueList(i: number): PartitionValueListContext;
	public partitionValueList(i?: number): PartitionValueListContext | PartitionValueListContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionValueListContext);
		} else {
			return this.getRuleContext(i, PartitionValueListContext);
		}
	}
	public LEFT_BRACKET(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LEFT_BRACKET, 0); }
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.COMMA, 0); }
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_partitionKeyDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterPartitionKeyDesc) {
			listener.enterPartitionKeyDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitPartitionKeyDesc) {
			listener.exitPartitionKeyDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionKeyDesc) {
			return visitor.visitPartitionKeyDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionValueListContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public partitionValue(): PartitionValueContext[];
	public partitionValue(i: number): PartitionValueContext;
	public partitionValue(i?: number): PartitionValueContext | PartitionValueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionValueContext);
		} else {
			return this.getRuleContext(i, PartitionValueContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_partitionValueList; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterPartitionValueList) {
			listener.enterPartitionValueList(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitPartitionValueList) {
			listener.exitPartitionValueList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionValueList) {
			return visitor.visitPartitionValueList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class KeyPartitionContext extends ParserRuleContext {
	public _partitionColName!: IdentifierContext;
	public _partitionColValue!: LiteralExpressionContext;
	public EQ(): TerminalNode { return this.getToken(StarRocksSqlParser.EQ, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public literalExpression(): LiteralExpressionContext {
		return this.getRuleContext(0, LiteralExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_keyPartition; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterKeyPartition) {
			listener.enterKeyPartition(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitKeyPartition) {
			listener.exitKeyPartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitKeyPartition) {
			return visitor.visitKeyPartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionValueContext extends ParserRuleContext {
	public MAXVALUE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MAXVALUE, 0); }
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_partitionValue; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterPartitionValue) {
			listener.enterPartitionValue(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitPartitionValue) {
			listener.exitPartitionValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionValue) {
			return visitor.visitPartitionValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DistributionClauseContext extends ParserRuleContext {
	public DISTRIBUTED(): TerminalNode { return this.getToken(StarRocksSqlParser.DISTRIBUTED, 0); }
	public BY(): TerminalNode { return this.getToken(StarRocksSqlParser.BY, 0); }
	public HASH(): TerminalNode { return this.getToken(StarRocksSqlParser.HASH, 0); }
	public identifierList(): IdentifierListContext {
		return this.getRuleContext(0, IdentifierListContext);
	}
	public BUCKETS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BUCKETS, 0); }
	public INTEGER_VALUE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INTEGER_VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_distributionClause; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDistributionClause) {
			listener.enterDistributionClause(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDistributionClause) {
			listener.exitDistributionClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDistributionClause) {
			return visitor.visitDistributionClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DistributionDescContext extends ParserRuleContext {
	public DISTRIBUTED(): TerminalNode { return this.getToken(StarRocksSqlParser.DISTRIBUTED, 0); }
	public BY(): TerminalNode { return this.getToken(StarRocksSqlParser.BY, 0); }
	public HASH(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.HASH, 0); }
	public identifierList(): IdentifierListContext | undefined {
		return this.tryGetRuleContext(0, IdentifierListContext);
	}
	public BUCKETS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BUCKETS, 0); }
	public INTEGER_VALUE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INTEGER_VALUE, 0); }
	public RANDOM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RANDOM, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_distributionDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDistributionDesc) {
			listener.enterDistributionDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDistributionDesc) {
			listener.exitDistributionDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDistributionDesc) {
			return visitor.visitDistributionDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RefreshSchemeDescContext extends ParserRuleContext {
	public REFRESH(): TerminalNode { return this.getToken(StarRocksSqlParser.REFRESH, 0); }
	public ASYNC(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ASYNC, 0); }
	public EVERY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EVERY, 0); }
	public LEFT_PAREN(): TerminalNode[];
	public LEFT_PAREN(i: number): TerminalNode;
	public LEFT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.LEFT_PAREN);
		} else {
			return this.getToken(StarRocksSqlParser.LEFT_PAREN, i);
		}
	}
	public interval(): IntervalContext | undefined {
		return this.tryGetRuleContext(0, IntervalContext);
	}
	public RIGHT_PAREN(): TerminalNode[];
	public RIGHT_PAREN(i: number): TerminalNode;
	public RIGHT_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.RIGHT_PAREN);
		} else {
			return this.getToken(StarRocksSqlParser.RIGHT_PAREN, i);
		}
	}
	public INCREMENTAL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INCREMENTAL, 0); }
	public MANUAL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MANUAL, 0); }
	public IMMEDIATE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IMMEDIATE, 0); }
	public DEFERRED(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DEFERRED, 0); }
	public START(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.START, 0); }
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_refreshSchemeDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterRefreshSchemeDesc) {
			listener.enterRefreshSchemeDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitRefreshSchemeDesc) {
			listener.exitRefreshSchemeDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitRefreshSchemeDesc) {
			return visitor.visitRefreshSchemeDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StatusDescContext extends ParserRuleContext {
	public ACTIVE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ACTIVE, 0); }
	public INACTIVE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INACTIVE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_statusDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterStatusDesc) {
			listener.enterStatusDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitStatusDesc) {
			listener.exitStatusDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitStatusDesc) {
			return visitor.visitStatusDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PropertiesContext extends ParserRuleContext {
	public PROPERTIES(): TerminalNode { return this.getToken(StarRocksSqlParser.PROPERTIES, 0); }
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public property(): PropertyContext[];
	public property(i: number): PropertyContext;
	public property(i?: number): PropertyContext | PropertyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PropertyContext);
		} else {
			return this.getRuleContext(i, PropertyContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_properties; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterProperties) {
			listener.enterProperties(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitProperties) {
			listener.exitProperties(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitProperties) {
			return visitor.visitProperties(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExtPropertiesContext extends ParserRuleContext {
	public BROKER(): TerminalNode { return this.getToken(StarRocksSqlParser.BROKER, 0); }
	public properties(): PropertiesContext {
		return this.getRuleContext(0, PropertiesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_extProperties; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterExtProperties) {
			listener.enterExtProperties(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitExtProperties) {
			listener.exitExtProperties(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitExtProperties) {
			return visitor.visitExtProperties(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PropertyListContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public property(): PropertyContext[];
	public property(i: number): PropertyContext;
	public property(i?: number): PropertyContext | PropertyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PropertyContext);
		} else {
			return this.getRuleContext(i, PropertyContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_propertyList; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterPropertyList) {
			listener.enterPropertyList(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitPropertyList) {
			listener.exitPropertyList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitPropertyList) {
			return visitor.visitPropertyList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UserPropertyListContext extends ParserRuleContext {
	public property(): PropertyContext[];
	public property(i: number): PropertyContext;
	public property(i?: number): PropertyContext | PropertyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PropertyContext);
		} else {
			return this.getRuleContext(i, PropertyContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_userPropertyList; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterUserPropertyList) {
			listener.enterUserPropertyList(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitUserPropertyList) {
			listener.exitUserPropertyList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitUserPropertyList) {
			return visitor.visitUserPropertyList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PropertyContext extends ParserRuleContext {
	public _key!: StringContext;
	public _value!: StringContext;
	public EQ(): TerminalNode { return this.getToken(StarRocksSqlParser.EQ, 0); }
	public string(): StringContext[];
	public string(i: number): StringContext;
	public string(i?: number): StringContext | StringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringContext);
		} else {
			return this.getRuleContext(i, StringContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_property; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterProperty) {
			listener.enterProperty(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitProperty) {
			listener.exitProperty(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitProperty) {
			return visitor.visitProperty(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class VarTypeContext extends ParserRuleContext {
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.GLOBAL, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LOCAL, 0); }
	public SESSION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SESSION, 0); }
	public VERBOSE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.VERBOSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_varType; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterVarType) {
			listener.enterVarType(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitVarType) {
			listener.exitVarType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitVarType) {
			return visitor.visitVarType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CommentContext extends ParserRuleContext {
	public COMMENT(): TerminalNode { return this.getToken(StarRocksSqlParser.COMMENT, 0); }
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_comment; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterComment) {
			listener.enterComment(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitComment) {
			listener.exitComment(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitComment) {
			return visitor.visitComment(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OutfileContext extends ParserRuleContext {
	public _file!: StringContext;
	public INTO(): TerminalNode { return this.getToken(StarRocksSqlParser.INTO, 0); }
	public OUTFILE(): TerminalNode { return this.getToken(StarRocksSqlParser.OUTFILE, 0); }
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	public fileFormat(): FileFormatContext | undefined {
		return this.tryGetRuleContext(0, FileFormatContext);
	}
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_outfile; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterOutfile) {
			listener.enterOutfile(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitOutfile) {
			listener.exitOutfile(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitOutfile) {
			return visitor.visitOutfile(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FileFormatContext extends ParserRuleContext {
	public FORMAT(): TerminalNode { return this.getToken(StarRocksSqlParser.FORMAT, 0); }
	public AS(): TerminalNode { return this.getToken(StarRocksSqlParser.AS, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_fileFormat; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterFileFormat) {
			listener.enterFileFormat(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitFileFormat) {
			listener.exitFileFormat(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitFileFormat) {
			return visitor.visitFileFormat(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StringContext extends ParserRuleContext {
	public SINGLE_QUOTED_TEXT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SINGLE_QUOTED_TEXT, 0); }
	public DOUBLE_QUOTED_TEXT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DOUBLE_QUOTED_TEXT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_string; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterString) {
			listener.enterString(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitString) {
			listener.exitString(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitString) {
			return visitor.visitString(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BinaryContext extends ParserRuleContext {
	public BINARY_SINGLE_QUOTED_TEXT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BINARY_SINGLE_QUOTED_TEXT, 0); }
	public BINARY_DOUBLE_QUOTED_TEXT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BINARY_DOUBLE_QUOTED_TEXT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_binary; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterBinary) {
			listener.enterBinary(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitBinary) {
			listener.exitBinary(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitBinary) {
			return visitor.visitBinary(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ComparisonOperatorContext extends ParserRuleContext {
	public EQ(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EQ, 0); }
	public NEQ(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NEQ, 0); }
	public LT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LT, 0); }
	public LTE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LTE, 0); }
	public GT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.GT, 0); }
	public GTE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.GTE, 0); }
	public EQ_FOR_NULL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EQ_FOR_NULL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_comparisonOperator; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterComparisonOperator) {
			listener.enterComparisonOperator(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitComparisonOperator) {
			listener.exitComparisonOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitComparisonOperator) {
			return visitor.visitComparisonOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BooleanValueContext extends ParserRuleContext {
	public TRUE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TRUE, 0); }
	public FALSE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FALSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_booleanValue; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterBooleanValue) {
			listener.enterBooleanValue(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitBooleanValue) {
			listener.exitBooleanValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitBooleanValue) {
			return visitor.visitBooleanValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IntervalContext extends ParserRuleContext {
	public _value!: ExpressionContext;
	public _from!: UnitIdentifierContext;
	public INTERVAL(): TerminalNode { return this.getToken(StarRocksSqlParser.INTERVAL, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public unitIdentifier(): UnitIdentifierContext {
		return this.getRuleContext(0, UnitIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_interval; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterInterval) {
			listener.enterInterval(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitInterval) {
			listener.exitInterval(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitInterval) {
			return visitor.visitInterval(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnitIdentifierContext extends ParserRuleContext {
	public YEAR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.YEAR, 0); }
	public MONTH(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MONTH, 0); }
	public WEEK(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WEEK, 0); }
	public DAY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DAY, 0); }
	public HOUR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.HOUR, 0); }
	public MINUTE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MINUTE, 0); }
	public SECOND(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SECOND, 0); }
	public QUARTER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.QUARTER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_unitIdentifier; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterUnitIdentifier) {
			listener.enterUnitIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitUnitIdentifier) {
			listener.exitUnitIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitUnitIdentifier) {
			return visitor.visitUnitIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnitBoundaryContext extends ParserRuleContext {
	public FLOOR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FLOOR, 0); }
	public CEIL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CEIL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_unitBoundary; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterUnitBoundary) {
			listener.enterUnitBoundary(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitUnitBoundary) {
			listener.exitUnitBoundary(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitUnitBoundary) {
			return visitor.visitUnitBoundary(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TypeContext extends ParserRuleContext {
	public baseType(): BaseTypeContext | undefined {
		return this.tryGetRuleContext(0, BaseTypeContext);
	}
	public decimalType(): DecimalTypeContext | undefined {
		return this.tryGetRuleContext(0, DecimalTypeContext);
	}
	public arrayType(): ArrayTypeContext | undefined {
		return this.tryGetRuleContext(0, ArrayTypeContext);
	}
	public structType(): StructTypeContext | undefined {
		return this.tryGetRuleContext(0, StructTypeContext);
	}
	public mapType(): MapTypeContext | undefined {
		return this.tryGetRuleContext(0, MapTypeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_type; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterType) {
			listener.enterType(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitType) {
			listener.exitType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitType) {
			return visitor.visitType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ArrayTypeContext extends ParserRuleContext {
	public ARRAY(): TerminalNode { return this.getToken(StarRocksSqlParser.ARRAY, 0); }
	public LT(): TerminalNode { return this.getToken(StarRocksSqlParser.LT, 0); }
	public type(): TypeContext {
		return this.getRuleContext(0, TypeContext);
	}
	public GT(): TerminalNode { return this.getToken(StarRocksSqlParser.GT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_arrayType; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterArrayType) {
			listener.enterArrayType(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitArrayType) {
			listener.exitArrayType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitArrayType) {
			return visitor.visitArrayType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MapTypeContext extends ParserRuleContext {
	public MAP(): TerminalNode { return this.getToken(StarRocksSqlParser.MAP, 0); }
	public LT(): TerminalNode { return this.getToken(StarRocksSqlParser.LT, 0); }
	public type(): TypeContext[];
	public type(i: number): TypeContext;
	public type(i?: number): TypeContext | TypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TypeContext);
		} else {
			return this.getRuleContext(i, TypeContext);
		}
	}
	public COMMA(): TerminalNode { return this.getToken(StarRocksSqlParser.COMMA, 0); }
	public GT(): TerminalNode { return this.getToken(StarRocksSqlParser.GT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_mapType; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterMapType) {
			listener.enterMapType(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitMapType) {
			listener.exitMapType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitMapType) {
			return visitor.visitMapType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubfieldDescContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public type(): TypeContext {
		return this.getRuleContext(0, TypeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_subfieldDesc; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSubfieldDesc) {
			listener.enterSubfieldDesc(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSubfieldDesc) {
			listener.exitSubfieldDesc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSubfieldDesc) {
			return visitor.visitSubfieldDesc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubfieldDescsContext extends ParserRuleContext {
	public subfieldDesc(): SubfieldDescContext[];
	public subfieldDesc(i: number): SubfieldDescContext;
	public subfieldDesc(i?: number): SubfieldDescContext | SubfieldDescContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SubfieldDescContext);
		} else {
			return this.getRuleContext(i, SubfieldDescContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_subfieldDescs; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterSubfieldDescs) {
			listener.enterSubfieldDescs(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitSubfieldDescs) {
			listener.exitSubfieldDescs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitSubfieldDescs) {
			return visitor.visitSubfieldDescs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StructTypeContext extends ParserRuleContext {
	public STRUCT(): TerminalNode { return this.getToken(StarRocksSqlParser.STRUCT, 0); }
	public LT(): TerminalNode { return this.getToken(StarRocksSqlParser.LT, 0); }
	public subfieldDescs(): SubfieldDescsContext {
		return this.getRuleContext(0, SubfieldDescsContext);
	}
	public GT(): TerminalNode { return this.getToken(StarRocksSqlParser.GT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_structType; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterStructType) {
			listener.enterStructType(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitStructType) {
			listener.exitStructType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitStructType) {
			return visitor.visitStructType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TypeParameterContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public INTEGER_VALUE(): TerminalNode { return this.getToken(StarRocksSqlParser.INTEGER_VALUE, 0); }
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_typeParameter; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterTypeParameter) {
			listener.enterTypeParameter(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitTypeParameter) {
			listener.exitTypeParameter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitTypeParameter) {
			return visitor.visitTypeParameter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BaseTypeContext extends ParserRuleContext {
	public BOOLEAN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BOOLEAN, 0); }
	public TINYINT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TINYINT, 0); }
	public typeParameter(): TypeParameterContext | undefined {
		return this.tryGetRuleContext(0, TypeParameterContext);
	}
	public SMALLINT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SMALLINT, 0); }
	public SIGNED(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SIGNED, 0); }
	public INT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INT, 0); }
	public INTEGER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INTEGER, 0); }
	public UNSIGNED(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.UNSIGNED, 0); }
	public BIGINT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BIGINT, 0); }
	public LARGEINT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LARGEINT, 0); }
	public FLOAT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FLOAT, 0); }
	public DOUBLE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DOUBLE, 0); }
	public DATE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DATE, 0); }
	public DATETIME(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DATETIME, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TIME, 0); }
	public CHAR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CHAR, 0); }
	public VARCHAR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.VARCHAR, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.STRING, 0); }
	public TEXT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TEXT, 0); }
	public BITMAP(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BITMAP, 0); }
	public HLL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.HLL, 0); }
	public PERCENTILE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PERCENTILE, 0); }
	public JSON(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.JSON, 0); }
	public VARBINARY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.VARBINARY, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BINARY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_baseType; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterBaseType) {
			listener.enterBaseType(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitBaseType) {
			listener.exitBaseType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitBaseType) {
			return visitor.visitBaseType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DecimalTypeContext extends ParserRuleContext {
	public _precision!: Token;
	public _scale!: Token;
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DECIMAL, 0); }
	public DECIMALV2(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DECIMALV2, 0); }
	public DECIMAL32(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DECIMAL32, 0); }
	public DECIMAL64(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DECIMAL64, 0); }
	public DECIMAL128(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DECIMAL128, 0); }
	public NUMERIC(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NUMERIC, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NUMBER, 0); }
	public LEFT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public RIGHT_PAREN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public INTEGER_VALUE(): TerminalNode[];
	public INTEGER_VALUE(i: number): TerminalNode;
	public INTEGER_VALUE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.INTEGER_VALUE);
		} else {
			return this.getToken(StarRocksSqlParser.INTEGER_VALUE, i);
		}
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.COMMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_decimalType; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDecimalType) {
			listener.enterDecimalType(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDecimalType) {
			listener.exitDecimalType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDecimalType) {
			return visitor.visitDecimalType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QualifiedNameContext extends ParserRuleContext {
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public DOT_IDENTIFIER(): TerminalNode[];
	public DOT_IDENTIFIER(i: number): TerminalNode;
	public DOT_IDENTIFIER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.DOT_IDENTIFIER);
		} else {
			return this.getToken(StarRocksSqlParser.DOT_IDENTIFIER, i);
		}
	}
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.DOT);
		} else {
			return this.getToken(StarRocksSqlParser.DOT, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_qualifiedName; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterQualifiedName) {
			listener.enterQualifiedName(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitQualifiedName) {
			listener.exitQualifiedName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitQualifiedName) {
			return visitor.visitQualifiedName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IdentifierContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_identifier; }
	public copyFrom(ctx: IdentifierContext): void {
		super.copyFrom(ctx);
	}
}
export class UnquotedIdentifierContext extends IdentifierContext {
	public LETTER_IDENTIFIER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LETTER_IDENTIFIER, 0); }
	public nonReserved(): NonReservedContext | undefined {
		return this.tryGetRuleContext(0, NonReservedContext);
	}
	constructor(ctx: IdentifierContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterUnquotedIdentifier) {
			listener.enterUnquotedIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitUnquotedIdentifier) {
			listener.exitUnquotedIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitUnquotedIdentifier) {
			return visitor.visitUnquotedIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DigitIdentifierContext extends IdentifierContext {
	public DIGIT_IDENTIFIER(): TerminalNode { return this.getToken(StarRocksSqlParser.DIGIT_IDENTIFIER, 0); }
	constructor(ctx: IdentifierContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDigitIdentifier) {
			listener.enterDigitIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDigitIdentifier) {
			listener.exitDigitIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDigitIdentifier) {
			return visitor.visitDigitIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BackQuotedIdentifierContext extends IdentifierContext {
	public BACKQUOTED_IDENTIFIER(): TerminalNode { return this.getToken(StarRocksSqlParser.BACKQUOTED_IDENTIFIER, 0); }
	constructor(ctx: IdentifierContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterBackQuotedIdentifier) {
			listener.enterBackQuotedIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitBackQuotedIdentifier) {
			listener.exitBackQuotedIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitBackQuotedIdentifier) {
			return visitor.visitBackQuotedIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IdentifierListContext extends ParserRuleContext {
	public LEFT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_PAREN, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public RIGHT_PAREN(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_identifierList; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterIdentifierList) {
			listener.enterIdentifierList(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitIdentifierList) {
			listener.exitIdentifierList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitIdentifierList) {
			return visitor.visitIdentifierList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IdentifierOrStringContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_identifierOrString; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterIdentifierOrString) {
			listener.enterIdentifierOrString(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitIdentifierOrString) {
			listener.exitIdentifierOrString(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitIdentifierOrString) {
			return visitor.visitIdentifierOrString(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IdentifierOrStringListContext extends ParserRuleContext {
	public identifierOrString(): IdentifierOrStringContext[];
	public identifierOrString(i: number): IdentifierOrStringContext;
	public identifierOrString(i?: number): IdentifierOrStringContext | IdentifierOrStringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierOrStringContext);
		} else {
			return this.getRuleContext(i, IdentifierOrStringContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_identifierOrStringList; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterIdentifierOrStringList) {
			listener.enterIdentifierOrStringList(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitIdentifierOrStringList) {
			listener.exitIdentifierOrStringList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitIdentifierOrStringList) {
			return visitor.visitIdentifierOrStringList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IdentifierOrStringOrStarContext extends ParserRuleContext {
	public ASTERISK_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ASTERISK_SYMBOL, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_identifierOrStringOrStar; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterIdentifierOrStringOrStar) {
			listener.enterIdentifierOrStringOrStar(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitIdentifierOrStringOrStar) {
			listener.exitIdentifierOrStringOrStar(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitIdentifierOrStringOrStar) {
			return visitor.visitIdentifierOrStringOrStar(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UserContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_user; }
	public copyFrom(ctx: UserContext): void {
		super.copyFrom(ctx);
	}
}
export class UserWithoutHostContext extends UserContext {
	public identifierOrString(): IdentifierOrStringContext {
		return this.getRuleContext(0, IdentifierOrStringContext);
	}
	constructor(ctx: UserContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterUserWithoutHost) {
			listener.enterUserWithoutHost(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitUserWithoutHost) {
			listener.exitUserWithoutHost(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitUserWithoutHost) {
			return visitor.visitUserWithoutHost(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class UserWithHostContext extends UserContext {
	public identifierOrString(): IdentifierOrStringContext[];
	public identifierOrString(i: number): IdentifierOrStringContext;
	public identifierOrString(i?: number): IdentifierOrStringContext | IdentifierOrStringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierOrStringContext);
		} else {
			return this.getRuleContext(i, IdentifierOrStringContext);
		}
	}
	public AT(): TerminalNode { return this.getToken(StarRocksSqlParser.AT, 0); }
	constructor(ctx: UserContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterUserWithHost) {
			listener.enterUserWithHost(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitUserWithHost) {
			listener.exitUserWithHost(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitUserWithHost) {
			return visitor.visitUserWithHost(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class UserWithHostAndBlanketContext extends UserContext {
	public identifierOrString(): IdentifierOrStringContext[];
	public identifierOrString(i: number): IdentifierOrStringContext;
	public identifierOrString(i?: number): IdentifierOrStringContext | IdentifierOrStringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierOrStringContext);
		} else {
			return this.getRuleContext(i, IdentifierOrStringContext);
		}
	}
	public AT(): TerminalNode { return this.getToken(StarRocksSqlParser.AT, 0); }
	public LEFT_BRACKET(): TerminalNode { return this.getToken(StarRocksSqlParser.LEFT_BRACKET, 0); }
	public RIGHT_BRACKET(): TerminalNode { return this.getToken(StarRocksSqlParser.RIGHT_BRACKET, 0); }
	constructor(ctx: UserContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterUserWithHostAndBlanket) {
			listener.enterUserWithHostAndBlanket(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitUserWithHostAndBlanket) {
			listener.exitUserWithHostAndBlanket(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitUserWithHostAndBlanket) {
			return visitor.visitUserWithHostAndBlanket(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AssignmentContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public EQ(): TerminalNode { return this.getToken(StarRocksSqlParser.EQ, 0); }
	public expressionOrDefault(): ExpressionOrDefaultContext {
		return this.getRuleContext(0, ExpressionOrDefaultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_assignment; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAssignment) {
			listener.enterAssignment(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAssignment) {
			listener.exitAssignment(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAssignment) {
			return visitor.visitAssignment(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AssignmentListContext extends ParserRuleContext {
	public assignment(): AssignmentContext[];
	public assignment(i: number): AssignmentContext;
	public assignment(i?: number): AssignmentContext | AssignmentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AssignmentContext);
		} else {
			return this.getRuleContext(i, AssignmentContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(StarRocksSqlParser.COMMA);
		} else {
			return this.getToken(StarRocksSqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_assignmentList; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterAssignmentList) {
			listener.enterAssignmentList(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitAssignmentList) {
			listener.exitAssignmentList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitAssignmentList) {
			return visitor.visitAssignmentList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NumberContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_number; }
	public copyFrom(ctx: NumberContext): void {
		super.copyFrom(ctx);
	}
}
export class DecimalValueContext extends NumberContext {
	public DECIMAL_VALUE(): TerminalNode { return this.getToken(StarRocksSqlParser.DECIMAL_VALUE, 0); }
	constructor(ctx: NumberContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDecimalValue) {
			listener.enterDecimalValue(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDecimalValue) {
			listener.exitDecimalValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDecimalValue) {
			return visitor.visitDecimalValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DoubleValueContext extends NumberContext {
	public DOUBLE_VALUE(): TerminalNode { return this.getToken(StarRocksSqlParser.DOUBLE_VALUE, 0); }
	constructor(ctx: NumberContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterDoubleValue) {
			listener.enterDoubleValue(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitDoubleValue) {
			listener.exitDoubleValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitDoubleValue) {
			return visitor.visitDoubleValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class IntegerValueContext extends NumberContext {
	public INTEGER_VALUE(): TerminalNode { return this.getToken(StarRocksSqlParser.INTEGER_VALUE, 0); }
	constructor(ctx: NumberContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterIntegerValue) {
			listener.enterIntegerValue(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitIntegerValue) {
			listener.exitIntegerValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitIntegerValue) {
			return visitor.visitIntegerValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NonReservedContext extends ParserRuleContext {
	public ACTIVE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ACTIVE, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.AFTER, 0); }
	public AGGREGATE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.AGGREGATE, 0); }
	public ASYNC(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ASYNC, 0); }
	public AUTHORS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.AUTHORS, 0); }
	public AVG(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.AVG, 0); }
	public ADMIN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ADMIN, 0); }
	public ANTI(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ANTI, 0); }
	public AUTHENTICATION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.AUTHENTICATION, 0); }
	public AUTO_INCREMENT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.AUTO_INCREMENT, 0); }
	public BACKEND(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BACKEND, 0); }
	public BACKENDS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BACKENDS, 0); }
	public BACKUP(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BACKUP, 0); }
	public BEGIN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BEGIN, 0); }
	public BITMAP_UNION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BITMAP_UNION, 0); }
	public BLACKLIST(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BLACKLIST, 0); }
	public BOOLEAN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BOOLEAN, 0); }
	public BROKER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BROKER, 0); }
	public BUCKETS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BUCKETS, 0); }
	public BUILTIN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.BUILTIN, 0); }
	public CAST(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CAST, 0); }
	public CANCEL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CANCEL, 0); }
	public CATALOG(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CATALOG, 0); }
	public CATALOGS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CATALOGS, 0); }
	public CEIL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CEIL, 0); }
	public CHAIN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CHAIN, 0); }
	public CHARSET(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CHARSET, 0); }
	public CLEAN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CLEAN, 0); }
	public CLUSTER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CLUSTER, 0); }
	public CLUSTERS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CLUSTERS, 0); }
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CURRENT, 0); }
	public COLLATION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.COLLATION, 0); }
	public COLUMNS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.COLUMNS, 0); }
	public CUME_DIST(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CUME_DIST, 0); }
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.COMMENT, 0); }
	public COMMIT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.COMMIT, 0); }
	public COMMITTED(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.COMMITTED, 0); }
	public COMPUTE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.COMPUTE, 0); }
	public CONNECTION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CONNECTION, 0); }
	public CONSISTENT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CONSISTENT, 0); }
	public COSTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.COSTS, 0); }
	public COUNT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.COUNT, 0); }
	public CONFIG(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.CONFIG, 0); }
	public DATA(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DATA, 0); }
	public DATE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DATE, 0); }
	public DATETIME(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DATETIME, 0); }
	public DAY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DAY, 0); }
	public DECOMMISSION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DECOMMISSION, 0); }
	public DISTRIBUTION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DISTRIBUTION, 0); }
	public DUPLICATE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DUPLICATE, 0); }
	public DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DYNAMIC, 0); }
	public DISTRIBUTED(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DISTRIBUTED, 0); }
	public END(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.END, 0); }
	public ENGINE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ENGINE, 0); }
	public ENGINES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ENGINES, 0); }
	public ERRORS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ERRORS, 0); }
	public EVENTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EVENTS, 0); }
	public EXECUTE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXECUTE, 0); }
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXTERNAL, 0); }
	public EXTRACT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXTRACT, 0); }
	public EVERY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EVERY, 0); }
	public ENCLOSE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ENCLOSE, 0); }
	public ESCAPE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ESCAPE, 0); }
	public EXPORT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.EXPORT, 0); }
	public FIELDS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FIELDS, 0); }
	public FILE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FILE, 0); }
	public FILTER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FILTER, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FIRST, 0); }
	public FLOOR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FLOOR, 0); }
	public FOLLOWING(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FOLLOWING, 0); }
	public FORMAT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FORMAT, 0); }
	public FN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FN, 0); }
	public FRONTEND(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FRONTEND, 0); }
	public FRONTENDS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FRONTENDS, 0); }
	public FOLLOWER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FOLLOWER, 0); }
	public FREE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FREE, 0); }
	public FUNCTIONS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.FUNCTIONS, 0); }
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.GLOBAL, 0); }
	public GRANTS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.GRANTS, 0); }
	public HASH(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.HASH, 0); }
	public HISTOGRAM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.HISTOGRAM, 0); }
	public HELP(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.HELP, 0); }
	public HLL_UNION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.HLL_UNION, 0); }
	public HOST(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.HOST, 0); }
	public HOUR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.HOUR, 0); }
	public HUB(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.HUB, 0); }
	public IDENTIFIED(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IDENTIFIED, 0); }
	public IMAGE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IMAGE, 0); }
	public IMPERSONATE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.IMPERSONATE, 0); }
	public INACTIVE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INACTIVE, 0); }
	public INDEXES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INDEXES, 0); }
	public INSTALL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INSTALL, 0); }
	public INTERMEDIATE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INTERMEDIATE, 0); }
	public INTERVAL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INTERVAL, 0); }
	public ISOLATION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ISOLATION, 0); }
	public INCREMENTAL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.INCREMENTAL, 0); }
	public JOB(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.JOB, 0); }
	public LABEL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LABEL, 0); }
	public LAST(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LAST, 0); }
	public LESS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LESS, 0); }
	public LEVEL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LEVEL, 0); }
	public LIST(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LIST, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LOCAL, 0); }
	public LOCATION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LOCATION, 0); }
	public LOGICAL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LOGICAL, 0); }
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LOW_PRIORITY, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.LOCK, 0); }
	public MANUAL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MANUAL, 0); }
	public MAP(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MAP, 0); }
	public MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MATERIALIZED, 0); }
	public MAX(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MAX, 0); }
	public META(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.META, 0); }
	public MIN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MIN, 0); }
	public MINUTE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MINUTE, 0); }
	public MODE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MODE, 0); }
	public MODIFY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MODIFY, 0); }
	public MONTH(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MONTH, 0); }
	public MERGE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MERGE, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.MINUS, 0); }
	public NAME(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NAME, 0); }
	public NAMES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NAMES, 0); }
	public NEGATIVE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NEGATIVE, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NO, 0); }
	public NODE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NODE, 0); }
	public NODES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NODES, 0); }
	public NONE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NONE, 0); }
	public NULLS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NULLS, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NUMBER, 0); }
	public NUMERIC(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.NUMERIC, 0); }
	public OBSERVER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.OBSERVER, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.OF, 0); }
	public OFFSET(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.OFFSET, 0); }
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ONLY, 0); }
	public OPTIMIZER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.OPTIMIZER, 0); }
	public OPEN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.OPEN, 0); }
	public OPERATE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.OPERATE, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.OPTION, 0); }
	public OVERWRITE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.OVERWRITE, 0); }
	public PARTITIONS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PARTITIONS, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PASSWORD, 0); }
	public PATH(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PATH, 0); }
	public PAUSE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PAUSE, 0); }
	public PENDING(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PENDING, 0); }
	public PERCENTILE_UNION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PERCENTILE_UNION, 0); }
	public PLUGIN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PLUGIN, 0); }
	public PLUGINS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PLUGINS, 0); }
	public PERCENT_RANK(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PERCENT_RANK, 0); }
	public PRECEDING(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PRECEDING, 0); }
	public PROC(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PROC, 0); }
	public PROCESSLIST(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PROCESSLIST, 0); }
	public PROFILE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PROFILE, 0); }
	public PROFILELIST(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PROFILELIST, 0); }
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PRIVILEGES, 0); }
	public PROPERTIES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PROPERTIES, 0); }
	public PROPERTY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.PROPERTY, 0); }
	public QUARTER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.QUARTER, 0); }
	public QUERY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.QUERY, 0); }
	public QUEUE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.QUEUE, 0); }
	public QUOTA(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.QUOTA, 0); }
	public QUALIFY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.QUALIFY, 0); }
	public REMOVE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.REMOVE, 0); }
	public REWRITE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.REWRITE, 0); }
	public RANDOM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RANDOM, 0); }
	public RANK(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RANK, 0); }
	public RECOVER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RECOVER, 0); }
	public REFRESH(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.REFRESH, 0); }
	public REPAIR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.REPAIR, 0); }
	public REPEATABLE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.REPEATABLE, 0); }
	public REPLACE_IF_NOT_NULL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.REPLACE_IF_NOT_NULL, 0); }
	public REPLICA(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.REPLICA, 0); }
	public REPOSITORY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.REPOSITORY, 0); }
	public REPOSITORIES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.REPOSITORIES, 0); }
	public RESOURCE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RESOURCE, 0); }
	public RESOURCES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RESOURCES, 0); }
	public RESTORE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RESTORE, 0); }
	public RESUME(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RESUME, 0); }
	public RETURNS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.RETURNS, 0); }
	public REVERT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.REVERT, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ROLE, 0); }
	public ROLES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ROLES, 0); }
	public ROLLUP(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ROLLUP, 0); }
	public ROLLBACK(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ROLLBACK, 0); }
	public ROUTINE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ROUTINE, 0); }
	public ROW(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.ROW, 0); }
	public SAMPLE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SAMPLE, 0); }
	public SCHEDULER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SCHEDULER, 0); }
	public SECOND(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SECOND, 0); }
	public SERIALIZABLE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SERIALIZABLE, 0); }
	public SEMI(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SEMI, 0); }
	public SESSION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SESSION, 0); }
	public SETS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SETS, 0); }
	public SIGNED(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SIGNED, 0); }
	public SNAPSHOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SNAPSHOT, 0); }
	public SQLBLACKLIST(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SQLBLACKLIST, 0); }
	public START(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.START, 0); }
	public STREAM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.STREAM, 0); }
	public SUM(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SUM, 0); }
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.STATUS, 0); }
	public STOP(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.STOP, 0); }
	public SKIP_HEADER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SKIP_HEADER, 0); }
	public SWAP(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SWAP, 0); }
	public STORAGE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.STORAGE, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.STRING, 0); }
	public STRUCT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.STRUCT, 0); }
	public STATS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.STATS, 0); }
	public SUBMIT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SUBMIT, 0); }
	public SUSPEND(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SUSPEND, 0); }
	public SYNC(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SYNC, 0); }
	public SYSTEM_TIME(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.SYSTEM_TIME, 0); }
	public TABLES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TABLES, 0); }
	public TABLET(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TABLET, 0); }
	public TASK(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TASK, 0); }
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TEMPORARY, 0); }
	public TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TIMESTAMP, 0); }
	public TIMESTAMPADD(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TIMESTAMPADD, 0); }
	public TIMESTAMPDIFF(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TIMESTAMPDIFF, 0); }
	public THAN(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.THAN, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TIME, 0); }
	public TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TRANSACTION, 0); }
	public TRACE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TRACE, 0); }
	public TRIM_SPACE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TRIM_SPACE, 0); }
	public TRIGGERS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TRIGGERS, 0); }
	public TRUNCATE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TRUNCATE, 0); }
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TYPE, 0); }
	public TYPES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.TYPES, 0); }
	public UNBOUNDED(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.UNBOUNDED, 0); }
	public UNCOMMITTED(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.UNCOMMITTED, 0); }
	public UNINSTALL(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.UNINSTALL, 0); }
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.USAGE, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.USER, 0); }
	public USERS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.USERS, 0); }
	public UNLOCK(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.UNLOCK, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.VALUE, 0); }
	public VARIABLES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.VARIABLES, 0); }
	public VIEW(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.VIEW, 0); }
	public VIEWS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.VIEWS, 0); }
	public VERBOSE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.VERBOSE, 0); }
	public WARNINGS(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WARNINGS, 0); }
	public WEEK(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WEEK, 0); }
	public WHITELIST(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WHITELIST, 0); }
	public WORK(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WORK, 0); }
	public WRITE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WRITE, 0); }
	public WAREHOUSE(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WAREHOUSE, 0); }
	public WAREHOUSES(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.WAREHOUSES, 0); }
	public YEAR(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.YEAR, 0); }
	public DOTDOTDOT(): TerminalNode | undefined { return this.tryGetToken(StarRocksSqlParser.DOTDOTDOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return StarRocksSqlParser.RULE_nonReserved; }
	// @Override
	public enterRule(listener: StarRocksSqlParserListener): void {
		if (listener.enterNonReserved) {
			listener.enterNonReserved(this);
		}
	}
	// @Override
	public exitRule(listener: StarRocksSqlParserListener): void {
		if (listener.exitNonReserved) {
			listener.exitNonReserved(this);
		}
	}
	// @Override
	public accept<Result>(visitor: StarRocksSqlParserVisitor<Result>): Result {
		if (visitor.visitNonReserved) {
			return visitor.visitNonReserved(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


